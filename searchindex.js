Search.setIndex({"docnames": ["backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "data_classes", "data_classes/array", "data_classes/array/activations", "data_classes/array/activations/ArrayWithActivations", "data_classes/array/conversions", "data_classes/array/conversions/args_to_ivy", "data_classes/array/conversions/args_to_native", "data_classes/array/conversions/to_ivy", "data_classes/array/conversions/to_native", "data_classes/array/creation", "data_classes/array/creation/ArrayWithCreation", "data_classes/array/data_type", "data_classes/array/data_type/ArrayWithDataTypes", "data_classes/array/device", "data_classes/array/device/ArrayWithDevice", "data_classes/array/elementwise", "data_classes/array/elementwise/ArrayWithElementwise", "data_classes/array/general", "data_classes/array/general/ArrayWithGeneral", "data_classes/array/gradients", "data_classes/array/gradients/ArrayWithGradients", "data_classes/array/image", "data_classes/array/image/ArrayWithImage", "data_classes/array/layers", "data_classes/array/layers/ArrayWithLayers", "data_classes/array/linear_algebra", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra", "data_classes/array/losses", "data_classes/array/losses/ArrayWithLosses", "data_classes/array/manipulation", "data_classes/array/manipulation/ArrayWithManipulation", "data_classes/array/norms", "data_classes/array/norms/ArrayWithNorms", "data_classes/array/random", "data_classes/array/random/ArrayWithRandom", "data_classes/array/searching", "data_classes/array/searching/ArrayWithSearching", "data_classes/array/set", "data_classes/array/set/ArrayWithSet", "data_classes/array/sorting", "data_classes/array/sorting/ArrayWithSorting", "data_classes/array/statistical", "data_classes/array/statistical/ArrayWithStatistical", "data_classes/array/utility", "data_classes/array/utility/ArrayWithUtility", "data_classes/array/wrapping", "data_classes/array/wrapping/add_ivy_array_instance_methods", "data_classes/container", "data_classes/container/activations", "data_classes/container/activations/ContainerWithActivations", "data_classes/container/base", "data_classes/container/base/ContainerBase", "data_classes/container/container", "data_classes/container/container/Container", "data_classes/container/container/MultiDevContainer", "data_classes/container/creation", "data_classes/container/creation/ContainerWithCreation", "data_classes/container/data_type", "data_classes/container/data_type/ContainerWithDataTypes", "data_classes/container/device", "data_classes/container/device/ContainerWithDevice", "data_classes/container/elementwise", "data_classes/container/elementwise/ContainerWithElementwise", "data_classes/container/general", "data_classes/container/general/ContainerWithGeneral", "data_classes/container/gradients", "data_classes/container/gradients/ContainerWithGradients", "data_classes/container/image", "data_classes/container/image/ContainerWithImage", "data_classes/container/layers", "data_classes/container/layers/ContainerWithLayers", "data_classes/container/linear_algebra", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra", "data_classes/container/losses", "data_classes/container/losses/ContainerWithLosses", "data_classes/container/manipulation", "data_classes/container/manipulation/ContainerWithManipulation", "data_classes/container/norms", "data_classes/container/norms/ContainerWithNorms", "data_classes/container/random", "data_classes/container/random/ContainerWithRandom", "data_classes/container/searching", "data_classes/container/searching/ContainerWithSearching", "data_classes/container/set", "data_classes/container/set/ContainerWithSet", "data_classes/container/sorting", "data_classes/container/sorting/ContainerWithSorting", "data_classes/container/statistical", "data_classes/container/statistical/ContainerWithStatistical", "data_classes/container/utility", "data_classes/container/utility/ContainerWithUtility", "data_classes/container/wrapping", "data_classes/container/wrapping/add_ivy_container_instance_methods", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/gelu/gelu_array", "functional/ivy/activations/gelu/gelu_container", "functional/ivy/activations/gelu/gelu_functional", "functional/ivy/activations/gelu/static_gelu_container", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/leaky_relu/leaky_relu_array", "functional/ivy/activations/leaky_relu/leaky_relu_container", "functional/ivy/activations/leaky_relu/leaky_relu_functional", "functional/ivy/activations/leaky_relu/static_leaky_relu_container", "functional/ivy/activations/relu", "functional/ivy/activations/relu/relu_array", "functional/ivy/activations/relu/relu_container", "functional/ivy/activations/relu/relu_functional", "functional/ivy/activations/relu/static_relu_container", "functional/ivy/activations/sigmoid", "functional/ivy/activations/sigmoid/sigmoid_array", "functional/ivy/activations/sigmoid/sigmoid_container", "functional/ivy/activations/sigmoid/sigmoid_functional", "functional/ivy/activations/sigmoid/static_sigmoid_container", "functional/ivy/activations/softmax", "functional/ivy/activations/softmax/softmax_array", "functional/ivy/activations/softmax/softmax_container", "functional/ivy/activations/softmax/softmax_functional", "functional/ivy/activations/softmax/static_softmax_container", "functional/ivy/activations/softplus", "functional/ivy/activations/softplus/softplus_container", "functional/ivy/activations/softplus/softplus_functional", "functional/ivy/activations/softplus/static_softplus_container", "functional/ivy/activations/tanh", "functional/ivy/activations/tanh/static_tanh_container", "functional/ivy/activations/tanh/tanh_array", "functional/ivy/activations/tanh/tanh_container", "functional/ivy/activations/tanh/tanh_functional", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/arange/arange_functional", "functional/ivy/creation/arange/static_arange_container", "functional/ivy/creation/asarray", "functional/ivy/creation/asarray/asarray_array", "functional/ivy/creation/asarray/asarray_container", "functional/ivy/creation/asarray/asarray_functional", "functional/ivy/creation/asarray/static_asarray_container", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/empty_like/empty_like_array", "functional/ivy/creation/empty_like/empty_like_container", "functional/ivy/creation/empty_like/empty_like_functional", "functional/ivy/creation/empty_like/static_empty_like_container", "functional/ivy/creation/eye", "functional/ivy/creation/eye/eye_functional", "functional/ivy/creation/eye/static_eye_container", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/from_dlpack/from_dlpack_array", "functional/ivy/creation/from_dlpack/from_dlpack_container", "functional/ivy/creation/from_dlpack/from_dlpack_functional", "functional/ivy/creation/from_dlpack/static_from_dlpack_container", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/full_like/full_like_array", "functional/ivy/creation/full_like/full_like_container", "functional/ivy/creation/full_like/full_like_functional", "functional/ivy/creation/full_like/static_full_like_container", "functional/ivy/creation/linspace", "functional/ivy/creation/linspace/linspace_functional", "functional/ivy/creation/linspace/static_linspace_container", "functional/ivy/creation/logspace", "functional/ivy/creation/logspace/logspace_functional", "functional/ivy/creation/logspace/static_logspace_container", "functional/ivy/creation/meshgrid", "functional/ivy/creation/meshgrid/meshgrid_array", "functional/ivy/creation/meshgrid/meshgrid_container", "functional/ivy/creation/meshgrid/meshgrid_functional", "functional/ivy/creation/meshgrid/static_meshgrid_container", "functional/ivy/creation/native_array", "functional/ivy/creation/native_array/native_array_array", "functional/ivy/creation/native_array/native_array_container", "functional/ivy/creation/native_array/native_array_functional", "functional/ivy/creation/native_array/static_native_array_container", "functional/ivy/creation/ones", "functional/ivy/creation/ones/ones_functional", "functional/ivy/creation/ones/static_ones_container", "functional/ivy/creation/ones_like", "functional/ivy/creation/ones_like/ones_like_array", "functional/ivy/creation/ones_like/ones_like_container", "functional/ivy/creation/ones_like/ones_like_functional", "functional/ivy/creation/ones_like/static_ones_like_container", "functional/ivy/creation/tril", "functional/ivy/creation/tril/static_tril_container", "functional/ivy/creation/tril/tril_array", "functional/ivy/creation/tril/tril_container", "functional/ivy/creation/tril/tril_functional", "functional/ivy/creation/triu", "functional/ivy/creation/triu/static_triu_container", "functional/ivy/creation/triu/triu_array", "functional/ivy/creation/triu/triu_container", "functional/ivy/creation/triu/triu_functional", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros/static_zeros_container", "functional/ivy/creation/zeros/zeros_functional", "functional/ivy/creation/zeros_like", "functional/ivy/creation/zeros_like/static_zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_array", "functional/ivy/creation/zeros_like/zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_functional", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/abs/static_abs_container", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_step/static_adam_step_container", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/is_variable/is_variable_container", "functional/ivy/gradients/is_variable/is_variable_functional", "functional/ivy/gradients/is_variable/static_is_variable_container", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_container", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cholesky/static_cholesky_container", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_counts/static_unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_array", "functional/ivy/set/unique_counts/unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_functional", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/all/static_all_container", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "functional/ivy/utility/any/static_any_container", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "data_classes.rst", "data_classes/array.rst", "data_classes/array/activations.rst", "data_classes/array/activations/ArrayWithActivations.rst", "data_classes/array/conversions.rst", "data_classes/array/conversions/args_to_ivy.rst", "data_classes/array/conversions/args_to_native.rst", "data_classes/array/conversions/to_ivy.rst", "data_classes/array/conversions/to_native.rst", "data_classes/array/creation.rst", "data_classes/array/creation/ArrayWithCreation.rst", "data_classes/array/data_type.rst", "data_classes/array/data_type/ArrayWithDataTypes.rst", "data_classes/array/device.rst", "data_classes/array/device/ArrayWithDevice.rst", "data_classes/array/elementwise.rst", "data_classes/array/elementwise/ArrayWithElementwise.rst", "data_classes/array/general.rst", "data_classes/array/general/ArrayWithGeneral.rst", "data_classes/array/gradients.rst", "data_classes/array/gradients/ArrayWithGradients.rst", "data_classes/array/image.rst", "data_classes/array/image/ArrayWithImage.rst", "data_classes/array/layers.rst", "data_classes/array/layers/ArrayWithLayers.rst", "data_classes/array/linear_algebra.rst", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra.rst", "data_classes/array/losses.rst", "data_classes/array/losses/ArrayWithLosses.rst", "data_classes/array/manipulation.rst", "data_classes/array/manipulation/ArrayWithManipulation.rst", "data_classes/array/norms.rst", "data_classes/array/norms/ArrayWithNorms.rst", "data_classes/array/random.rst", "data_classes/array/random/ArrayWithRandom.rst", "data_classes/array/searching.rst", "data_classes/array/searching/ArrayWithSearching.rst", "data_classes/array/set.rst", "data_classes/array/set/ArrayWithSet.rst", "data_classes/array/sorting.rst", "data_classes/array/sorting/ArrayWithSorting.rst", "data_classes/array/statistical.rst", "data_classes/array/statistical/ArrayWithStatistical.rst", "data_classes/array/utility.rst", "data_classes/array/utility/ArrayWithUtility.rst", "data_classes/array/wrapping.rst", "data_classes/array/wrapping/add_ivy_array_instance_methods.rst", "data_classes/container.rst", "data_classes/container/activations.rst", "data_classes/container/activations/ContainerWithActivations.rst", "data_classes/container/base.rst", "data_classes/container/base/ContainerBase.rst", "data_classes/container/container.rst", "data_classes/container/container/Container.rst", "data_classes/container/container/MultiDevContainer.rst", "data_classes/container/creation.rst", "data_classes/container/creation/ContainerWithCreation.rst", "data_classes/container/data_type.rst", "data_classes/container/data_type/ContainerWithDataTypes.rst", "data_classes/container/device.rst", "data_classes/container/device/ContainerWithDevice.rst", "data_classes/container/elementwise.rst", "data_classes/container/elementwise/ContainerWithElementwise.rst", "data_classes/container/general.rst", "data_classes/container/general/ContainerWithGeneral.rst", "data_classes/container/gradients.rst", "data_classes/container/gradients/ContainerWithGradients.rst", "data_classes/container/image.rst", "data_classes/container/image/ContainerWithImage.rst", "data_classes/container/layers.rst", "data_classes/container/layers/ContainerWithLayers.rst", "data_classes/container/linear_algebra.rst", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra.rst", "data_classes/container/losses.rst", "data_classes/container/losses/ContainerWithLosses.rst", "data_classes/container/manipulation.rst", "data_classes/container/manipulation/ContainerWithManipulation.rst", "data_classes/container/norms.rst", "data_classes/container/norms/ContainerWithNorms.rst", "data_classes/container/random.rst", "data_classes/container/random/ContainerWithRandom.rst", "data_classes/container/searching.rst", "data_classes/container/searching/ContainerWithSearching.rst", "data_classes/container/set.rst", "data_classes/container/set/ContainerWithSet.rst", "data_classes/container/sorting.rst", "data_classes/container/sorting/ContainerWithSorting.rst", "data_classes/container/statistical.rst", "data_classes/container/statistical/ContainerWithStatistical.rst", "data_classes/container/utility.rst", "data_classes/container/utility/ContainerWithUtility.rst", "data_classes/container/wrapping.rst", "data_classes/container/wrapping/add_ivy_container_instance_methods.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/gelu/gelu_array.rst", "functional/ivy/activations/gelu/gelu_container.rst", "functional/ivy/activations/gelu/gelu_functional.rst", "functional/ivy/activations/gelu/static_gelu_container.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/leaky_relu/leaky_relu_array.rst", "functional/ivy/activations/leaky_relu/leaky_relu_container.rst", "functional/ivy/activations/leaky_relu/leaky_relu_functional.rst", "functional/ivy/activations/leaky_relu/static_leaky_relu_container.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/relu/relu_array.rst", "functional/ivy/activations/relu/relu_container.rst", "functional/ivy/activations/relu/relu_functional.rst", "functional/ivy/activations/relu/static_relu_container.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/sigmoid/sigmoid_array.rst", "functional/ivy/activations/sigmoid/sigmoid_container.rst", "functional/ivy/activations/sigmoid/sigmoid_functional.rst", "functional/ivy/activations/sigmoid/static_sigmoid_container.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softmax/softmax_array.rst", "functional/ivy/activations/softmax/softmax_container.rst", "functional/ivy/activations/softmax/softmax_functional.rst", "functional/ivy/activations/softmax/static_softmax_container.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/softplus/softplus_container.rst", "functional/ivy/activations/softplus/softplus_functional.rst", "functional/ivy/activations/softplus/static_softplus_container.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/activations/tanh/static_tanh_container.rst", "functional/ivy/activations/tanh/tanh_array.rst", "functional/ivy/activations/tanh/tanh_container.rst", "functional/ivy/activations/tanh/tanh_functional.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/arange/arange_functional.rst", "functional/ivy/creation/arange/static_arange_container.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/asarray/asarray_array.rst", "functional/ivy/creation/asarray/asarray_container.rst", "functional/ivy/creation/asarray/asarray_functional.rst", "functional/ivy/creation/asarray/static_asarray_container.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/empty_like/empty_like_array.rst", "functional/ivy/creation/empty_like/empty_like_container.rst", "functional/ivy/creation/empty_like/empty_like_functional.rst", "functional/ivy/creation/empty_like/static_empty_like_container.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/eye/eye_functional.rst", "functional/ivy/creation/eye/static_eye_container.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/from_dlpack/from_dlpack_array.rst", "functional/ivy/creation/from_dlpack/from_dlpack_container.rst", "functional/ivy/creation/from_dlpack/from_dlpack_functional.rst", "functional/ivy/creation/from_dlpack/static_from_dlpack_container.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/full_like/full_like_array.rst", "functional/ivy/creation/full_like/full_like_container.rst", "functional/ivy/creation/full_like/full_like_functional.rst", "functional/ivy/creation/full_like/static_full_like_container.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/linspace/linspace_functional.rst", "functional/ivy/creation/linspace/static_linspace_container.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/logspace/logspace_functional.rst", "functional/ivy/creation/logspace/static_logspace_container.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/meshgrid/meshgrid_array.rst", "functional/ivy/creation/meshgrid/meshgrid_container.rst", "functional/ivy/creation/meshgrid/meshgrid_functional.rst", "functional/ivy/creation/meshgrid/static_meshgrid_container.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/native_array/native_array_array.rst", "functional/ivy/creation/native_array/native_array_container.rst", "functional/ivy/creation/native_array/native_array_functional.rst", "functional/ivy/creation/native_array/static_native_array_container.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones/ones_functional.rst", "functional/ivy/creation/ones/static_ones_container.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/ones_like/ones_like_array.rst", "functional/ivy/creation/ones_like/ones_like_container.rst", "functional/ivy/creation/ones_like/ones_like_functional.rst", "functional/ivy/creation/ones_like/static_ones_like_container.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/tril/static_tril_container.rst", "functional/ivy/creation/tril/tril_array.rst", "functional/ivy/creation/tril/tril_container.rst", "functional/ivy/creation/tril/tril_functional.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/triu/static_triu_container.rst", "functional/ivy/creation/triu/triu_array.rst", "functional/ivy/creation/triu/triu_container.rst", "functional/ivy/creation/triu/triu_functional.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros/static_zeros_container.rst", "functional/ivy/creation/zeros/zeros_functional.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/creation/zeros_like/static_zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_array.rst", "functional/ivy/creation/zeros_like/zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_functional.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/abs/static_abs_container.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_step/static_adam_step_container.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/is_variable/is_variable_container.rst", "functional/ivy/gradients/is_variable/is_variable_functional.rst", "functional/ivy/gradients/is_variable/static_is_variable_container.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_container.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cholesky/static_cholesky_container.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_counts/static_unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_array.rst", "functional/ivy/set/unique_counts/unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_functional.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/all/static_all_container.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "functional/ivy/utility/any/static_any_container.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Data classes", "Array", "Activations", "ArrayWithActivations", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Container", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "ivy.Array.gelu", "ivy.Container.gelu", "ivy.gelu", "ivy.Container.static_gelu", "leaky_relu", "ivy.Array.leaky_relu", "ivy.Container.leaky_relu", "ivy.leaky_relu", "ivy.Container.static_leaky_relu", "relu", "ivy.Array.relu", "ivy.Container.relu", "ivy.relu", "ivy.Container.static_relu", "sigmoid", "ivy.Array.sigmoid", "ivy.Container.sigmoid", "ivy.sigmoid", "ivy.Container.static_sigmoid", "softmax", "ivy.Array.softmax", "ivy.Container.softmax", "ivy.softmax", "ivy.Container.static_softmax", "softplus", "ivy.Container.softplus", "ivy.softplus", "ivy.Container.static_softplus", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "Compilation", "compile", "Constants", "Creation", "arange", "ivy.arange", "ivy.Container.static_arange", "asarray", "ivy.Array.asarray", "ivy.Container.asarray", "ivy.asarray", "ivy.Container.static_asarray", "empty", "empty_like", "ivy.Array.empty_like", "ivy.Container.empty_like", "ivy.empty_like", "ivy.Container.static_empty_like", "eye", "ivy.eye", "ivy.Container.static_eye", "from_dlpack", "ivy.Array.from_dlpack", "ivy.Container.from_dlpack", "ivy.from_dlpack", "ivy.Container.static_from_dlpack", "full", "full_like", "ivy.Array.full_like", "ivy.Container.full_like", "ivy.full_like", "ivy.Container.static_full_like", "linspace", "ivy.linspace", "ivy.Container.static_linspace", "logspace", "ivy.logspace", "ivy.Container.static_logspace", "meshgrid", "ivy.Array.meshgrid", "ivy.Container.meshgrid", "ivy.meshgrid", "ivy.Container.static_meshgrid", "native_array", "ivy.Array.native_array", "ivy.Container.native_array", "ivy.native_array", "ivy.Container.static_native_array", "ones", "ivy.ones", "ivy.Container.static_ones", "ones_like", "ivy.Array.ones_like", "ivy.Container.ones_like", "ivy.ones_like", "ivy.Container.static_ones_like", "tril", "ivy.Container.static_tril", "ivy.Array.tril", "ivy.Container.tril", "ivy.tril", "triu", "ivy.Container.static_triu", "ivy.Array.triu", "ivy.Container.triu", "ivy.triu", "zeros", "ivy.Container.static_zeros", "ivy.zeros", "zeros_like", "ivy.Container.static_zeros_like", "ivy.Array.zeros_like", "ivy.Container.zeros_like", "ivy.zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "ivy.Container.static_abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "ivy.Container.static_adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "ivy.Container.is_variable", "ivy.is_variable", "ivy.Container.static_is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.Container.cholesky", "ivy.cholesky", "ivy.Container.static_cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "ivy.Container.static_unique_counts", "ivy.Array.unique_counts", "ivy.Container.unique_counts", "ivy.unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "ivy.Container.static_all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "ivy.Container.static_any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Framework classes", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 6, 12, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 124, 125, 126, 127, 129, 131, 132, 134, 135, 136, 146, 147, 148, 268, 291, 305, 307, 308, 309, 310, 311, 312, 314, 315, 317, 318, 319, 320, 589, 596, 633, 639, 658, 663, 665, 667, 669, 699, 866, 868, 878, 901, 904, 970, 978, 979, 980, 981, 982, 983, 985, 986, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "ivi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 165, 170, 175, 180, 185, 189, 194, 195, 196, 197, 198, 201, 206, 207, 212, 215, 220, 221, 226, 229, 232, 237, 242, 245, 250, 255, 260, 263, 268, 272, 273, 274, 275, 276, 277, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 361, 365, 369, 374, 378, 382, 386, 390, 394, 398, 402, 406, 410, 414, 418, 422, 426, 430, 435, 439, 443, 447, 451, 455, 459, 463, 467, 471, 475, 479, 483, 487, 491, 495, 499, 503, 507, 511, 515, 519, 523, 524, 525, 530, 534, 538, 542, 546, 550, 554, 558, 562, 566, 570, 574, 579, 584, 585, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 670, 674, 675, 679, 683, 687, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 723, 726, 729, 732, 735, 738, 742, 745, 746, 749, 752, 755, 758, 761, 762, 765, 768, 771, 774, 777, 780, 783, 786, 787, 792, 797, 802, 803, 808, 812, 816, 820, 824, 828, 832, 836, 841, 842, 846, 850, 854, 858, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 890, 891, 894, 895, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 913, 914, 915, 916, 921, 926, 927, 931, 935, 939, 943, 947, 951, 955, 959, 960, 965, 970, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 985, 986, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018], "backend_handl": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 970], "contextmanag": [0, 1], "modul": [0, 4, 5, 16, 18, 21, 67, 68, 72, 73, 74, 75, 76, 113, 114, 120, 121, 122, 124, 128, 131, 132, 134, 136, 147, 148, 589, 640, 889, 890, 894, 970, 978, 979, 980, 981, 982, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1014, 1015], "sourc": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 124, 125, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 973, 974, 975, 978, 979, 980, 981, 982, 983, 985, 986, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018], "base": [0, 19, 24, 25, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 120, 123, 125, 131, 147, 197, 229, 230, 231, 268, 305, 307, 308, 309, 310, 311, 312, 314, 315, 317, 318, 319, 320, 355, 443, 446, 487, 490, 491, 494, 495, 498, 499, 502, 542, 545, 589, 624, 647, 654, 663, 906, 907, 908, 912, 914, 926, 927, 930, 978, 979, 980, 983, 985, 986, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "object": [0, 23, 69, 72, 73, 74, 75, 76, 133, 136, 197, 215, 218, 268, 288, 305, 350, 663, 866, 869, 871, 873, 874, 875, 880, 881, 882, 883, 889, 900, 983, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1004, 1005], "__init__": [0, 1, 4, 5, 72, 73, 74, 75, 76, 116, 122, 126, 131, 133, 134, 135, 136, 268, 269, 270, 271, 305, 306, 313, 314, 315, 316, 317, 318, 319, 320, 663, 664, 889, 890, 894, 970, 978, 979, 980, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "choose_random_backend": 0, "exclud": [0, 2, 118, 131, 197, 198, 199, 889, 895, 897], "none": [0, 2, 5, 12, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 47, 48, 49, 50, 51, 52, 53, 54, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 118, 121, 125, 126, 127, 128, 129, 131, 133, 135, 136, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 274, 276, 277, 279, 281, 283, 284, 285, 288, 291, 305, 314, 315, 323, 324, 347, 348, 349, 350, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 594, 595, 601, 602, 603, 604, 606, 607, 608, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 627, 629, 630, 634, 640, 642, 645, 646, 647, 648, 653, 654, 660, 663, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 872, 877, 878, 879, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 908, 909, 911, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 981, 982, 983, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "clear_backend_stack": 0, "current_backend": [0, 74, 75, 116, 121], "arg": [0, 4, 21, 23, 26, 27, 28, 69, 72, 73, 131, 133, 135, 305, 314, 329, 333, 337, 349, 589, 646, 981, 982, 1004, 1005], "kwarg": [0, 4, 23, 26, 27, 28, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 131, 133, 135, 305, 314, 329, 333, 337, 589, 639, 981, 982, 1004, 1005], "return": [0, 4, 5, 12, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 304, 305, 314, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 689, 690, 691, 692, 693, 694, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 872, 876, 877, 878, 879, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 973, 975, 981, 982, 992, 1001, 1002, 1008, 1012], "current": [0, 4, 5, 12, 16, 18, 19, 20, 21, 72, 73, 74, 75, 76, 121, 127, 131, 136, 147, 148, 268, 289, 290, 292, 304, 305, 314, 338, 339, 343, 345, 589, 623, 630, 634, 641, 643, 866, 867, 876, 877, 970], "prioriti": [0, 4, 19, 72, 73, 128], "global_backend": [0, 4], "argument": [0, 4, 5, 14, 20, 26, 27, 28, 29, 30, 69, 72, 73, 74, 75, 76, 115, 116, 117, 118, 120, 121, 122, 124, 125, 131, 133, 134, 194, 195, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 296, 305, 314, 315, 329, 333, 337, 355, 356, 359, 369, 372, 374, 377, 418, 421, 451, 454, 534, 537, 566, 569, 570, 573, 579, 583, 589, 595, 596, 600, 610, 617, 639, 646, 701, 704, 713, 714, 715, 718, 726, 728, 802, 836, 839, 866, 872, 884, 885, 888, 906, 908, 912, 926, 931, 934, 951, 954, 959, 960, 963, 973, 975, 981, 982, 1004, 1005], "s": [0, 4, 5, 6, 12, 15, 16, 17, 18, 19, 21, 26, 29, 30, 69, 72, 73, 115, 117, 118, 120, 122, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 147, 148, 196, 197, 232, 235, 250, 254, 255, 259, 268, 289, 290, 305, 324, 348, 355, 546, 549, 589, 598, 663, 670, 672, 675, 677, 683, 685, 691, 693, 714, 765, 767, 768, 770, 866, 872, 878, 926, 947, 950, 955, 958, 970, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015], "paramet": [0, 4, 5, 26, 27, 28, 29, 30, 67, 68, 72, 73, 74, 75, 76, 113, 114, 116, 117, 120, 133, 134, 147, 159, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 193, 194, 195, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 237, 240, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 272, 273, 274, 275, 276, 277, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 305, 314, 315, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588, 589, 590, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 668, 670, 672, 674, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 742, 744, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 787, 790, 792, 795, 797, 800, 802, 803, 806, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 912, 913, 914, 915, 916, 919, 921, 924, 926, 927, 930, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 973, 975, 981, 982, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "from": [0, 4, 5, 6, 14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 67, 68, 69, 72, 73, 74, 75, 76, 113, 114, 115, 116, 117, 118, 120, 122, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 147, 148, 197, 198, 199, 201, 204, 207, 210, 215, 218, 220, 221, 224, 232, 235, 237, 240, 245, 248, 263, 267, 268, 277, 280, 296, 305, 314, 315, 324, 339, 343, 348, 349, 355, 459, 462, 566, 569, 589, 610, 617, 618, 621, 657, 663, 670, 672, 683, 685, 701, 709, 712, 714, 726, 728, 765, 767, 777, 779, 802, 820, 823, 832, 835, 842, 845, 862, 863, 864, 865, 866, 868, 878, 879, 889, 890, 891, 892, 894, 895, 897, 901, 905, 906, 907, 913, 926, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 970, 976, 981, 982, 992, 1000, 1003, 1008, 1012], "which": [0, 4, 5, 14, 15, 16, 18, 19, 20, 21, 72, 73, 74, 75, 76, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 147, 148, 159, 180, 183, 194, 195, 196, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 220, 221, 224, 226, 227, 229, 230, 237, 240, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 282, 286, 288, 291, 292, 304, 305, 314, 315, 325, 330, 331, 332, 333, 334, 335, 336, 337, 339, 343, 345, 347, 348, 349, 355, 546, 549, 589, 595, 607, 608, 610, 617, 618, 621, 623, 629, 633, 641, 642, 643, 645, 646, 661, 663, 670, 672, 674, 675, 677, 683, 685, 687, 689, 691, 693, 696, 698, 699, 701, 712, 714, 720, 722, 726, 728, 742, 744, 762, 764, 765, 767, 777, 779, 780, 782, 786, 792, 795, 797, 800, 802, 808, 811, 820, 823, 828, 831, 836, 839, 841, 846, 849, 866, 871, 872, 873, 874, 879, 880, 881, 882, 883, 889, 890, 891, 892, 895, 897, 901, 902, 903, 904, 905, 906, 907, 908, 912, 914, 915, 916, 919, 921, 924, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 970, 973, 975, 981, 982, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015], "try": [0, 4, 13, 15, 16, 18, 19, 20, 21, 72, 73, 124, 125, 133, 148, 589, 660, 970], "infer": [0, 4, 115, 122, 126, 127, 131, 136, 194, 195, 197, 198, 199, 201, 204, 207, 210, 220, 221, 224, 237, 240, 245, 248, 263, 267, 355, 459, 462, 589, 626, 651, 802, 832, 835], "when": [0, 4, 14, 15, 18, 19, 20, 23, 69, 72, 73, 74, 75, 76, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 136, 148, 268, 274, 305, 355, 369, 372, 447, 450, 542, 545, 589, 600, 633, 654, 786, 787, 790, 792, 795, 797, 800, 866, 877, 901, 902, 903, 905, 926, 931, 934, 939, 942, 947, 950, 955, 958, 970, 1004, 1005], "global": [0, 4, 5, 6, 12, 72, 73, 74, 75, 76, 121, 122, 126, 127, 131, 268, 283, 284, 285, 305, 314, 315, 347, 348, 349, 589, 624, 625, 644, 647, 648, 649, 653, 654, 884, 885, 888, 1006, 1007], "set": [0, 4, 5, 6, 12, 14, 17, 19, 26, 29, 30, 60, 69, 72, 73, 106, 115, 116, 121, 123, 124, 125, 126, 127, 128, 131, 133, 134, 305, 324, 334, 335, 346, 347, 348, 349, 355, 386, 389, 589, 590, 593, 647, 648, 649, 650, 663, 670, 672, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 714, 720, 722, 742, 744, 746, 748, 755, 757, 762, 764, 866, 867, 876, 877, 878, 882, 883, 889, 899, 901, 902, 907, 908, 912, 913, 914, 915, 916, 919, 921, 924, 926, 947, 950, 955, 958, 992, 1001, 1008, 1009, 1010, 1011, 1012, 1013], "ret": [0, 4, 5, 12, 26, 27, 28, 29, 30, 72, 73, 116, 117, 131, 136, 159, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 193, 194, 195, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 237, 240, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 272, 273, 274, 275, 276, 277, 280, 282, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 304, 305, 314, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 348, 349, 350, 351, 352, 354, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588, 589, 590, 593, 595, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 645, 646, 651, 653, 654, 655, 657, 658, 659, 661, 662, 663, 665, 668, 670, 672, 674, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 742, 744, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 787, 790, 792, 795, 797, 800, 802, 803, 806, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 872, 876, 877, 878, 884, 885, 888, 889, 890, 891, 892, 894, 895, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 912, 913, 914, 915, 916, 919, 921, 924, 926, 927, 930, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 973, 975, 981, 982, 1008, 1012], "exampl": [0, 4, 5, 6, 12, 16, 18, 19, 20, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 67, 68, 69, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 133, 134, 135, 136, 147, 148, 159, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 190, 191, 192, 193, 194, 195, 197, 220, 221, 224, 232, 235, 242, 243, 245, 248, 260, 262, 263, 267, 268, 274, 277, 278, 279, 280, 281, 289, 290, 305, 324, 325, 327, 339, 340, 341, 342, 343, 346, 348, 350, 352, 353, 355, 356, 357, 358, 359, 360, 369, 370, 371, 372, 373, 374, 377, 390, 393, 394, 397, 398, 401, 410, 413, 414, 417, 418, 419, 420, 421, 422, 425, 426, 429, 443, 446, 451, 452, 453, 454, 459, 462, 463, 466, 479, 482, 483, 486, 523, 524, 530, 533, 534, 537, 550, 553, 566, 569, 570, 573, 579, 580, 581, 582, 583, 584, 589, 590, 591, 592, 593, 594, 597, 598, 606, 607, 614, 617, 618, 619, 620, 621, 622, 625, 636, 651, 652, 657, 658, 659, 663, 665, 666, 667, 668, 669, 701, 702, 704, 706, 707, 708, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 725, 726, 728, 735, 737, 746, 748, 752, 754, 765, 767, 771, 773, 774, 776, 786, 787, 790, 792, 795, 797, 800, 802, 803, 804, 805, 806, 807, 808, 811, 816, 819, 820, 823, 828, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 849, 850, 853, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 915, 916, 919, 926, 927, 930, 947, 950, 951, 954, 959, 960, 963, 970], "If": [0, 4, 5, 6, 14, 17, 18, 19, 20, 21, 23, 26, 29, 30, 69, 72, 73, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 136, 148, 197, 198, 199, 206, 207, 210, 212, 213, 220, 221, 224, 232, 235, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 274, 276, 296, 305, 324, 348, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 418, 421, 422, 425, 426, 429, 443, 446, 447, 450, 451, 454, 487, 490, 491, 494, 499, 502, 503, 506, 511, 514, 515, 518, 525, 528, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 579, 583, 584, 585, 588, 589, 633, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 714, 715, 718, 720, 722, 742, 744, 746, 748, 755, 757, 758, 760, 762, 764, 765, 767, 777, 779, 780, 782, 786, 787, 790, 792, 795, 797, 800, 802, 816, 819, 820, 823, 836, 839, 841, 842, 845, 846, 849, 862, 863, 864, 866, 878, 879, 889, 894, 895, 897, 901, 902, 903, 904, 906, 907, 908, 912, 914, 915, 916, 919, 921, 924, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 970], "import": [0, 4, 15, 20, 67, 68, 113, 114, 116, 117, 118, 122, 124, 125, 126, 127, 128, 131, 133, 134, 136, 148, 305, 346, 970, 976], "numpi": [0, 4, 5, 6, 14, 15, 19, 20, 72, 73, 120, 122, 126, 127, 128, 129, 131, 133, 136, 589, 658, 926, 927, 930, 970], "np": [0, 4, 124, 126, 127, 128, 129, 133, 134, 136, 970], "x": [0, 4, 12, 21, 26, 29, 30, 33, 34, 37, 38, 39, 40, 47, 48, 51, 52, 59, 60, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 107, 108, 111, 112, 116, 117, 118, 121, 122, 125, 128, 129, 131, 133, 134, 135, 136, 159, 160, 163, 164, 165, 168, 169, 170, 173, 174, 175, 178, 179, 180, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 197, 201, 204, 205, 207, 210, 211, 215, 218, 219, 221, 224, 225, 232, 235, 237, 240, 241, 245, 248, 249, 250, 251, 254, 255, 256, 259, 260, 262, 263, 264, 267, 268, 274, 276, 277, 278, 279, 280, 281, 286, 305, 324, 325, 326, 327, 330, 331, 339, 343, 348, 350, 355, 356, 357, 358, 359, 360, 361, 364, 365, 368, 369, 370, 371, 372, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 414, 417, 418, 419, 420, 421, 422, 425, 426, 429, 439, 442, 443, 446, 447, 450, 451, 452, 453, 454, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 511, 514, 523, 524, 530, 533, 538, 541, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 579, 580, 581, 582, 583, 584, 585, 588, 589, 597, 598, 599, 601, 602, 604, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 628, 629, 631, 632, 633, 635, 636, 637, 638, 642, 651, 652, 655, 657, 658, 659, 661, 662, 663, 674, 679, 681, 682, 696, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 742, 744, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 765, 767, 768, 770, 771, 773, 774, 776, 780, 782, 786, 787, 790, 792, 795, 797, 800, 802, 803, 804, 805, 806, 807, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 853, 854, 857, 858, 861, 866, 867, 872, 876, 877, 878, 884, 885, 888, 889, 891, 892, 893, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 919, 920, 921, 924, 925, 926, 927, 930, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 964, 965, 968, 969, 970, 992, 1003], "arrai": [0, 4, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 134, 135, 136, 148, 149, 157, 159, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 190, 192, 193, 196, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 234, 235, 236, 237, 240, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 274, 275, 276, 277, 279, 280, 281, 286, 288, 291, 293, 294, 296, 300, 305, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 339, 343, 345, 349, 350, 355, 356, 358, 359, 360, 361, 364, 365, 368, 369, 371, 372, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 420, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 442, 443, 446, 447, 450, 451, 453, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 580, 582, 583, 584, 585, 588, 589, 590, 592, 593, 594, 597, 598, 599, 601, 602, 604, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 626, 628, 629, 630, 631, 632, 633, 635, 636, 638, 641, 642, 643, 645, 646, 651, 652, 655, 657, 658, 659, 661, 662, 663, 665, 667, 668, 669, 670, 672, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 696, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 742, 744, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 787, 790, 792, 795, 797, 800, 802, 803, 805, 806, 807, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 838, 839, 840, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 862, 863, 864, 865, 866, 868, 878, 879, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 919, 921, 924, 926, 927, 930, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 970, 973, 975, 992, 1000, 1003], "2": [0, 4, 18, 19, 21, 24, 25, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 69, 72, 73, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 118, 122, 125, 129, 130, 131, 133, 134, 135, 136, 148, 159, 165, 166, 168, 170, 173, 175, 178, 180, 183, 189, 190, 191, 192, 193, 196, 197, 220, 221, 224, 232, 235, 242, 243, 245, 248, 263, 267, 268, 274, 277, 278, 279, 280, 281, 305, 324, 325, 327, 339, 341, 343, 350, 355, 356, 357, 358, 359, 360, 369, 370, 371, 372, 373, 374, 377, 382, 385, 386, 389, 394, 397, 398, 401, 410, 413, 414, 417, 418, 419, 420, 421, 422, 425, 426, 429, 443, 446, 451, 452, 453, 454, 459, 462, 463, 466, 479, 482, 483, 486, 499, 502, 523, 524, 530, 533, 534, 537, 550, 553, 566, 569, 570, 573, 579, 580, 581, 582, 583, 584, 589, 590, 591, 592, 593, 597, 598, 601, 602, 604, 607, 614, 617, 618, 619, 620, 621, 622, 636, 651, 652, 657, 663, 665, 666, 667, 668, 669, 701, 704, 705, 706, 707, 708, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 725, 726, 727, 728, 735, 737, 738, 741, 742, 744, 746, 748, 752, 754, 755, 757, 758, 760, 765, 767, 771, 772, 773, 774, 776, 780, 781, 782, 786, 787, 790, 797, 800, 802, 803, 804, 805, 806, 807, 808, 811, 816, 819, 820, 823, 828, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 845, 850, 853, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 915, 916, 919, 926, 927, 930, 931, 934, 959, 960, 963, 970], "0": [0, 4, 19, 24, 25, 31, 32, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 53, 54, 59, 60, 63, 64, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 118, 131, 133, 134, 135, 136, 159, 165, 166, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 190, 191, 192, 193, 197, 198, 199, 212, 213, 214, 226, 227, 229, 230, 231, 245, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 267, 268, 274, 277, 279, 280, 281, 288, 305, 307, 310, 314, 317, 321, 324, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 339, 343, 346, 348, 349, 353, 355, 356, 357, 359, 360, 361, 364, 365, 368, 369, 372, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 402, 405, 410, 413, 414, 417, 418, 419, 420, 421, 422, 425, 426, 429, 443, 446, 447, 450, 451, 452, 453, 454, 463, 466, 483, 486, 487, 490, 491, 494, 499, 502, 523, 524, 525, 528, 530, 533, 534, 537, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 597, 598, 601, 602, 604, 606, 607, 608, 614, 617, 618, 621, 622, 627, 636, 642, 645, 646, 651, 657, 658, 659, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 684, 685, 686, 687, 688, 689, 690, 701, 702, 704, 706, 707, 708, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 725, 726, 727, 728, 735, 737, 765, 767, 771, 773, 774, 775, 776, 780, 782, 786, 787, 790, 792, 795, 797, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 827, 828, 831, 836, 837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 853, 858, 860, 866, 878, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 919, 926, 927, 930, 931, 934, 935, 938, 947, 948, 949, 950, 951, 954, 955, 956, 957, 958, 959, 960, 963, 970, 983, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015], "print": [0, 4, 5, 6, 12, 18, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 67, 68, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 113, 114, 118, 125, 131, 133, 134, 135, 159, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 190, 191, 192, 193, 197, 220, 221, 224, 232, 235, 242, 243, 245, 248, 260, 262, 263, 267, 268, 274, 277, 278, 279, 280, 281, 289, 290, 305, 325, 339, 340, 341, 342, 343, 345, 348, 352, 355, 356, 357, 358, 359, 360, 369, 370, 371, 372, 373, 374, 377, 390, 393, 394, 397, 398, 401, 410, 413, 414, 417, 418, 419, 420, 421, 422, 425, 426, 429, 443, 446, 451, 452, 453, 454, 459, 462, 463, 466, 479, 482, 483, 486, 523, 524, 530, 533, 534, 537, 550, 553, 566, 569, 570, 573, 579, 580, 581, 582, 583, 584, 589, 590, 591, 592, 593, 594, 597, 598, 606, 607, 614, 617, 618, 619, 620, 621, 622, 625, 643, 651, 652, 657, 658, 659, 663, 665, 666, 668, 669, 701, 702, 704, 706, 707, 708, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 725, 726, 728, 735, 737, 752, 754, 765, 767, 771, 773, 774, 776, 786, 787, 790, 792, 795, 797, 800, 802, 803, 804, 805, 806, 807, 816, 819, 820, 823, 828, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 845, 850, 853, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 915, 916, 919, 926, 927, 930, 931, 934, 947, 950, 951, 954, 959, 960, 963, 970], "function": [0, 4, 5, 6, 14, 19, 21, 26, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 67, 68, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 113, 114, 115, 116, 117, 118, 119, 120, 122, 124, 128, 130, 132, 133, 134, 135, 146, 147, 159, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 204, 206, 207, 208, 210, 212, 213, 215, 216, 218, 220, 221, 222, 224, 226, 227, 229, 230, 232, 235, 237, 238, 240, 242, 243, 245, 246, 248, 250, 252, 254, 255, 257, 259, 260, 262, 263, 265, 267, 268, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 368, 369, 370, 371, 372, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 419, 420, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 442, 443, 446, 447, 450, 451, 452, 453, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 674, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 742, 744, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 787, 790, 792, 795, 797, 800, 802, 803, 804, 805, 806, 807, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 919, 921, 924, 926, 927, 930, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 970, 973, 975, 978, 979, 980, 1008, 1011, 1013], "py": [0, 4, 5, 19, 116, 117, 121, 122, 126, 127, 129, 131, 133, 135, 136, 889, 890, 894], "noqa": [0, 4, 5, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 232, 235, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 355, 356, 359, 369, 372, 394, 397, 414, 417, 418, 421, 426, 429, 483, 486, 534, 537, 550, 553, 566, 569, 570, 573, 579, 583, 584, 714, 723, 725, 726, 728, 802, 816, 819, 820, 823, 836, 839, 926, 931, 934], "The": [0, 4, 5, 13, 14, 16, 17, 18, 20, 21, 23, 26, 27, 28, 29, 30, 69, 72, 73, 74, 75, 76, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 147, 159, 160, 163, 165, 168, 180, 183, 189, 193, 194, 195, 197, 198, 199, 215, 218, 229, 230, 250, 254, 255, 259, 268, 272, 273, 274, 282, 287, 289, 290, 292, 295, 300, 304, 305, 314, 315, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 343, 344, 345, 346, 347, 348, 349, 351, 354, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 525, 528, 534, 537, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 579, 583, 584, 585, 588, 589, 595, 597, 600, 601, 609, 610, 616, 618, 621, 631, 632, 633, 635, 636, 637, 638, 640, 645, 646, 647, 648, 649, 652, 653, 654, 662, 663, 665, 668, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 696, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 718, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 742, 744, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 786, 787, 790, 792, 795, 797, 800, 802, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 841, 854, 857, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 894, 901, 902, 903, 904, 906, 907, 908, 912, 914, 915, 916, 919, 921, 924, 926, 927, 930, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 970, 981, 982, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012], "set_backend": [0, 4, 5, 12, 121, 122, 123, 126, 268, 289, 290, 305, 346, 589, 651, 970], "ha": [0, 4, 5, 14, 15, 16, 19, 69, 72, 73, 117, 118, 121, 122, 123, 126, 127, 131, 133, 135, 136, 147, 148, 197, 232, 235, 305, 324, 355, 356, 359, 525, 528, 542, 545, 714, 738, 741, 761, 762, 764, 765, 767, 774, 776, 802, 816, 819, 842, 845, 906, 907, 908, 912, 914, 926, 935, 938, 943, 946, 947, 950, 951, 954, 955, 958], "over": [0, 4, 14, 16, 18, 67, 68, 69, 72, 73, 113, 114, 117, 118, 122, 128, 133, 148, 714, 742, 744, 771, 773, 777, 779, 780, 782, 884, 885, 888, 889, 895, 897, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 1006, 1007], "ani": [0, 4, 12, 14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 65, 66, 67, 68, 72, 73, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 147, 148, 194, 195, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 237, 240, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 305, 350, 355, 356, 359, 369, 372, 374, 377, 418, 421, 435, 438, 451, 454, 463, 466, 483, 486, 534, 537, 566, 569, 570, 573, 579, 583, 589, 590, 593, 610, 611, 612, 613, 614, 617, 628, 635, 636, 637, 638, 653, 654, 663, 674, 701, 704, 711, 713, 714, 715, 718, 726, 728, 802, 836, 839, 862, 863, 864, 865, 866, 872, 876, 884, 885, 888, 889, 895, 897, 906, 908, 912, 926, 931, 934, 959, 960, 963, 970], "pass": [0, 4, 20, 67, 68, 72, 73, 74, 75, 76, 113, 114, 117, 118, 119, 120, 121, 122, 124, 125, 128, 129, 133, 148, 268, 282, 305, 314, 349, 355, 386, 389, 589, 600, 633, 663, 699, 862, 863, 864, 981, 982, 1004, 1005, 1008, 1012, 1014, 1015], "jax": [0, 4, 5, 6, 15, 16, 19, 20, 122, 126, 127, 128, 129, 131, 133, 136, 148, 663, 679, 681, 906, 907, 908, 912, 914, 970], "get_backend": [0, 121, 122], "specifi": [0, 5, 69, 72, 73, 115, 120, 121, 126, 127, 128, 129, 131, 134, 135, 136, 197, 198, 199, 206, 220, 226, 227, 229, 230, 242, 243, 250, 254, 255, 259, 260, 262, 268, 274, 276, 305, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 343, 345, 348, 349, 350, 355, 546, 549, 589, 595, 607, 617, 618, 621, 628, 661, 714, 726, 728, 742, 744, 771, 773, 774, 776, 777, 779, 780, 782, 786, 787, 790, 792, 795, 797, 800, 802, 803, 806, 808, 811, 812, 815, 820, 823, 836, 839, 842, 845, 846, 849, 858, 861, 866, 871, 873, 874, 880, 881, 882, 883, 901, 902, 903, 906, 907, 908, 912, 914, 915, 916, 919, 926, 927, 930, 943, 946, 951, 954, 959, 960, 963, 965, 968], "isn": [0, 5, 19, 134, 148], "t": [0, 5, 15, 16, 18, 19, 20, 21, 67, 68, 113, 114, 118, 126, 131, 133, 134, 135, 136, 148, 589, 598, 701, 710, 711], "associ": [0, 5, 19, 121, 123, 148, 355, 369, 372, 525, 528, 714, 746, 748, 755, 757, 783, 785], "option": [0, 5, 18, 19, 26, 27, 28, 29, 30, 67, 68, 72, 73, 74, 75, 113, 114, 116, 117, 118, 121, 125, 126, 127, 128, 129, 131, 136, 148, 159, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 193, 194, 195, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 237, 240, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 274, 276, 282, 283, 284, 285, 292, 304, 305, 324, 348, 349, 350, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588, 589, 595, 601, 602, 604, 607, 608, 609, 611, 612, 613, 615, 617, 618, 621, 629, 640, 642, 645, 646, 653, 654, 663, 696, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 720, 722, 723, 725, 726, 728, 732, 734, 735, 737, 738, 741, 742, 744, 746, 748, 749, 751, 752, 754, 755, 757, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 787, 790, 792, 795, 797, 800, 802, 803, 806, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 862, 863, 864, 865, 866, 867, 872, 877, 878, 884, 885, 888, 889, 890, 891, 892, 894, 895, 897, 900, 901, 902, 903, 905, 906, 914, 915, 916, 919, 921, 924, 926, 927, 930, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968], "str": [0, 5, 23, 26, 27, 28, 69, 72, 73, 126, 127, 194, 195, 197, 232, 235, 268, 272, 282, 283, 284, 287, 288, 291, 292, 293, 294, 297, 298, 299, 304, 305, 321, 324, 325, 327, 330, 331, 332, 333, 349, 589, 595, 609, 611, 612, 613, 640, 645, 646, 701, 702, 704, 706, 707, 708, 714, 758, 760, 862, 863, 864, 865, 866, 872, 926, 927, 930], "we": [0, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 67, 68, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 135, 136, 147, 148, 663, 674, 970, 976], "want": [0, 5, 15, 17, 18, 19, 67, 68, 113, 114, 120, 134, 135, 136, 148], "retriev": [0, 5, 19, 589, 595], "i": [0, 5, 19, 21, 115, 131, 134, 136, 197, 198, 199, 232, 235, 355, 356, 359, 386, 389, 402, 405, 410, 413, 418, 421, 451, 454, 455, 458, 467, 470, 523, 524, 530, 533, 542, 545, 546, 549, 589, 597, 598, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 714, 720, 722, 738, 741, 746, 748, 755, 757, 762, 764, 765, 767, 774, 776, 780, 782, 802, 846, 849, 906, 907, 908, 912, 914, 915, 916, 919, 921, 924, 926, 927, 930, 931, 934, 935, 938, 939, 942, 947, 950, 951, 954, 955, 958], "e": [0, 5, 15, 16, 17, 19, 21, 69, 115, 125, 134, 148, 196, 197, 232, 235, 268, 273, 296, 305, 321, 355, 356, 359, 386, 389, 402, 405, 410, 413, 418, 421, 443, 446, 451, 454, 455, 458, 467, 470, 487, 490, 495, 498, 523, 524, 530, 533, 542, 545, 546, 549, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 714, 720, 722, 738, 741, 746, 748, 755, 757, 762, 764, 765, 767, 780, 782, 802, 846, 849, 889, 894, 895, 897, 906, 907, 908, 912, 914, 915, 916, 919, 921, 924, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958], "one": [0, 5, 15, 16, 18, 19, 69, 72, 73, 83, 84, 85, 86, 93, 94, 97, 98, 101, 102, 118, 121, 124, 125, 126, 128, 129, 130, 133, 134, 136, 148, 197, 198, 199, 232, 235, 268, 275, 277, 280, 305, 334, 335, 336, 337, 349, 356, 360, 369, 373, 589, 590, 592, 593, 594, 618, 622, 639, 642, 645, 646, 714, 715, 719, 738, 741, 742, 744, 752, 754, 758, 760, 777, 779, 780, 782, 802, 803, 807, 816, 819, 820, 823, 836, 839, 840, 842, 845, 891, 893, 901, 902, 904, 906, 907, 908, 912, 913, 914, 926, 927, 930, 970], "default": [0, 5, 19, 23, 26, 27, 28, 29, 30, 67, 68, 69, 72, 73, 74, 75, 76, 113, 114, 117, 118, 121, 122, 125, 126, 127, 129, 135, 159, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 193, 194, 195, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 237, 240, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 274, 276, 283, 284, 285, 286, 305, 314, 315, 324, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 344, 346, 347, 348, 349, 350, 353, 354, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588, 589, 590, 593, 595, 601, 602, 604, 607, 608, 611, 612, 613, 615, 616, 617, 618, 621, 626, 627, 628, 629, 630, 633, 634, 635, 636, 638, 639, 640, 642, 644, 645, 646, 649, 651, 653, 654, 661, 662, 663, 665, 668, 670, 672, 674, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 696, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 720, 722, 723, 725, 726, 728, 732, 734, 735, 737, 738, 741, 742, 744, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 787, 790, 792, 795, 797, 800, 802, 803, 806, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 872, 876, 877, 878, 879, 884, 885, 888, 889, 890, 891, 892, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 912, 914, 915, 916, 919, 921, 924, 926, 927, 930, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 981, 982, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "torch": [0, 5, 12, 19, 116, 121, 122, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 148, 194, 195, 268, 289, 290, 305, 346, 589, 651, 802, 816, 819, 970], "tensorflow": [0, 5, 12, 15, 16, 19, 20, 126, 127, 128, 129, 131, 136, 148, 970], "mxnet": [0, 5, 15, 20, 126, 127, 128, 131, 136, 970], "either": [0, 5, 12, 18, 19, 21, 69, 72, 73, 117, 118, 121, 122, 125, 126, 127, 131, 133, 134, 148, 197, 215, 218, 355, 369, 372, 386, 389, 471, 474, 487, 490, 491, 494, 499, 502, 503, 506, 525, 528, 546, 549, 554, 557, 558, 561, 579, 583, 589, 610, 635, 639, 640, 714, 738, 741, 862, 863, 864, 865, 926, 943, 946, 951, 954, 992, 1003, 1004, 1005], "doesn": [0, 5, 18, 21, 118, 126, 131, 148], "matter": [0, 5, 14, 118], "been": [0, 5, 19, 117, 121, 122, 125, 126, 127, 129, 131, 147, 148, 305, 324, 589, 611, 612, 613, 889, 890], "ivy_np": [0, 5], "us": [0, 5, 12, 15, 16, 17, 19, 20, 23, 37, 38, 67, 68, 69, 72, 73, 74, 75, 76, 83, 84, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 147, 148, 159, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 193, 196, 268, 287, 305, 314, 315, 340, 344, 347, 348, 349, 350, 352, 354, 355, 356, 357, 358, 374, 377, 394, 397, 414, 417, 426, 429, 463, 466, 483, 486, 523, 524, 530, 533, 534, 537, 550, 553, 566, 569, 589, 617, 624, 625, 639, 645, 646, 647, 648, 653, 654, 663, 665, 668, 670, 672, 683, 685, 687, 689, 701, 707, 709, 710, 712, 713, 714, 723, 725, 726, 728, 742, 744, 786, 787, 790, 802, 816, 819, 820, 823, 828, 831, 836, 839, 850, 853, 862, 863, 864, 865, 866, 867, 869, 875, 876, 877, 879, 884, 885, 888, 901, 902, 903, 904, 906, 907, 926, 927, 930, 959, 960, 963, 970, 992, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011], "ivy_jax": [0, 5], "subsequ": [0, 6, 18, 118, 120, 121, 124, 128, 129, 135], "call": [0, 6, 12, 15, 21, 23, 69, 74, 75, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 148, 305, 349, 589, 644, 649, 660, 663, 674, 866, 867, 872, 876, 877, 992, 1003, 1004, 1005, 1008, 1012], "nativ": [0, 6, 26, 28, 29, 30, 72, 73, 126, 128, 133, 134, 197, 237, 240, 268, 272, 273, 282, 305, 321, 322, 323, 324, 325, 344, 351, 354, 589, 633, 635, 638, 981, 982], "native_arrai": [0, 6, 12, 31, 32, 39, 40, 77, 78, 85, 86, 159, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 193, 197, 232, 235, 268, 277, 280, 305, 327, 343, 355, 356, 359, 374, 377, 394, 397, 414, 417, 418, 421, 451, 454, 463, 466, 483, 486, 523, 524, 530, 533, 534, 537, 566, 569, 570, 573, 584, 589, 590, 591, 592, 593, 594, 598, 606, 607, 614, 617, 618, 621, 652, 657, 658, 659, 663, 665, 668, 701, 704, 707, 708, 713, 714, 720, 722, 723, 725, 726, 728, 771, 773, 786, 787, 790, 797, 800, 802, 803, 806, 816, 819, 820, 823, 828, 831, 841, 850, 853, 884, 885, 888, 889, 890, 901, 902, 903, 904, 905, 906, 907, 908, 912, 926, 927, 930, 931, 934, 959, 960, 963], "1": [0, 6, 12, 15, 16, 21, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 69, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 118, 121, 125, 128, 129, 130, 131, 133, 134, 135, 136, 148, 159, 165, 168, 170, 173, 175, 178, 180, 183, 189, 190, 191, 192, 193, 197, 198, 199, 200, 221, 224, 226, 227, 229, 230, 232, 235, 242, 243, 245, 248, 263, 267, 268, 274, 277, 278, 279, 280, 281, 288, 305, 309, 312, 314, 319, 324, 325, 327, 329, 333, 337, 339, 342, 343, 350, 355, 356, 357, 358, 359, 361, 364, 365, 368, 369, 370, 371, 372, 373, 374, 377, 386, 389, 394, 397, 398, 401, 410, 413, 414, 417, 418, 419, 420, 421, 422, 425, 426, 429, 443, 446, 447, 450, 451, 452, 453, 454, 459, 462, 463, 466, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 523, 524, 530, 533, 534, 537, 542, 545, 550, 553, 554, 557, 558, 561, 566, 569, 570, 573, 579, 580, 581, 582, 583, 584, 589, 590, 591, 592, 593, 594, 597, 598, 606, 607, 614, 617, 618, 619, 620, 621, 622, 636, 642, 645, 646, 651, 652, 654, 657, 658, 659, 661, 663, 665, 666, 667, 668, 669, 701, 702, 703, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 735, 737, 746, 748, 752, 754, 762, 764, 765, 767, 771, 773, 774, 776, 777, 778, 779, 780, 782, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 849, 850, 853, 866, 878, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 930, 931, 934, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 970, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015], "type": [0, 6, 12, 18, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 124, 125, 127, 128, 129, 131, 133, 134, 136, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 304, 305, 321, 322, 323, 324, 325, 327, 337, 338, 339, 340, 341, 342, 343, 344, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 597, 598, 600, 601, 602, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 628, 629, 631, 632, 633, 635, 636, 637, 638, 642, 645, 646, 647, 648, 651, 653, 654, 655, 657, 658, 659, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 675, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 689, 690, 691, 692, 693, 694, 696, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 872, 876, 877, 878, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003], "ndarrai": [0, 6, 124, 126, 127, 128, 129, 133, 197, 201, 204, 237, 240, 589, 658], "Or": [0, 6, 134], "jaxlib": [0, 6, 18, 126, 127, 129, 133], "xla_extens": [0, 6, 126, 127, 129, 133], "devicearrai": [0, 6, 133], "try_import_ivy_jax": 0, "warn": [0, 7, 8, 9, 10, 11], "fals": [0, 7, 8, 9, 10, 11, 23, 26, 27, 28, 29, 30, 39, 40, 47, 48, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 125, 128, 134, 135, 136, 160, 162, 164, 165, 167, 169, 170, 172, 174, 175, 177, 179, 180, 182, 184, 185, 186, 188, 189, 190, 192, 198, 200, 201, 203, 205, 207, 209, 211, 212, 214, 215, 217, 219, 221, 223, 225, 226, 228, 229, 231, 232, 234, 236, 237, 239, 241, 242, 244, 245, 247, 249, 250, 251, 253, 255, 256, 258, 260, 261, 263, 264, 266, 268, 274, 277, 279, 280, 281, 286, 305, 324, 325, 336, 340, 341, 344, 349, 352, 354, 355, 356, 358, 360, 361, 363, 365, 367, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 397, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 462, 463, 465, 466, 467, 469, 470, 471, 473, 474, 475, 477, 478, 479, 481, 482, 483, 485, 486, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 514, 515, 517, 518, 519, 521, 525, 527, 529, 530, 532, 534, 536, 537, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 575, 577, 579, 580, 582, 585, 587, 589, 590, 591, 592, 593, 594, 597, 598, 602, 603, 607, 610, 614, 616, 618, 620, 622, 626, 633, 635, 636, 638, 639, 651, 661, 663, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 714, 715, 716, 717, 718, 719, 738, 740, 742, 743, 744, 765, 767, 780, 781, 782, 787, 789, 791, 792, 794, 796, 797, 799, 801, 802, 803, 805, 807, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 841, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 863, 864, 865, 866, 867, 868, 872, 876, 877, 878, 879, 885, 887, 889, 890, 895, 896, 898, 901, 902, 903, 905, 906, 907, 908, 909, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 981, 982, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013], "try_import_ivy_mxnet": 0, "try_import_ivy_numpi": 0, "try_import_ivy_tf": 0, "try_import_ivy_torch": 0, "unset_backend": [0, 122], "unset": [0, 12, 122, 131, 133], "adjust": [0, 12, 926, 947, 950, 955, 958], "dict": [0, 12, 26, 27, 28, 29, 30, 69, 72, 73, 74, 75, 76, 125, 134, 135, 305, 314, 315, 324, 327, 330, 331, 332, 333, 589, 595, 611, 612, 613, 866, 868, 869, 872, 875, 878, 879], "previous": [0, 12, 18, 21, 120, 121, 131, 589, 600], "otherwis": [0, 12, 23, 26, 27, 28, 29, 30, 69, 72, 73, 124, 126, 127, 129, 131, 133, 197, 198, 199, 268, 274, 277, 280, 283, 284, 285, 305, 324, 355, 467, 470, 471, 474, 475, 478, 589, 599, 660, 663, 679, 681, 696, 714, 715, 718, 723, 725, 777, 779, 780, 782, 862, 863, 864, 866, 879, 901, 902, 903, 905, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968], "implement": [0, 12, 20, 23, 69, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 147, 148, 268, 274, 296, 305, 350, 355, 356, 359, 361, 364, 365, 368, 374, 377, 378, 381, 382, 385, 386, 389, 422, 425, 426, 429, 443, 446, 447, 450, 487, 490, 491, 494, 495, 498, 499, 502, 525, 528, 542, 545, 546, 549, 558, 561, 562, 565, 579, 583, 584, 714, 729, 731, 906, 907, 908, 912, 914, 915, 916, 919, 921, 924, 926, 931, 934, 935, 938, 939, 942, 970], "wa": [0, 12, 15, 72, 73, 118, 131, 133, 589, 660, 866, 879, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968], "last": [0, 12, 16, 19, 69, 72, 73, 118, 122, 148, 159, 180, 183, 305, 324, 701, 711, 714, 720, 722, 726, 728, 742, 744, 774, 776, 777, 779, 786, 792, 795, 797, 800, 802, 820, 823, 836, 839, 841, 846, 849, 915, 916, 919, 921, 924, 959, 960, 963, 965, 968, 992, 1002], "henc": [0, 12, 906, 907, 908, 912, 914], "here": [0, 12, 18, 19, 20, 116, 118, 125, 129, 131, 132, 133, 134, 135, 136, 147, 148], "tensor": [0, 12, 14, 72, 73, 116, 121, 122, 124, 126, 127, 128, 129, 131, 133, 134, 135, 136, 148, 197, 226, 227, 229, 230, 268, 286, 355, 394, 397, 523, 524, 589, 642, 645, 646, 701, 709, 711, 714, 771, 773, 802, 816, 819, 832, 835, 841, 889, 890, 901, 904, 970, 992, 1000, 1002], "howev": [0, 12, 15, 18, 20, 117, 120, 121, 122, 124, 125, 126, 127, 128, 129, 133, 134, 135, 136, 148], "befor": [0, 12, 18, 19, 20, 72, 73, 117, 120, 124, 126, 127, 128, 131, 134, 148, 305, 349, 355, 585, 588, 701, 712, 713, 862, 863, 864, 866, 878, 906, 907, 908, 912, 914, 926, 943, 946, 951, 954], "becom": [0, 12, 14, 16, 19, 118, 125, 131, 136, 148, 802, 803, 806], "swap": [0, 12, 802, 850, 853], "python": [0, 12, 13, 14, 15, 18, 19, 21, 131, 133, 134, 148, 197, 198, 199, 305, 344, 354, 355, 546, 549, 970, 976], "framework": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 25, 26, 27, 28, 29, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 71, 72, 73, 75, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 115, 119, 121, 122, 123, 124, 127, 129, 130, 133, 136, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 974, 975, 976, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1018], "op": [0, 12, 116, 131, 148], "eagertensor": [0, 12], "def": [1, 20, 116, 118, 121, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 269, 270, 271, 306, 313, 316, 664, 970, 984, 987, 990], "support": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 25, 27, 28, 29, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 71, 72, 73, 75, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 117, 118, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 136, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 974, 975, 976, 979, 980, 982, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1018], "backend": [4, 5, 6, 12, 14, 19, 20, 26, 28, 30, 72, 73, 115, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 132, 133, 136, 268, 289, 290, 292, 304, 305, 340, 342, 352, 589, 630, 633, 634, 640, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 699, 970, 976, 981, 982, 1008, 1009, 1010, 1011, 1012, 1013], "ml": [13, 15, 16, 17, 130, 131, 132, 134, 135, 136, 147, 970, 976], "explos": [13, 15, 970], "A": [13, 14, 15, 16, 21, 72, 73, 74, 75, 76, 115, 120, 121, 125, 126, 127, 131, 134, 148, 197, 212, 213, 237, 240, 305, 314, 315, 349, 355, 538, 541, 589, 625, 657, 714, 752, 754, 761, 762, 764, 765, 767, 802, 841, 846, 849, 866, 867, 869, 871, 873, 874, 875, 876, 877, 880, 881, 882, 883, 926, 927, 930, 959, 960, 963, 965, 968, 970, 1014, 1015], "huge": [13, 15, 134, 970], "number": [13, 14, 18, 72, 73, 74, 75, 76, 118, 125, 127, 128, 131, 134, 136, 194, 195, 196, 197, 198, 199, 201, 204, 212, 213, 226, 227, 229, 230, 232, 235, 237, 240, 268, 275, 287, 288, 291, 293, 294, 296, 305, 341, 342, 343, 355, 369, 372, 386, 389, 418, 421, 451, 454, 455, 458, 523, 524, 525, 528, 542, 545, 546, 549, 550, 553, 554, 557, 585, 588, 589, 590, 593, 616, 625, 626, 641, 659, 662, 701, 712, 714, 726, 728, 729, 731, 746, 748, 761, 765, 767, 777, 779, 802, 803, 806, 812, 815, 824, 827, 828, 831, 836, 839, 841, 846, 849, 854, 857, 858, 861, 862, 863, 864, 865, 889, 890, 899, 901, 904, 906, 907, 908, 912, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 970, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003], "tool": [13, 16, 19, 132, 136, 147, 148, 970], "have": [13, 14, 15, 16, 18, 19, 20, 21, 72, 73, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 147, 148, 159, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 193, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 274, 275, 276, 288, 305, 350, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588, 589, 601, 602, 604, 607, 611, 612, 613, 615, 618, 621, 629, 642, 645, 646, 663, 679, 681, 696, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 718, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 742, 744, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 787, 790, 792, 795, 797, 800, 802, 803, 806, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 884, 885, 888, 889, 890, 891, 892, 894, 895, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 912, 914, 915, 916, 919, 921, 924, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 970], "explod": [13, 14, 970], "onto": [13, 14, 305, 334, 335, 866, 872, 878, 970], "scene": [13, 14, 115, 130, 132, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 970], "b": [13, 16, 17, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 115, 118, 121, 122, 125, 130, 131, 132, 134, 135, 136, 146, 189, 190, 192, 268, 277, 279, 280, 281, 305, 327, 355, 356, 358, 359, 360, 369, 371, 372, 373, 374, 377, 394, 397, 414, 417, 418, 420, 421, 426, 429, 451, 453, 454, 463, 466, 483, 486, 530, 533, 534, 537, 550, 553, 566, 569, 570, 573, 579, 580, 582, 583, 584, 589, 590, 592, 593, 594, 597, 598, 606, 607, 614, 617, 618, 620, 621, 622, 659, 663, 665, 667, 668, 669, 701, 704, 707, 708, 713, 714, 715, 717, 718, 719, 720, 722, 723, 725, 726, 728, 752, 754, 762, 764, 771, 773, 783, 785, 786, 787, 790, 802, 803, 805, 806, 807, 816, 819, 820, 823, 828, 831, 836, 838, 839, 840, 846, 849, 850, 853, 884, 885, 888, 889, 891, 893, 894, 895, 897, 901, 903, 904, 905, 906, 908, 909, 911, 912, 915, 916, 919, 926, 927, 930, 931, 934, 959, 960, 963, 970, 976], "why": [13, 15, 19, 125, 128, 129, 133, 970], "unifi": [13, 15, 72, 73, 124, 131, 148, 305, 334, 335, 336, 337, 349, 970], "should": [13, 15, 18, 19, 20, 21, 23, 69, 72, 73, 74, 75, 76, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 194, 195, 197, 232, 235, 250, 254, 255, 259, 268, 276, 305, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 443, 446, 447, 450, 451, 454, 467, 470, 471, 474, 475, 478, 479, 482, 487, 490, 491, 494, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 525, 528, 534, 537, 542, 545, 546, 549, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588, 589, 600, 633, 642, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 701, 713, 714, 715, 718, 720, 722, 723, 725, 726, 728, 735, 737, 738, 741, 746, 748, 752, 754, 755, 757, 758, 760, 762, 764, 765, 767, 771, 773, 774, 776, 777, 779, 780, 782, 802, 832, 835, 889, 900, 901, 902, 903, 906, 907, 908, 912, 914, 926, 927, 930, 931, 934, 935, 938, 943, 946, 947, 950, 951, 954, 955, 958, 970], "them": [13, 14, 15, 16, 120, 122, 124, 125, 131, 133, 134, 135, 148, 970], "c": [13, 15, 16, 17, 101, 102, 115, 118, 121, 125, 130, 131, 132, 134, 148, 355, 534, 537, 589, 597, 598, 606, 659, 663, 665, 668, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 701, 707, 802, 846, 849, 891, 893, 901, 904, 926, 927, 930, 947, 950, 955, 958, 970, 976], "standard": [13, 23, 115, 116, 117, 119, 120, 124, 128, 129, 148, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 232, 235, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 288, 355, 356, 359, 369, 372, 374, 377, 394, 397, 414, 417, 418, 421, 426, 429, 451, 454, 483, 486, 534, 537, 550, 553, 566, 569, 570, 573, 579, 583, 584, 714, 723, 725, 726, 728, 802, 816, 819, 820, 823, 836, 839, 884, 885, 888, 889, 894, 906, 907, 908, 912, 915, 916, 919, 926, 931, 934, 947, 950, 955, 958, 959, 960, 963, 970, 976, 1006, 1007], "re": [13, 14, 15, 17, 18, 19, 20, 21, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 133, 136, 148, 305, 349, 589, 611, 714, 771, 773, 802, 836, 839, 901, 905, 970], "collabor": [13, 14, 15, 970], "consortium": [13, 15, 970, 976], "data": [13, 15, 72, 73, 74, 75, 76, 115, 116, 117, 121, 123, 125, 127, 128, 129, 133, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 232, 235, 237, 240, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 272, 273, 274, 276, 277, 280, 282, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 300, 304, 305, 307, 308, 309, 310, 311, 312, 317, 318, 319, 321, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 525, 528, 534, 537, 542, 545, 546, 549, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588, 589, 597, 598, 635, 636, 638, 655, 663, 679, 681, 699, 701, 710, 714, 715, 718, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 762, 764, 765, 767, 771, 773, 774, 776, 777, 779, 780, 782, 802, 816, 819, 820, 823, 824, 827, 832, 835, 836, 839, 842, 845, 846, 849, 889, 900, 901, 902, 903, 904, 915, 916, 919, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 970, 976, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003], "api": [13, 14, 18, 19, 115, 117, 118, 120, 121, 123, 124, 126, 127, 128, 129, 130, 132, 134, 148, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 232, 235, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 355, 356, 359, 369, 372, 374, 377, 394, 397, 414, 417, 418, 421, 426, 429, 451, 454, 483, 486, 534, 537, 550, 553, 566, 569, 570, 573, 579, 583, 584, 714, 723, 725, 726, 728, 802, 816, 819, 820, 823, 836, 839, 906, 907, 908, 912, 915, 916, 919, 926, 931, 934, 959, 960, 963, 970, 976], "open": [14, 15, 16, 17, 18, 21, 117, 147, 197, 198, 199, 889, 891, 892, 895, 897, 970], "project": [14, 15, 16, 18, 19, 21, 116, 122, 133, 135, 147, 148, 889, 890, 894], "grown": 14, "consider": [14, 118, 129], "recent": [14, 15, 18, 19], "year": [14, 16, 148, 970], "especi": [14, 18], "deep": [14, 17, 19, 20, 72, 73, 130, 134, 970], "learn": [14, 15, 18, 20, 115, 121, 130, 136, 147, 355, 459, 462, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 862, 863, 864, 865, 970, 1008, 1009, 1010, 1011, 1012, 1013], "can": [14, 15, 16, 17, 18, 19, 23, 69, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 147, 148, 197, 201, 204, 237, 240, 268, 277, 280, 305, 347, 348, 349, 714, 735, 737, 802, 832, 835, 889, 891, 892, 970, 976], "seen": [14, 15, 118, 133, 134], "rapidli": 14, "increas": [14, 305, 329, 333, 337, 802, 812, 815, 858, 861, 866, 878], "github": [14, 19, 20, 117, 120], "repo": [14, 15, 16, 18, 19, 119, 131, 133, 134, 135, 136, 147, 970, 976], "contain": [14, 18, 19, 20, 21, 26, 29, 30, 39, 40, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 126, 128, 129, 130, 131, 132, 135, 136, 148, 159, 160, 165, 170, 173, 175, 178, 180, 185, 187, 189, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 237, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 305, 326, 327, 330, 339, 343, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 538, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588, 589, 590, 591, 593, 595, 598, 601, 602, 604, 606, 607, 614, 617, 618, 621, 628, 637, 657, 658, 659, 663, 665, 668, 670, 675, 679, 683, 687, 691, 701, 704, 707, 708, 713, 714, 715, 718, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 786, 787, 790, 792, 795, 797, 800, 802, 803, 806, 808, 812, 816, 819, 820, 823, 824, 827, 828, 831, 832, 836, 839, 841, 842, 846, 850, 853, 854, 858, 862, 863, 864, 865, 866, 879, 884, 885, 888, 889, 890, 891, 894, 895, 897, 901, 902, 903, 904, 905, 906, 907, 908, 912, 914, 915, 916, 919, 921, 926, 927, 930, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 970, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1008, 1012, 1014, 1015], "term": [14, 19, 125, 701, 711, 992, 1002], "time": [14, 15, 16, 18, 19, 20, 120, 121, 125, 126, 129, 131, 134, 136, 148, 663, 670, 672, 683, 685, 701, 711, 802, 854, 857, 862, 863, 864, 865, 901, 902, 903, 906, 907, 908, 912, 992, 1003, 1004, 1005], "These": [14, 15, 16, 19, 117, 118, 120, 121, 125, 126, 128, 129, 131, 132, 134, 135, 136, 148, 714, 729, 731, 970, 976], "ar": [14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 69, 72, 73, 74, 75, 76, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 147, 148, 149, 157, 197, 198, 199, 305, 314, 315, 339, 343, 345, 349, 355, 422, 425, 511, 514, 515, 518, 550, 553, 558, 561, 579, 583, 589, 590, 593, 597, 598, 599, 623, 629, 630, 634, 641, 643, 655, 701, 710, 714, 720, 722, 738, 741, 742, 744, 746, 748, 755, 757, 765, 767, 768, 770, 777, 779, 802, 803, 806, 820, 823, 836, 839, 866, 868, 872, 878, 889, 894, 895, 897, 901, 902, 903, 904, 906, 907, 970, 1014, 1015], "written": [14, 18, 116, 117, 124, 128, 129, 131, 133, 136, 148], "mani": [14, 15, 16, 18, 19, 20, 72, 73, 117, 118, 121, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 148, 802, 841], "differ": [14, 15, 16, 18, 19, 72, 73, 74, 75, 76, 115, 116, 117, 118, 120, 121, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 148, 268, 288, 305, 326, 327, 330, 331, 355, 369, 372, 525, 528, 574, 578, 701, 710, 802, 846, 849, 926, 943, 946, 951, 954, 970], "while": [14, 15, 18, 19, 72, 73, 74, 75, 76, 118, 122, 128, 135, 136, 148, 355, 511, 514, 515, 518, 906, 907, 926, 935, 938], "thi": [14, 15, 16, 17, 18, 19, 20, 21, 23, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 69, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 147, 148, 189, 190, 191, 192, 197, 198, 199, 201, 202, 204, 206, 207, 208, 210, 212, 213, 215, 216, 218, 220, 221, 222, 224, 226, 227, 229, 230, 232, 235, 237, 238, 240, 242, 243, 245, 246, 248, 250, 252, 254, 255, 257, 259, 260, 262, 263, 265, 267, 268, 277, 278, 279, 280, 281, 305, 329, 333, 337, 344, 349, 354, 355, 356, 357, 358, 359, 360, 369, 370, 371, 372, 373, 374, 377, 394, 397, 410, 413, 414, 417, 418, 419, 420, 421, 426, 429, 447, 450, 451, 452, 453, 454, 483, 486, 511, 514, 515, 518, 534, 537, 546, 549, 550, 553, 566, 569, 570, 573, 579, 580, 581, 582, 583, 584, 589, 590, 591, 592, 594, 616, 617, 618, 619, 620, 622, 633, 644, 649, 663, 665, 666, 667, 669, 670, 672, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 699, 701, 704, 710, 713, 714, 715, 716, 717, 718, 719, 723, 725, 726, 728, 742, 744, 761, 802, 803, 804, 805, 807, 816, 819, 820, 823, 832, 835, 836, 837, 838, 839, 840, 846, 849, 866, 872, 878, 879, 884, 885, 888, 891, 893, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 919, 926, 931, 934, 935, 938, 947, 950, 955, 958, 959, 960, 963, 970, 976, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013], "wonder": [14, 16, 133], "thing": [14, 15, 16, 18, 19, 20, 122, 133, 134], "research": [14, 147], "develop": [14, 15, 16, 17, 18, 19, 20, 147, 148, 970], "also": [14, 15, 17, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 147, 148, 189, 190, 191, 192, 197, 198, 199, 201, 202, 204, 206, 207, 208, 210, 212, 213, 215, 216, 218, 220, 221, 222, 224, 226, 227, 229, 230, 232, 235, 237, 238, 242, 243, 245, 246, 248, 250, 252, 254, 255, 257, 259, 260, 262, 263, 265, 267, 268, 277, 278, 279, 280, 281, 355, 356, 357, 358, 359, 360, 369, 370, 371, 372, 373, 374, 377, 394, 397, 414, 417, 418, 419, 420, 421, 426, 429, 451, 452, 453, 454, 534, 537, 550, 553, 566, 569, 570, 573, 579, 580, 581, 582, 583, 584, 589, 590, 591, 592, 594, 617, 618, 619, 620, 622, 633, 663, 665, 666, 667, 669, 670, 672, 701, 704, 710, 713, 714, 715, 716, 717, 718, 719, 723, 725, 726, 728, 802, 803, 804, 805, 807, 816, 819, 820, 823, 836, 837, 838, 839, 840, 862, 863, 864, 865, 866, 867, 868, 876, 877, 878, 884, 885, 888, 891, 893, 906, 907, 908, 909, 910, 911, 912, 915, 916, 919, 926, 931, 934, 959, 960, 963, 992, 1002], "consid": [14, 15, 72, 73, 116, 121, 132, 133, 134, 355, 511, 514, 515, 518, 906, 907, 908, 912, 914], "speed": 14, "evolv": 14, "sharabl": 14, "code": [14, 15, 16, 18, 19, 20, 21, 72, 73, 74, 75, 76, 87, 88, 115, 117, 118, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 146, 148, 159, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 193, 305, 327, 350, 355, 414, 417, 570, 573, 663, 665, 667, 668, 669, 701, 707, 708, 906, 907, 908, 912, 915, 916, 919, 926, 927, 930, 970, 976], "significantli": 14, "hinder": [14, 129], "librari": [14, 15, 16, 131, 136, 146, 148, 305, 350, 355, 447, 450, 511, 514, 515, 518, 714, 729, 731, 906, 907, 908, 912, 914, 926, 931, 934, 935, 938, 939, 942, 970], "outdat": 14, "month": 14, "rigor": 14, "maintain": [14, 19, 915, 916, 919, 921, 924], "against": [14, 72, 73, 120, 148, 268, 275, 714, 738, 741, 742, 744, 746, 748, 755, 757, 901, 902], "newest": 14, "version": [14, 15, 16, 18, 117, 131, 133, 714, 729, 731, 970], "For": [14, 15, 16, 18, 19, 20, 21, 69, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 147, 148, 197, 198, 199, 232, 235, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 418, 421, 422, 425, 426, 429, 443, 446, 447, 450, 451, 454, 487, 490, 491, 494, 499, 502, 503, 506, 525, 528, 542, 545, 546, 549, 550, 553, 558, 561, 562, 565, 566, 569, 579, 583, 584, 585, 588, 663, 679, 681, 699, 714, 765, 767, 774, 776, 802, 803, 806, 846, 849, 906, 907, 908, 912, 914, 926, 931, 934, 939, 942, 951, 954, 981, 982], "softwar": [14, 15, 18, 19], "pipelin": [14, 124, 136], "where": [14, 15, 16, 17, 18, 19, 20, 21, 72, 73, 74, 75, 117, 121, 122, 124, 125, 126, 127, 128, 131, 134, 135, 136, 148, 197, 220, 221, 224, 232, 235, 355, 386, 389, 443, 446, 495, 498, 525, 528, 542, 545, 589, 629, 633, 642, 714, 729, 731, 746, 748, 755, 757, 758, 760, 765, 767, 768, 770, 774, 776, 777, 779, 802, 803, 806, 812, 815, 816, 819, 824, 827, 846, 849, 858, 861, 866, 867, 877, 889, 890, 901, 904, 926, 947, 950, 955, 958, 959, 960, 963, 965, 968, 970], "rapid": [14, 15, 18], "prototyp": 14, "vital": [14, 136], "signific": [14, 15, 148], "bottleneck": 14, "As": [14, 19, 67, 68, 113, 114, 120, 121, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 148, 906, 907, 908, 912, 914], "new": [14, 15, 16, 17, 18, 19, 20, 21, 23, 69, 72, 73, 115, 116, 117, 118, 120, 123, 125, 126, 128, 130, 133, 136, 147, 197, 206, 215, 218, 220, 221, 224, 242, 243, 245, 248, 260, 262, 263, 267, 268, 300, 355, 390, 393, 495, 498, 538, 541, 589, 611, 612, 613, 616, 617, 618, 621, 645, 646, 647, 648, 653, 654, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 802, 816, 819, 832, 835, 846, 849, 866, 871, 882, 883, 884, 885, 888, 970, 981, 982, 992, 1002, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "futur": [14, 16, 18, 19, 133, 148, 714, 729, 731], "avail": [14, 18, 19, 72, 73, 117, 127, 148, 305, 324, 340, 341, 342, 352, 589, 612], "specif": [14, 20, 72, 73, 121, 124, 125, 126, 127, 128, 129, 131, 132, 133, 135, 136, 147, 148, 268, 296, 305, 347, 350, 355, 511, 514, 515, 518, 589, 611, 612, 613, 640, 714, 729, 731, 771, 773, 802, 846, 849, 862, 863, 864, 865, 889, 890, 926, 931, 934, 935, 938, 939, 942, 970, 973, 975, 976, 1004, 1005], "quickli": [14, 16, 18, 19, 134, 135], "obsolet": [14, 16], "user": [14, 15, 18, 19, 21, 115, 120, 122, 125, 128, 130, 148, 992, 1003, 1004, 1005], "constantli": 14, "invent": 14, "wheel": 14, "our": [14, 15, 17, 18, 19, 67, 68, 113, 114, 118, 125, 130, 133, 134, 135, 136, 148, 970], "desir": [14, 72, 73, 268, 274, 277, 280, 305, 350, 589, 629, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003], "provid": [14, 18, 19, 23, 69, 72, 73, 117, 118, 121, 124, 125, 126, 127, 128, 129, 131, 135, 147, 148, 194, 195, 197, 232, 235, 268, 283, 284, 285, 292, 296, 304, 305, 324, 589, 610, 642, 646, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 714, 777, 779, 802, 820, 823, 846, 849, 901, 902, 926, 947, 950, 955, 958, 959, 960, 963, 965, 968, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1008, 1009, 1010, 1011, 1012, 1013], "simultan": [14, 16], "all": [14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 65, 66, 67, 68, 69, 72, 73, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 147, 148, 149, 157, 194, 195, 197, 198, 199, 250, 254, 255, 259, 305, 314, 339, 345, 589, 590, 593, 597, 598, 623, 643, 658, 701, 711, 714, 762, 764, 771, 773, 780, 782, 802, 820, 823, 836, 839, 862, 863, 864, 865, 866, 867, 868, 877, 878, 879, 889, 890, 895, 897, 959, 970, 973, 975], "modern": [14, 15], "simpl": [14, 18, 19, 116, 117, 118, 120, 121, 124, 125, 126, 127, 128, 131, 133, 135, 136, 148, 589, 614], "scalabl": [14, 131], "manner": [14, 26, 29, 30, 72, 73, 116, 117, 127, 134, 147, 148, 866, 878], "must": [14, 16, 18, 19, 20, 72, 73, 74, 75, 76, 116, 117, 118, 121, 124, 125, 126, 127, 129, 131, 135, 136, 159, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 193, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 274, 275, 276, 305, 334, 335, 336, 337, 349, 350, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588, 589, 601, 602, 604, 607, 611, 612, 613, 615, 618, 621, 629, 642, 645, 646, 663, 696, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 718, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 742, 744, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 787, 790, 792, 795, 797, 800, 802, 803, 806, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 884, 885, 888, 889, 890, 891, 892, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 912, 914, 915, 916, 919, 921, 924, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 1008, 1012], "determin": [14, 72, 73, 117, 121, 125, 126, 127, 268, 277, 280, 282, 287, 292, 293, 294, 304, 305, 340, 341, 342, 352, 355, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 402, 405, 406, 409, 410, 413, 414, 417, 422, 425, 426, 429, 430, 433, 443, 446, 447, 450, 467, 470, 471, 474, 475, 478, 487, 490, 491, 494, 499, 502, 503, 506, 519, 522, 525, 528, 542, 545, 546, 549, 558, 561, 562, 565, 566, 569, 579, 583, 584, 589, 590, 593, 597, 598, 628, 630, 634, 635, 636, 637, 638, 655, 662, 663, 679, 681, 701, 712, 714, 715, 718, 720, 722, 723, 725, 726, 728, 735, 737, 738, 741, 746, 748, 752, 754, 755, 757, 761, 762, 764, 774, 776, 777, 779, 780, 782, 862, 863, 864, 865, 906, 907, 908, 912, 914, 959, 960, 963, 965, 968], "exactli": [14, 16, 118, 125, 127, 970, 976], "common": [14, 20, 72, 73, 118, 121, 123, 125, 127, 148], "ground": [14, 120], "li": 14, "between": [14, 72, 73, 74, 75, 76, 118, 120, 121, 124, 125, 129, 130, 132, 133, 134, 136, 147, 197, 198, 199, 268, 288, 355, 386, 389, 542, 545, 786, 787, 790, 792, 795, 797, 800, 802, 816, 819, 846, 849, 866, 872, 889, 891, 892, 906, 907, 908, 912, 914, 970, 1008, 1010], "find": [14, 18, 19, 72, 73, 131, 134, 906, 907, 908, 912, 914, 970], "exist": [14, 15, 18, 20, 21, 72, 73, 74, 75, 117, 118, 119, 120, 121, 122, 123, 128, 131, 148, 589, 610, 1008, 1012], "essenti": [14, 15, 20, 118, 121, 127], "order": [14, 18, 19, 21, 69, 72, 73, 74, 75, 76, 117, 118, 122, 124, 125, 126, 127, 129, 133, 134, 136, 148, 355, 386, 389, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 714, 729, 731, 742, 744, 765, 767, 768, 770, 780, 782, 802, 820, 823, 862, 863, 864, 901, 904, 906, 907, 908, 912, 914, 915, 916, 919, 921, 924, 1014, 1015], "design": [14, 15, 115, 128, 131, 133, 148], "univers": 14, "abstract": [14, 23, 69, 125, 135, 148, 305, 320, 1008, 1012], "In": [14, 16, 18, 19, 69, 116, 117, 118, 121, 122, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 147, 148, 305, 344, 350, 351, 354, 355, 369, 372, 525, 528, 546, 549, 589, 595, 633, 802, 832, 835, 889, 895, 897, 970], "search": [14, 18, 26, 29, 30, 58, 72, 73, 104, 116, 118, 120, 902, 903, 904, 905], "languag": [14, 16, 131], "first": [14, 15, 18, 19, 21, 69, 118, 121, 124, 125, 129, 131, 133, 134, 136, 194, 195, 197, 226, 227, 229, 230, 268, 295, 300, 305, 324, 336, 355, 369, 372, 394, 397, 402, 405, 406, 409, 410, 413, 414, 417, 435, 438, 455, 458, 463, 466, 479, 482, 483, 486, 503, 506, 507, 510, 515, 518, 519, 522, 525, 528, 534, 537, 542, 545, 574, 578, 589, 597, 663, 674, 714, 720, 722, 726, 728, 729, 731, 738, 741, 752, 754, 758, 760, 765, 767, 771, 773, 777, 779, 802, 808, 811, 836, 839, 846, 849, 850, 853, 862, 863, 864, 865, 866, 867, 876, 877, 889, 900, 901, 902, 903, 906, 907, 908, 912, 992, 1003, 1004, 1005, 1008, 1012], "see": [14, 17, 18, 19, 20, 23, 69, 119, 121, 125, 127, 129, 133, 134, 147, 148, 197, 198, 199, 215, 218, 226, 227, 229, 230, 268, 276, 296, 355, 369, 372, 394, 397, 402, 405, 406, 409, 410, 413, 414, 417, 430, 433, 447, 450, 479, 482, 503, 506, 515, 518, 519, 522, 525, 528, 534, 537, 542, 545, 546, 549, 574, 578, 714, 746, 748, 755, 757, 762, 764, 777, 779, 780, 782, 901, 903, 906, 907, 908, 912, 914, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 970], "clear": [14, 15, 16, 19, 20, 69, 118, 120, 126, 127, 131, 133, 305, 323], "front": [14, 130, 131, 134, 970, 976], "runner": 14, "look": [14, 18, 19, 21, 116, 118, 121, 122, 125, 126, 127, 129, 131, 133, 135, 136, 970], "littl": [14, 133], "deeper": [14, 19, 115, 130, 305, 329, 333, 337, 866, 877, 878], "follow": [14, 15, 18, 19, 20, 21, 69, 72, 73, 116, 117, 118, 120, 122, 124, 125, 126, 127, 128, 130, 131, 133, 134, 135, 136, 148, 268, 291, 305, 349, 355, 546, 549, 589, 631, 632, 633, 653, 654, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 701, 712, 713, 714, 758, 760, 780, 782, 866, 872, 878, 906, 907, 908, 912, 914, 970, 992, 1002, 1008, 1012], "same": [14, 16, 18, 19, 21, 26, 27, 28, 72, 73, 116, 118, 120, 121, 124, 125, 127, 128, 129, 131, 133, 135, 136, 197, 198, 199, 207, 210, 221, 224, 232, 235, 245, 248, 250, 254, 255, 259, 263, 267, 268, 274, 275, 276, 305, 314, 315, 349, 355, 356, 359, 369, 372, 398, 401, 418, 421, 451, 454, 525, 528, 546, 549, 550, 553, 554, 557, 585, 588, 589, 615, 617, 618, 621, 642, 645, 646, 663, 679, 681, 696, 701, 702, 703, 704, 705, 706, 707, 708, 713, 714, 715, 718, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 749, 751, 755, 757, 758, 760, 762, 764, 765, 767, 774, 776, 777, 779, 802, 808, 811, 820, 823, 824, 827, 836, 839, 842, 845, 846, 849, 862, 863, 864, 866, 879, 906, 907, 908, 912, 914, 915, 916, 919, 921, 924, 926, 927, 930, 931, 934, 935, 938, 939, 942, 943, 946, 951, 954, 955, 958, 970, 992, 993, 994, 995, 996, 997, 998, 999], "core": [14, 18, 20, 127, 131, 136, 305, 341, 970], "principl": 14, "oper": [14, 18, 20, 72, 73, 74, 75, 117, 118, 121, 124, 125, 127, 128, 134, 135, 197, 226, 227, 229, 230, 268, 296, 355, 369, 372, 410, 413, 414, 417, 463, 466, 530, 533, 534, 537, 546, 549, 570, 573, 589, 599, 611, 612, 613, 655, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 701, 702, 703, 704, 705, 706, 707, 708, 710], "expos": [14, 131, 135, 589, 605], "almost": [14, 19, 125, 132, 134], "ident": [14, 16, 72, 73, 121, 123, 125, 133, 134, 148, 305, 339, 866, 879, 970], "uniqu": [14, 121, 125, 148, 305, 314, 315, 862, 863, 864, 865, 866, 872, 906, 907, 908, 912, 913, 914], "syntax": [14, 15], "There": [14, 18, 19, 118, 121, 124, 125, 126, 131, 134, 148], "onli": [14, 17, 18, 19, 72, 73, 116, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 146, 148, 305, 345, 355, 511, 514, 515, 518, 714, 738, 741, 758, 760, 802, 820, 823, 866, 867, 868, 876, 877, 901, 902, 903, 926, 935, 938, 970, 1008, 1009, 1010, 1011, 1012, 1013], "so": [14, 15, 18, 19, 26, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 116, 117, 118, 120, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 148, 149, 157, 189, 190, 191, 192, 201, 202, 207, 208, 215, 216, 221, 222, 237, 238, 245, 246, 250, 252, 255, 257, 263, 265, 277, 278, 279, 281, 356, 357, 358, 360, 369, 370, 371, 373, 418, 419, 420, 451, 452, 453, 579, 580, 581, 582, 590, 591, 592, 594, 618, 619, 620, 622, 665, 666, 667, 669, 715, 716, 717, 719, 803, 804, 805, 807, 836, 837, 838, 840, 866, 867, 877, 891, 893, 908, 909, 910, 911, 970], "wai": [14, 15, 18, 23, 122, 128, 133, 134, 135, 136, 148], "manipul": [14, 52, 98, 116, 136, 147, 803, 806, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861], "unsurprisingli": [14, 118], "fundament": [14, 125, 131], "consist": [14, 72, 73, 124, 128, 305, 337, 714, 729, 731, 926, 927, 930, 1004, 1005], "each": [14, 15, 16, 19, 20, 72, 73, 74, 75, 76, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 133, 134, 136, 147, 148, 159, 170, 173, 175, 178, 185, 187, 197, 232, 235, 268, 275, 305, 314, 315, 326, 327, 328, 329, 330, 331, 332, 336, 349, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588, 589, 590, 593, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 701, 702, 703, 704, 705, 706, 707, 708, 709, 714, 715, 718, 720, 722, 723, 725, 729, 731, 738, 741, 746, 748, 749, 751, 755, 757, 762, 764, 765, 767, 802, 812, 815, 828, 831, 836, 839, 841, 846, 849, 854, 857, 858, 861, 866, 872, 879, 889, 890, 901, 904, 906, 907, 908, 912, 926, 927, 930, 970, 976, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "veri": [14, 15, 18, 19, 116, 118, 120, 121, 125, 127, 128, 129, 132, 134, 135, 136, 148, 970], "similar": [14, 116, 125, 126, 127, 134, 148, 355, 546, 549, 701, 712, 992, 1003], "convent": [14, 147, 714, 738, 741, 926, 927, 930], "those": [14, 18, 19, 20, 72, 73, 125, 131, 136, 197, 198, 199, 663, 699, 714, 758, 760, 765, 767, 802, 803, 806], "introduc": [14, 125, 134, 802, 836, 839, 906, 907], "2006": 14, "layer": [14, 46, 92, 116, 117, 131, 132, 135, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 884, 885, 888, 970, 983, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015], "therefor": [14, 19, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 131, 133, 135, 148, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 355, 356, 359, 369, 372, 374, 377, 418, 421, 451, 454, 534, 537, 566, 569, 570, 573, 579, 583, 589, 617, 701, 704, 713, 714, 715, 718, 726, 728, 802, 836, 839, 884, 885, 888, 906, 908, 912, 926, 931, 934, 959, 960, 963], "present": [14, 19, 69, 72, 73, 119, 125, 126, 127, 128, 129, 131], "itself": [14, 18, 19, 125, 128, 129, 135, 147, 148, 589, 595, 866, 878], "cut": 14, "cloth": 14, "adher": [14, 15, 117, 119, 131, 136], "semant": [14, 131, 136, 355, 546, 549], "round": [14, 15, 16, 18, 19, 20, 21, 37, 38, 83, 84, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 147, 355, 369, 372, 418, 421, 451, 454, 455, 458, 525, 528, 566, 569, 585, 588, 970], "up": [14, 15, 16, 17, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 147, 148], "hopefulli": [14, 15, 16, 18, 19, 20, 21, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 147], "paint": [14, 131], "pictur": [14, 131], "how": [14, 16, 17, 18, 19, 20, 21, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 147, 148, 970, 976, 992, 1003, 1004, 1005], "pleas": [14, 15, 16, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 147, 970], "check": [14, 15, 16, 18, 19, 26, 27, 28, 29, 30, 72, 73, 125, 130, 131, 133, 134, 135, 136, 147, 268, 282, 289, 290, 292, 304, 305, 344, 354, 589, 599, 614, 628, 635, 636, 637, 638, 655, 662, 663, 679, 681, 714, 729, 731, 866, 867, 876, 877, 878, 970], "out": [14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 31, 32, 37, 38, 39, 40, 47, 48, 49, 50, 51, 52, 53, 54, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 77, 78, 83, 84, 85, 86, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 133, 134, 135, 136, 147, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 236, 237, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 274, 276, 305, 350, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 601, 602, 603, 604, 606, 607, 608, 611, 612, 613, 615, 617, 618, 619, 620, 621, 622, 629, 642, 645, 646, 663, 696, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 992, 1000], "discuss": [14, 15, 16, 17, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 147, 148, 970], "faq": [14, 15, 16, 131, 133, 134, 135, 136, 147], "reach": [14, 15, 16, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 147, 305, 329, 333, 337, 866, 878], "discord": [14, 15, 16, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 147, 970], "you": [14, 15, 16, 17, 18, 19, 20, 21, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 147, 148, 970, 976], "question": [14, 15, 16, 18, 19, 118, 120, 131, 133, 134, 135, 136, 147, 148, 970], "With": [15, 16, 18, 39, 40, 41, 42, 59, 60, 72, 73, 74, 75, 83, 84, 85, 86, 93, 94, 97, 98, 101, 102, 105, 106, 118, 120, 131, 159, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 190, 193, 197, 232, 235, 268, 277, 280, 305, 327, 343, 355, 356, 359, 360, 369, 372, 373, 374, 377, 394, 397, 414, 417, 418, 421, 426, 429, 451, 454, 463, 466, 483, 486, 523, 524, 530, 533, 534, 537, 550, 553, 566, 569, 570, 573, 579, 580, 583, 584, 589, 590, 591, 592, 593, 594, 598, 606, 607, 614, 617, 618, 621, 622, 652, 657, 658, 659, 663, 665, 666, 668, 701, 704, 707, 708, 713, 714, 715, 718, 719, 720, 722, 723, 725, 726, 728, 742, 744, 771, 773, 786, 787, 790, 797, 800, 802, 803, 806, 807, 816, 819, 820, 823, 828, 831, 836, 839, 840, 841, 850, 853, 884, 885, 888, 889, 890, 891, 893, 894, 895, 897, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 915, 916, 919, 926, 927, 930, 959, 960, 963], "central": 15, "goal": [15, 20], "being": [15, 16, 18, 19, 72, 73, 118, 120, 123, 124, 125, 126, 127, 128, 129, 131, 134, 147, 148, 197, 198, 199, 589, 644, 649, 906, 913, 970], "would": [15, 18, 19, 21, 115, 117, 118, 120, 122, 123, 124, 125, 128, 129, 130, 131, 133, 135, 136, 148, 159, 180, 183, 305, 350, 970], "entir": [15, 16, 19, 72, 73, 118, 119, 120, 124, 125, 128, 133, 134, 135, 136, 148, 305, 349, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 992, 1001], "forgiven": 15, "rais": [15, 19, 69, 72, 73, 128, 131, 133, 268, 276, 355, 443, 446, 542, 545, 589, 599, 624, 633, 647, 654, 660, 714, 738, 741, 745, 777, 779, 802, 842, 845, 846, 849, 901, 904, 926, 931, 934, 939, 942, 959, 960, 963, 965, 968, 1004, 1005, 1008, 1012], "an": [15, 16, 18, 19, 20, 21, 23, 26, 29, 30, 67, 68, 69, 72, 73, 113, 114, 116, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 147, 148, 159, 170, 173, 175, 178, 185, 187, 196, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 237, 240, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 274, 275, 276, 277, 280, 288, 293, 294, 296, 305, 327, 331, 350, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588, 589, 600, 601, 602, 604, 606, 615, 616, 617, 629, 633, 635, 636, 637, 638, 658, 659, 660, 663, 679, 681, 696, 698, 699, 701, 704, 713, 714, 715, 718, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 745, 746, 748, 749, 751, 755, 757, 758, 760, 761, 762, 764, 765, 767, 774, 776, 777, 779, 780, 782, 802, 803, 806, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 832, 835, 836, 839, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 866, 872, 884, 885, 888, 889, 891, 892, 900, 901, 904, 905, 906, 907, 908, 912, 913, 914, 915, 916, 919, 921, 924, 926, 927, 930, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 970, 981, 982, 1004, 1005, 1008, 1009, 1010, 1012], "eyebrow": 15, "somehow": 15, "pytorch": [15, 16, 20, 121, 126, 127, 128, 129, 131, 133, 136, 148, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 970, 1008, 1009, 1010, 1011, 1012, 1013], "other": [15, 18, 19, 72, 73, 74, 75, 116, 117, 118, 120, 121, 124, 125, 128, 131, 133, 135, 136, 146, 147, 148, 194, 195, 197, 198, 199, 355, 447, 450, 589, 590, 593, 595, 663, 674, 889, 895, 897, 906, 913, 926, 947, 950, 955, 958, 970], "strong": [15, 148], "industri": 15, "back": [15, 124, 130, 131, 133, 148, 970, 976, 1004, 1005, 1008, 1012], "momentum": 15, "won": [15, 16, 19, 136], "ad": [15, 18, 19, 20, 113, 114, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 131, 135, 148, 589, 653, 654, 714, 729, 731, 802, 816, 819, 1014, 1015], "just": [15, 16, 18, 19, 117, 118, 120, 121, 128, 131, 133, 134, 148, 926, 927, 930, 992, 1001], "make": [15, 16, 18, 19, 20, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 131, 133, 134, 136, 305], "problem": [15, 19, 124, 133], "even": [15, 16, 18, 19, 117, 121, 126, 127, 129, 133, 134, 135, 136, 148, 355, 542, 545, 550, 553], "wors": 15, "rather": [15, 72, 73, 116, 117, 120, 125, 136, 148, 197, 198, 199, 305, 349, 589, 635, 636, 638, 663, 679, 681], "funni": 15, "comic": 15, "strip": 15, "easi": [15, 18, 19, 121, 125], "feasibl": 15, "space": [15, 197, 198, 199, 226, 227, 229, 230, 589, 616], "case": [15, 18, 19, 20, 26, 29, 30, 69, 72, 73, 74, 75, 76, 116, 117, 118, 121, 122, 124, 125, 126, 127, 128, 129, 131, 133, 135, 136, 148, 197, 232, 235, 305, 344, 351, 354, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 414, 417, 418, 421, 422, 425, 426, 429, 443, 446, 447, 450, 451, 454, 487, 490, 491, 494, 499, 502, 503, 506, 525, 528, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 579, 583, 584, 585, 588, 589, 633, 645, 646, 714, 742, 744, 802, 832, 835, 866, 869, 875, 926, 931, 934, 935, 938, 939, 942, 947, 950, 951, 954, 955, 958, 992, 1003, 1004, 1005, 1008, 1012], "unlik": [15, 118, 125, 305], "charger": 15, "charact": 15, "encod": [15, 134, 589, 616], "instant": [15, 970], "messag": [15, 19, 131, 133, 1017, 1018], "much": [15, 19, 116, 124, 125, 128, 131, 133, 134], "doe": [15, 19, 21, 23, 69, 72, 73, 115, 116, 117, 118, 120, 121, 122, 126, 128, 129, 131, 133, 134, 148, 355, 414, 417, 589, 633, 802, 841], "mandat": [15, 120, 128], "adopt": [15, 19, 124], "continu": [15, 16, 119, 120, 148], "own": [15, 16, 18, 117, 131, 148], "signatur": [15, 23, 69, 116, 117, 118, 125, 126, 127, 128, 129, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 355, 356, 359, 374, 377, 414, 417, 418, 421, 426, 429, 451, 454, 534, 537, 566, 569, 570, 573, 714, 726, 728, 802, 816, 819, 836, 839, 906, 907, 908, 912, 915, 916, 919, 926, 931, 934], "replac": [15, 19, 21, 72, 73, 118, 120, 123, 125, 126, 127, 131, 133, 136, 148, 589, 645, 646, 802, 803, 806, 889, 890], "your": [15, 16, 17, 18, 20, 21, 116, 117, 134, 135, 148, 970], "10": [15, 18, 21, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 118, 125, 131, 133, 134, 197, 220, 229, 230, 231, 305, 355, 394, 397, 398, 401, 426, 429, 463, 466, 483, 486, 491, 494, 566, 569, 589, 607, 617, 644, 649, 663, 683, 684, 685, 686, 701, 707, 714, 723, 725, 726, 728, 752, 754, 771, 773, 802, 820, 823, 828, 831, 841, 884, 885, 888, 889, 890, 891, 892, 893, 901, 904, 906, 907, 926, 927, 930, 931, 934, 1008, 1010], "100": [15, 16, 101, 102, 134, 135, 136, 148, 355, 566, 569, 891, 893, 970], "despit": [15, 125, 127], "distinct": [15, 117, 125, 128, 130, 906, 907, 908, 912, 914, 970], "still": [15, 72, 73, 117, 120, 126, 133, 135, 148, 970], "believ": [15, 19], "share": [15, 72, 73, 118, 120, 121, 122, 125, 131, 268, 300], "bring": [15, 131, 132], "benefit": [15, 16, 18, 19, 124, 125, 128, 133, 134, 148], "unrel": [15, 19], "what": [15, 16, 19, 115, 117, 118, 123, 125, 129, 130, 131, 133, 134, 135, 136, 147, 148, 970], "again": [15, 16, 19, 116, 118, 125, 128, 134, 136, 148], "contrari": 15, "bumpi": 15, "road": 15, "allud": [15, 134], "most": [15, 18, 19, 72, 73, 116, 120, 121, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 148, 714, 729, 731], "technolog": 15, "sector": [15, 355, 365, 368, 378, 381, 390, 393], "full": [15, 16, 19, 74, 75, 117, 126, 129, 131, 148, 197, 268, 288, 355, 463, 466, 483, 486, 701, 707, 714, 758, 760, 762, 764, 765, 767, 884, 885, 888], "success": 15, "reason": [15, 19, 116, 118, 121, 124, 125, 126, 128, 131, 133, 355, 546, 549], "build": [15, 17, 18, 121, 130, 132, 135, 136, 148, 906, 907, 908, 912, 914, 970, 992, 1003, 1004, 1005], "custom": [15, 23, 69, 135], "comput": [15, 16, 18, 72, 73, 121, 125, 131, 134, 148, 305, 349, 355, 369, 372, 394, 397, 406, 409, 414, 417, 435, 438, 439, 442, 459, 462, 463, 466, 479, 482, 483, 486, 507, 510, 511, 514, 515, 518, 519, 522, 525, 528, 530, 533, 534, 537, 589, 601, 602, 604, 607, 608, 663, 665, 668, 670, 672, 674, 675, 677, 683, 685, 687, 689, 691, 693, 696, 698, 701, 702, 703, 704, 705, 706, 707, 708, 710, 712, 714, 715, 718, 720, 722, 729, 731, 732, 734, 735, 737, 738, 741, 742, 744, 758, 760, 761, 762, 764, 765, 767, 777, 779, 780, 782, 786, 787, 790, 792, 795, 797, 800, 866, 872, 906, 907, 908, 912, 914, 926, 927, 930, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958], "thank": [15, 134], "interoper": 15, "compon": [15, 131], "bio": [15, 18], "hardwar": [15, 18], "initi": [15, 19, 69, 72, 73, 74, 75, 76, 122, 126, 127, 305, 701, 711, 985, 986, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1008, 1012], "pcie": 15, "interfac": [15, 136, 148], "motherboard": 15, "raid": 15, "storag": [15, 134], "virtual": [15, 19, 21], "bluetooth": 15, "wireless": 15, "exchang": 15, "btx": 15, "form": [15, 17, 26, 27, 28, 29, 30, 72, 73, 121, 135, 136, 197, 201, 204, 237, 240, 250, 254, 255, 259, 589, 595, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 701, 714, 715, 718, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 746, 748, 749, 751, 755, 757, 758, 760, 762, 764, 765, 767, 768, 770, 774, 776, 866, 868, 878], "factor": [15, 305, 314, 347, 348, 349, 663, 665, 668, 670, 672, 683, 685, 687, 689, 701, 702, 703, 704, 705, 706, 707, 708, 714, 715, 718, 992, 993, 994, 995, 996, 997, 998, 999, 1008, 1009, 1010, 1011], "sata": 15, "connect": [15, 18, 135, 136, 992, 1002, 1003], "host": [15, 148], "bu": 15, "adapt": [15, 663, 687, 689, 1008, 1011], "devic": [15, 19, 31, 32, 36, 72, 73, 77, 78, 82, 101, 102, 115, 116, 121, 123, 126, 133, 134, 148, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 307, 308, 309, 310, 311, 312, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 589, 617, 618, 621, 642, 645, 646, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 981, 982, 983, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015], "html": [15, 21, 117, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 355, 356, 359, 374, 377, 414, 417, 418, 421, 426, 429, 451, 454, 534, 537, 566, 569, 570, 573, 714, 726, 728, 802, 816, 819, 836, 839, 906, 907, 908, 912, 915, 916, 919, 926, 931, 934], "enabl": [15, 18, 19, 72, 73, 74, 75, 76, 120, 121, 124, 125, 128, 130, 131, 132, 134, 136, 148], "anyon": [15, 17, 148], "websit": 15, "tcp": 15, "ip": 15, "node": [15, 72, 73, 125, 866, 867, 876, 877], "commun": [15, 17, 19, 20, 148, 970, 976], "network": [15, 121, 125, 131, 135, 147, 701, 710, 970, 978, 992, 1004, 1005], "smtp": 15, "possibl": [15, 17, 18, 19, 20, 117, 118, 120, 125, 126, 128, 131, 134, 147, 148, 589, 639, 657, 926, 931, 934, 939, 942], "send": 15, "gmail": 15, "outlook": 15, "pop": [15, 69], "email": 15, "ieee": [15, 196, 268, 288, 355, 369, 372, 447, 450, 525, 528, 546, 549, 566, 569], "754": [15, 196, 268, 288, 355, 369, 372, 447, 450, 525, 528, 546, 549, 566, 569], "allow": [15, 131, 148, 197, 226, 227, 229, 230, 589, 639, 1004, 1005], "calcul": [15, 72, 73, 74, 75, 76, 117, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 422, 425, 426, 429, 430, 433, 443, 446, 447, 450, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 525, 528, 542, 545, 558, 561, 562, 565, 566, 569, 574, 578, 579, 583, 584, 786, 787, 790, 792, 795, 797, 800, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958], "live": [15, 16], "depend": [15, 18, 19, 117, 123, 125, 126, 131, 148, 268, 274, 355, 356, 359, 361, 364, 365, 368, 374, 377, 378, 381, 382, 385, 386, 389, 422, 425, 426, 429, 443, 446, 447, 450, 487, 490, 491, 494, 495, 498, 499, 502, 542, 545, 558, 561, 562, 565, 579, 583, 584, 714, 729, 731, 758, 760, 762, 764, 765, 767, 901, 905, 915, 916, 919, 921, 924], "did": [15, 20, 136], "aris": [15, 148], "until": [15, 19, 148, 970], "substanti": [15, 19, 120, 124], "innov": 15, "growth": 15, "usag": [15, 131, 305, 349], "relev": [15, 18, 20, 118, 125, 126, 134, 1008, 1009, 1010, 1011, 1012, 1013], "area": [15, 128, 146, 355, 365, 368, 378, 381, 390, 393, 970], "necess": 15, "parti": [15, 148], "could": [15, 16, 18, 19, 118, 120, 125, 126, 128, 131, 133, 134, 135, 906, 907, 908, 912, 914], "easili": [15, 19, 134, 135, 136, 148, 970], "engag": [15, 17, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "regard": [15, 125, 305], "effect": [15, 117, 124, 125, 129, 148, 197, 232, 235, 663, 691, 693, 926, 947, 950, 955, 958], "2015": 15, "sinc": [15, 18, 19, 148], "alongsid": 15, "machin": [15, 18, 121, 147, 268, 288, 291, 355, 459, 462, 714, 746, 748, 755, 757], "given": [15, 16, 18, 19, 20, 21, 69, 72, 73, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 133, 135, 136, 147, 197, 198, 199, 206, 226, 227, 229, 230, 305, 338, 344, 346, 347, 348, 349, 351, 354, 589, 607, 608, 618, 621, 645, 646, 661, 663, 665, 668, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 701, 702, 703, 704, 705, 706, 707, 708, 714, 783, 785, 786, 787, 790, 792, 795, 797, 800, 802, 803, 806, 816, 819, 820, 823, 828, 831, 836, 839, 841, 854, 857, 866, 873, 874, 889, 891, 892, 894, 895, 897, 900, 915, 921, 924, 981, 982], "frame": [15, 147], "less": [15, 19, 37, 38, 72, 73, 83, 84, 118, 125, 129, 130, 131, 355, 361, 364, 365, 368, 374, 377, 386, 389, 418, 421, 487, 490, 491, 494, 499, 502, 542, 545, 546, 549, 554, 557, 566, 569, 714, 746, 748, 755, 757, 780, 782, 889, 895, 897, 926, 955, 958], "matur": [15, 148], "state": [15, 117, 129, 130, 131, 132, 134, 147, 355, 525, 528, 701, 711, 970, 978, 979, 980, 981, 982, 983, 985, 986, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "than": [15, 19, 72, 73, 116, 118, 120, 125, 128, 131, 134, 135, 136, 148, 197, 198, 199, 268, 288, 305, 349, 355, 361, 364, 365, 368, 374, 377, 386, 389, 402, 405, 410, 413, 418, 421, 451, 454, 455, 458, 487, 490, 491, 494, 499, 502, 523, 542, 545, 546, 549, 554, 557, 566, 569, 585, 588, 589, 635, 636, 638, 663, 679, 681, 714, 720, 722, 738, 741, 746, 748, 755, 757, 780, 782, 802, 803, 806, 820, 823, 842, 845, 889, 895, 897, 906, 907, 908, 912, 914, 926, 943, 946, 947, 950, 951, 954, 955, 958], "preced": [15, 135], "mention": [15, 18, 19, 118, 121, 128, 129], "aros": 15, "70": [15, 714, 752, 754, 926, 927, 930], "80": [15, 714, 752, 754, 926, 927, 930], "90": [15, 101, 102, 355, 414, 417, 550, 553, 714, 752, 754, 891, 893, 926, 927, 930], "effort": [15, 17, 148], "stage": [15, 17, 19, 21, 115, 970], "complet": [15, 19, 20, 72, 73, 124, 125, 133, 134, 714, 758, 760], "natur": [15, 118, 124, 125, 147, 355, 443, 446, 487, 490, 495, 498, 714, 761], "like": [15, 18, 19, 21, 69, 115, 116, 117, 118, 120, 127, 128, 129, 130, 131, 133, 134, 135, 136, 147, 148, 663, 679, 681, 889, 895, 897, 970], "certainli": 15, "mission": [15, 970], "creat": [15, 17, 18, 19, 21, 23, 69, 72, 73, 126, 127, 128, 131, 132, 135, 146, 147, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 220, 221, 224, 226, 227, 229, 230, 237, 240, 242, 243, 245, 248, 260, 262, 263, 267, 305, 314, 315, 589, 617, 618, 621, 642, 645, 646, 657, 663, 698, 889, 890, 891, 892, 895, 897, 970, 976, 981, 982, 983, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "At": [15, 20], "process": [15, 16, 17, 18, 19, 21, 121, 125, 131, 136, 305, 314, 315, 344, 354], "ourselv": 15, "lead": [15, 16, 72, 73, 74, 75, 76, 148, 714, 758, 760, 765, 767], "quansight": 15, "compani": 15, "made": [15, 19, 20, 125, 128, 131, 133], "organ": [15, 116, 121, 124, 125], "panda": 15, "scipi": 15, "conda": [15, 18, 21], "dask": [15, 906, 907, 908, 912, 914], "apach": 15, "onnx": 15, "scikit": 15, "jupyt": 15, "aw": 15, "cupi": 15, "net": [15, 16, 131, 136], "sympi": 15, "rai": [15, 355, 386, 389], "modin": 15, "spyder": 15, "includ": [15, 19, 20, 72, 73, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 147, 148, 197, 198, 199, 201, 204, 237, 240, 589, 628, 662, 714, 780, 782, 866, 867, 889, 895, 897, 901, 903, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 973, 975, 992, 1002, 1003, 1006, 1007], "member": [15, 19], "googl": [15, 970], "octoml": 15, "einop": [15, 72, 73, 589, 611, 612, 613], "further": [15, 16, 19, 21, 118, 124, 130, 134, 135, 970], "sponsor": 15, "lg": 15, "electron": 15, "microsoft": 15, "d": [15, 16, 17, 18, 69, 101, 102, 115, 125, 134, 589, 598, 606, 701, 702, 703, 704, 705, 706, 707, 708, 714, 726, 728, 752, 754, 891, 893, 970, 976], "shaw": 15, "co": [15, 37, 38, 83, 84, 131, 147, 355, 589, 616, 970], "intel": 15, "togeth": [15, 72, 73, 124, 125, 135, 136, 148, 1014, 1015], "major": [15, 126, 127, 148, 901, 904], "involv": [15, 17, 21, 115, 126, 136, 268, 296, 355, 369, 372, 525, 528, 970, 976], "anoth": [15, 18, 19, 72, 73, 121, 125, 126, 133, 136, 197, 215, 218, 268, 275, 277, 280], "promis": 15, "sign": [15, 18, 37, 38, 83, 84, 132, 136, 197, 198, 199, 355, 356, 359, 369, 372, 386, 389, 410, 413, 525, 528, 546, 549, 714, 761, 906, 907, 908, 912, 914, 926, 943, 946, 951, 954], "pursuit": 15, "unif": [15, 17, 133, 970, 976], "clearli": [15, 20, 118], "lot": [15, 16, 123, 133, 148], "thought": [15, 18, 19, 129], "care": [15, 19, 136], "attent": [15, 19, 124, 125, 701, 712, 713, 992, 1003], "gone": [15, 130], "simplifi": [15, 131, 132, 133, 135], "compat": [15, 129, 148, 268, 276, 355, 369, 372, 386, 389, 394, 397, 402, 405, 406, 409, 410, 413, 414, 417, 430, 433, 435, 438, 455, 458, 463, 466, 479, 482, 483, 486, 503, 506, 507, 510, 515, 518, 519, 522, 525, 528, 534, 537, 542, 545, 546, 549, 574, 578, 714, 746, 748, 755, 757, 762, 764, 771, 773, 777, 779, 780, 782, 802, 832, 835, 901, 903, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 970], "excit": [15, 17, 115, 970], "complianc": 15, "hope": [15, 148], "due": [15, 18, 125, 128, 355, 525, 528], "suit": [15, 18, 115, 119, 120, 134, 147], "some": [15, 16, 18, 19, 20, 72, 73, 116, 117, 118, 121, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 147, 148, 355, 447, 450, 663, 665, 668, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 699, 701, 709, 970, 992, 1000], "motiv": [15, 133], "great": [15, 16, 120, 131, 133], "convinc": 15, "celebr": 15, "encourag": [15, 147, 148, 970, 976], "foundat": 15, "point": [16, 19, 117, 118, 124, 128, 129, 131, 133, 134, 147, 196, 197, 198, 199, 206, 212, 213, 220, 242, 243, 260, 262, 268, 274, 288, 293, 296, 355, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 443, 446, 447, 450, 451, 454, 487, 490, 491, 494, 499, 502, 503, 506, 525, 528, 542, 545, 546, 549, 550, 553, 558, 561, 562, 565, 566, 569, 579, 583, 584, 585, 588, 714, 715, 718, 723, 725, 729, 731, 732, 734, 735, 737, 746, 748, 755, 757, 758, 760, 762, 764, 765, 767, 780, 782, 906, 907, 908, 912, 914, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958], "mai": [16, 18, 19, 23, 69, 125, 133, 135, 197, 198, 199, 215, 218, 305, 350, 355, 435, 438, 463, 466, 483, 486, 511, 514, 515, 518, 589, 610, 906, 907, 908, 912, 914, 915, 916, 919, 921, 924, 926, 931, 934, 935, 938, 939, 942], "ask": [16, 131, 133, 148, 970], "perfectli": 16, "happi": [16, 18, 148], "abund": 16, "better": [16, 115, 130, 133, 134, 135], "ll": [16, 17, 19, 118, 125, 128, 134], "give": [16, 18, 19, 115, 117, 118, 122, 129, 133, 802, 832, 835], "two": [16, 69, 74, 75, 117, 118, 120, 124, 125, 130, 134, 136, 197, 198, 199, 212, 213, 232, 235, 250, 254, 255, 259, 268, 295, 300, 355, 410, 413, 550, 553, 589, 597, 714, 715, 718, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 742, 744, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 762, 764, 765, 767, 768, 770, 774, 776, 777, 779, 802, 850, 853, 906, 907, 908, 912, 913, 914, 970], "streamlin": 16, "workflow": [16, 19, 134, 146, 970], "save": [16, 72, 73, 148, 589, 650, 1004, 1005], "week": [16, 19, 20, 970], "let": [16, 117, 118, 125, 126, 127, 131, 133, 134, 135, 136, 926, 935, 938, 947, 950, 951, 954, 955, 958, 970], "sai": [16, 18, 123, 133], "deepmind": 16, "releas": [16, 18, 20, 970], "awesom": 16, "paper": 16, "love": 16, "choic": [16, 18, 128, 134, 926, 947, 950, 955, 958], "perceiverio": 16, "happen": [16, 18, 19, 134], "slew": 16, "rush": 16, "f": [16, 21, 69, 115, 125, 131, 134, 136, 355, 459, 462, 589, 630, 634], "g": [16, 115, 125, 148, 268, 273, 296, 305, 321, 889, 894, 895, 897, 906, 907, 908, 912, 914, 926, 931, 934, 939, 942, 943, 946, 951, 954], "inevit": 16, "deviat": [16, 884, 885, 888, 889, 894, 926, 947, 950, 1006, 1007], "origin": [16, 72, 73, 74, 75, 76, 122, 123, 126, 131, 133, 355, 386, 389, 714, 742, 744, 802, 832, 835, 836, 839], "often": [16, 121, 148], "erron": 16, "train": [16, 121, 125, 127, 134, 135, 136, 146, 147, 148, 663, 665, 668, 670, 672, 683, 685, 970], "poor": 16, "converg": 16, "perform": [16, 72, 73, 116, 118, 120, 121, 122, 124, 125, 127, 128, 129, 131, 134, 148, 159, 180, 183, 197, 226, 227, 229, 230, 305, 589, 607, 611, 612, 613, 631, 632, 633, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 701, 709, 711, 714, 765, 767, 862, 863, 864, 865, 866, 873, 874, 959, 960, 963, 965, 968], "issu": [16, 17, 20, 131, 133, 135, 148], "etc": [16, 18, 19, 20, 67, 68, 72, 73, 113, 114, 116, 118, 120, 124, 125, 126, 129, 131, 133, 134, 148, 197, 226, 227, 229, 230, 589, 617, 618, 621, 642, 645, 646, 889, 890, 891, 892, 895, 897, 906, 907, 908, 912, 914, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015], "publish": [16, 148], "manag": [16, 17, 128, 148, 305], "get": [16, 17, 18, 20, 69, 72, 73, 115, 121, 126, 127, 128, 131, 132, 133, 134, 135, 268, 286, 287, 288, 291, 305, 314, 315, 324, 325, 338, 339, 344, 348, 351, 354, 589, 596, 623, 624, 625, 644, 970, 976, 992, 1001], "work": [16, 18, 19, 20, 115, 120, 125, 126, 127, 130, 131, 132, 133, 135, 136, 970, 976], "repositori": [16, 18, 19, 21, 119], "pull": [16, 17, 18, 21, 116, 148], "request": [16, 17, 116, 305, 341], "confus": [16, 128], "do": [16, 18, 19, 20, 72, 73, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 148, 355, 546, 549, 589, 633, 663, 679, 681, 699, 866, 867, 876, 877, 878], "don": [16, 18, 19, 20, 67, 68, 113, 114, 126, 135, 148], "expect": [16, 148, 589, 596, 970], "codebas": [16, 17, 115, 116, 128, 130, 305, 347, 348, 970], "total": [16, 17, 19, 72, 73, 74, 75, 76, 118, 120, 127, 134, 135, 148, 305, 351, 901, 904, 926, 947, 950, 955, 958], "hour": 16, "spent": 16, "spin": 16, "off": [16, 130, 714, 726, 728, 774, 776], "test": [16, 18, 20, 115, 118, 148, 268, 293, 294, 355, 467, 470, 471, 474, 475, 478, 959, 960, 963, 965, 968], "error": [16, 18, 72, 73, 120, 124, 127, 129, 133, 148, 159, 160, 163, 305, 355, 439, 442, 926, 931, 934, 939, 942, 1004, 1005, 1008, 1012], "iter": [16, 26, 27, 28, 29, 30, 67, 68, 69, 72, 73, 74, 75, 76, 113, 114, 125, 131, 134, 194, 195, 305, 327, 328, 330, 331, 332, 333, 336, 349, 589, 590, 593, 646, 651, 802, 812, 815, 828, 831, 841, 854, 857, 858, 861, 866, 867, 868, 872, 876, 877, 878], "address": [16, 19, 20, 124, 131], "sake": 16, "singl": [16, 19, 72, 73, 116, 118, 120, 121, 123, 125, 128, 129, 131, 134, 135, 136, 148, 305, 314, 315, 334, 335, 336, 337, 589, 659, 662, 889, 894, 895, 897, 906, 907], "multipl": [16, 19, 72, 73, 83, 84, 85, 86, 93, 94, 97, 98, 101, 102, 118, 121, 125, 148, 355, 369, 373, 525, 528, 589, 590, 592, 593, 594, 618, 622, 639, 714, 715, 718, 719, 735, 737, 802, 803, 806, 807, 836, 839, 840, 841, 884, 885, 888, 891, 893, 901, 902, 903, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 992, 1002], "line": [16, 18, 118, 124, 132, 133, 134, 135, 146, 970, 976], "convert": [16, 26, 27, 28, 29, 30, 72, 73, 124, 131, 148, 149, 157, 197, 201, 204, 237, 240, 268, 272, 273, 305, 321, 322, 323, 324, 344, 351, 354, 589, 652, 658, 659, 714, 783, 785, 866, 868, 878, 879, 982], "directli": [16, 19, 116, 117, 121, 124, 125, 126, 127, 128, 129, 131, 133, 135, 136, 147, 148, 866, 878], "graph": [16, 121, 125, 132, 148, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 906, 907, 908, 912, 914, 1004, 1005], "guarante": [16, 124, 148, 906, 907], "turn": [16, 118, 125], "4": [16, 21, 37, 38, 47, 48, 51, 52, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 118, 122, 125, 131, 133, 134, 135, 136, 159, 165, 168, 170, 173, 180, 183, 189, 190, 192, 197, 221, 224, 232, 235, 245, 248, 263, 267, 268, 277, 279, 280, 281, 305, 327, 343, 355, 356, 358, 359, 360, 369, 370, 371, 372, 373, 374, 377, 386, 389, 394, 397, 414, 417, 418, 420, 421, 426, 429, 451, 453, 454, 463, 466, 483, 486, 523, 524, 530, 533, 534, 537, 550, 553, 566, 569, 570, 573, 579, 580, 582, 583, 584, 589, 598, 607, 616, 617, 618, 620, 621, 622, 652, 657, 663, 665, 667, 668, 669, 701, 704, 705, 706, 708, 711, 713, 714, 715, 716, 718, 720, 722, 723, 725, 726, 728, 735, 737, 746, 748, 752, 754, 771, 773, 774, 776, 786, 797, 800, 802, 803, 804, 805, 806, 807, 808, 811, 816, 819, 820, 823, 828, 831, 832, 835, 836, 838, 839, 840, 841, 850, 853, 884, 885, 888, 889, 890, 891, 893, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 915, 916, 919, 926, 927, 930, 931, 934, 959, 960, 963, 970, 1008, 1009, 1010, 1011, 1013], "step": [16, 18, 19, 21, 41, 42, 72, 73, 77, 78, 87, 88, 118, 122, 124, 125, 126, 127, 131, 134, 135, 136, 147, 197, 198, 199, 200, 226, 227, 229, 230, 305, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 683, 684, 685, 686, 687, 689, 691, 693, 862, 863, 864, 865, 970, 1008, 1009, 1010, 1011, 1012, 1013], "take": [16, 17, 18, 19, 117, 118, 120, 125, 126, 127, 131, 133, 135, 136, 148, 355, 414, 417, 970, 976], "few": [16, 19, 20, 121, 125, 126, 127, 128, 132, 133, 134, 135, 146, 970, 976], "second": [16, 18, 118, 128, 133, 268, 295, 300, 305, 336, 355, 369, 372, 394, 397, 402, 405, 406, 409, 410, 413, 414, 417, 435, 438, 455, 458, 463, 466, 479, 482, 483, 486, 503, 506, 507, 510, 515, 518, 519, 522, 525, 528, 534, 537, 542, 545, 574, 578, 589, 597, 644, 649, 663, 665, 668, 670, 672, 683, 685, 714, 720, 722, 726, 728, 729, 731, 738, 741, 752, 754, 758, 760, 765, 767, 771, 773, 777, 779, 802, 846, 849, 850, 853, 862, 864, 906, 907, 908, 912, 1008, 1009, 1010], "automat": [16, 18, 19, 121, 125, 129, 130, 131, 132, 135, 136, 970], "convers": [16, 27, 28, 29, 30, 72, 73, 130, 132, 136, 147, 148, 970, 976], "everyon": [16, 17, 19, 148], "regardless": [16, 17, 72, 73, 133, 136, 194, 195], "wouldn": 16, "nice": [16, 120], "write": [16, 19, 20, 21, 72, 73, 115, 116, 117, 118, 120, 121, 122, 128, 131, 133, 136, 159, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 193, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 274, 276, 305, 350, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588, 589, 601, 602, 604, 607, 608, 611, 612, 613, 615, 617, 618, 621, 629, 642, 645, 646, 663, 696, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 718, 720, 722, 723, 725, 726, 728, 732, 734, 735, 737, 738, 741, 742, 744, 746, 748, 749, 751, 752, 754, 755, 757, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 787, 790, 792, 795, 797, 800, 802, 803, 806, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 884, 885, 888, 889, 890, 891, 892, 894, 895, 897, 900, 901, 905, 906, 914, 915, 916, 919, 921, 924, 926, 927, 930, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968], "onc": [16, 18, 19, 125, 126, 127, 131, 134, 148, 305, 349, 714, 735, 737, 765, 767, 889, 890], "know": [16, 19, 906, 907, 908, 912, 914], "among": [16, 72, 73, 120], "frantic": 16, "port": 16, "lucid": 16, "honk": 16, "improv": [16, 19, 121, 131], "understand": [16, 18, 19, 20, 21, 115, 117, 118, 119, 129, 130], "pattern": [16, 72, 73, 117, 126, 589, 611, 612, 613], "hasn": 16, "chang": [16, 18, 19, 20, 21, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 117, 119, 120, 125, 131, 135, 148, 189, 190, 191, 192, 201, 202, 207, 208, 215, 216, 221, 222, 237, 238, 245, 246, 250, 252, 255, 257, 263, 265, 277, 278, 279, 281, 305, 356, 357, 358, 360, 369, 370, 371, 373, 418, 419, 420, 451, 452, 453, 579, 580, 581, 582, 590, 591, 592, 594, 618, 619, 620, 622, 665, 666, 667, 669, 714, 715, 716, 717, 719, 720, 722, 802, 803, 804, 805, 807, 832, 835, 836, 837, 838, 840, 866, 868, 878, 891, 893, 908, 909, 910, 911, 970, 976], "now": [16, 18, 21, 72, 73, 116, 123, 125, 126, 129, 133, 134, 136, 147, 148, 992, 1003, 1004, 1005], "spend": 16, "torchvis": 16, "probabl": [16, 701, 709, 889, 890, 992, 1000], "sonnet": 16, "about": [16, 18, 19, 119, 130, 131, 135, 136, 148, 268, 288, 291], "next": [16, 18, 19, 20, 21, 117, 118, 122, 123, 133, 134, 268, 288, 970, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013], "everyth": [16, 19, 20, 132, 148], "zero": [16, 72, 73, 74, 75, 118, 124, 125, 126, 127, 129, 131, 134, 135, 159, 165, 168, 170, 173, 197, 206, 212, 213, 232, 235, 250, 254, 255, 259, 263, 267, 268, 274, 355, 369, 372, 374, 377, 402, 405, 426, 429, 447, 450, 451, 454, 511, 514, 515, 518, 523, 524, 525, 528, 530, 533, 534, 537, 542, 545, 546, 549, 550, 553, 566, 569, 570, 573, 579, 583, 584, 589, 607, 642, 645, 646, 663, 665, 668, 670, 672, 683, 685, 687, 689, 701, 709, 714, 715, 718, 723, 725, 738, 741, 746, 748, 755, 757, 777, 779, 780, 782, 802, 816, 819, 820, 823, 828, 831, 836, 839, 858, 861, 884, 885, 888, 889, 891, 892, 901, 902, 903, 904, 906, 907, 908, 912, 914, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 970, 983, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1008, 1009, 1010, 1011], "need": [16, 18, 19, 20, 21, 116, 117, 118, 119, 121, 124, 125, 128, 131, 133, 134, 147, 148, 589, 601, 602, 604, 802, 803, 806, 816, 819], "said": 16, "high": [16, 20, 72, 73, 101, 102, 134, 889, 891, 892, 893, 895, 896, 897, 898], "level": [16, 17, 20, 121, 130, 131, 134, 135, 136, 148], "optim": [16, 128, 132, 134, 136, 147, 305, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 862, 863, 864, 865, 970, 1009, 1010, 1011, 1013], "trainer": [16, 146, 148, 970], "statu": 16, "quo": 16, "kera": 16, "dopamin": 16, "ignit": 16, "catalyst": 16, "lightn": 16, "fastai": 16, "haiku": [16, 136], "flax": [16, 136, 148], "trax": [16, 136], "objax": [16, 136], "idea": [16, 147], "fulli": [16, 124, 125, 129, 131, 132, 133, 134, 135, 136, 148, 992, 1002, 1003], "offer": [16, 135], "strongli": [17, 18, 970, 976], "welcom": [17, 18, 19, 970, 976], "absolut": [17, 72, 73, 355, 356, 359, 714, 761], "skill": 17, "whether": [17, 18, 26, 27, 28, 29, 30, 72, 73, 74, 75, 76, 113, 114, 126, 128, 129, 159, 160, 163, 194, 195, 268, 274, 286, 292, 293, 294, 304, 305, 324, 325, 336, 340, 341, 344, 345, 349, 352, 354, 355, 475, 478, 589, 590, 593, 597, 598, 607, 610, 614, 616, 626, 628, 630, 633, 634, 635, 636, 637, 638, 639, 651, 655, 661, 662, 663, 670, 672, 674, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 696, 701, 709, 714, 729, 731, 862, 863, 864, 865, 866, 867, 868, 872, 876, 877, 878, 879, 889, 890, 959, 960, 963, 965, 968, 981, 982, 992, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "vetern": 17, "beginn": 17, "start": [17, 18, 19, 20, 21, 72, 73, 77, 78, 115, 117, 118, 126, 130, 131, 133, 134, 135, 147, 148, 197, 198, 199, 200, 226, 227, 228, 229, 230, 231, 305, 320], "aspect": [17, 134, 970], "guid": [17, 18, 19, 120, 970], "through": [17, 19, 20, 115, 118, 121, 122, 125, 130, 131, 133, 134, 135, 136, 147, 355, 386, 389], "journei": [17, 970, 976], "inclusvi": 17, "big": [17, 148], "team": [17, 18, 19], "board": 17, "contributor": [17, 18, 19, 130, 970], "split": [17, 19, 72, 73, 130, 131, 148, 305, 314, 330, 331, 332, 333, 347, 348, 349, 589, 639, 802, 970], "section": [17, 19, 20, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 906, 907, 908, 912, 914], "below": [17, 18, 20, 21, 115, 116, 118, 121, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 147, 197, 250, 254, 255, 259, 355, 394, 397, 414, 417, 426, 429, 550, 553, 584, 714, 723, 725, 726, 728, 774, 776, 802, 816, 819, 820, 823, 906, 907, 915, 916, 919, 970], "best": [17, 18, 19, 20, 21, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 589, 639], "go": [17, 18, 19, 20, 115, 116, 118, 125, 130, 134, 148, 866, 877], "finish": [17, 18, 115, 970], "dive": [17, 19, 20, 130, 133, 134, 148, 970], "right": [17, 18, 19, 72, 73, 115, 118, 134, 355, 402, 405, 410, 413, 714, 765, 767], "environ": [17, 19, 21, 147], "basic": [17, 20, 21], "fork": [17, 18, 589, 640], "doc": [17, 20, 117, 129, 131, 134, 135, 970], "document": [17, 19, 132, 134, 136], "local": [17, 18, 21, 121], "task": [17, 19, 147, 862, 863, 864, 865, 970], "help": [17, 18, 23, 69, 118, 122, 124, 125, 133, 134, 135, 146, 589, 595, 926, 951, 954, 970], "video": [17, 19, 117, 118, 129], "realli": [18, 125, 148], "contribut": [18, 19, 20, 131, 976], "toward": [18, 131, 802, 836, 839, 970, 976], "page": [18, 19, 132, 136, 146, 970, 976], "explain": [18, 19, 20, 116, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 970, 976], "main": [18, 21, 123, 125, 197, 212, 213, 250, 254, 255, 259, 714, 726, 728, 774, 776], "prefer": [18, 125], "mode": [18, 47, 48, 72, 73, 118, 125, 148, 194, 195, 305, 334, 335, 336, 337, 349, 355, 369, 372, 525, 528, 714, 758, 759, 760], "git": [18, 19], "recurs": [18, 21, 26, 27, 28, 29, 30, 72, 73, 121, 125, 135, 148, 866, 867, 868, 876, 877, 878], "submodul": [18, 19, 20, 21, 119, 120, 121, 127, 130, 131, 135, 970, 1006, 1007, 1014, 1015], "com": 18, "unifyai": [18, 21], "http": [18, 117, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 355, 356, 359, 374, 377, 414, 417, 418, 421, 426, 429, 451, 454, 534, 537, 566, 569, 570, 573, 663, 665, 668, 670, 672, 714, 726, 728, 802, 816, 819, 836, 839, 906, 907, 908, 912, 915, 916, 919, 926, 931, 934], "gh": 18, "your_fold": 18, "id": [18, 124, 125, 305, 324, 1004, 1005], "cours": [18, 19, 118, 134, 148], "whatev": [18, 148], "integr": [18, 120, 268, 274], "familiar": [18, 20], "decid": [18, 72, 73, 866, 877], "sure": [18, 20, 119], "elig": 18, "free": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 147, 970], "student": 18, "licenc": 18, "peopl": [18, 19, 115], "seem": [18, 135, 148], "miss": [18, 118, 120, 124, 125, 1008, 1012], "add": [18, 19, 20, 37, 38, 67, 68, 72, 73, 74, 75, 83, 84, 85, 86, 113, 114, 115, 116, 117, 121, 122, 124, 125, 129, 131, 133, 148, 355, 356, 359, 373, 590, 594, 884, 885, 888, 970, 976, 1006, 1007], "explicit": [18, 21, 125, 126, 128, 131, 148], "remind": 18, "channel": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 589, 616, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002], "pace": 18, "updat": [18, 19, 20, 21, 69, 72, 73, 115, 118, 119, 123, 124, 125, 126, 129, 131, 133, 134, 136, 148, 305, 314, 589, 633, 645, 646, 663, 665, 668, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 701, 711, 862, 863, 864, 866, 873, 874, 882, 883, 981, 982, 1008, 1009, 1010, 1011, 1012, 1013], "suggest": [18, 19, 116], "latest": [18, 20, 21, 117, 148, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 355, 356, 359, 374, 377, 414, 417, 418, 421, 426, 429, 451, 454, 534, 537, 566, 569, 570, 573, 714, 726, 728, 802, 816, 819, 836, 839, 906, 907, 908, 912, 915, 916, 919, 926, 931, 934, 992, 1001], "packag": [18, 21, 148], "ensur": [18, 19, 120, 124, 126, 129, 589, 633], "align": [18, 72, 73, 131, 133, 970, 976], "accord": [18, 21, 72, 73, 121, 126, 268, 277, 280, 288, 355, 369, 372, 410, 413, 525, 528, 589, 617, 645, 646, 714, 777, 779, 802, 812, 815, 858, 861, 926, 947, 950, 955, 958], "stabl": [18, 61, 62, 107, 108, 131, 148, 589, 624, 625, 647, 648, 653, 654, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925], "pypi": [18, 20, 148], "mayb": [18, 26, 29, 30, 131, 133], "person": [18, 19], "experi": [18, 132, 134, 148], "avoid": [18, 19, 120, 122, 123, 125, 133, 305, 355, 447, 450], "pip": [18, 147, 970], "instal": [18, 21, 147, 970], "abil": [18, 132, 148], "certain": [18, 72, 73, 148, 197, 198, 199, 226, 227, 229, 230], "perhap": [18, 133, 134, 135, 148], "keep": [18, 19, 72, 73, 119, 125, 132, 134, 136, 589, 661], "track": [18, 19, 305, 866, 878, 1004, 1005], "termin": [18, 19, 21, 72, 73, 74, 75, 76, 125, 131, 134], "run": [18, 21, 119, 120, 122, 129, 131, 132, 133, 134, 135, 136, 147, 148, 305, 314, 663, 665, 668, 670, 672, 683, 685, 862, 863, 864, 865, 992, 1003, 1004, 1005], "command": [18, 21, 970], "ivy_dev": [18, 19, 21], "name": [18, 19, 21, 23, 69, 117, 120, 131, 133, 134, 136, 194, 195, 589, 595, 714, 729, 731, 758, 760, 765, 767, 906, 907, 908, 912], "3": [18, 21, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 118, 122, 125, 131, 133, 134, 135, 136, 159, 165, 168, 170, 173, 175, 178, 180, 183, 189, 190, 192, 196, 197, 221, 224, 232, 235, 245, 248, 260, 262, 263, 267, 268, 277, 278, 279, 280, 281, 305, 324, 327, 343, 350, 355, 356, 358, 359, 360, 369, 370, 371, 372, 373, 374, 377, 394, 397, 410, 413, 414, 417, 418, 420, 421, 426, 429, 443, 446, 451, 452, 453, 454, 459, 462, 463, 466, 479, 482, 483, 486, 523, 524, 530, 533, 534, 537, 550, 553, 566, 569, 570, 573, 579, 580, 582, 583, 584, 589, 590, 591, 592, 597, 598, 607, 614, 617, 618, 619, 620, 621, 622, 651, 652, 657, 659, 663, 665, 666, 667, 668, 669, 701, 702, 703, 704, 706, 707, 708, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 725, 726, 728, 735, 737, 746, 748, 752, 754, 765, 767, 771, 773, 774, 776, 783, 785, 786, 787, 790, 797, 800, 802, 803, 804, 805, 806, 807, 808, 811, 816, 819, 820, 823, 828, 831, 832, 835, 836, 838, 839, 840, 841, 842, 845, 850, 853, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 915, 916, 919, 926, 927, 930, 931, 934, 951, 954, 959, 960, 963, 970], "8": [18, 21, 51, 52, 74, 75, 83, 84, 101, 102, 118, 125, 130, 134, 159, 175, 178, 305, 327, 355, 369, 372, 373, 394, 397, 418, 421, 426, 429, 463, 466, 483, 486, 523, 524, 550, 553, 566, 569, 570, 573, 584, 589, 598, 617, 663, 665, 668, 701, 708, 714, 720, 722, 723, 725, 726, 728, 752, 754, 771, 773, 786, 787, 790, 802, 803, 804, 806, 820, 823, 828, 831, 841, 889, 890, 891, 892, 893, 901, 905, 906, 907, 926, 927, 930, 970, 992, 1003], "activ": [18, 19, 21, 25, 67, 68, 71, 113, 114, 116, 135, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 193, 970, 979, 980], "setup": 18, "click": [18, 19, 117, 970], "icon": [18, 19], "side": [18, 19], "choos": [18, 19, 136, 305, 350, 355, 511, 514, 515, 518, 901, 905, 906, 907, 908, 912, 914, 926, 931, 934, 935, 938, 939, 942], "left": [18, 19, 72, 73, 118, 126, 355, 402, 405, 714, 729, 731, 742, 744, 765, 767, 901, 902, 970], "panel": 18, "select": [18, 19, 120, 131, 133, 136, 148], "drop": [18, 148], "down": [18, 133], "path": [18, 21], "manual": [18, 19, 120, 135, 866, 867, 876, 877], "builtin": [18, 21, 133, 135], "requir": [18, 21, 116, 117, 118, 120, 123, 124, 126, 127, 129, 133, 148, 194, 195, 355, 566, 569, 714, 729, 731, 802, 846, 849, 981, 982], "cmd": [18, 21], "directori": [18, 19, 21, 589, 650], "folder": [18, 19, 21, 116, 119, 120, 121], "file": [18, 19, 21, 72, 73, 116, 117, 121, 122, 124, 125, 131, 134, 589, 650, 1004, 1005], "abov": [18, 19, 21, 117, 118, 121, 122, 124, 125, 128, 129, 133, 134, 135, 136, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 355, 356, 359, 369, 372, 374, 377, 394, 397, 414, 417, 418, 421, 426, 429, 451, 454, 525, 528, 534, 537, 550, 553, 566, 569, 570, 573, 579, 583, 584, 589, 617, 701, 704, 713, 714, 715, 718, 723, 725, 726, 728, 729, 731, 774, 776, 802, 816, 819, 820, 823, 836, 839, 884, 885, 888, 889, 891, 892, 906, 907, 908, 912, 915, 916, 919, 926, 931, 934, 943, 946, 947, 950, 951, 954, 959, 960, 963], "m": [18, 19, 21, 115, 131, 197, 232, 235, 250, 254, 255, 259, 589, 598, 714, 715, 718, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 762, 764, 765, 767, 768, 770, 774, 776, 889, 894, 895, 897], "python3": [18, 21], "script": [18, 19, 21, 118, 131, 148], "bat": [18, 19, 21], "OR": [18, 19, 21, 355, 406, 409, 515, 518, 959, 965, 968], "bin": [18, 19, 21], "mac": [18, 19, 21], "linux": [18, 19, 21], "virtualenv": 18, "found": [18, 19, 69, 72, 73, 74, 75, 76, 117, 124, 125, 305, 339], "os": 18, "note": [18, 19, 116, 117, 118, 125, 355, 546, 549, 714, 729, 731, 765, 767, 802, 846, 849, 906, 908, 912, 926, 935, 938], "tick": [18, 19], "abl": [18, 19, 72, 73, 121, 126, 128, 133, 136], "To": [18, 118, 121, 125, 134, 135, 136, 970], "ivy_test": [18, 19], "test_array_api": [18, 19, 119, 120], "cd": [18, 19, 21], "r": [18, 72, 73, 589, 598, 661, 714, 758, 760, 783, 785], "txt": 18, "visual": [18, 148], "jetbrain": 18, "remot": 18, "mitig": 18, "potenti": [18, 130, 355, 447, 450], "conflict": [18, 19, 134], "addit": [18, 19, 72, 73, 116, 117, 120, 125, 126, 133, 134, 136, 305, 350, 355, 369, 372, 589, 611, 612, 613, 884, 885, 888, 992, 1002], "yet": [18, 20, 125], "particular": [18, 19, 116, 128, 355, 356, 359], "system": [18, 148, 714, 762, 764], "instruct": [18, 20], "desktop": 18, "wsl": 18, "powershel": 18, "admin": 18, "visit": 18, "link": 18, "imag": [18, 21, 44, 90, 116, 131, 132, 134, 136, 147, 701, 702, 703, 704, 705, 707, 708, 970], "profession": 18, "execut": [18, 21, 125, 128, 131, 133, 136, 148, 589, 660], "deploy": 18, "top": [18, 19, 120, 134, 135, 970], "press": [18, 134, 970], "ok": 18, "correctli": [18, 72, 73, 120, 125, 126, 129, 135, 148, 714, 742, 744, 901, 902], "caus": [18, 19, 118, 120, 125, 128, 148], "earlier": [18, 19], "might": [18, 19, 116, 120, 123, 131, 133, 134, 589, 610], "necessari": [18, 118, 122, 125, 128], "virtualis": 18, "detail": [18, 19, 20, 116, 119, 120, 121, 122, 123, 125, 129, 134, 135, 197, 215, 218, 906, 907, 908, 912, 914], "sudo": 18, "apt": 18, "ca": 18, "certif": 18, "curl": 18, "gnupg": 18, "lsb": 18, "mkdir": 18, "p": [18, 19, 72, 73, 85, 86, 197, 232, 235, 589, 601, 602, 603, 604, 701, 709, 714, 742, 744, 780, 782, 992, 1000], "keyr": 18, "fssl": 18, "download": [18, 120], "gpg": 18, "dearmor": 18, "o": [18, 131, 589, 598], "echo": 18, "deb": 18, "arch": 18, "dpkg": 18, "architectur": [18, 136, 148], "lsb_releas": 18, "cs": 18, "tee": 18, "list": [18, 20, 21, 26, 27, 28, 29, 30, 31, 32, 67, 68, 69, 72, 73, 87, 88, 105, 106, 113, 114, 116, 118, 126, 127, 129, 131, 134, 135, 136, 148, 197, 198, 199, 201, 204, 206, 232, 233, 235, 237, 240, 242, 243, 260, 262, 268, 275, 305, 314, 315, 324, 326, 327, 330, 331, 334, 335, 349, 589, 598, 652, 657, 661, 665, 667, 669, 701, 702, 703, 704, 705, 706, 707, 708, 714, 771, 773, 802, 808, 811, 820, 823, 841, 846, 849, 866, 867, 868, 872, 877, 878, 884, 885, 888, 901, 904, 906, 908, 909, 911, 912, 970, 992, 993, 994, 995, 996, 997, 998, 999], "dev": [18, 72, 73, 74, 76, 121, 127, 131, 133, 135, 305, 314, 339], "null": 18, "ce": 18, "cli": 18, "containerd": 18, "io": 18, "compos": [18, 125, 148], "plugin": 18, "systemctl": 18, "permiss": 18, "relat": [18, 19, 147, 305], "post": [18, 136, 884, 885, 888, 970, 976], "It": [18, 19, 21, 23, 69, 115, 116, 117, 118, 122, 124, 125, 128, 131, 133, 134, 135, 159, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 193, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 274, 276, 305, 350, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588, 589, 601, 602, 604, 607, 611, 612, 613, 615, 618, 621, 629, 642, 645, 646, 663, 696, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 718, 720, 722, 723, 725, 726, 728, 732, 734, 735, 737, 738, 741, 742, 744, 746, 748, 749, 751, 752, 754, 755, 757, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 787, 790, 792, 795, 797, 800, 802, 803, 806, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 884, 885, 888, 889, 890, 891, 892, 894, 895, 897, 900, 901, 902, 905, 906, 914, 915, 916, 919, 921, 924, 959, 960, 963, 965, 968], "headach": 18, "arm": [18, 19], "m1": 18, "instead": [18, 19, 20, 117, 118, 120, 121, 125, 128, 129, 131, 133, 134, 148], "featur": [18, 116, 129, 134, 970], "vm": 18, "azur": 18, "cloud": [18, 147], "mean": [18, 19, 63, 64, 72, 73, 109, 110, 113, 114, 115, 118, 121, 125, 126, 127, 128, 131, 133, 134, 135, 136, 147, 148, 305, 334, 335, 336, 337, 349, 589, 612, 862, 863, 864, 865, 866, 872, 889, 894, 906, 907, 926, 970, 983], "configur": [18, 19, 21, 72, 73, 126, 305, 348, 866, 879], "defin": [18, 20, 116, 117, 126, 129, 133, 135, 148, 355, 525, 528, 546, 549, 589, 642, 714, 720, 722, 729, 731, 762, 764, 889, 891, 892, 926, 931, 934, 935, 938, 939, 942], "dockerfil": [18, 21], "longer": [18, 126, 128], "worri": 18, "platform": 18, "agnost": [18, 124, 129, 131, 133, 136, 148, 970], "usual": 18, "studio": 18, "favourit": 18, "extens": [18, 19, 117, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 232, 235, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 355, 356, 359, 369, 372, 374, 377, 394, 397, 414, 417, 418, 421, 426, 429, 451, 454, 483, 486, 534, 537, 550, 553, 566, 569, 570, 573, 579, 583, 584, 714, 723, 725, 726, 728, 802, 816, 819, 820, 823, 836, 839, 906, 907, 908, 912, 915, 916, 919, 926, 931, 934, 959, 960, 963], "theme": 18, "too": [18, 19, 148, 355, 369, 372, 525, 528], "done": [18, 19, 118, 120, 134], "unsupport": [18, 126, 268, 289, 290], "old": [18, 72, 73, 128], "slow": 18, "ipad": 18, "long": [18, 19, 118, 701, 711], "browser": 18, "cool": [18, 116], "requisit": 18, "head": [18, 125, 701, 712, 970, 992, 1003], "pane": [18, 19], "readi": [18, 20], "begin": [18, 866, 867, 877], "outlin": [18, 19, 20, 115, 117, 120, 121, 125, 128, 133], "green": [18, 19, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 1017, 1018], "dropdown": 18, "tab": [18, 134, 970], "master": [18, 19, 125], "vs": 18, "view": [18, 19, 69, 197, 215, 218, 701, 704, 708], "log": [18, 19, 37, 38, 83, 84, 121, 125, 128, 131, 134, 197, 229, 230, 355, 495, 498, 503, 506, 714, 761, 970], "built": [18, 132, 197, 198, 199, 305, 992, 1003, 1004, 1005], "bottom": 18, "box": 18, "patient": 18, "upto": 18, "15": [18, 101, 102, 118, 355, 394, 397, 550, 553, 701, 704, 714, 726, 728, 752, 754, 771, 773, 802, 836, 839, 884, 885, 888, 889, 891, 892, 893, 901, 904, 906, 907, 926, 927, 930], "minut": 18, "launch": 18, "12": [18, 101, 102, 118, 125, 355, 394, 397, 414, 417, 426, 429, 550, 553, 589, 607, 625, 663, 665, 668, 714, 726, 728, 752, 754, 771, 773, 802, 820, 823, 828, 831, 836, 839, 884, 885, 888, 889, 891, 892, 893, 901, 905, 906, 907, 926, 927, 930], "output": [18, 72, 73, 115, 116, 117, 118, 120, 121, 124, 125, 127, 128, 129, 131, 133, 135, 136, 148, 159, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 193, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 274, 276, 305, 314, 315, 349, 350, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588, 589, 600, 601, 602, 604, 607, 608, 611, 612, 613, 615, 617, 618, 621, 629, 642, 645, 646, 663, 674, 696, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 720, 722, 723, 725, 726, 728, 732, 734, 735, 737, 738, 741, 742, 744, 746, 748, 749, 751, 752, 754, 755, 757, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 787, 790, 792, 795, 797, 800, 802, 803, 806, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 866, 879, 884, 885, 888, 889, 890, 891, 892, 894, 895, 897, 900, 901, 905, 915, 916, 919, 921, 924, 926, 927, 930, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 970, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003], "That": [18, 19, 133, 134, 135, 355, 546, 549], "alreadi": [18, 19, 72, 73, 122, 125, 129, 133, 148, 305, 355, 418, 421, 451, 454, 525, 528, 550, 553, 585, 588, 714, 752, 754, 970], "refer": [18, 19, 120, 121, 126, 129, 148, 197, 212, 213, 355, 447, 450, 495, 498, 663, 665, 668, 670, 672, 714, 777, 779, 783, 785, 926, 947, 950, 955, 958, 959, 960, 963, 965, 968, 992, 1002], "approach": [18, 19, 120, 121, 125, 133, 134, 148], "colour": 18, "applic": [18, 126, 127, 135, 701, 712, 713, 866, 872, 878], "good": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 135], "chanc": 18, "vscode": 18, "show": [18, 19, 72, 73, 118, 128, 147, 148, 970], "explor": [18, 132, 136, 147], "troubleshoot": 18, "sometim": [18, 19], "ever": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "64": [18, 134, 135, 355, 566, 569, 570, 573, 701, 707, 708, 714, 752, 754, 926, 927, 930, 970, 992, 1003], "bit": [18, 118, 121, 125, 133, 268, 287, 288, 291, 355, 398, 401, 402, 405, 410, 413, 926, 943, 946, 951, 954], "usr": 18, "more": [18, 19, 20, 115, 116, 118, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 147, 148, 197, 198, 199, 268, 275, 355, 447, 450, 714, 738, 741, 802, 820, 823, 906, 907, 908, 912, 914, 970], "nutshel": [18, 129], "hook": 18, "lint": 18, "accept": [18, 19, 26, 117, 118, 120, 121, 124, 125, 127, 128, 129, 133, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 355, 356, 359, 369, 372, 374, 377, 394, 397, 414, 417, 418, 421, 426, 429, 451, 454, 511, 514, 515, 518, 534, 537, 546, 549, 550, 553, 566, 569, 570, 573, 579, 583, 584, 589, 617, 701, 704, 713, 714, 715, 718, 723, 725, 726, 728, 802, 816, 819, 820, 823, 836, 839, 884, 885, 888, 906, 907, 908, 912, 915, 916, 919, 926, 931, 934, 935, 938, 959, 960, 963, 970], "fix": [18, 19], "fail": [18, 20, 119, 120, 131, 133], "attempt": [18, 148], "succe": 18, "problemat": 18, "appli": [18, 19, 20, 26, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 117, 118, 120, 121, 123, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 146, 148, 159, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 190, 191, 192, 193, 201, 202, 207, 208, 215, 216, 221, 222, 237, 238, 245, 246, 250, 252, 255, 257, 263, 265, 268, 277, 278, 279, 281, 296, 356, 357, 358, 360, 369, 370, 371, 373, 418, 419, 420, 451, 452, 453, 579, 580, 581, 582, 589, 590, 591, 592, 594, 611, 612, 613, 618, 619, 620, 622, 663, 665, 666, 667, 669, 683, 685, 687, 689, 701, 710, 712, 713, 714, 715, 716, 717, 719, 746, 748, 755, 757, 786, 787, 790, 792, 795, 797, 800, 802, 803, 804, 805, 807, 836, 837, 838, 840, 846, 849, 862, 863, 864, 866, 872, 875, 878, 879, 884, 885, 888, 891, 893, 908, 909, 910, 911, 970, 978, 979, 980, 1006, 1007], "proce": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "modifi": [18, 19, 117, 121, 126, 127, 131], "properli": [18, 115], "enter": [18, 19, 124, 126, 127, 129, 305], "unsur": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "feel": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 970], "server": [19, 970], "appropri": [19, 67, 68, 113, 114, 123, 355, 369, 372, 525, 528, 901, 902], "context": [19, 118, 125, 126, 127, 305, 589, 640, 701, 712, 992, 1003], "suitabl": [19, 116, 125], "quick": [19, 115, 135], "alwai": [19, 20, 72, 73, 116, 117, 121, 122, 124, 125, 128, 129, 131, 133, 148, 268, 274, 355, 369, 372, 525, 528, 589, 633, 663, 679, 681, 696], "correct": [19, 20, 63, 64, 109, 110, 115, 121, 125, 126, 127, 129, 268, 300, 802, 803, 806, 926, 947, 948, 949, 950, 955, 956, 957, 958, 970], "tendenc": 19, "gener": [19, 20, 21, 40, 67, 68, 72, 73, 86, 113, 114, 115, 116, 117, 118, 121, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 147, 148, 194, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 355, 356, 359, 374, 377, 414, 417, 418, 421, 426, 429, 451, 454, 534, 537, 546, 549, 566, 569, 570, 573, 590, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 679, 681, 714, 726, 728, 802, 816, 819, 836, 839, 889, 890, 891, 892, 895, 897, 899, 906, 907, 908, 912, 915, 916, 919, 926, 931, 934, 970, 1008, 1012], "land": 19, "end": [19, 125, 128, 130, 147, 148, 197, 198, 199, 355, 386, 389, 970, 976], "world": 19, "come": [19, 20, 135, 146, 970, 976], "fly": 19, "hard": [19, 133], "receiv": [19, 120, 126, 127, 305, 314, 315, 589, 596, 639, 992, 1002], "respons": [19, 21], "internship": 19, "comment": 19, "trigger": 19, "unansw": 19, "label": [19, 131, 132, 136, 786, 787, 790, 792, 795, 797, 800], "respond": 19, "remov": [19, 20, 21, 69, 72, 73, 117, 120, 121, 126, 128, 136, 714, 726, 728, 738, 741, 774, 776, 802, 842, 845, 862, 863, 864], "someon": [19, 148], "els": [19, 20, 69, 116, 121, 122, 128, 131, 133, 135, 136, 148, 589, 599, 610, 614, 866, 876], "strive": [19, 148], "repli": 19, "newli": [19, 128, 194, 195, 268, 274, 589, 600], "place": [19, 72, 73, 115, 116, 117, 118, 120, 121, 125, 127, 129, 136, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 237, 240, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 305, 350, 355, 356, 359, 369, 372, 374, 377, 394, 397, 414, 417, 418, 421, 426, 429, 451, 454, 534, 537, 550, 553, 566, 569, 570, 573, 579, 583, 584, 589, 617, 631, 632, 633, 701, 704, 713, 714, 715, 718, 723, 725, 726, 728, 802, 816, 819, 820, 823, 836, 839, 884, 885, 888, 906, 907, 908, 912, 915, 916, 919, 926, 931, 934, 959, 960, 963, 1008, 1009, 1010, 1011, 1012, 1013], "bug": [19, 120], "serv": [19, 120, 121, 124, 125, 129, 130, 970], "suspect": 19, "behaviour": [19, 117, 120, 124, 125, 128, 129, 133], "observ": 19, "confid": 19, "noth": [19, 23, 69, 72, 73], "wrong": 19, "someth": [19, 116, 134, 135, 148], "bet": 19, "act": [19, 118, 148], "placehold": [19, 124, 129, 866, 878], "sub": [19, 20, 72, 73, 115, 120, 125, 133, 134, 135, 305, 330, 331, 334, 335, 336, 337, 714, 726, 728, 802, 841, 862, 863, 864, 865, 970], "mark": [19, 120], "ii": [19, 926, 927, 930], "iii": 19, "titl": [19, 970], "issue_numb": 19, "delet": [19, 21, 69], "No": [19, 131], "wait": [19, 72, 73, 74, 75, 76], "progress": [19, 125, 132, 136], "pr": 19, "soon": [19, 125, 146, 148, 970, 976], "partial": [19, 72, 73, 1004, 1005], "solut": [19, 120, 125, 714, 762, 764], "review": [19, 116], "merg": 19, "everi": [19, 20, 21, 118, 119, 120, 121, 122, 123, 125, 128, 129, 131, 133, 135, 197, 220, 221, 224, 589, 590, 593], "shape": [19, 51, 52, 72, 73, 77, 78, 87, 88, 97, 98, 101, 102, 105, 106, 116, 117, 118, 126, 127, 128, 129, 131, 133, 134, 135, 136, 159, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 193, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 242, 243, 244, 245, 248, 250, 254, 255, 259, 260, 261, 262, 263, 267, 268, 274, 275, 276, 305, 317, 345, 350, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588, 589, 601, 602, 604, 607, 611, 612, 613, 615, 618, 621, 626, 629, 642, 645, 646, 652, 663, 665, 667, 669, 696, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 718, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 742, 744, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 787, 790, 792, 795, 797, 800, 802, 803, 806, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 833, 834, 835, 836, 839, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 900, 901, 902, 904, 905, 909, 911, 915, 916, 919, 921, 924, 926, 927, 930, 959, 960, 963, 965, 968, 970, 992, 994, 995, 996, 997, 998, 999, 1006, 1007], "move": [19, 72, 73, 116, 305, 350], "within": [19, 26, 29, 30, 120, 135, 148, 197, 198, 199, 889, 895, 897], "7": [19, 21, 37, 38, 51, 52, 74, 75, 83, 84, 101, 102, 118, 121, 125, 128, 159, 165, 168, 170, 173, 305, 327, 355, 356, 359, 369, 370, 371, 372, 373, 394, 397, 398, 401, 414, 417, 418, 421, 426, 429, 443, 446, 451, 454, 463, 466, 483, 486, 523, 524, 550, 553, 566, 569, 579, 583, 584, 589, 598, 607, 617, 663, 665, 668, 670, 672, 683, 685, 701, 707, 708, 713, 714, 720, 722, 723, 725, 726, 728, 752, 754, 771, 773, 786, 787, 790, 792, 795, 797, 800, 802, 803, 804, 806, 816, 819, 820, 823, 828, 831, 841, 850, 853, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 897, 901, 905, 906, 907, 926, 927, 930], "dai": 19, "close": [19, 117, 355, 447, 450, 550, 553, 714, 765, 767], "likewis": [19, 117, 121, 125, 126, 129, 134], "freed": 19, "flag": [19, 72, 73, 128, 133, 305, 324, 663, 679, 681], "purpos": [19, 21, 118, 120, 121, 123, 124, 125, 129, 130, 133, 355, 447, 450, 970], "remain": [19, 118, 148, 355, 369, 372, 525, 528, 546, 549, 802, 832, 835, 866, 872], "access": [19, 21, 72, 73, 126], "short": [19, 135, 701, 711], "basi": [19, 119, 134], "situat": [19, 136], "alloc": [19, 148, 197, 250, 254, 255, 259, 268, 274, 305], "upon": [19, 118, 120, 128, 148], "period": 19, "prevent": [19, 128, 133, 663, 665, 668, 670, 672, 683, 685, 926, 951, 954, 1008, 1009, 1010], "unabl": 19, "obvious": 19, "never": [19, 125], "reflect": [19, 124], "qualiti": 19, "hypothet": 19, "frustrat": 19, "delai": 19, "busi": 19, "fine": [19, 133, 136], "becaus": [19, 117, 120, 121, 122, 124, 126, 127, 128, 129, 131, 135, 136, 148], "inact": 19, "limit": [19, 72, 73, 74, 75, 76, 118, 120, 131, 134, 136, 148, 268, 288, 291, 589, 601, 602, 604, 802, 803, 806], "me": 19, "unfairli": 19, "definit": [19, 121, 126, 133, 714, 715, 718, 720, 722], "investig": 19, "Then": [19, 21, 133, 148], "practic": [19, 120], "separ": [19, 120, 124, 131, 133, 134], "branch": [19, 125, 148, 194, 195, 355, 386, 389], "simpli": [19, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 117, 118, 120, 121, 124, 125, 127, 128, 129, 131, 135, 136, 189, 190, 191, 192, 201, 202, 207, 208, 215, 216, 221, 222, 237, 238, 245, 246, 250, 252, 255, 257, 263, 265, 277, 278, 279, 281, 355, 356, 357, 358, 360, 369, 370, 371, 373, 418, 419, 420, 447, 450, 451, 452, 453, 579, 580, 581, 582, 590, 591, 592, 594, 618, 619, 620, 622, 665, 666, 667, 669, 715, 716, 717, 719, 803, 804, 805, 807, 836, 837, 838, 840, 891, 893, 908, 909, 910, 911], "role": [19, 132], "kept": [19, 72, 73, 74, 75, 76, 128, 862, 863, 864], "date": 19, "upstream": [19, 119], "complic": [19, 131], "root": [19, 21, 134, 355, 566, 569, 889, 890, 894], "merge_with_upstream": 19, "sh": 19, "name_of_your_branch": 19, "resolv": [19, 926, 943, 946, 951, 954], "clone": [19, 21, 72, 73, 305, 326, 327, 328, 329], "push": [19, 119], "both": [19, 117, 118, 121, 125, 127, 128, 129, 131, 133, 134, 135, 136, 147, 148, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 295, 355, 356, 359, 369, 372, 374, 377, 418, 421, 451, 454, 534, 537, 542, 545, 566, 569, 570, 573, 579, 583, 589, 617, 663, 665, 668, 701, 704, 713, 714, 715, 718, 720, 722, 726, 728, 738, 741, 777, 779, 802, 836, 839, 884, 885, 888, 906, 908, 912, 926, 931, 934, 959, 960, 963], "abort": 19, "tediou": 19, "resolut": 19, "stash": 19, "reinstat": 19, "correspond": [19, 69, 72, 73, 74, 75, 117, 118, 119, 121, 124, 125, 126, 129, 268, 275, 355, 386, 389, 542, 545, 714, 720, 722, 729, 731, 762, 764, 802, 808, 811, 836, 839, 889, 890, 901, 902, 903, 906, 907, 908, 912, 914, 926, 943, 946, 947, 950, 951, 954, 955, 958], "fetch": 19, "uncommit": 19, "unstag": 19, "untrack": 19, "comprehens": 19, "explan": [19, 117, 125, 129, 133], "atlassian": 19, "tutori": 19, "wrote": 19, "piec": [19, 121, 123, 124, 131], "inform": [19, 268, 288, 291, 589, 595, 663, 696], "tag": 19, "usu": 19, "describ": [19, 132, 136, 926, 927, 930, 943, 946, 947, 950, 951, 954], "navig": [19, 115], "blame": 19, "revis": 19, "author": [19, 970], "eg": 19, "16": [19, 47, 48, 83, 84, 101, 102, 118, 134, 355, 579, 580, 582, 583, 701, 707, 714, 715, 716, 718, 726, 728, 752, 754, 891, 893, 901, 905, 926, 927, 930], "5": [19, 21, 37, 38, 39, 40, 47, 48, 51, 52, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 97, 98, 101, 102, 118, 122, 129, 133, 134, 135, 159, 165, 168, 170, 173, 180, 183, 189, 190, 192, 197, 221, 224, 232, 235, 245, 248, 260, 262, 263, 267, 268, 277, 279, 280, 281, 305, 327, 343, 355, 356, 358, 359, 360, 369, 370, 371, 372, 373, 374, 377, 390, 393, 394, 397, 410, 413, 414, 417, 418, 419, 420, 421, 426, 429, 451, 452, 453, 454, 463, 466, 483, 486, 523, 524, 530, 533, 534, 537, 550, 553, 566, 569, 570, 573, 579, 580, 582, 583, 584, 589, 590, 591, 598, 607, 617, 618, 621, 622, 652, 657, 663, 665, 667, 668, 669, 701, 704, 706, 707, 713, 714, 715, 716, 718, 720, 722, 723, 725, 726, 728, 735, 737, 752, 754, 771, 773, 774, 776, 786, 797, 800, 802, 803, 804, 805, 806, 807, 808, 811, 816, 819, 820, 823, 828, 831, 832, 835, 836, 838, 839, 840, 841, 850, 853, 884, 885, 888, 889, 890, 891, 892, 893, 900, 901, 903, 904, 905, 906, 907, 908, 912, 915, 916, 919, 926, 927, 930, 931, 934, 959, 960, 963, 992, 1003], "past": 19, "l": [19, 115, 714, 715, 718, 729, 731, 738, 741, 774, 776], "filepath": [19, 72, 73], "grep": 19, "v": [19, 69, 131, 134, 135, 136, 701, 713, 970, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1012, 1014, 1015], "commit_id": 19, "handi": 19, "histori": 19, "toggl": 19, "vertic": 19, "highlight": [19, 118], "previou": [19, 120, 129, 136, 148, 663, 670, 672, 683, 685], "shown": [19, 67, 68, 72, 73, 113, 114, 118, 129, 131, 133, 148, 355, 394, 397, 414, 417, 426, 429, 550, 553, 584, 714, 723, 725, 802, 816, 819, 820, 823, 906, 907, 915, 916, 919], "whenev": [19, 133, 134], "think": [19, 118], "interact": [19, 970], "gain": [19, 130, 135, 983], "quit": [19, 20, 117, 121, 123, 124], "repeat": [19, 51, 52, 72, 73, 97, 98, 117, 118, 122, 124, 125, 589, 613, 802, 854, 857], "yourself": [19, 20, 147], "simpler": [19, 133], "cannot": [19, 122, 126, 136], "least": [19, 118, 121, 124, 714, 738, 741], "final": [19, 117, 118, 121, 124, 126, 128, 131, 133, 134, 197, 226, 227, 229, 230, 589, 616, 992, 1003], "tickbox": 19, "lower": [19, 72, 73, 118, 131, 148, 197, 212, 213, 250, 254, 355, 523, 714, 715, 718, 889, 895, 897], "corner": 19, "without": [19, 72, 73, 116, 121, 124, 125, 127, 129, 131, 133, 134, 135, 147, 148, 589, 644, 649, 802, 832, 835, 866, 868, 906, 907, 908, 912, 914], "span": 19, "intent": [19, 128], "larg": [19, 134, 355, 369, 372, 525, 528], "discourag": 19, "philosophi": 19, "increment": [19, 589, 632], "frequent": [19, 20], "valuabl": 19, "infrequ": 19, "earli": [19, 23, 69, 970], "wast": 19, "spot": [19, 121], "mistak": 19, "propos": 19, "mountain": 19, "around": [19, 72, 73, 74, 75, 76, 121, 124, 129, 133, 148], "advoc": [19, 148], "individu": [19, 20, 121], "per": [19, 134, 305, 701, 702, 703, 704, 705, 706, 707, 708, 992, 993, 994, 995, 996, 997, 998, 999], "style": [19, 901, 904], "ve": [19, 130, 133, 889, 890, 970], "were": [19, 72, 73, 116, 120, 125], "actual": [19, 115, 121, 128, 130, 133, 135, 148], "aim": [19, 130], "part": [19, 116, 119, 120, 121, 131, 132, 136, 147, 148, 197, 250, 254, 255, 259, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 1004, 1005], "subsect": 19, "session": [19, 970], "block": [19, 121, 130, 132, 136, 148, 305, 970], "smaller": [19, 131, 136, 802, 803, 806, 836, 839, 926, 943, 946, 951, 954], "edit": 19, "exact": [19, 72, 73, 131, 906, 907], "beauti": 19, "particularli": [19, 134, 148], "concern": [19, 115, 118, 125, 128, 130], "effici": [19, 120, 121, 125, 128, 129, 131, 134, 148], "difficult": [19, 120, 148, 906, 907, 908, 912, 914], "undo": 19, "stress": 19, "frequenc": [19, 589, 616], "pycharm": 19, "pytest": [19, 120], "button": 19, "declar": 19, "insid": [19, 21, 116, 126], "exec": 19, "rm": 19, "rf": 19, "cp": 19, "ivy_contain": 19, "bash": [19, 21], "test_ivi": [19, 120], "test_funct": 19, "test_cor": 19, "test_imag": 19, "test_random_crop": 19, "header": 19, "summari": [19, 72, 73, 268, 283, 284, 285, 297, 298, 299, 305, 318, 319, 589, 605, 609, 627, 663, 695, 700], "q": [19, 148, 701, 713, 714, 729, 731, 758, 760], "array_api_test": 19, "test_creation_funct": 19, "test_arang": 19, "window": [19, 21, 701, 702, 703, 704, 705, 706, 707, 708, 992, 993, 994, 995, 996, 997, 998, 999], "variou": [19, 117, 123, 129, 147], "valu": [19, 23, 51, 52, 59, 60, 69, 72, 73, 74, 75, 76, 97, 98, 118, 120, 121, 125, 126, 127, 128, 129, 131, 133, 136, 148, 197, 198, 199, 212, 213, 220, 221, 224, 226, 227, 229, 230, 268, 274, 283, 284, 285, 305, 317, 348, 349, 355, 356, 359, 361, 364, 369, 372, 374, 377, 382, 385, 418, 421, 435, 438, 439, 442, 451, 454, 455, 458, 459, 462, 463, 466, 479, 482, 483, 486, 523, 524, 525, 528, 534, 537, 538, 541, 542, 545, 550, 553, 584, 585, 588, 589, 601, 602, 604, 605, 610, 616, 617, 618, 621, 627, 630, 634, 644, 645, 646, 647, 648, 649, 662, 663, 665, 668, 670, 672, 674, 683, 685, 696, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 714, 746, 748, 755, 757, 758, 760, 761, 762, 764, 765, 767, 768, 770, 780, 782, 802, 803, 806, 812, 813, 814, 815, 828, 831, 832, 835, 858, 860, 861, 862, 863, 864, 866, 870, 871, 872, 873, 874, 879, 882, 883, 884, 885, 888, 889, 890, 891, 892, 894, 895, 897, 899, 901, 902, 903, 905, 906, 907, 908, 910, 912, 913, 914, 915, 916, 919, 921, 924, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 992, 993, 994, 995, 996, 997, 998, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012], "cpu": [19, 72, 73, 127, 148, 197, 226, 227, 229, 230, 305, 324, 325, 327, 341, 344, 346, 350, 351, 353, 354, 589, 617, 618, 621, 642, 645, 646, 889, 890, 891, 892, 894, 895, 897, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015], "gpu": [19, 101, 102, 127, 133, 148, 305, 324, 327, 340, 342, 346, 348, 353, 891, 893], "combin": [19, 72, 73, 74, 75, 76, 118, 120, 121, 124, 125, 136, 714, 720, 722], "wherebi": [20, 125, 866, 878], "broad": 20, "distribut": [20, 72, 73, 127, 148, 305, 326, 330, 331, 332, 333, 701, 709, 786, 787, 790, 792, 795, 797, 800, 889, 890, 891, 892, 894, 895, 897, 992, 1000, 1004, 1005], "across": [20, 72, 73, 118, 120, 121, 125, 126, 129, 305, 314, 315, 326, 327, 329, 330, 331, 332, 333, 337, 347, 348, 589, 597, 598, 866, 872, 901, 903], "todo": [20, 120], "commit": [20, 120], "NOT": [20, 355, 511, 514], "static": [20, 70, 71, 72, 73, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 101, 102, 105, 106, 107, 108, 111, 112, 113, 114, 117, 118, 121, 148, 189, 190, 194, 195, 277, 281, 356, 360, 369, 373, 579, 580, 590, 594, 618, 622, 715, 719, 803, 807, 836, 840, 891, 893, 908, 909], "method": [20, 23, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 67, 68, 69, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 113, 114, 116, 117, 118, 120, 121, 124, 129, 131, 132, 135, 136, 148, 159, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 190, 191, 192, 193, 197, 201, 202, 207, 208, 215, 216, 218, 221, 222, 237, 238, 245, 246, 250, 252, 255, 257, 263, 265, 277, 278, 279, 281, 355, 356, 357, 358, 360, 369, 370, 371, 373, 374, 377, 394, 397, 414, 417, 418, 419, 420, 421, 426, 429, 451, 452, 453, 454, 463, 466, 483, 486, 523, 524, 530, 533, 534, 537, 550, 553, 566, 569, 570, 573, 579, 580, 581, 582, 584, 589, 590, 591, 592, 594, 605, 606, 617, 618, 619, 620, 622, 645, 646, 657, 659, 663, 665, 666, 667, 669, 683, 685, 687, 689, 701, 707, 713, 714, 715, 716, 717, 719, 720, 722, 723, 725, 786, 787, 790, 802, 803, 804, 805, 807, 816, 819, 820, 823, 828, 831, 836, 837, 838, 840, 841, 850, 853, 866, 867, 877, 878, 879, 884, 885, 888, 889, 891, 893, 894, 895, 897, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 915, 916, 919, 926, 927, 930, 931, 934, 959, 960, 963, 970, 992, 1003, 1004, 1005], "instanc": [20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 67, 68, 72, 73, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 105, 106, 113, 114, 117, 118, 120, 121, 124, 126, 128, 129, 134, 135, 136, 149, 157, 159, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 191, 192, 193, 197, 198, 199, 201, 202, 204, 206, 207, 208, 210, 212, 213, 215, 216, 218, 220, 221, 222, 224, 226, 227, 229, 230, 232, 235, 237, 238, 242, 243, 245, 246, 248, 250, 252, 254, 255, 257, 259, 260, 262, 263, 265, 267, 268, 277, 278, 279, 280, 305, 314, 346, 355, 356, 357, 358, 359, 369, 370, 371, 372, 374, 377, 394, 397, 414, 417, 418, 419, 420, 421, 426, 429, 451, 452, 453, 454, 463, 466, 483, 486, 523, 524, 530, 533, 534, 537, 550, 553, 566, 569, 570, 573, 579, 581, 582, 583, 584, 589, 590, 591, 592, 606, 617, 618, 619, 620, 633, 657, 659, 665, 666, 667, 669, 701, 704, 707, 713, 714, 715, 716, 717, 718, 720, 722, 723, 725, 726, 728, 786, 787, 790, 802, 803, 804, 805, 816, 819, 820, 823, 828, 831, 836, 837, 838, 839, 841, 850, 853, 884, 885, 888, 889, 894, 895, 897, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 915, 916, 919, 926, 927, 930, 931, 934, 959, 960, 963, 981, 982], "revers": [20, 69, 74, 75, 117, 118, 136, 148, 589, 610, 802, 820, 823], "resourc": 20, "content": [20, 21, 72, 73, 128, 131, 134], "thei": [20, 72, 73, 115, 116, 118, 121, 123, 125, 126, 127, 128, 133, 134, 135, 136, 148, 268, 295, 862, 863, 864, 889, 890, 970, 1014, 1015], "hypothesi": 20, "cover": [20, 117, 118, 121, 123, 130], "lambda": [20, 131, 134, 1008, 1011, 1013], "direct": [20, 135, 136, 147, 915, 921, 924], "bind": [20, 125], "special": [20, 74, 75, 116, 117, 118, 124, 129, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 414, 417, 418, 421, 422, 425, 426, 429, 443, 446, 447, 450, 451, 454, 487, 490, 491, 494, 499, 502, 503, 506, 525, 528, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 579, 583, 584, 585, 588, 926, 931, 934, 935, 938, 939, 942, 947, 950, 951, 954, 955, 958], "aforement": 20, "categori": [20, 116, 124, 125, 126, 130, 970], "parent": [20, 133], "arraywithelementwis": [20, 37, 124], "containerwithmanipul": [20, 74, 75, 97], "hint": [20, 116, 117, 121, 124, 128, 129, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 355, 356, 359, 369, 372, 374, 377, 394, 397, 414, 417, 418, 421, 426, 429, 451, 454, 534, 537, 550, 553, 566, 569, 570, 573, 579, 583, 584, 589, 617, 701, 704, 713, 714, 715, 718, 723, 725, 726, 728, 802, 816, 819, 820, 823, 836, 839, 884, 885, 888, 906, 907, 908, 912, 915, 916, 919, 926, 931, 934, 959, 960, 963], "its": [20, 21, 117, 268, 275, 305, 349, 714, 738, 741, 802, 816, 819, 832, 835, 836, 839, 850, 853], "docstr": [20, 21, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 115, 116, 121, 125, 129, 189, 190, 191, 192, 197, 198, 199, 201, 202, 204, 206, 207, 208, 210, 212, 213, 215, 216, 218, 220, 221, 222, 224, 226, 227, 232, 235, 237, 238, 242, 243, 245, 246, 248, 250, 252, 254, 255, 257, 259, 260, 262, 263, 265, 267, 268, 277, 278, 279, 280, 281, 355, 356, 357, 358, 359, 360, 369, 370, 371, 372, 373, 374, 377, 394, 397, 414, 417, 418, 419, 420, 421, 426, 429, 451, 452, 453, 454, 483, 486, 534, 537, 550, 553, 566, 569, 570, 573, 579, 580, 581, 582, 583, 584, 590, 591, 592, 594, 618, 619, 620, 622, 665, 666, 667, 669, 714, 715, 716, 717, 719, 723, 725, 726, 728, 802, 803, 804, 805, 807, 816, 819, 820, 823, 836, 837, 838, 839, 840, 891, 893, 906, 907, 908, 909, 910, 911, 912, 915, 916, 919, 926, 931, 934, 959, 960, 963], "thorough": [20, 117, 120, 129], "transpil": [20, 130, 132, 970, 976], "builder": [21, 146, 148, 970], "maco": 21, "ubuntu": 21, "uid": 21, "make_docs_without_dock": 21, "rel": [21, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 714, 726, 728, 746, 748, 755, 757, 774, 776, 802, 820, 823, 836, 839, 915, 916, 919, 921, 924, 970], "synchron": 21, "rest": [21, 132, 136], "remove_doc": 21, "_": [21, 117, 125, 128, 133, 134, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 355, 356, 359, 374, 377, 414, 417, 418, 421, 426, 429, 451, 454, 534, 537, 566, 569, 570, 573, 663, 665, 668, 670, 672, 714, 726, 728, 783, 785, 802, 816, 819, 836, 839, 906, 907, 915, 916, 919, 926, 931, 934], "indic": [21, 39, 40, 72, 73, 85, 86, 132, 136, 159, 180, 183, 355, 554, 557, 589, 617, 618, 619, 620, 621, 622, 629, 642, 645, 646, 701, 702, 703, 704, 705, 706, 707, 708, 714, 780, 782, 802, 836, 839, 866, 867, 869, 871, 873, 874, 875, 877, 880, 881, 882, 883, 884, 885, 888, 889, 890, 901, 902, 903, 904, 906, 907, 913, 915, 916, 919, 921, 924, 970, 973, 975, 992, 993, 994, 995, 996, 997, 998, 999, 1004, 1005], "privat": [21, 1008, 1012], "fulfil": [21, 130, 970], "autogenerated_sourc": 21, "format": [21, 72, 73, 117, 126, 127, 131, 133, 134, 268, 286, 305, 325, 926, 927, 930, 970], "png": [21, 134], "_imag": 21, "lastli": 21, "structur": [21, 72, 73, 74, 75, 76, 116, 121, 124, 125, 134, 135, 589, 605, 866, 879], "rst": 21, "skip": [21, 72, 73, 120, 866, 879], "read": [21, 72, 73, 970], "partial_sourc": 21, "conf": 21, "copi": [21, 31, 32, 72, 73, 77, 78, 117, 122, 126, 131, 133, 134, 147, 148, 197, 201, 202, 203, 204, 205, 215, 218, 268, 274, 305, 350, 589, 606, 658, 659, 802, 832, 835, 866, 868, 915, 921, 924], "create_rst_fil": 21, "filter": [21, 701, 702, 703, 704, 705, 706, 707, 708, 992, 993, 994, 995, 996, 997, 998, 999], "repres": [21, 133, 197, 232, 235, 268, 287, 355, 365, 368, 369, 372, 378, 381, 390, 393, 426, 429, 525, 528, 562, 565, 584, 701, 710, 714, 761, 762, 764], "overal": [21, 117, 125, 126, 127, 136], "markup": 21, "6": [21, 37, 38, 41, 42, 51, 52, 74, 75, 83, 84, 85, 86, 101, 102, 118, 122, 125, 133, 134, 135, 159, 165, 168, 170, 173, 180, 183, 197, 221, 224, 305, 327, 343, 355, 356, 357, 358, 359, 360, 369, 370, 371, 372, 373, 374, 377, 394, 397, 398, 401, 414, 417, 418, 419, 420, 421, 426, 429, 451, 454, 463, 466, 483, 486, 523, 524, 530, 533, 550, 553, 566, 569, 570, 573, 579, 583, 584, 589, 598, 607, 617, 618, 621, 622, 652, 657, 663, 665, 666, 668, 701, 704, 707, 708, 713, 714, 720, 722, 723, 725, 726, 728, 752, 754, 765, 767, 771, 773, 786, 787, 790, 797, 800, 802, 803, 804, 806, 808, 811, 816, 819, 820, 823, 828, 831, 832, 835, 836, 839, 841, 850, 853, 884, 885, 888, 889, 890, 891, 892, 893, 901, 902, 905, 906, 907, 908, 912, 926, 927, 930, 931, 934], "extract": [21, 116], "get_functions_and_class": 21, "doctr": 21, "readm": [21, 148], "module_nam": 21, "copy_readme_to_rst": 21, "tabl": 21, "toc": 21, "tree": 21, "append": [21, 72, 73, 120, 131, 134, 355, 402, 405, 714, 726, 728, 738, 741], "append_toctree_to_rst": 21, "9": [21, 37, 38, 41, 42, 51, 52, 74, 75, 83, 84, 87, 88, 101, 102, 118, 134, 135, 355, 369, 370, 371, 372, 373, 394, 397, 398, 401, 523, 524, 550, 553, 566, 569, 570, 573, 589, 617, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 684, 685, 686, 701, 704, 707, 708, 714, 720, 722, 723, 725, 726, 728, 752, 754, 765, 767, 771, 773, 802, 803, 804, 806, 820, 823, 828, 831, 836, 839, 841, 889, 890, 891, 892, 893, 901, 905, 906, 907, 926, 927, 930, 1008, 1009, 1010], "index": [21, 31, 32, 72, 73, 77, 78, 121, 125, 133, 196, 197, 212, 213, 232, 233, 234, 235, 236, 305, 346, 589, 595, 617, 618, 621, 802, 846, 849, 866, 869, 870, 873, 874, 875, 880, 882, 901, 902, 903, 904, 906, 907, 908, 912, 915, 916, 919, 973, 975], "create_index_rst": 21, "14": [21, 101, 102, 118, 125, 355, 414, 417, 663, 665, 668, 701, 713, 714, 726, 728, 752, 754, 891, 893, 906, 907, 926, 927, 930], "\u03c0": [21, 355, 361, 364, 374, 377, 382, 385, 386, 389], "namespac": [21, 116, 126, 131, 136], "helper": [23, 69, 120, 134], "abc": [23, 24, 25, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 72, 73, 133, 305, 314, 320, 589, 614, 1004, 1005, 1008, 1012], "inherit": [23, 124, 125, 133], "__delattr__": [23, 69], "self": [23, 69, 72, 73, 124, 125, 131, 133, 134, 135, 136, 160, 161, 162, 165, 166, 167, 170, 171, 172, 175, 176, 177, 180, 181, 182, 185, 186, 189, 191, 192, 201, 202, 203, 207, 208, 209, 215, 216, 217, 221, 222, 223, 232, 233, 234, 237, 238, 239, 245, 246, 247, 250, 252, 253, 255, 257, 258, 263, 265, 266, 277, 278, 279, 305, 356, 357, 358, 361, 362, 363, 365, 366, 367, 369, 370, 371, 374, 375, 376, 378, 379, 380, 382, 383, 384, 386, 387, 388, 390, 391, 392, 394, 395, 396, 398, 399, 400, 402, 403, 404, 406, 407, 408, 410, 411, 412, 414, 415, 416, 418, 419, 420, 422, 423, 424, 426, 427, 428, 430, 431, 432, 435, 436, 437, 439, 440, 441, 443, 444, 445, 447, 448, 449, 451, 452, 453, 455, 456, 457, 459, 460, 461, 463, 464, 465, 467, 468, 469, 471, 472, 473, 475, 476, 477, 479, 480, 481, 483, 484, 485, 487, 488, 489, 491, 492, 493, 495, 496, 497, 499, 500, 501, 503, 504, 505, 507, 508, 509, 511, 512, 513, 515, 516, 517, 519, 520, 521, 525, 526, 527, 530, 531, 532, 534, 535, 536, 538, 539, 540, 542, 543, 544, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 560, 562, 563, 564, 566, 567, 568, 570, 571, 572, 574, 576, 577, 579, 581, 582, 585, 586, 587, 590, 591, 592, 602, 603, 618, 619, 620, 665, 666, 667, 670, 671, 675, 676, 679, 680, 683, 684, 687, 688, 691, 692, 715, 716, 717, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 739, 740, 742, 743, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783, 784, 787, 788, 789, 792, 793, 794, 797, 798, 799, 803, 804, 805, 808, 809, 810, 812, 813, 814, 816, 817, 818, 820, 821, 822, 824, 825, 826, 828, 829, 830, 832, 833, 834, 836, 837, 838, 842, 843, 844, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 885, 886, 887, 895, 896, 908, 910, 911, 916, 917, 918, 921, 922, 923, 927, 928, 929, 931, 932, 933, 935, 936, 937, 939, 940, 941, 943, 944, 945, 947, 948, 949, 951, 952, 953, 955, 956, 957, 960, 961, 962, 965, 966, 967, 970, 1008, 1012], "delattr": [23, 69], "__format__": [23, 69], "format_spec": [23, 69], "formatt": [23, 69], "__getattribute__": [23, 69], "getattr": [23, 69], "__init_subclass__": [23, 69], "subclass": [23, 69], "overridden": [23, 69], "extend": [23, 69, 117, 120, 122, 129], "__new__": [23, 69], "accur": [23, 69, 355, 447, 450], "__reduce__": [23, 69], "pickl": [23, 69, 72, 73, 125, 134], "__reduce_ex__": [23, 69], "protocol": [23, 69], "__setattr__": [23, 125], "setattr": 23, "__sizeof__": [23, 69], "size": [23, 69, 72, 73, 74, 75, 76, 133, 134, 197, 226, 227, 229, 230, 305, 347, 348, 349, 589, 645, 651, 701, 713, 714, 726, 728, 742, 744, 752, 754, 758, 760, 765, 767, 777, 779, 802, 816, 819, 836, 839, 841, 842, 845, 889, 890, 894, 895, 897, 901, 902, 904, 959, 960, 963, 965, 968, 992, 993, 994], "memori": [23, 69, 127, 128, 146, 148, 305, 323, 344, 349, 351, 354, 701, 711, 970], "byte": [23, 69], "__str__": [23, 69], "__subclasshook__": [23, 69], "overrid": [23, 69, 589, 642], "issubclass": [23, 69], "invok": [23, 69], "abcmeta": [23, 69], "__subclasscheck__": [23, 69], "true": [23, 24, 25, 33, 34, 39, 40, 47, 48, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 120, 121, 125, 126, 128, 131, 133, 134, 135, 136, 159, 160, 161, 162, 163, 164, 165, 167, 169, 170, 172, 174, 175, 177, 179, 180, 182, 184, 185, 186, 188, 189, 190, 192, 194, 195, 197, 198, 200, 201, 203, 205, 207, 209, 211, 212, 214, 215, 217, 219, 221, 223, 225, 226, 227, 228, 229, 231, 232, 234, 236, 237, 239, 241, 242, 244, 245, 247, 249, 250, 251, 253, 255, 256, 258, 260, 261, 263, 264, 266, 268, 274, 277, 278, 279, 280, 281, 305, 324, 341, 345, 346, 355, 356, 358, 360, 361, 363, 365, 367, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 397, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 417, 418, 420, 422, 424, 426, 428, 430, 432, 434, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 462, 463, 465, 466, 467, 469, 470, 471, 473, 474, 475, 477, 478, 479, 481, 482, 483, 485, 486, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 514, 515, 517, 518, 519, 521, 525, 527, 529, 530, 532, 534, 536, 537, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 575, 577, 579, 580, 582, 585, 587, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 602, 603, 607, 614, 616, 618, 620, 622, 628, 629, 636, 651, 657, 659, 662, 663, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 701, 709, 714, 715, 717, 718, 719, 738, 740, 742, 744, 765, 766, 767, 780, 782, 786, 787, 789, 790, 791, 792, 794, 795, 796, 797, 799, 800, 801, 802, 803, 805, 807, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 841, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 863, 864, 865, 866, 867, 876, 877, 879, 885, 887, 889, 890, 895, 896, 898, 901, 902, 903, 905, 906, 907, 908, 909, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 931, 933, 934, 935, 937, 938, 939, 941, 942, 943, 945, 946, 947, 949, 950, 951, 953, 954, 955, 957, 958, 959, 960, 962, 963, 964, 965, 967, 968, 969, 992, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "notimpl": [23, 69], "normal": [23, 69, 134, 802, 846, 849, 884, 885, 888, 889, 894, 1006, 1007], "algorithm": [23, 69, 148, 701, 702, 703, 704, 705, 706, 707, 708, 992, 993, 994, 995, 996, 997, 998, 999], "outcom": [23, 69], "cach": [23, 69, 120, 121, 305, 323, 589, 600], "arraywithactiv": 24, "gelu": [24, 25, 70, 71, 159, 978], "approxim": [24, 25, 70, 71, 117, 159, 160, 161, 162, 163, 164, 355, 361, 364, 365, 368, 374, 377, 378, 381, 382, 385, 386, 389, 422, 425, 426, 429, 443, 446, 447, 450, 487, 490, 491, 494, 495, 498, 499, 502, 542, 545, 558, 561, 562, 565, 579, 583, 584, 714, 746, 748, 755, 757], "leaky_relu": [24, 25, 70, 71, 159, 970], "alpha": [24, 25, 70, 71, 159, 165, 166, 167, 168, 169], "relu": [24, 25, 67, 68, 70, 71, 134, 135, 159, 160, 163, 165, 168, 970], "sigmoid": [24, 25, 70, 71, 131, 134, 135, 159, 970], "softmax": [24, 25, 67, 68, 70, 71, 159, 701, 712, 713, 970], "axi": [24, 25, 47, 48, 49, 50, 51, 52, 61, 62, 63, 64, 65, 66, 70, 71, 72, 73, 77, 78, 95, 96, 97, 98, 107, 108, 109, 110, 111, 112, 118, 121, 125, 126, 128, 129, 131, 133, 136, 147, 159, 180, 181, 182, 183, 184, 197, 226, 227, 228, 229, 230, 231, 305, 307, 310, 317, 330, 331, 332, 333, 334, 335, 336, 337, 349, 589, 607, 608, 617, 661, 714, 720, 721, 722, 726, 728, 777, 778, 779, 780, 781, 782, 786, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 828, 829, 830, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 857, 858, 861, 889, 900, 901, 902, 903, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969], "tanh": [24, 25, 37, 38, 70, 71, 83, 84, 131, 159, 190, 355, 970], "collect": [26, 72, 73, 120, 147, 159, 194, 305, 589, 663, 701, 786, 866, 879, 884, 889, 978, 992, 1006, 1008], "wrap": [26, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 68, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 114, 115, 117, 120, 121, 122, 124, 125, 126, 127, 128, 129, 131, 133, 136, 148, 149, 157, 189, 190, 191, 192, 201, 202, 207, 208, 215, 216, 221, 222, 237, 238, 245, 246, 250, 252, 255, 257, 263, 265, 277, 278, 279, 281, 356, 357, 358, 360, 369, 370, 371, 373, 418, 419, 420, 451, 452, 453, 579, 580, 581, 582, 589, 590, 591, 592, 594, 600, 618, 619, 620, 622, 663, 665, 666, 667, 669, 699, 715, 716, 717, 719, 803, 804, 805, 807, 836, 837, 838, 840, 891, 893, 908, 909, 910, 911], "args_to_ivi": 26, "include_deriv": [26, 27, 28, 29, 30, 866, 868, 878], "keyword": [26, 27, 28, 69, 72, 73, 74, 75, 76, 116, 126, 127, 128, 129, 134, 197, 232, 235, 305, 314, 315, 329, 333, 337, 589, 596, 639, 866, 872, 926, 951, 954, 1004, 1005], "variabl": [26, 27, 28, 29, 30, 72, 73, 74, 75, 117, 122, 125, 126, 128, 129, 134, 135, 136, 148, 589, 599, 631, 632, 633, 634, 635, 636, 638, 655, 663, 670, 672, 674, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 696, 699, 701, 712, 714, 762, 764, 862, 863, 864, 865, 884, 885, 888, 970, 981, 982, 983, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "nest": [26, 27, 28, 29, 30, 72, 73, 74, 75, 76, 116, 121, 124, 125, 133, 134, 135, 148, 305, 329, 333, 337, 589, 657, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013], "unchang": [26, 27, 28, 29, 30], "posit": [26, 27, 28, 37, 38, 83, 84, 129, 134, 147, 196, 197, 212, 213, 268, 288, 305, 329, 333, 337, 355, 356, 359, 467, 470, 471, 474, 525, 528, 546, 549, 589, 616, 714, 715, 718, 802, 816, 819, 836, 839, 889, 899, 901, 904, 959, 960, 963, 965, 968, 981, 982], "bool": [26, 27, 28, 29, 30, 33, 34, 72, 73, 113, 114, 118, 125, 126, 128, 136, 194, 195, 197, 220, 268, 274, 277, 278, 280, 283, 284, 285, 286, 289, 292, 293, 294, 304, 305, 324, 325, 340, 349, 352, 355, 394, 397, 398, 401, 406, 409, 414, 417, 435, 438, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 507, 510, 511, 514, 515, 518, 534, 537, 589, 590, 593, 597, 598, 607, 610, 614, 616, 626, 628, 633, 635, 636, 637, 638, 651, 661, 662, 663, 696, 714, 715, 718, 742, 744, 765, 767, 780, 782, 802, 841, 862, 863, 864, 865, 866, 867, 868, 872, 876, 877, 878, 889, 890, 901, 902, 903, 915, 916, 919, 921, 924, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968], "deriv": [26, 27, 28, 29, 30, 126, 127, 133, 135, 197, 207, 210, 221, 224, 245, 248, 263, 267, 663, 665, 668, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 866, 868, 878, 1004, 1008, 1012, 1014], "tupl": [26, 27, 28, 29, 30, 47, 48, 59, 60, 69, 72, 73, 116, 125, 126, 127, 129, 133, 134, 135, 148, 197, 201, 204, 206, 220, 237, 240, 242, 243, 260, 262, 268, 276, 290, 305, 324, 589, 616, 652, 701, 704, 707, 708, 711, 714, 746, 748, 755, 757, 765, 766, 767, 771, 773, 780, 782, 802, 808, 811, 812, 815, 820, 823, 824, 827, 832, 835, 836, 839, 842, 845, 846, 849, 858, 861, 862, 863, 864, 865, 866, 868, 869, 871, 873, 874, 875, 877, 878, 880, 881, 882, 883, 889, 894, 895, 897, 901, 904, 906, 907, 908, 910, 912, 913, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968], "kei": [26, 27, 28, 69, 72, 73, 74, 75, 76, 125, 134, 305, 317, 589, 595, 605, 701, 712, 713, 862, 863, 864, 866, 869, 875, 879, 981, 982, 992, 1003, 1008, 1012], "word": [26, 27, 28, 197, 198, 199, 889, 895, 897, 981, 982], "args_to_n": [26, 128, 133], "to_ivi": [26, 72, 73, 133, 866, 879], "input": [26, 29, 30, 41, 42, 72, 73, 74, 75, 76, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 116, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 148, 149, 157, 159, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 190, 193, 194, 195, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 237, 240, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 274, 275, 276, 277, 280, 282, 283, 284, 285, 286, 287, 293, 294, 295, 296, 300, 305, 314, 315, 324, 325, 326, 327, 329, 330, 333, 337, 343, 349, 350, 355, 356, 359, 360, 361, 364, 365, 368, 369, 372, 373, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 580, 583, 584, 585, 588, 589, 590, 593, 594, 595, 597, 598, 599, 601, 602, 604, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 626, 628, 629, 631, 632, 633, 635, 636, 637, 638, 642, 645, 646, 651, 652, 655, 657, 658, 659, 661, 662, 663, 665, 666, 667, 668, 669, 674, 679, 681, 696, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 742, 744, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 787, 790, 792, 795, 797, 800, 802, 803, 806, 807, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 840, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 862, 863, 864, 865, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 912, 913, 914, 915, 916, 919, 921, 924, 926, 927, 930, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007], "leaf": [26, 29, 30, 72, 73, 121, 125, 134, 866, 867, 876, 877], "union": [26, 29, 30, 39, 40, 47, 48, 72, 73, 116, 118, 121, 124, 125, 126, 127, 128, 129, 131, 136, 159, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 193, 194, 195, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 220, 221, 224, 226, 227, 229, 230, 232, 235, 237, 240, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 272, 273, 274, 275, 276, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 305, 321, 322, 323, 324, 325, 327, 330, 331, 332, 333, 338, 344, 346, 348, 349, 350, 351, 354, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588, 589, 590, 593, 597, 598, 601, 602, 604, 607, 608, 611, 612, 613, 615, 616, 617, 618, 619, 621, 626, 628, 629, 631, 632, 633, 642, 645, 646, 651, 652, 657, 658, 659, 661, 662, 663, 665, 668, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 696, 698, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 713, 714, 715, 718, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 742, 744, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 762, 764, 765, 766, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 787, 790, 792, 795, 797, 800, 802, 803, 806, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 877, 878, 884, 885, 888, 889, 890, 891, 892, 894, 895, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 912, 913, 914, 915, 916, 919, 921, 924, 926, 927, 930, 931, 934, 935, 938, 939, 942, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968], "nativearrai": [26, 29, 30, 31, 32, 39, 40, 116, 118, 121, 124, 125, 128, 129, 131, 133, 136, 149, 157, 159, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 193, 197, 198, 199, 201, 204, 207, 210, 221, 224, 226, 227, 229, 230, 232, 235, 237, 238, 240, 245, 248, 250, 254, 255, 259, 263, 267, 268, 274, 275, 276, 277, 280, 286, 288, 291, 293, 294, 296, 300, 305, 324, 325, 327, 343, 349, 350, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588, 589, 590, 591, 593, 597, 598, 601, 602, 604, 606, 607, 608, 611, 612, 613, 615, 616, 617, 618, 619, 621, 626, 628, 629, 631, 632, 633, 642, 645, 646, 651, 652, 657, 658, 659, 661, 662, 663, 665, 668, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 696, 698, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 713, 714, 715, 718, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 742, 744, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 787, 790, 792, 795, 797, 800, 802, 803, 806, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 866, 868, 878, 884, 885, 888, 889, 890, 900, 901, 902, 903, 904, 905, 906, 907, 908, 912, 913, 914, 915, 916, 919, 921, 924, 926, 927, 930, 931, 934, 935, 938, 939, 942, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968], "travers": [26, 29, 30, 72, 73, 125, 131, 133, 866, 878], "lowest": [26, 29, 30, 72, 73, 121, 148, 866, 878, 889, 891, 892], "leav": [26, 29, 30, 72, 73, 74, 75, 117, 118, 120, 121, 125, 126, 128, 129, 134, 135, 802, 846, 849, 866, 867, 868, 876, 877, 878], "to_n": [26, 72, 73], "item": [26, 30, 67, 68, 69, 72, 73, 126, 131, 133, 134, 136, 268, 283, 305, 314, 315, 317, 324, 326, 328, 330, 332, 336, 589, 605, 627, 653, 654, 866, 871, 872, 873, 874, 878, 882, 883, 970, 1004, 1005], "arraywithcr": 31, "asarrai": [31, 32, 77, 78, 128, 197, 701, 702, 906, 908, 912], "dtype": [31, 32, 33, 34, 63, 64, 72, 73, 77, 78, 79, 80, 109, 110, 116, 118, 121, 126, 127, 133, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 260, 261, 262, 263, 264, 265, 266, 267, 268, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 304, 305, 345, 355, 410, 413, 589, 597, 598, 642, 658, 701, 709, 802, 816, 819, 884, 885, 888, 889, 895, 897, 901, 902, 903, 915, 921, 924, 926, 943, 944, 945, 946, 947, 950, 951, 952, 953, 954, 959, 960, 963, 970, 983, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1014, 1015], "variant": [31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 117, 118, 189, 190, 191, 192, 201, 202, 207, 208, 215, 216, 221, 222, 237, 238, 245, 246, 250, 252, 255, 257, 263, 265, 277, 278, 279, 281, 356, 357, 358, 360, 369, 370, 371, 373, 418, 419, 420, 451, 452, 453, 579, 580, 581, 582, 590, 591, 592, 594, 618, 619, 620, 622, 665, 666, 667, 669, 715, 716, 717, 719, 803, 804, 805, 807, 836, 837, 838, 840, 891, 893, 908, 909, 910, 911], "minim": [31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 59, 60, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 97, 98, 101, 102, 105, 106, 117, 128, 131, 189, 190, 191, 192, 201, 202, 207, 208, 215, 216, 221, 222, 237, 238, 245, 246, 250, 252, 255, 257, 263, 265, 277, 278, 279, 281, 356, 357, 358, 360, 369, 370, 371, 373, 418, 419, 420, 451, 452, 453, 579, 580, 581, 582, 590, 591, 592, 594, 618, 619, 620, 622, 665, 666, 667, 669, 715, 716, 717, 719, 803, 804, 805, 807, 836, 837, 838, 840, 891, 893, 908, 909, 910, 911], "empty_lik": [31, 32, 77, 78, 197], "from_dlpack": [31, 32, 77, 78, 197], "full_lik": [31, 32, 77, 78, 197], "fill_valu": [31, 32, 77, 78, 126, 197, 220, 221, 222, 223, 224, 225, 355, 463, 466, 483, 486], "meshgrid": [31, 32, 77, 78, 197], "xy": [31, 32, 77, 78, 197, 232, 233, 234, 235, 236], "ones_lik": [31, 32, 77, 78, 136, 197, 970], "tril": [31, 32, 77, 78, 197], "k": [31, 32, 69, 77, 78, 115, 131, 197, 212, 213, 214, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 589, 597, 701, 713, 714, 738, 741, 758, 760, 762, 764, 765, 767, 768, 770, 774, 776, 889, 894, 895, 897, 901, 904], "triu": [31, 32, 77, 78, 197], "zeros_lik": [31, 32, 77, 78, 197, 802, 803, 806, 970], "creation": [32, 72, 73, 74, 75, 76, 78, 116, 126, 127, 131, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 237, 240, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267], "data_typ": [33, 34, 79, 80, 116, 126, 268, 272, 273, 274, 275, 276, 277, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], "arraywithdatatyp": 33, "can_cast": [33, 34, 79, 80, 121, 126, 268, 281], "float32": [33, 34, 79, 80, 118, 126, 268, 272, 273, 277, 278, 279, 280, 281, 289, 884, 885, 888], "float64": [33, 34, 126, 268, 274, 277, 278, 280, 289], "arraywithdevic": [35, 133], "ab": [37, 38, 83, 84, 120, 123, 355, 360, 542, 545, 714, 780, 782, 970], "y": [37, 38, 39, 40, 47, 48, 51, 52, 59, 60, 74, 75, 83, 84, 85, 86, 93, 94, 97, 98, 101, 102, 105, 106, 116, 118, 122, 125, 131, 133, 159, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 190, 191, 192, 193, 197, 220, 221, 224, 232, 235, 242, 243, 245, 248, 263, 267, 268, 274, 305, 325, 339, 343, 348, 355, 356, 357, 358, 359, 360, 369, 370, 371, 372, 373, 374, 377, 386, 389, 394, 397, 398, 401, 410, 413, 414, 417, 418, 419, 420, 421, 422, 425, 426, 429, 443, 446, 451, 452, 453, 454, 463, 466, 483, 486, 523, 524, 530, 533, 534, 537, 550, 553, 566, 569, 570, 573, 579, 580, 581, 582, 583, 584, 589, 590, 591, 592, 593, 594, 597, 598, 606, 607, 614, 615, 617, 618, 619, 620, 621, 622, 651, 657, 658, 659, 663, 674, 701, 707, 708, 710, 714, 715, 716, 717, 718, 719, 720, 722, 723, 725, 735, 737, 752, 754, 771, 773, 774, 776, 786, 787, 790, 792, 795, 797, 800, 802, 803, 804, 805, 806, 807, 808, 811, 816, 819, 820, 823, 828, 831, 832, 835, 836, 837, 838, 839, 840, 841, 850, 853, 889, 890, 891, 892, 893, 894, 895, 897, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 915, 916, 919, 926, 927, 930, 931, 934, 947, 950, 951, 954, 959, 960, 963], "aco": [37, 38, 83, 84, 355, 970], "acosh": [37, 38, 83, 84, 268, 289, 290, 355, 970], "x2": [37, 38, 39, 40, 47, 48, 72, 73, 83, 84, 85, 86, 93, 94, 118, 129, 268, 300, 305, 343, 355, 369, 370, 371, 372, 373, 386, 387, 388, 389, 394, 395, 396, 397, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 430, 431, 432, 433, 434, 435, 436, 437, 438, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 479, 480, 481, 482, 483, 484, 485, 486, 503, 504, 505, 506, 507, 508, 509, 510, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 549, 574, 575, 576, 577, 578, 589, 590, 591, 592, 593, 594, 701, 706, 714, 720, 721, 722, 738, 739, 740, 741, 752, 753, 754, 762, 763, 764, 771, 772, 773, 777, 778, 779, 901, 905], "z": [37, 38, 39, 40, 74, 75, 83, 84, 85, 86, 118, 122, 125, 131, 133, 305, 339, 355, 369, 370, 371, 372, 373, 394, 397, 414, 417, 463, 466, 483, 486, 523, 524, 589, 597, 598, 617, 618, 619, 620, 622, 651, 714, 720, 722, 786, 787, 790, 792, 795, 802, 803, 806, 901, 902, 926, 927, 930, 931, 934], "asin": [37, 38, 83, 84, 355, 970], "asinh": [37, 38, 83, 84, 355, 970], "atan": [37, 38, 83, 84, 355, 970], "atan2": [37, 38, 83, 84, 355, 970], "atanh": [37, 38, 83, 84, 355, 970], "bitwise_and": [37, 38, 83, 84, 355], "bitwise_invert": [37, 38, 83, 84, 355], "bitwise_left_shift": [37, 38, 83, 84, 355], "bitwise_or": [37, 38, 83, 84, 355], "bitwise_right_shift": [37, 38, 83, 84, 355], "bitwise_xor": [37, 38, 83, 84, 355], "ceil": [37, 38, 83, 84, 197, 198, 199, 355, 970], "cosh": [37, 38, 83, 84, 355, 970], "divid": [37, 38, 72, 73, 83, 84, 118, 124, 355, 455, 458, 589, 653, 802, 841], "equal": [37, 38, 72, 73, 83, 84, 118, 125, 126, 197, 212, 213, 220, 221, 224, 268, 274, 355, 402, 405, 410, 413, 467, 470, 471, 474, 542, 545, 550, 553, 589, 590, 593, 597, 598, 714, 726, 728, 746, 748, 755, 757, 802, 803, 806, 812, 815, 841, 858, 861, 889, 895, 897, 906, 907, 908, 912, 914, 915, 916, 919, 921, 924, 926, 935, 938, 947, 950, 951, 954, 955, 958], "erf": [37, 38, 83, 84, 355], "exp": [37, 38, 83, 84, 355, 447, 450, 503, 506, 970], "expm1": [37, 38, 83, 84, 355], "floor": [37, 38, 83, 84, 355, 410, 413, 589, 615, 970], "floor_divid": [37, 38, 83, 84, 355], "greater": [37, 38, 72, 73, 83, 84, 355, 361, 364, 374, 377, 386, 389, 402, 405, 410, 413, 451, 454, 455, 458, 542, 545, 546, 549, 554, 557, 585, 588, 714, 720, 722, 802, 842, 845, 889, 895, 897], "greater_equ": [37, 38, 83, 84, 355], "isfinit": [37, 38, 83, 84, 355], "isinf": [37, 38, 83, 84, 355], "isnan": [37, 38, 83, 84, 355], "less_equ": [37, 38, 83, 84, 355], "log10": [37, 38, 83, 84, 355], "log1p": [37, 38, 83, 84, 355], "log2": [37, 38, 83, 84, 355], "logaddexp": [37, 38, 83, 84, 355], "logical_and": [37, 38, 83, 84, 355, 970], "logical_not": [37, 38, 83, 84, 355, 970], "logical_or": [37, 38, 83, 84, 355, 970], "logical_xor": [37, 38, 83, 84, 355], "multipli": [37, 38, 83, 84, 118, 122, 124, 355, 589, 607], "neg": [37, 38, 83, 84, 121, 125, 128, 159, 165, 168, 197, 198, 199, 212, 213, 355, 467, 470, 471, 474, 525, 528, 542, 545, 546, 549, 714, 765, 767, 777, 779, 780, 782, 802, 820, 823, 836, 839, 959, 960, 963, 965, 968], "not_equ": [37, 38, 83, 84, 355], "pow": [37, 38, 83, 84, 355], "remaind": [37, 38, 72, 73, 83, 84, 355, 589, 615, 802, 841], "sin": [37, 38, 83, 84, 124, 131, 355, 589, 616, 970], "sinh": [37, 38, 83, 84, 355, 970], "sqrt": [37, 38, 83, 84, 355, 714, 780, 782], "squar": [37, 38, 83, 84, 355, 566, 569, 701, 704, 714, 715, 718, 723, 725, 729, 731, 732, 734, 735, 737, 745, 761, 762, 764, 765, 767], "subtract": [37, 38, 83, 84, 118, 124, 355], "tan": [37, 38, 83, 84, 117, 121, 125, 128, 129, 131, 355, 374, 377, 580, 714, 726, 728, 906, 907, 915, 916, 919, 970], "56": [37, 38, 83, 84, 118, 355, 566, 569, 579, 580, 581, 582, 583, 663, 665, 668, 714, 752, 754, 926, 927, 930], "19": [37, 38, 83, 84, 118, 355, 414, 417, 579, 580, 581, 582, 583, 714, 726, 728], "762": [37, 38, 83, 84, 159, 189, 191, 192, 193, 355, 584], "964": [37, 38, 83, 84, 159, 189, 191, 192, 193, 355, 584], "trunc": [37, 38, 83, 84, 355], "elementwis": [38, 72, 73, 84, 116, 121, 131, 136, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588], "arraywithgener": [39, 133], "all_equ": [39, 40, 85, 86, 589, 594], "equality_matrix": [39, 40, 85, 86, 589, 590, 591, 592, 593, 594], "x1": [39, 40, 83, 84, 85, 86, 118, 129, 268, 300, 305, 343, 355, 369, 372, 373, 386, 389, 394, 397, 402, 405, 406, 409, 410, 413, 414, 417, 430, 433, 434, 435, 438, 455, 458, 459, 462, 463, 466, 479, 482, 483, 486, 503, 506, 507, 510, 515, 518, 519, 522, 523, 524, 525, 528, 529, 534, 537, 542, 545, 546, 549, 574, 575, 578, 589, 590, 591, 592, 593, 594, 597, 701, 706, 714, 720, 722, 738, 741, 752, 754, 762, 764, 771, 773, 777, 779, 901, 905], "mix": [39, 40, 74, 75, 115, 118, 120, 131, 268, 296, 305, 343, 355, 369, 372, 394, 397, 414, 417, 463, 466, 483, 486, 523, 524, 534, 537, 589, 590, 591, 606, 614, 617, 618, 621, 657, 658, 659, 701, 704, 707, 708, 713, 714, 715, 718, 771, 773, 786, 787, 790, 797, 800, 802, 803, 806, 884, 885, 888, 901, 905, 926, 927, 930, 935, 938], "gather_nd": [39, 40, 72, 73, 85, 86, 589, 622, 970], "arraywithgradi": [41, 133], "adam_step": [41, 42, 87, 88, 663, 669], "mw": [41, 42, 87, 88, 135, 663, 665, 666, 667, 668, 669, 670, 672], "vw": [41, 42, 87, 88, 135, 663, 665, 666, 667, 668, 669, 670, 672], "beta1": [41, 42, 87, 88, 135, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 684, 685, 686, 1008, 1009, 1010], "beta2": [41, 42, 87, 88, 135, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 684, 685, 686, 1008, 1009, 1010], "999": [41, 42, 83, 84, 87, 88, 135, 189, 190, 192, 355, 584, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 684, 685, 686, 1008, 1009, 1010], "epsilon": [41, 42, 49, 50, 53, 54, 87, 88, 95, 96, 99, 100, 121, 125, 128, 135, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 684, 685, 686, 714, 746, 748, 755, 757, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 884, 885, 886, 887, 888, 1006, 1007, 1008, 1009, 1010], "1e": [41, 42, 49, 50, 53, 54, 87, 88, 95, 96, 99, 100, 121, 125, 128, 135, 136, 589, 625, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 684, 685, 686, 714, 765, 767, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 884, 885, 886, 887, 888, 970, 1008, 1009, 1010, 1011, 1013], "07": [41, 42, 49, 50, 87, 88, 95, 96, 135, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 683, 684, 685, 686, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 1008, 1009, 1010], "dcdw": [41, 42, 87, 88, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 683, 684, 685, 686, 687, 688, 689, 690], "adam_step_delta": [41, 42, 87, 88, 663, 665, 666, 667, 668, 669], "639": [41, 42, 663, 665, 666, 668], "11": [41, 42, 74, 75, 83, 84, 101, 102, 118, 125, 355, 369, 371, 372, 373, 394, 397, 550, 553, 589, 607, 617, 665, 666, 714, 726, 728, 752, 754, 786, 797, 800, 802, 820, 823, 828, 831, 889, 891, 892, 893, 901, 905, 906, 907, 926, 927, 930], "32": [41, 42, 134, 159, 165, 168, 355, 414, 417, 665, 666, 701, 704, 707, 714, 752, 754, 901, 905, 926, 927, 930], "63": [41, 42, 93, 94, 355, 566, 569, 665, 666, 714, 715, 717, 718, 719, 752, 754, 926, 927, 930], "00121": [41, 42, 665, 666], "0102": [41, 42, 665, 666], "0397": [41, 42, 665, 666], "gradient": [42, 72, 73, 88, 116, 125, 134, 135, 147, 148, 305, 349, 665, 668, 670, 672, 674, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 696, 697, 698, 699, 700, 862, 863, 864, 865, 970, 1008, 1009, 1010, 1011, 1012, 1013], "arraywithimag": [43, 133], "arraywithlay": 45, "linear_algebra": [47, 48, 93, 94, 116, 133, 714, 715, 718, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 742, 744, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 785], "arraywithlinearalgebra": 47, "choleski": [47, 48, 93, 94, 714, 719], "upper": [47, 48, 72, 73, 93, 94, 197, 212, 213, 255, 259, 714, 715, 716, 717, 718, 719, 758, 760, 889, 895, 897], "625": [47, 48, 714, 715, 716, 718], "25": [47, 48, 125, 355, 566, 569, 570, 573, 714, 715, 716, 718, 726, 728, 735, 737, 786, 792, 795, 884, 885, 888, 926, 927, 930], "cross": [47, 48, 74, 75, 714, 786, 787, 790, 792, 795, 797, 800, 970], "det": [47, 48, 74, 75, 714], "diagon": [47, 48, 74, 75, 197, 212, 213, 250, 254, 255, 259, 714, 774, 776], "offset": [47, 48, 53, 54, 99, 100, 714, 726, 727, 728, 774, 775, 776, 884, 885, 886, 887, 888], "axis1": [47, 48, 51, 52, 97, 98, 714, 726, 727, 728, 802, 850, 851, 852, 853], "axis2": [47, 48, 714, 726, 727, 728], "eigh": [47, 48, 74, 75, 714], "namedtupl": [47, 48, 714, 729, 730, 731, 758, 759, 760, 765, 767, 906, 907, 908, 912], "eigvalsh": [47, 48, 74, 75, 714], "inv": [47, 48, 74, 75, 133, 714, 970], "matmul": [47, 48, 93, 94, 116, 122, 131, 714, 765, 767, 970], "matrix_norm": [47, 48, 72, 73, 714], "ord": [47, 48, 72, 73, 714, 742, 743, 744, 780, 781, 782], "fro": [47, 48, 714, 742, 743, 744], "keepdim": [47, 48, 63, 64, 65, 66, 72, 73, 109, 110, 111, 112, 589, 661, 714, 742, 743, 744, 780, 781, 782, 901, 902, 903, 926, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969], "matrix_rank": [47, 48, 74, 75, 714], "rtol": [47, 48, 714, 746, 747, 748, 755, 756, 757], "matrix_transpos": [47, 48, 74, 75, 133, 714], "outer": [47, 48, 74, 75, 714, 862, 863, 864, 865], "pinv": [47, 48, 74, 75, 714, 970], "qr": [47, 48, 74, 75, 714], "reduc": [47, 48, 72, 73, 133, 305, 349, 589, 612, 714, 758, 759, 760, 901, 902, 903, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968], "solv": [47, 48, 74, 75, 132, 147, 714], "svd": [47, 48, 74, 75, 714, 970], "full_matric": [47, 48, 714, 765, 766, 767], "svdval": [47, 48, 74, 75, 714], "tensordot": [47, 48, 74, 75, 714], "ax": [47, 48, 51, 52, 72, 73, 97, 98, 116, 118, 126, 133, 305, 349, 589, 607, 714, 742, 744, 762, 764, 771, 772, 773, 780, 782, 802, 812, 815, 820, 823, 824, 825, 826, 827, 836, 839, 842, 845, 850, 853, 858, 861, 901, 902, 903, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968], "trace": [47, 48, 72, 73, 74, 75, 131, 148, 589, 635, 636, 638, 714], "vecdot": [47, 48, 74, 75, 714], "vector_norm": [47, 48, 72, 73, 714], "vector_to_skew_symmetric_matrix": [47, 48, 74, 75, 714, 970], "arraywithloss": 49, "binary_cross_entropi": [49, 50, 95, 96, 786], "pred": [49, 50, 95, 96, 121, 125, 128, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801], "cross_entropi": [49, 50, 95, 96, 121, 125, 128, 786, 797, 800], "sparse_cross_entropi": [49, 50, 95, 96, 786], "loss": [50, 96, 116, 121, 134, 135, 136, 787, 790, 792, 795, 797, 800, 970], "arraywithmanipul": 51, "clip": [51, 52, 72, 73, 97, 98, 121, 125, 128, 131, 134, 136, 355, 523, 524, 589, 601, 602, 604, 802, 807, 970], "x_min": [51, 52, 72, 73, 97, 98, 131, 136, 802, 803, 804, 805, 806, 807], "x_max": [51, 52, 72, 73, 97, 98, 131, 136, 802, 803, 804, 805, 806, 807], "roll": [51, 52, 97, 98, 125, 129, 802, 803, 804, 840], "concat": [51, 52, 72, 73, 97, 98, 305, 334, 335, 336, 337, 349, 589, 616, 802, 970], "xs": [51, 52, 97, 98, 125, 305, 328, 332, 334, 335, 336, 589, 590, 593, 598, 663, 674, 802, 808, 809, 810, 811], "constant_pad": [51, 52, 97, 98, 802], "pad_width": [51, 52, 97, 98, 802, 812, 813, 814, 815, 858, 859, 860, 861], "expand_dim": [51, 52, 97, 98, 131, 134, 802, 970], "flip": [51, 52, 97, 98, 133, 134, 136, 355, 398, 401, 802, 828, 831, 970], "permute_dim": [51, 52, 97, 98, 802], "reshap": [51, 52, 72, 73, 97, 98, 128, 131, 133, 136, 802, 970], "shift": [51, 52, 97, 98, 118, 129, 355, 402, 405, 410, 413, 802, 836, 837, 838, 839, 840], "squeez": [51, 52, 97, 98, 802, 970], "stack": [51, 52, 72, 73, 97, 98, 131, 197, 250, 254, 255, 259, 714, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 745, 746, 748, 749, 751, 755, 757, 758, 760, 765, 767, 768, 770, 774, 776, 802, 866, 867, 876, 877, 970, 992, 1001], "swapax": [51, 52, 97, 98, 802], "axis0": [51, 52, 97, 98, 802, 850, 851, 852, 853], "tile": [51, 52, 97, 98, 802, 970], "rep": [51, 52, 97, 98, 802, 854, 855, 856, 857], "zero_pad": [51, 52, 97, 98, 802, 970], "arraywithnorm": 53, "layer_norm": [53, 54, 99, 100, 884], "normalized_idx": [53, 54, 99, 100, 884, 885, 886, 887, 888], "05": [53, 54, 99, 100, 305, 663, 665, 668, 884, 885, 886, 887, 888], "scale": [53, 54, 99, 100, 125, 305, 347, 348, 663, 687, 689, 701, 709, 712, 713, 884, 885, 886, 887, 888, 992, 1000, 1003, 1008, 1011], "new_std": [53, 54, 99, 100, 884, 885, 886, 887, 888, 1006, 1007], "norm": [54, 72, 73, 100, 116, 589, 601, 602, 604, 714, 742, 744, 780, 782, 885, 888, 970, 1007, 1008, 1010], "arraywithrandom": [55, 133], "random": [56, 72, 73, 102, 116, 127, 136, 147, 890, 891, 892, 894, 895, 897, 899, 900, 970], "arraywithsearch": 57, "arraywithset": 59, "unique_count": [59, 60, 105, 106, 906, 909], "uc": [59, 60, 908, 910], "count": [59, 60, 118, 134, 305, 343, 714, 777, 779, 802, 820, 823, 906, 907, 908, 910, 912, 959, 960, 963, 965, 968], "arraywithsort": 61, "argsort": [61, 62, 107, 108, 915], "descend": [61, 62, 107, 108, 714, 765, 767, 768, 770, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925], "sort": [62, 72, 73, 74, 75, 76, 108, 116, 714, 729, 731, 765, 767, 768, 770, 916, 919], "arraywithstatist": 63, "einsum": [63, 64, 109, 110, 926], "equat": [63, 64, 109, 110, 714, 762, 764, 926, 927, 928, 929, 930], "max": [63, 64, 72, 73, 109, 110, 268, 288, 291, 355, 523, 589, 601, 602, 604, 612, 645, 646, 714, 746, 748, 755, 757, 926, 1008, 1010], "min": [63, 64, 72, 73, 109, 110, 268, 288, 291, 355, 524, 589, 612, 645, 646, 653, 714, 758, 760, 765, 767, 768, 770, 780, 782, 926], "prod": [63, 64, 72, 73, 109, 110, 118, 126, 589, 612, 926], "std": [63, 64, 109, 110, 118, 889, 894, 906, 907, 926], "sum": [63, 64, 72, 73, 109, 110, 121, 125, 126, 128, 131, 305, 334, 335, 336, 337, 349, 355, 369, 372, 503, 506, 589, 608, 612, 645, 646, 701, 713, 714, 765, 767, 774, 776, 780, 782, 926, 927, 930, 947, 950], "var": [63, 64, 109, 110, 113, 114, 118, 131, 862, 863, 864, 926], "statist": [64, 110, 113, 114, 116, 126, 927, 930, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958], "arraywithutil": 65, "util": [66, 112, 116, 127, 305, 338, 960, 963, 965, 968], "add_ivy_array_instance_method": 67, "cl": [67, 68, 113, 114], "to_ignor": [67, 68, 113, 114, 866, 877], "loop": [67, 68, 113, 114, 122, 148, 862, 863, 864, 865], "_wrap_funct": [67, 68, 113, 114, 121, 123], "toi": [67, 68, 113, 114], "arrayexampl": [67, 68], "hasattr": [67, 68, 113, 114, 133], "empti": [69, 72, 73, 74, 75, 124, 126, 127, 197, 198, 199, 926, 947, 950, 951, 954, 959, 960, 963, 965, 968], "dictionari": [69, 72, 73, 74, 75, 76, 134, 148, 305, 348], "map": [69, 72, 73, 74, 75, 76, 120, 121, 125, 129, 134, 147, 148, 305, 314, 866, 873, 874, 878, 879, 992, 1003], "pair": [69, 355, 386, 389, 701, 713, 714, 720, 722], "via": [69, 116, 125, 126, 127, 128, 131, 133, 134, 147, 866, 867, 876, 877], "__delitem__": 69, "__iter__": 69, "__len__": 69, "len": [69, 133, 136, 197, 232, 235], "__reversed__": 69, "fromkei": 69, "keyerror": 69, "popitem": 69, "lifo": 69, "setdefault": 69, "insert": [69, 802, 816, 819, 866, 871, 901, 902], "lack": 69, "containerwithactiv": [70, 74, 75], "dict_in": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "queue": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 134, 305, 314, 315, 589, 644, 649], "queue_load_s": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "container_combine_method": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "list_join": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "queue_timeout": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 589], "print_limit": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "key_length_limit": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "print_ind": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "print_line_spac": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "ivyh": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "default_key_color": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "keyword_color_dict": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "rebuild_child_contain": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "types_to_iteratively_nest": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "alphabetical_kei": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "containerbas": [70, 71, 72, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 125], "key_chain": [70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 160, 162, 164, 165, 167, 169, 170, 172, 174, 175, 177, 179, 180, 182, 184, 185, 186, 188, 189, 190, 192, 198, 200, 201, 203, 205, 207, 209, 211, 212, 214, 215, 217, 219, 221, 223, 225, 226, 228, 229, 231, 232, 234, 236, 237, 239, 241, 242, 244, 245, 247, 249, 250, 251, 253, 255, 256, 258, 260, 261, 263, 264, 266, 277, 279, 281, 356, 358, 360, 361, 363, 365, 367, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 525, 527, 529, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 575, 577, 579, 580, 582, 585, 587, 590, 592, 594, 602, 603, 618, 620, 622, 670, 671, 673, 675, 676, 678, 679, 680, 682, 683, 684, 686, 687, 688, 690, 691, 692, 694, 715, 717, 719, 738, 740, 787, 789, 791, 792, 794, 796, 797, 799, 801, 803, 805, 807, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 866, 879, 885, 887, 891, 893, 895, 896, 898, 908, 909, 911, 916, 918, 920, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 957, 960, 962, 964, 965, 967, 969], "to_appli": [70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 160, 162, 164, 165, 167, 169, 170, 172, 174, 175, 177, 179, 180, 182, 184, 185, 186, 188, 189, 190, 192, 198, 200, 201, 203, 205, 207, 209, 211, 212, 214, 215, 217, 219, 221, 223, 225, 226, 228, 229, 231, 232, 234, 236, 237, 239, 241, 242, 244, 245, 247, 249, 250, 251, 253, 255, 256, 258, 260, 261, 263, 264, 266, 277, 279, 281, 356, 358, 360, 361, 363, 365, 367, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 525, 527, 529, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 575, 577, 579, 580, 582, 585, 587, 590, 592, 594, 602, 603, 618, 620, 622, 670, 671, 673, 675, 676, 678, 679, 680, 682, 683, 684, 686, 687, 688, 690, 691, 692, 694, 715, 717, 719, 738, 740, 787, 789, 791, 792, 794, 796, 797, 799, 801, 803, 805, 807, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 866, 879, 885, 887, 895, 896, 898, 908, 909, 911, 916, 918, 920, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 957, 960, 962, 964, 965, 967, 969], "prune_unappli": [70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 160, 162, 164, 165, 167, 169, 170, 172, 174, 175, 177, 179, 180, 182, 184, 185, 186, 188, 189, 190, 192, 198, 200, 201, 203, 205, 207, 209, 211, 212, 214, 215, 217, 219, 221, 223, 225, 226, 228, 229, 231, 232, 234, 236, 237, 239, 241, 242, 244, 245, 247, 249, 250, 251, 253, 255, 256, 258, 260, 261, 263, 264, 266, 277, 279, 281, 356, 358, 360, 361, 363, 365, 367, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 525, 527, 529, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 575, 577, 579, 580, 582, 585, 587, 590, 592, 594, 602, 603, 618, 620, 622, 670, 671, 673, 675, 676, 678, 679, 680, 682, 683, 684, 686, 687, 688, 690, 691, 692, 694, 715, 717, 719, 738, 740, 787, 789, 791, 792, 794, 796, 797, 799, 801, 803, 805, 807, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 866, 879, 885, 887, 895, 896, 898, 908, 909, 911, 916, 918, 920, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 957, 960, 962, 964, 965, 967, 969], "map_sequ": [70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 160, 162, 164, 165, 167, 169, 170, 172, 174, 175, 177, 179, 180, 182, 184, 185, 186, 188, 189, 190, 192, 198, 200, 201, 203, 205, 207, 209, 211, 212, 214, 215, 217, 219, 221, 223, 225, 226, 228, 229, 231, 232, 234, 236, 237, 239, 241, 242, 244, 245, 247, 249, 250, 251, 253, 255, 256, 258, 260, 261, 263, 264, 266, 277, 279, 281, 356, 358, 360, 361, 363, 365, 367, 369, 371, 373, 374, 376, 378, 380, 382, 384, 390, 392, 398, 400, 418, 420, 422, 424, 426, 428, 430, 432, 434, 439, 441, 443, 445, 447, 449, 451, 453, 467, 469, 471, 473, 475, 477, 487, 489, 491, 493, 495, 497, 499, 501, 511, 513, 525, 527, 529, 530, 532, 538, 540, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 575, 577, 579, 580, 582, 585, 587, 590, 592, 594, 602, 603, 618, 620, 622, 670, 671, 673, 675, 676, 678, 679, 680, 682, 683, 684, 686, 687, 688, 690, 691, 692, 694, 715, 717, 719, 787, 789, 791, 792, 794, 796, 797, 799, 801, 803, 805, 807, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 850, 852, 854, 856, 858, 860, 885, 887, 895, 896, 898, 908, 909, 911, 916, 918, 920, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 957, 960, 962, 964, 965, 967, 969], "softplu": [70, 71, 159, 970], "static_gelu": [70, 71, 160], "static_leaky_relu": [70, 71, 165], "static_relu": [70, 71, 170], "static_sigmoid": [70, 71, 175], "static_softmax": [70, 71, 180], "static_softplu": [70, 71, 185], "static_tanh": [70, 71, 83, 84, 189], "__getitem__": [72, 73, 125], "queri": [72, 73, 125, 126, 133, 305, 338, 348, 701, 712, 713, 992, 1003], "slice": [72, 73, 589, 617, 618, 621, 866, 875], "chain": [72, 73, 124, 125, 135, 136, 148, 862, 863, 864, 866, 879, 1014, 1015], "element": [72, 73, 117, 131, 136, 159, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 193, 197, 198, 199, 220, 221, 224, 250, 254, 255, 259, 305, 328, 332, 336, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588, 589, 597, 598, 601, 602, 604, 607, 608, 615, 629, 658, 659, 701, 709, 714, 720, 722, 729, 731, 738, 741, 758, 760, 765, 767, 802, 803, 806, 820, 823, 828, 831, 836, 839, 841, 842, 845, 889, 890, 901, 904, 905, 906, 907, 908, 912, 913, 914, 915, 921, 924, 926, 927, 930, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 992, 1000], "represent": [72, 73, 74, 75, 76, 147, 196, 268, 272, 273, 288, 291, 305, 321, 322, 355, 356, 359, 369, 372, 394, 397, 406, 409, 414, 417, 519, 522, 525, 528, 589, 595, 652, 657], "sequenc": [72, 73, 74, 75, 76, 118, 126, 147, 194, 195, 305, 314, 315, 589, 598, 639, 802, 841, 846, 849, 889, 891, 892, 926, 931, 934, 959, 960, 963, 965, 968, 992, 1001, 1006, 1007, 1014, 1015], "multiprocess": [72, 73, 74, 75, 76, 134, 148, 305, 314, 589], "asynchron": [72, 73, 74, 75, 76], "dimens": [72, 73, 74, 75, 76, 118, 131, 134, 159, 180, 183, 197, 250, 254, 255, 259, 305, 336, 589, 611, 612, 613, 616, 626, 642, 661, 701, 702, 703, 704, 705, 706, 707, 708, 711, 714, 715, 718, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 742, 744, 746, 748, 749, 751, 755, 757, 758, 760, 762, 764, 765, 767, 768, 770, 774, 776, 777, 779, 780, 782, 786, 792, 795, 797, 800, 802, 808, 811, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 841, 842, 845, 846, 849, 862, 863, 864, 865, 889, 900, 901, 902, 903, 904, 906, 907, 908, 912, 914, 926, 927, 930, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1003], "arriv": [72, 73, 74, 75, 76], "timeout": [72, 73, 74, 75, 76, 305, 314, 315, 589, 644, 649], "maximum": [72, 73, 74, 75, 76, 118, 131, 134, 136, 305, 329, 333, 337, 349, 355, 589, 601, 602, 604, 616, 663, 683, 685, 802, 803, 806, 866, 878, 901, 902, 926, 931, 934, 939, 942, 970], "length": [72, 73, 74, 75, 76, 134, 197, 198, 199, 232, 235, 714, 765, 767, 768, 770, 802, 832, 835], "whitespac": [72, 73, 74, 75, 76], "indent": [72, 73, 74, 75, 76, 134], "extra": [72, 73, 74, 75, 76, 118, 123, 124, 131, 663, 674], "newlin": [72, 73, 74, 75, 76, 117], "handl": [72, 73, 74, 75, 76, 115, 120, 121, 123, 125, 126, 127, 128, 129, 135, 148, 194, 195, 305, 321, 322, 323, 324, 325, 339, 343, 344, 351, 354, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 1008, 1009, 1010, 1011, 1012, 1013], "result": [72, 73, 74, 75, 76, 116, 117, 118, 120, 124, 125, 126, 128, 129, 134, 148, 159, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 193, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 274, 276, 296, 305, 314, 350, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588, 589, 601, 602, 604, 607, 608, 611, 612, 613, 615, 617, 618, 621, 629, 642, 645, 646, 663, 696, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 718, 720, 722, 723, 725, 726, 728, 732, 734, 735, 737, 738, 741, 742, 744, 746, 748, 749, 751, 752, 754, 755, 757, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 787, 790, 792, 795, 797, 800, 802, 803, 806, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 866, 879, 884, 885, 888, 889, 890, 891, 892, 894, 895, 897, 900, 901, 902, 903, 905, 906, 907, 914, 915, 916, 919, 921, 924, 926, 927, 930, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968, 970], "color": [72, 73, 74, 75, 76, 1017, 1018], "termcolor": [72, 73, 74, 75, 76], "rebuild": [72, 73, 74, 75, 76], "constructor": [72, 73, 74, 75, 76, 126, 127, 133, 589, 596, 1014, 1015], "param": [72, 73, 74, 75, 76, 85, 86, 131, 136, 589, 595, 617, 618, 621, 622], "alphabet": [72, 73, 74, 75, 76], "preserv": [72, 73, 74, 75, 76, 136, 148, 663, 696, 802, 820, 823], "__setitem__": [72, 73, 124, 125, 133], "val": [72, 73, 128, 133, 589, 631, 632, 633, 647, 648], "after": [72, 73, 118, 125, 126, 130, 268, 300, 355, 566, 569, 663, 670, 672, 674, 675, 677, 683, 685, 687, 689, 691, 693, 884, 885, 888, 1008, 1009, 1010, 1011, 1012, 1013], "all_fals": [72, 73], "assert_is_bool": [72, 73], "entri": [72, 73, 197, 226, 227, 229, 230, 802, 841, 866, 879], "boolean": [72, 73, 125, 197, 220, 268, 274, 292, 304, 305, 340, 352, 355, 394, 397, 398, 401, 406, 409, 414, 417, 507, 510, 511, 514, 515, 518, 519, 522, 589, 590, 593, 597, 598, 628, 629, 630, 634, 635, 636, 637, 638, 655, 662, 663, 679, 681, 862, 863, 864, 866, 876, 926, 939, 942], "evalu": [72, 73, 125, 355, 443, 446, 447, 450, 487, 490, 491, 494, 495, 498, 499, 502, 530, 533, 554, 557, 570, 573, 866, 867, 876, 877, 959, 960, 963, 965, 968], "assert": [72, 73, 133, 134, 589, 599], "prune": [72, 73, 866, 879, 880, 881], "all_key_chain": [72, 73], "include_empti": [72, 73], "all_tru": [72, 73, 125, 134], "arrays_as_list": [72, 73], "intermedi": [72, 73], "as_arrai": [72, 73, 589, 626, 651], "as_bool": [72, 73], "as_on": [72, 73], "ones": [72, 73, 74, 75, 120, 131, 133, 134, 197, 212, 213, 245, 248, 355, 418, 421, 589, 642, 970], "fill": [72, 73, 197, 206, 220, 221, 224, 242, 243, 245, 248, 260, 262, 263, 267, 889, 891, 892], "as_random_uniform": [72, 73], "low": [72, 73, 101, 102, 131, 889, 891, 892, 893, 895, 896, 897, 898], "uniform": [72, 73, 135, 889, 890, 891, 892, 895, 897, 983, 985, 986, 989, 990], "boundari": [72, 73, 889, 895, 897], "interv": [72, 73, 131, 136, 197, 198, 199, 226, 227, 229, 230, 714, 777, 779, 802, 803, 806, 846, 849, 889, 891, 892, 895, 897, 959, 960, 963, 965, 968], "as_vari": [72, 73], "as_zero": [72, 73], "assert_contains_sub_contain": [72, 73], "sub_cont": [72, 73], "except": [72, 73, 117, 124, 128, 133, 148, 268, 276, 589, 599, 610, 633, 660, 714, 755, 757, 802, 808, 811, 846, 849, 901, 904, 959, 960, 963, 965, 968], "diff": [72, 73, 125, 134], "screen": [72, 73, 134], "assert_contains_sub_structur": [72, 73], "check_shap": [72, 73], "assert_ident": [72, 73], "check_typ": [72, 73], "same_arrai": [72, 73, 134], "arrays_equ": [72, 73, 74, 75, 589], "datatyp": [72, 73, 197, 201, 204, 237, 240, 268, 282, 293, 294, 295], "assert_identical_structur": [72, 73], "at_key_chain": [72, 73], "ignore_key_error": [72, 73], "ignore_non": [72, 73], "at_kei": [72, 73], "ignor": [72, 73, 118, 148, 197, 232, 235, 866, 877, 1008, 1012], "substr": [72, 73], "clip_min": [72, 73], "clip_max": [72, 73], "minimum": [72, 73, 131, 136, 305, 355, 356, 359, 589, 624, 625, 647, 648, 653, 654, 802, 803, 806, 901, 903, 926, 931, 934, 939, 942, 970], "config": [72, 73, 134, 866, 879], "duplic": [72, 73, 117, 122, 123, 133, 135], "compar": [72, 73, 120, 134, 589, 590, 593, 597, 598, 906, 907, 908, 912, 914, 915, 916, 919, 921, 924], "container_rightmost": [72, 73], "common_key_chain": [72, 73, 125], "properti": [72, 73, 118, 120, 121, 125, 133, 134, 135, 305, 317, 1004, 1005, 1008, 1009, 1010, 1011, 1013], "contains_sub_contain": [72, 73], "match": [72, 73, 125, 268, 274, 355, 546, 549, 589, 639], "contains_sub_structur": [72, 73], "create_if_abs": [72, 73], "inplac": [72, 73, 87, 88, 115, 118, 123, 124, 129, 133, 135, 589, 599, 630, 633, 634, 655, 663, 670, 671, 672, 673, 675, 676, 677, 678, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 981, 982, 1008, 1009, 1010, 1011, 1012, 1013], "cutoff_at_depth": [72, 73], "depth_cutoff": [72, 73], "cutoff_at_height": [72, 73], "height_cutoff": [72, 73], "deep_copi": [72, 73, 134], "intern": [72, 73, 117, 124, 125, 127, 128, 305, 663, 699, 866, 867, 876, 877, 983, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1014, 1015], "belong": [72, 73, 135], "dev_clon": [72, 73, 305], "dev_dist": [72, 73, 305], "along": [72, 73, 116, 128, 197, 226, 227, 229, 230, 305, 330, 331, 332, 333, 334, 335, 336, 337, 349, 589, 607, 608, 617, 661, 714, 742, 744, 774, 776, 777, 779, 780, 782, 786, 792, 795, 797, 800, 802, 808, 811, 820, 823, 828, 831, 836, 839, 841, 846, 849, 854, 857, 862, 863, 864, 865, 889, 900, 901, 902, 903, 915, 916, 919, 921, 924, 926, 927, 930, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968], "dev_str": [72, 73], "diff_kei": [72, 73], "detect_key_diff": [72, 73], "detect_value_diff": [72, 73], "detect_shape_diff": [72, 73], "treat": [72, 73, 132, 136, 194, 195], "detect": [72, 73, 129, 134, 135, 866, 867, 877], "container0": [72, 73], "einops_rearrang": [72, 73, 589], "axes_length": [72, 73, 589, 611, 612, 613], "rearrang": [72, 73, 589, 611, 613], "einops_reduc": [72, 73, 589], "reduct": [72, 73, 126, 133, 589, 612, 645, 646, 959, 960, 963, 965, 968, 970], "One": [72, 73, 126, 131, 133, 134, 589, 612, 802, 832, 835, 889, 891, 892], "callabl": [72, 73, 125, 131, 149, 150, 151, 152, 153, 154, 155, 156, 157, 194, 195, 268, 289, 290, 305, 349, 589, 595, 600, 610, 612, 862, 863, 864, 865, 866, 872, 876, 877, 878], "einops_repeat": [72, 73, 589], "find_sub_contain": [72, 73], "sub_cont_to_find": [72, 73], "exsit": [72, 73], "find_sub_structur": [72, 73], "sub_struc_to_find": [72, 73], "flatten_key_chain": [72, 73, 134, 1004, 1005], "__": [72, 73, 118, 134], "above_height": [72, 73, 134], "below_depth": [72, 73, 134], "format_key_chain": [72, 73], "format_fn": [72, 73], "string": [72, 73, 122, 126, 127, 131, 134, 268, 272, 273, 286, 292, 304, 305, 321, 322, 323, 324, 338, 344, 350, 351, 354, 589, 609], "from_disk_as_hdf5": [72, 73, 134], "h5_obj_or_filepath": [72, 73], "slice_obj": [72, 73], "load": [72, 73, 148], "disk": [72, 73, 134], "h5py": [72, 73], "hdf5": [72, 73, 134, 1004, 1005], "h5": [72, 73], "from_disk_as_json": [72, 73, 134], "json_filepath": [72, 73], "json": [72, 73, 134], "dure": [72, 73, 121, 125, 126, 127, 128, 148, 194, 195, 305, 350, 589, 660, 663, 665, 668, 670, 672, 683, 685, 714, 738, 741, 862, 863, 864, 865, 926, 947, 950, 955, 958, 1004, 1005, 1008, 1009, 1010, 1012], "from_disk_as_pickl": [72, 73, 134], "pickle_filepath": [72, 73], "from_flat_list": [72, 73], "flat_list": [72, 73], "hierarchi": [72, 73, 134], "flat": [72, 73, 589, 645, 802, 828, 831], "popul": [72, 73, 126, 127, 131, 889, 890, 926, 947, 950, 955, 958], "from_numpi": [72, 73, 134], "gather": [72, 73, 589, 618, 621], "h5_file_s": [72, 73], "batch": [72, 73, 121, 125, 134, 305, 347, 348, 589, 616, 701, 710, 714, 780, 782, 862, 863, 864, 865, 884, 885, 888, 1006, 1007], "handle_inplac": [72, 73], "prime": [72, 73], "overwritten": [72, 73, 122, 124], "has_kei": [72, 73], "query_kei": [72, 73], "somewher": [72, 73], "has_key_chain": [72, 73], "has_nan": [72, 73, 589], "include_inf": [72, 73, 589, 628, 662], "leafwis": [72, 73], "nan": [72, 73, 116, 117, 196, 268, 274, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 418, 421, 422, 425, 426, 429, 443, 446, 447, 450, 451, 454, 467, 470, 475, 478, 487, 490, 491, 494, 499, 502, 503, 506, 525, 528, 542, 545, 546, 549, 550, 553, 558, 561, 562, 565, 566, 569, 579, 583, 584, 585, 588, 589, 628, 662, 701, 713, 906, 907, 908, 912, 914, 926, 931, 934, 935, 938, 939, 942, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968], "well": [72, 73, 120, 128, 135, 136, 147, 589, 628, 714, 762, 764], "inf": [72, 73, 196, 589, 628, 662, 714, 780, 782], "wise": [72, 73, 131, 136, 159, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 193, 355, 356, 359, 361, 364, 369, 372, 374, 377, 382, 385, 386, 389, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 430, 433, 435, 438, 439, 442, 455, 458, 459, 462, 463, 466, 479, 482, 483, 486, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 534, 537, 542, 545, 546, 549, 574, 578, 589, 615, 802, 803, 806], "identical_array_shap": [72, 73], "exclus": [72, 73, 87, 88, 121, 125, 136, 197, 198, 199, 589, 607, 635, 636, 638, 663, 679, 680, 681, 682, 889, 891, 892], "identical_config": [72, 73], "identical_structur": [72, 73], "if_exist": [72, 73], "inplace_upd": [72, 73, 128, 589, 981, 982], "key_chains_contain": [72, 73], "sub_str": [72, 73], "join": [72, 73, 802, 808, 811, 846, 849, 970], "list_stack": [72, 73, 134], "dim": [72, 73, 126, 589, 642, 992, 1003], "func": [72, 73, 125, 194, 195, 305, 349, 589, 600, 663, 674, 866, 879], "map_cont": [72, 73], "include_self": [72, 73], "possibi": [72, 73], "matrix": [72, 73, 197, 232, 235, 250, 254, 255, 259, 589, 590, 593, 601, 701, 710, 714, 715, 718, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 741, 742, 744, 745, 746, 748, 749, 751, 755, 757, 758, 760, 762, 764, 765, 767, 768, 770, 774, 776, 783, 785, 992, 1002], "integ": [72, 73, 125, 126, 133, 197, 198, 199, 220, 268, 291, 294, 296, 355, 356, 359, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 451, 454, 455, 458, 519, 522, 542, 545, 546, 549, 550, 553, 585, 588, 714, 745, 777, 779, 780, 782, 802, 841, 889, 891, 892, 899, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968], "flatten": [72, 73, 589, 616, 714, 752, 754, 780, 782, 802, 828, 831, 836, 839, 901, 902, 903, 906, 907, 908, 912, 914], "broadcast": [72, 73, 116, 117, 118, 125, 126, 159, 160, 163, 165, 168, 170, 173, 175, 178, 180, 183, 185, 187, 189, 193, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 274, 275, 276, 305, 350, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 439, 442, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 467, 470, 471, 474, 475, 478, 479, 482, 483, 486, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 507, 510, 511, 514, 515, 518, 519, 522, 523, 524, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 578, 579, 583, 584, 585, 588, 589, 601, 602, 604, 607, 611, 612, 613, 615, 618, 621, 629, 642, 645, 646, 663, 696, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 718, 720, 722, 723, 725, 726, 728, 732, 734, 735, 737, 738, 741, 742, 744, 746, 748, 749, 751, 752, 754, 755, 757, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 785, 786, 787, 790, 792, 795, 797, 800, 802, 803, 806, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 884, 885, 888, 889, 890, 891, 892, 894, 895, 897, 900, 901, 902, 903, 905, 906, 914, 915, 921, 924, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968], "max_depth": [72, 73, 305, 309, 312, 319, 329, 333, 337, 589, 627, 866, 878], "multi_map": [72, 73, 125], "map_nest": [72, 73, 83, 84, 93, 94, 97, 98, 386, 388, 394, 396, 402, 404, 406, 408, 410, 412, 414, 416, 435, 437, 455, 457, 459, 461, 463, 465, 479, 481, 483, 485, 503, 505, 507, 509, 515, 517, 519, 521, 534, 536, 542, 544, 546, 548, 738, 740, 808, 810, 846, 848], "leftmost": [72, 73, 866, 879], "multi_map_in_static_method": [72, 73, 125], "fn_name": [72, 73], "num_arrai": [72, 73], "overwrite_at_key_chain": [72, 73], "overwrit": [72, 73, 128, 131, 305, 349], "target_dict": [72, 73], "return_dict": [72, 73], "prune_empti": [72, 73], "keep_non": [72, 73], "prune_key_chain": [72, 73], "key1": [72, 73, 135], "key2": [72, 73], "key3": [72, 73], "prune_key_from_key_chain": [72, 73], "prune_kei": [72, 73], "prune_keys_from_key_chain": [72, 73], "remove_key_length_limit": [72, 73], "remove_print_limit": [72, 73], "reshape_lik": [72, 73], "leading_shap": [72, 73], "return_cont": [72, 73], "restructur": [72, 73], "keep_orig": [72, 73], "transpos": [72, 73, 133, 136, 305, 336, 701, 703, 705, 707, 714, 749, 751, 755, 757, 970, 992, 994, 996, 998], "restructure_key_chain": [72, 73], "keychain_map": [72, 73], "set_at_key_chain": [72, 73], "set_at_kei": [72, 73], "set_framework": [72, 73, 131, 133, 134, 136], "set_ivy_backend": [72, 73], "ivy_backend": [72, 73], "attribut": [72, 73, 117, 125, 126, 132, 133, 134, 135, 268, 288, 289, 290, 291, 305, 345], "show_sub_contain": [72, 73], "sub_cont_or_keychain": [72, 73], "shuffl": [72, 73, 889, 970], "seed_valu": [72, 73, 889, 899], "seed": [72, 73, 74, 75, 889, 970], "shuffle_h5_fil": [72, 73], "dataset": [72, 73, 134, 146, 970], "size_ordered_arrai": [72, 73], "keychain": [72, 73], "smallest": [72, 73, 268, 288, 291, 355, 418, 421], "largest": [72, 73, 147, 268, 288, 291, 714, 765, 767], "slice_kei": [72, 73], "key_slic": [72, 73], "all_depth": [72, 73], "slice_via_kei": [72, 73], "sort_by_kei": [72, 73], "num_or_size_split": [72, 73, 131, 802, 841], "with_remaind": [72, 73, 802, 841], "constitu": [72, 73, 136], "dimension": [72, 73, 197, 198, 199, 212, 213, 232, 235, 714, 720, 722, 723, 725, 738, 741, 746, 748, 752, 754, 755, 757, 777, 779, 780, 782, 802, 841, 901, 902, 903, 904, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968], "evenli": [72, 73, 197, 198, 199, 226, 227, 229, 230, 802, 841], "store": [72, 73, 117, 122, 124, 125, 131, 133, 134, 135, 589, 616, 663, 699, 714, 774, 776, 802, 841, 1004, 1005], "stop_gradi": [72, 73, 74, 75, 87, 88, 135, 305, 349, 663, 670, 671, 672, 673, 675, 676, 677, 678, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 862, 863, 864, 865, 970, 1008, 1009, 1010, 1011, 1012, 1013], "preserve_typ": [72, 73, 663, 696], "stop": [72, 73, 77, 78, 131, 148, 197, 198, 199, 200, 226, 227, 228, 229, 230, 231, 305, 320, 349, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 696, 862, 863, 864, 865, 1008, 1009, 1010, 1011, 1012, 1013], "structural_diff": [72, 73], "to_devic": [72, 73, 305, 324], "cuda": [72, 73, 131, 134, 148, 197, 226, 227, 229, 230, 305, 314, 321, 346, 589, 617, 618, 621, 642, 645, 646, 889, 890, 891, 892, 895, 897, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015], "target": [72, 73, 115, 130, 134, 135, 136, 305, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 970], "to_dict": [72, 73], "to_disk_as_hdf5": [72, 73, 134], "starting_index": [72, 73], "max_batch_s": [72, 73], "w": [72, 73, 87, 88, 131, 134, 135, 589, 598, 663, 665, 668, 670, 672, 673, 675, 677, 678, 683, 685, 686, 687, 689, 690, 691, 693, 694, 701, 702, 703, 704, 705, 706, 707, 708], "later": [72, 73, 589, 600], "to_disk_as_json": [72, 73, 134], "to_disk_as_pickl": [72, 73, 134], "to_flat_list": [72, 73], "to_iter": [72, 73, 125], "leaf_keys_onli": [72, 73], "to_iterator_kei": [72, 73], "to_iterator_valu": [72, 73], "to_json": [72, 73], "to_list": [72, 73, 589, 970], "to_multi_dev": [72, 73], "multidevcontain": [72, 73, 74], "distributedarrai": [72, 73], "to_numpi": [72, 73, 134, 589, 970], "update_backend": [72, 73], "to_raw": [72, 73], "raw": [72, 73, 117], "trim_kei": [72, 73], "max_length": [72, 73], "try_kc": [72, 73], "tri": [72, 73], "arbitrari": [72, 73, 120, 121, 125, 128, 129, 135, 148, 197, 232, 235, 268, 275, 296, 305, 334, 335, 337], "concatten": [72, 73, 305, 334, 335, 336, 337, 349], "unstack": [72, 73, 131, 134, 589, 970], "dim_siz": [72, 73, 305], "update_config": [72, 73], "global_norm": [72, 73, 85, 86, 602, 603], "vector": [72, 73, 147, 197, 232, 235, 589, 602, 604, 701, 710, 714, 720, 722, 729, 731, 738, 741, 752, 754, 765, 767, 768, 770, 777, 779, 780, 782, 783, 785, 992, 1002], "with_default_key_color": [72, 73], "with_entries_as_list": [72, 73], "with_ivy_backend": [72, 73], "with_key_length_limit": [72, 73, 134], "with_print_ind": [72, 73, 134], "with_print_limit": [72, 73, 134], "with_print_line_spac": [72, 73], "containerwithcr": [74, 75, 77], "containerwithdatatyp": [74, 75, 79], "containerwithdevic": [74, 75, 81], "containerwithelementwis": [74, 75, 83, 125], "containerwithgener": [74, 75, 85], "containerwithgradi": [74, 75, 87], "containerwithimag": [74, 75, 89], "containerwithlay": [74, 75, 91], "containerwithlinearalgebra": [74, 75, 93], "containerwithloss": [74, 75, 95], "containerwithnorm": [74, 75, 99], "containerwithrandom": [74, 75, 101], "containerwithsearch": [74, 75, 103], "containerwithset": [74, 75, 105], "containerwithsort": [74, 75, 107], "containerwithstatist": [74, 75, 109], "containerwithutil": [74, 75, 111], "__add__": [74, 75, 117, 118, 124, 125, 129, 133], "__radd__": [74, 75, 117, 118], "arang": [74, 75, 126, 197, 226, 227, 229, 230, 926, 927, 930, 970], "arg_info": [74, 75, 589], "arg_nam": [74, 75, 589], "argmax": [74, 75, 901, 970], "argmin": [74, 75, 901, 970], "array_equ": [74, 75, 589], "as_ivy_dev": [74, 75, 133, 305], "as_ivy_dtyp": [74, 75, 268], "as_native_dev": [74, 75, 305], "as_native_dtyp": [74, 75, 268], "assert_supports_inplac": [74, 75, 589], "astyp": [74, 75, 126, 128, 268], "broadcast_arrai": [74, 75, 268], "broadcast_to": [74, 75, 126, 268], "cache_fn": [74, 75, 121, 589], "clear_mem_on_dev": [74, 75, 305], "clip_matrix_norm": [74, 75, 589], "closest_valid_dtyp": [74, 75, 268], "container_typ": [74, 75, 589], "conv1d": [74, 75, 701, 992], "conv1d_transpos": [74, 75, 701], "conv2d": [74, 75, 701, 970, 992], "conv2d_transpos": [74, 75, 701], "conv3d": [74, 75, 701, 992], "conv3d_transpos": [74, 75, 701], "copy_arrai": [74, 75, 589], "cumprod": [74, 75, 136, 589], "cumsum": [74, 75, 589, 970], "current_backend_str": [74, 75, 589], "default_devic": [74, 75, 127, 131, 305, 343, 346, 353], "default_dtyp": [74, 75, 121, 126, 268], "default_float_dtyp": [74, 75, 126, 268], "default_int_dtyp": [74, 75, 126, 268], "depthwise_conv2d": [74, 75, 701, 970], "dev_clone_arrai": [74, 75, 305], "dev_clone_it": [74, 75, 305], "dev_clone_nest": [74, 75, 305], "dev_dist_arrai": [74, 75, 305], "dev_dist_it": [74, 75, 305], "dev_dist_nest": [74, 75, 305], "dev_unifi": [74, 75, 305], "dev_unify_arrai": [74, 75, 305], "dev_unify_it": [74, 75, 305], "dev_unify_nest": [74, 75, 305], "dev_util": [74, 75, 127, 305], "dropout": [74, 75, 134, 701, 992, 1003], "dtype_bit": [74, 75, 268], "execute_with_gradi": [74, 75, 125, 134, 135, 136, 148, 663, 970], "ey": [74, 75, 136, 197, 701, 704, 708], "finfo": [74, 75, 268], "floormod": [74, 75, 589, 970], "fourier_encod": [74, 75, 589], "function_supported_dtyp": [74, 75, 268], "function_unsupported_dtyp": [74, 75, 268], "get_all_arrays_in_memori": [74, 75, 589], "get_all_ivy_arrays_on_dev": [74, 75, 127, 305], "get_min_bas": [74, 75, 589], "get_min_denomin": [74, 75, 589], "get_num_dim": [74, 75, 589, 970], "get_referrers_recurs": [74, 75, 589], "gpu_is_avail": [74, 75, 305], "handle_nest": [74, 75, 121, 125, 149], "handle_out_argu": [74, 75, 123, 126, 127, 128, 129, 149], "iinfo": [74, 75, 268], "indices_wher": [74, 75, 589, 970], "infer_devic": [74, 75, 126, 127, 129, 149], "infer_dtyp": [74, 75, 126, 127, 129, 149], "inplace_arrays_support": [74, 75, 589], "inplace_decr": [74, 75, 589], "inplace_incr": [74, 75, 589], "inplace_variables_support": [74, 75, 589], "inputs_to_native_arrai": [74, 75, 124, 149], "invalid_dtyp": [74, 75, 268], "is_float_dtyp": [74, 75, 268], "is_int_dtyp": [74, 75, 268, 589, 659], "is_ivy_contain": [74, 75, 589], "linear": [74, 75, 117, 131, 134, 135, 136, 159, 160, 163, 165, 168, 170, 173, 589, 616, 701, 709, 762, 764, 970, 992, 993, 994, 995, 996, 997, 998, 999], "linspac": [74, 75, 131, 197, 198, 199, 970], "logspac": [74, 75, 131, 197], "lstm_updat": [74, 75, 131, 701], "match_kwarg": [74, 75, 589], "matrix_pow": [74, 75, 714], "multi_head_attent": [74, 75, 125, 128, 701], "multinomi": [74, 75, 889], "nonzero": [74, 75, 355, 369, 372, 525, 528, 901], "num_arrays_in_memori": [74, 75, 589], "num_cpu_cor": [74, 75, 127, 305], "num_gpu": [74, 75, 120, 127, 305], "num_ivy_arrays_on_dev": [74, 75, 305], "one_hot": [74, 75, 136, 589, 970], "outputs_to_ivy_arrai": [74, 75, 124, 126, 127, 129, 149], "percent_used_mem_on_dev": [74, 75, 305], "print_all_arrays_in_memori": [74, 75, 589], "print_all_ivy_arrays_on_dev": [74, 75, 305], "promote_typ": [74, 75, 268], "randint": [74, 75, 101, 102, 889, 893, 970], "random_norm": [74, 75, 701, 704, 707, 708, 714, 765, 767, 889, 906, 907], "result_typ": [74, 75, 126, 268], "scaled_dot_product_attent": [74, 75, 701], "scatter_flat": [74, 75, 589], "scatter_nd": [74, 75, 133, 589, 970], "set_default_devic": [74, 75, 127, 305, 353], "set_default_dtyp": [74, 75, 121, 126, 268], "set_default_float_dtyp": [74, 75, 126, 268], "set_default_int_dtyp": [74, 75, 126, 268], "set_min_bas": [74, 75, 589], "set_min_denomin": [74, 75, 589], "set_queue_timeout": [74, 75, 589], "set_split_factor": [74, 75, 305], "set_tmp_dir": [74, 75, 589], "set_with_grad": [74, 75, 663], "shape_to_tupl": [74, 75, 126, 589], "slogdet": [74, 75, 714], "split_factor": [74, 75, 305, 314], "split_func_cal": [74, 75, 305], "stable_divid": [74, 75, 121, 589], "stable_pow": [74, 75, 589], "static_aco": [74, 75], "static_acosh": [74, 75], "static_arg_info": [74, 75], "static_arg_nam": [74, 75], "static_argmax": [74, 75], "static_argmin": [74, 75], "static_arrai": [74, 75], "static_array_equ": [74, 75], "static_arrays_equ": [74, 75], "static_as_ivy_dev": [74, 75], "static_as_ivy_dtyp": [74, 75], "static_as_native_dev": [74, 75], "static_as_native_dtyp": [74, 75], "static_asin": [74, 75], "static_asinh": [74, 75], "static_assert_supports_inplac": [74, 75], "static_astyp": [74, 75], "static_atan": [74, 75], "static_atan2": [74, 75], "static_atanh": [74, 75], "static_bitwise_and": [74, 75], "static_bitwise_invert": [74, 75], "static_bitwise_left_shift": [74, 75], "static_bitwise_or": [74, 75], "static_bitwise_right_shift": [74, 75], "static_bitwise_xor": [74, 75], "static_broadcast_arrai": [74, 75], "static_broadcast_to": [74, 75], "static_cache_fn": [74, 75], "static_ceil": [74, 75], "static_clear_mem_on_dev": [74, 75], "static_clip_matrix_norm": [74, 75], "static_clip_vector_norm": [74, 75], "static_closest_valid_dtyp": [74, 75], "static_concat": [74, 75], "static_constant_pad": [74, 75], "static_container_typ": [74, 75], "static_conv1d": [74, 75], "static_conv1d_transpos": [74, 75], "static_conv2d": [74, 75], "static_conv2d_transpos": [74, 75], "static_conv3d": [74, 75], "static_conv3d_transpos": [74, 75], "static_copy_arrai": [74, 75], "static_co": [74, 75], "static_cosh": [74, 75], "static_cross": [74, 75], "static_cumprod": [74, 75], "static_cumsum": [74, 75], "static_current_backend": [74, 75], "static_current_backend_str": [74, 75], "static_default": [74, 75], "static_default_devic": [74, 75], "static_default_dtyp": [74, 75], "static_default_float_dtyp": [74, 75], "static_default_int_dtyp": [74, 75], "static_depthwise_conv2d": [74, 75], "static_det": [74, 75], "static_dev": [74, 75], "static_dev_clon": [74, 75], "static_dev_clone_arrai": [74, 75], "static_dev_clone_it": [74, 75], "static_dev_clone_nest": [74, 75], "static_dev_dist": [74, 75], "static_dev_dist_arrai": [74, 75], "static_dev_dist_it": [74, 75], "static_dev_dist_nest": [74, 75], "static_dev_unifi": [74, 75], "static_dev_unify_arrai": [74, 75], "static_dev_unify_it": [74, 75], "static_dev_unify_nest": [74, 75], "static_dev_util": [74, 75], "static_diagon": [74, 75], "static_dropout": [74, 75], "static_dtyp": [74, 75], "static_dtype_bit": [74, 75], "static_eigh": [74, 75], "static_eigvalsh": [74, 75], "static_einops_rearrang": [74, 75], "static_einops_reduc": [74, 75], "static_einops_repeat": [74, 75], "static_einsum": [74, 75], "static_empti": [74, 75], "static_equ": [74, 75], "static_erf": [74, 75], "static_execute_with_gradi": [74, 75], "static_exist": [74, 75], "static_exp": [74, 75], "static_expand_dim": [74, 75], "static_expm1": [74, 75], "static_finfo": [74, 75], "static_flip": [74, 75], "static_floor": [74, 75], "static_floor_divid": [74, 75], "static_floormod": [74, 75], "static_fourier_encod": [74, 75], "static_ful": [74, 75], "static_function_supported_dtyp": [74, 75], "static_function_unsupported_dtyp": [74, 75], "static_gath": [74, 75], "static_get_all_arrays_in_memori": [74, 75], "static_get_all_ivy_arrays_on_dev": [74, 75], "static_get_min_bas": [74, 75], "static_get_min_denomin": [74, 75], "static_get_num_dim": [74, 75], "static_get_referrers_recurs": [74, 75], "static_gpu_is_avail": [74, 75], "static_great": [74, 75], "static_greater_equ": [74, 75], "static_handle_nest": [74, 75], "static_handle_out_argu": [74, 75], "static_has_nan": [74, 75], "static_iinfo": [74, 75], "static_indices_wher": [74, 75], "static_infer_devic": [74, 75], "static_infer_dtyp": [74, 75], "static_inplace_arrays_support": [74, 75], "static_inplace_decr": [74, 75], "static_inplace_incr": [74, 75], "static_inplace_upd": [74, 75], "static_inplace_variables_support": [74, 75], "static_inputs_to_native_arrai": [74, 75], "static_inv": [74, 75], "static_invalid_dtyp": [74, 75], "static_is_arrai": [74, 75], "static_is_float_dtyp": [74, 75], "static_is_int_dtyp": [74, 75], "static_is_ivy_arrai": [74, 75], "static_is_ivy_contain": [74, 75], "static_is_native_arrai": [74, 75], "static_isfinit": [74, 75], "static_isinf": [74, 75], "static_isnan": [74, 75], "static_layer_norm": [74, 75], "static_less": [74, 75], "static_less_equ": [74, 75], "static_linear": [74, 75], "static_log": [74, 75], "static_log10": [74, 75], "static_log1p": [74, 75], "static_log2": [74, 75], "static_logaddexp": [74, 75], "static_logical_and": [74, 75], "static_logical_not": [74, 75], "static_logical_or": [74, 75], "static_logical_xor": [74, 75], "static_lstm_upd": [74, 75], "static_match_kwarg": [74, 75], "static_matmul": [74, 75], "static_matrix_norm": [74, 75], "static_matrix_pow": [74, 75], "static_matrix_rank": [74, 75], "static_matrix_transpos": [74, 75], "static_max": [74, 75], "static_maximum": [74, 75], "static_mean": [74, 75], "static_min": [74, 75], "static_minimum": [74, 75], "static_multi_head_attent": [74, 75], "static_multinomi": [74, 75], "static_multiprocess": [74, 75], "static_neg": [74, 75], "static_nonzero": [74, 75], "static_not_equ": [74, 75], "static_num_arrays_in_memori": [74, 75], "static_num_cpu_cor": [74, 75], "static_num_gpu": [74, 75], "static_num_ivy_arrays_on_dev": [74, 75], "static_one_hot": [74, 75], "static_out": [74, 75], "static_outputs_to_ivy_arrai": [74, 75], "static_percent_used_mem_on_dev": [74, 75], "static_permute_dim": [74, 75], "static_pinv": [74, 75], "static_posit": [74, 75], "static_pow": [74, 75], "static_print_all_arrays_in_memori": [74, 75], "static_print_all_ivy_arrays_on_dev": [74, 75], "static_prod": [74, 75], "static_promote_typ": [74, 75], "static_qr": [74, 75], "static_queue_timeout": [74, 75], "static_random_norm": [74, 75], "static_remaind": [74, 75], "static_repeat": [74, 75], "static_reshap": [74, 75], "static_result_typ": [74, 75], "static_round": [74, 75], "static_scaled_dot_product_attent": [74, 75], "static_scatter_flat": [74, 75], "static_scatter_nd": [74, 75], "static_se": [74, 75], "static_set_default_devic": [74, 75], "static_set_default_dtyp": [74, 75], "static_set_default_float_dtyp": [74, 75], "static_set_default_int_dtyp": [74, 75], "static_set_min_bas": [74, 75], "static_set_min_denomin": [74, 75], "static_set_queue_timeout": [74, 75], "static_set_split_factor": [74, 75], "static_set_tmp_dir": [74, 75], "static_set_with_grad": [74, 75], "static_shap": [74, 75], "static_shape_to_tupl": [74, 75], "static_shuffl": [74, 75], "static_sign": [74, 75], "static_sin": [74, 75], "static_sinh": [74, 75], "static_slogdet": [74, 75], "static_solv": [74, 75], "static_split": [74, 75], "static_split_factor": [74, 75], "static_split_func_cal": [74, 75], "static_sqrt": [74, 75], "static_squar": [74, 75], "static_squeez": [74, 75], "static_stable_divid": [74, 75], "static_stable_pow": [74, 75], "static_stack": [74, 75], "static_std": [74, 75], "static_stop_gradi": [74, 75], "static_sum": [74, 75], "static_supports_inplac": [74, 75], "static_svd": [74, 75], "static_svdv": [74, 75], "static_swapax": [74, 75], "static_tensordot": [74, 75], "static_til": [74, 75], "static_tmp_dir": [74, 75], "static_to_devic": [74, 75], "static_to_list": [74, 75], "static_to_native_arrays_and_back": [74, 75], "static_to_numpi": [74, 75], "static_to_scalar": [74, 75], "static_total_mem_on_dev": [74, 75], "static_tpu_is_avail": [74, 75], "static_trac": [74, 75], "static_trunc": [74, 75], "static_try_else_non": [74, 75], "static_type_promote_arrai": [74, 75], "static_unique_al": [74, 75], "static_unique_invers": [74, 75], "static_unique_valu": [74, 75], "static_unset_default_devic": [74, 75], "static_unset_default_dtyp": [74, 75], "static_unset_default_float_dtyp": [74, 75], "static_unset_default_int_dtyp": [74, 75], "static_unset_with_grad": [74, 75], "static_unstack": [74, 75], "static_used_mem_on_dev": [74, 75], "static_valid_dtyp": [74, 75], "static_value_is_nan": [74, 75], "static_var": [74, 75], "static_vari": [74, 75], "static_variable_data": [74, 75], "static_vecdot": [74, 75], "static_vector_norm": [74, 75], "static_vector_to_skew_symmetric_matrix": [74, 75], "static_wher": [74, 75], "static_with_grad": [74, 75], "static_zero_pad": [74, 75], "supports_inplac": [74, 75, 589], "tmp_dir": [74, 75, 589], "to_native_arrays_and_back": [74, 75, 123, 129, 149], "to_scalar": [74, 75, 589], "total_mem_on_dev": [74, 75, 127, 305], "tpu_is_avail": [74, 75, 305], "try_else_non": [74, 75, 589], "type_promote_arrai": [74, 75, 268], "unique_al": [74, 75, 906], "unique_invers": [74, 75, 906], "unique_valu": [74, 75, 906], "unset_default_devic": [74, 75, 305], "unset_default_dtyp": [74, 75, 268], "unset_default_float_dtyp": [74, 75, 268], "unset_default_int_dtyp": [74, 75, 268], "unset_with_grad": [74, 75, 663], "used_mem_on_dev": [74, 75, 305], "valid_dtyp": [74, 75, 268], "value_is_nan": [74, 75, 589], "variable_data": [74, 75, 663], "with_grad": [74, 75, 663, 695], "at_dev": [74, 76, 305, 318, 319], "static_arang": [77, 78, 198], "static_asarrai": [77, 78, 201], "static_empty_lik": [77, 78, 207], "static_ey": [77, 78, 212], "n_row": [77, 78, 197, 212, 213, 214], "n_col": [77, 78, 197, 212, 213, 214], "static_from_dlpack": [77, 78, 215], "static_full_lik": [77, 78, 221], "static_linspac": [77, 78, 226], "num": [77, 78, 131, 197, 226, 227, 228, 229, 230, 231], "endpoint": [77, 78, 197, 226, 227, 228, 229, 231], "static_logspac": [77, 78, 229], "static_meshgrid": [77, 78, 232], "static_native_arrai": [77, 78, 237], "static_on": [77, 78, 242], "static_ones_lik": [77, 78, 245], "static_tril": [77, 78, 250], "static_triu": [77, 78, 255], "static_zero": [77, 78, 260], "static_zeros_lik": [77, 78, 263], "int32": [79, 80, 126, 268, 277, 279, 280, 281, 289, 589, 658, 802, 816, 819, 926, 943, 946, 951, 954], "int64": [79, 80, 126, 268, 277, 279, 280, 281, 289, 355, 410, 413, 901, 902, 903, 926, 943, 946, 951, 954], "static_can_cast": [79, 80, 277], "from_": [79, 80, 268, 277, 280, 281], "static_ab": [83, 84, 356], "static_add": [83, 84, 117, 118, 125, 369], "static_divid": [83, 84, 125, 430], "static_multipli": [83, 84, 125, 525], "static_subtract": [83, 84, 125, 574], "static_tan": [83, 84, 118, 125, 579], "143": [83, 84, 118, 355, 579, 580, 582, 583], "38": [83, 84, 118, 355, 579, 580, 582, 583], "76": [83, 84, 189, 190, 355, 426, 429, 663, 665, 668, 714, 771, 773, 926, 927, 930], "96": [83, 84, 189, 190, 355, 579, 583, 663, 665, 668, 714, 752, 754, 926, 927, 930], "995": [83, 84, 189, 190, 192, 355, 584], "9999": [83, 84, 189, 190], "static_all_equ": [85, 86, 590, 592], "clip_vector_norm": [85, 86, 589], "max_norm": [85, 86, 589, 601, 602, 603, 604], "static_gather_nd": [85, 86, 618], "adam_upd": [87, 88, 135, 663], "lr": [87, 88, 134, 135, 663, 670, 671, 672, 673, 675, 676, 677, 678, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 1008, 1009, 1010, 1011, 1012, 1013], "mw_tm1": [87, 88, 663, 670, 671, 672, 673, 683, 684, 685, 686], "vw_tm1": [87, 88, 663, 670, 671, 672, 673, 683, 684, 685, 686], "gradient_descent_upd": [87, 88, 663, 862, 863, 864, 865, 970], "is_vari": [87, 88, 128, 663], "lamb_upd": [87, 88, 663], "max_trust_ratio": [87, 88, 663, 683, 684, 685, 686, 1008, 1010], "decay_lambda": [87, 88, 663, 683, 684, 685, 686, 687, 688, 689, 690, 1008, 1010, 1011], "lars_upd": [87, 88, 663], "optimizer_upd": [87, 88, 663], "effective_grad": [87, 88, 663, 691, 692, 693, 694], "static_adam_step": [87, 88, 665], "87": [87, 88, 101, 102, 663, 665, 668, 669, 891, 893], "976": [87, 88, 355, 584, 663, 665, 668, 669], "static_adam_upd": [87, 88, 670], "static_gradient_descent_upd": [87, 88, 675], "static_is_vari": [87, 88, 679], "static_lamb_upd": [87, 88, 683], "static_lars_upd": [87, 88, 687], "static_optimizer_upd": [87, 88, 691], "73": [93, 94, 355, 566, 569, 714, 715, 717, 718, 719, 884, 885, 888], "577": [93, 94, 714, 715, 717, 718, 719], "41": [93, 94, 133, 355, 414, 417, 566, 569, 714, 715, 717, 718, 719, 926, 951, 954], "707": [93, 94, 714, 715, 717, 718, 719], "static_choleski": [93, 94, 715], "static_rol": [93, 94, 97, 98, 118, 125, 715, 719, 803, 807, 836], "static_binary_cross_entropi": [95, 96, 787], "static_cross_entropi": [95, 96, 792], "static_sparse_cross_entropi": [95, 96, 797], "static_clip": [97, 98, 803], "random_uniform": [101, 102, 127, 135, 889, 970], "static_randint": [101, 102, 891], "20": [101, 102, 133, 355, 414, 417, 443, 446, 550, 553, 566, 569, 714, 726, 728, 752, 754, 771, 773, 889, 891, 892, 893, 901, 904, 905, 926, 927, 930], "40": [101, 102, 355, 426, 429, 566, 569, 714, 752, 754, 891, 893, 926, 927, 930], "62": [101, 102, 891, 893], "52": [101, 102, 663, 665, 668, 714, 752, 754, 891, 893, 906, 907, 926, 927, 930], "95": [101, 102, 663, 665, 668, 891, 893], "37": [101, 102, 355, 579, 583, 884, 885, 888, 891, 893], "42": [101, 102, 136, 159, 185, 187, 663, 665, 668, 714, 752, 754, 889, 891, 893, 899, 926, 927, 930], "13": [101, 102, 118, 125, 355, 394, 397, 414, 417, 426, 429, 566, 569, 589, 607, 663, 665, 668, 701, 713, 714, 726, 728, 752, 754, 884, 885, 888, 891, 893, 901, 905, 906, 907, 926, 927, 930], "static_random_uniform": [101, 102, 895], "static_unique_count": [105, 106, 908], "classivi": [105, 106, 802, 841, 906, 908, 909, 911, 912], "static_argsort": [107, 108, 916], "static_sort": [107, 108, 921], "static_al": [111, 112, 960], "static_ani": [111, 112, 965], "add_ivy_container_instance_method": 113, "containerexampl": [113, 114], "who": [115, 130, 148], "mainli": [115, 132, 134], "under": [115, 117, 118, 119, 120, 121, 125, 130, 131, 134, 136], "hood": [115, 118, 120, 121, 125, 130, 131, 134, 136], "weed": [115, 130], "behind": [115, 130, 132, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693], "tour": 115, "primari": [115, 120, 122, 128, 148], "composit": [115, 120, 122, 124, 125, 128, 131, 135, 136, 148], "nestabl": [115, 117, 118, 120, 128, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 355, 356, 359, 369, 372, 374, 377, 418, 421, 451, 454, 534, 537, 566, 569, 570, 573, 579, 583, 589, 617, 701, 704, 713, 714, 715, 718, 726, 728, 802, 836, 839, 884, 885, 888, 906, 908, 912, 926, 931, 934, 959, 960, 963], "dynam": [115, 126, 127, 128, 131, 194, 195], "runtim": [115, 120, 305], "h": [115, 125, 701, 704, 705, 706, 707, 708], "j": [115, 589, 597, 598, 714, 774, 776, 926, 927, 930], "borrow": 115, "n": [115, 197, 232, 235, 250, 254, 255, 259, 589, 598, 701, 709, 714, 726, 728, 738, 741, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 765, 767, 768, 770, 774, 776, 777, 779, 780, 782, 783, 785, 802, 812, 815, 816, 819, 824, 827, 846, 849, 858, 861, 889, 894, 895, 897, 901, 904, 926, 935, 938, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968], "taken": [116, 136, 714, 726, 728], "constant": [116, 121, 135, 136, 148, 305, 314, 315, 802, 812, 815, 866, 872, 884, 885, 888, 983, 984, 988, 991, 1004, 1005, 1006, 1007], "compil": [116, 125, 130, 132, 148, 970, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013], "meta": [116, 124, 863, 864, 865], "overlap": 116, "sever": [116, 148, 714, 735, 737], "judgement": 116, "locat": [116, 120, 122, 127, 889, 890], "some_namespac": 116, "some_backend": 116, "another_backend": 116, "break": [116, 129, 133, 148, 970], "anyth": [116, 970], "refactor": 116, "ongo": 116, "subfold": [116, 120], "file_nam": 116, "my_func": [116, 118], "int": [116, 118, 121, 125, 126, 127, 128, 129, 136, 159, 180, 183, 194, 195, 197, 206, 212, 213, 220, 221, 224, 226, 227, 229, 230, 242, 243, 250, 254, 255, 259, 260, 262, 268, 276, 285, 287, 288, 291, 294, 305, 327, 330, 331, 332, 333, 341, 342, 343, 349, 350, 355, 394, 397, 398, 401, 402, 405, 406, 409, 410, 413, 414, 417, 589, 595, 607, 608, 611, 612, 613, 616, 617, 626, 642, 645, 646, 651, 652, 661, 663, 665, 668, 670, 672, 683, 685, 701, 702, 704, 706, 707, 708, 714, 720, 722, 726, 728, 771, 773, 774, 776, 777, 779, 780, 782, 786, 792, 795, 797, 800, 802, 808, 811, 812, 815, 816, 819, 820, 823, 824, 827, 828, 831, 832, 835, 836, 839, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 862, 863, 864, 865, 866, 878, 884, 885, 888, 889, 890, 891, 892, 894, 895, 897, 899, 901, 902, 903, 915, 916, 919, 921, 924, 926, 931, 934, 935, 938, 939, 942, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968], "nativedtyp": [116, 126, 127, 129, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 220, 221, 224, 237, 240, 242, 243, 245, 248, 260, 262, 263, 267, 268, 273, 274, 284, 285, 286, 295, 926, 951, 954], "nativedevic": [116, 126, 127, 129, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 220, 221, 224, 226, 227, 229, 230, 237, 240, 242, 243, 245, 248, 260, 262, 263, 267, 305, 322, 323, 324, 338, 344, 346, 348, 350, 351, 354, 589, 642, 889, 890, 891, 892, 894, 895, 897], "my": 116, "numer": [116, 135, 197, 232, 235, 268, 274, 355, 356, 359, 369, 372, 418, 421, 430, 433, 447, 450, 451, 454, 455, 458, 467, 470, 471, 474, 475, 478, 479, 482, 511, 514, 515, 518, 525, 528, 530, 533, 534, 537, 542, 545, 546, 549, 554, 557, 570, 573, 574, 578, 585, 588, 589, 624, 625, 647, 648, 653, 654, 714, 720, 722, 738, 741, 752, 754, 765, 767, 771, 773, 774, 776, 777, 779, 889, 900, 901, 902, 903, 926, 931, 934, 943, 946, 951, 954, 983], "cooler": 116, "produc": [116, 305, 314, 315, 701, 713], "something_cool": 116, "category_nam": [117, 121, 126, 127, 129], "contrast": [117, 129], "backend_nam": [117, 121, 122, 123, 126, 127, 129], "account": 117, "instanti": 117, "firstli": [117, 118, 121, 124, 126, 128, 134], "templat": [117, 970], "spec": [117, 118], "api_specif": [117, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 355, 356, 359, 374, 377, 414, 417, 418, 421, 426, 429, 451, 454, 534, 537, 566, 569, 570, 573, 714, 726, 728, 802, 816, 819, 836, 839, 906, 907, 908, 912, 915, 916, 919, 926, 931, 934], "array_api": 117, "preview": 117, "render": 117, "incorrectli": 117, "onlin": [117, 970], "tangent": [117, 159, 189, 193, 355, 382, 385, 386, 389, 390, 393, 579, 583, 584], "domain": [117, 355, 361, 364, 365, 368, 374, 377, 378, 381, 382, 385, 386, 389, 422, 425, 426, 429, 443, 446, 447, 450, 487, 490, 491, 494, 499, 502, 558, 561, 562, 565, 566, 569, 579, 583, 584], "infin": [117, 196, 268, 274, 355, 356, 359, 365, 368, 369, 372, 378, 381, 382, 385, 386, 389, 418, 421, 422, 425, 426, 429, 443, 446, 447, 450, 451, 454, 455, 458, 467, 470, 471, 474, 487, 490, 491, 494, 499, 502, 503, 506, 525, 528, 542, 545, 546, 549, 550, 553, 558, 561, 562, 565, 566, 569, 579, 583, 584, 585, 588, 714, 780, 782, 926, 931, 934, 939, 942, 959, 960, 963, 965, 968], "codomain": [117, 355, 361, 364, 365, 368, 374, 377, 378, 381, 382, 385, 386, 389, 422, 425, 426, 429, 443, 446, 447, 450, 487, 490, 491, 494, 499, 502, 558, 561, 562, 565, 566, 569, 579, 583, 584], "x_i": [117, 355, 356, 359, 361, 364, 365, 368, 374, 377, 378, 381, 382, 385, 398, 401, 418, 421, 422, 425, 426, 429, 443, 446, 447, 450, 451, 454, 467, 470, 471, 474, 475, 478, 487, 490, 491, 494, 499, 502, 511, 514, 530, 533, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 579, 583, 584, 585, 588, 906, 907, 908, 912, 914, 926, 931, 934, 935, 938, 939, 942, 947, 950, 951, 954, 955, 958], "assum": [117, 122, 126, 133, 134, 148, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 355, 356, 359, 369, 372, 374, 377, 394, 397, 414, 417, 418, 421, 422, 425, 426, 429, 451, 454, 534, 537, 550, 553, 558, 561, 566, 569, 570, 573, 579, 583, 584, 589, 617, 701, 704, 713, 714, 715, 718, 723, 725, 726, 728, 802, 816, 819, 820, 823, 836, 839, 884, 885, 888, 906, 907, 908, 912, 915, 916, 919, 926, 931, 934, 959, 960, 963], "express": [117, 131, 136, 355, 361, 364, 374, 377, 382, 385, 386, 389, 422, 425, 558, 561, 579, 583], "radian": [117, 355, 361, 364, 374, 377, 382, 385, 386, 389, 422, 425, 558, 561, 579, 583], "float": [117, 121, 125, 126, 128, 129, 133, 135, 159, 165, 168, 196, 197, 198, 199, 206, 212, 213, 220, 221, 224, 226, 227, 229, 230, 242, 243, 260, 262, 268, 274, 284, 288, 293, 296, 305, 338, 344, 348, 351, 354, 355, 356, 359, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 414, 417, 418, 421, 422, 425, 426, 429, 430, 433, 435, 438, 443, 446, 447, 450, 451, 454, 455, 458, 459, 462, 463, 466, 479, 482, 487, 490, 491, 494, 499, 502, 503, 506, 525, 528, 530, 533, 534, 537, 538, 541, 542, 545, 546, 549, 550, 553, 558, 561, 562, 565, 566, 569, 574, 578, 579, 583, 584, 585, 588, 589, 601, 602, 604, 616, 624, 625, 647, 648, 653, 654, 663, 665, 668, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 701, 704, 708, 713, 714, 715, 718, 723, 725, 729, 731, 732, 734, 735, 737, 746, 748, 755, 757, 758, 760, 762, 764, 765, 767, 780, 782, 786, 787, 790, 792, 795, 797, 800, 862, 863, 864, 865, 884, 885, 888, 889, 894, 895, 897, 906, 907, 908, 912, 914, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958], "operand": [117, 355, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 386, 389, 414, 417, 418, 421, 422, 425, 426, 429, 443, 446, 447, 450, 451, 454, 487, 490, 491, 494, 499, 502, 503, 506, 525, 528, 542, 545, 546, 549, 550, 553, 558, 561, 562, 565, 566, 569, 579, 583, 584, 585, 588, 926, 927, 930, 931, 934, 939, 942, 951, 954], "whose": [117, 197, 250, 254, 255, 259, 355, 365, 368, 378, 381, 390, 393, 422, 425, 426, 429, 542, 545, 558, 561, 562, 565, 579, 583, 584, 589, 600, 714, 715, 718, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 762, 764, 765, 767, 768, 770, 774, 776, 802, 820, 823, 836, 839, 906, 907, 908, 912, 926, 927, 930], "ref": [117, 355, 410, 413, 479, 482, 525, 528, 534, 537, 546, 549, 574, 578, 802, 846, 849], "promot": [117, 121, 126, 268, 274, 277, 280, 295, 296, 300, 355, 361, 364, 365, 368, 369, 372, 374, 377, 378, 381, 382, 385, 390, 393, 394, 397, 402, 405, 406, 409, 410, 413, 414, 417, 422, 425, 426, 429, 430, 433, 443, 446, 447, 450, 487, 490, 491, 494, 499, 502, 503, 506, 519, 522, 525, 528, 542, 545, 546, 549, 558, 561, 562, 565, 566, 569, 579, 583, 584, 714, 715, 718, 720, 722, 735, 737, 738, 741, 746, 748, 752, 754, 755, 757, 762, 764, 777, 779, 780, 782, 802, 846, 849, 926, 935, 938], "But": [117, 125, 136], "needless": 117, "info": [117, 970], "subset": [117, 120, 129, 131], "renam": 117, "conform": [117, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 232, 235, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 355, 356, 359, 369, 372, 374, 377, 394, 397, 414, 417, 418, 421, 426, 429, 447, 450, 451, 454, 483, 486, 534, 537, 550, 553, 566, 569, 570, 573, 579, 583, 584, 714, 723, 725, 726, 728, 802, 816, 819, 820, 823, 836, 839, 906, 907, 908, 912, 915, 916, 919, 926, 931, 934, 959, 960, 963], "org": [117, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 355, 356, 359, 374, 377, 414, 417, 418, 421, 426, 429, 451, 454, 534, 537, 566, 569, 570, 573, 663, 665, 668, 670, 672, 714, 726, 728, 802, 816, 819, 836, 839, 906, 907, 908, 912, 915, 916, 919, 926, 931, 934], "elementwise_funct": [117, 355, 356, 359, 374, 377, 414, 417, 418, 421, 426, 429, 451, 454, 534, 537, 566, 569, 570, 573, 714, 726, 728, 802, 836, 839, 906, 907, 915, 916, 919, 926, 931, 934], "descript": [117, 125, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 355, 356, 359, 369, 372, 374, 377, 394, 397, 414, 417, 418, 421, 426, 429, 451, 454, 534, 537, 550, 553, 566, 569, 570, 573, 579, 583, 584, 589, 617, 701, 704, 713, 714, 715, 718, 723, 725, 726, 728, 780, 782, 802, 816, 819, 820, 823, 836, 839, 884, 885, 888, 906, 907, 908, 912, 915, 916, 919, 926, 931, 934, 959, 960, 963], "simplic": [117, 135, 147, 197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 229, 230, 232, 235, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267, 268, 277, 280, 355, 356, 359, 369, 372, 374, 377, 394, 397, 414, 417, 418, 421, 426, 429, 451, 454, 534, 537, 550, 553, 566, 569, 570, 573, 579, 583, 584, 589, 617, 701, 704, 713, 714, 715, 718, 723, 725, 726, 728, 802, 816, 819, 820, 823, 836, 839, 884, 885, 888, 906, 907, 908, 912, 915, 916, 919, 926, 931, 934], "judgment": 117, "beyond": [117, 802, 836, 839], "text": 117, "func_nam": [117, 118, 121], "pure": [117, 133, 136, 148], "themselv": [117, 121, 125, 126, 127, 135, 866, 867], "operator_nam": 117, "succinct": 117, "contstructor": 117, "though": [117, 121, 126, 134, 148], "forward": [117, 136, 147, 148, 1004, 1005, 1008, 1012], "_forward": [117, 131, 134, 135, 970], "former": 117, "trainabl": [117, 132, 134, 135, 663, 679, 681, 981, 982, 1004, 1005, 1014], "explicitli": [117, 121, 122, 124, 125, 128, 131, 148, 714, 729, 731, 992, 1001, 1003, 1004, 1005], "latter": [117, 122], "implicit": [117, 125, 131], "docst": 117, "eight": 118, "static_": 118, "op_nam": 118, "__r": 118, "four": [118, 121, 126, 129, 134], "__sub__": [118, 124, 125, 129, 133], "__mul__": [118, 124, 125, 129, 133], "__truediv__": [118, 124, 125], "respect": [118, 124, 125, 126, 129, 197, 232, 235, 355, 356, 359, 369, 372, 386, 389, 394, 397, 402, 405, 406, 409, 410, 413, 414, 417, 430, 433, 435, 438, 455, 458, 459, 462, 463, 466, 479, 482, 483, 486, 503, 506, 507, 510, 515, 518, 519, 522, 525, 528, 534, 537, 546, 549, 574, 578, 663, 665, 668, 670, 672, 674, 675, 677, 683, 685, 687, 689, 691, 693, 714, 758, 760, 862, 863, 864, 865], "recap": [118, 125, 135], "independ": [118, 119, 123, 125, 131, 136, 714, 720, 722, 762, 764, 889, 890], "combinatorili": 118, "variat": [118, 120], "grid": [118, 120, 147, 197, 232, 235], "vari": [118, 120, 125, 133, 906, 907, 908, 912, 914], "simplest": 118, "small": [118, 121, 131, 135, 148, 355, 525, 528, 714, 746, 748, 755, 757, 884, 885, 888, 1006, 1007], "unus": [118, 128, 194, 195], "18": [118, 125, 355, 414, 417, 714, 726, 728, 752, 754, 926, 927, 930], "excess": [118, 122, 133], "showcas": [118, 147], "demonstr": [118, 133], "replic": [118, 126], "meant": 118, "imaginari": 118, "some_flag": 118, "another_flag": 118, "54": [118, 355, 422, 425, 426, 429, 566, 569, 701, 713, 714, 752, 754, 889, 894, 926, 927, 930], "jointli": 118, "three": [118, 125, 130, 197, 232, 235, 970], "x0": [118, 589, 597], "procedur": 118, "sens": [118, 125, 133], "5574077": 118, "1850398": 118, "5463025": 118, "8422884": 118, "91601413": 118, "9647598": 118, "3738229": 118, "1597457": 118, "0963247": 118, "9955841": 118, "3278579": 118, "multi": [118, 125, 130, 148, 701, 712, 714, 720, 722, 970, 976, 992, 1003], "seper": [118, 589, 616], "pars": [118, 148], "satisfi": [118, 714, 783, 785], "far": [118, 127, 132, 133, 866, 867, 877], "asid": [118, 147], "irrelev": [118, 126], "increasingli": 118, "complex": [118, 134, 135, 136, 148, 714, 729, 731, 765, 767], "rule": [118, 120, 121, 124, 125, 126, 268, 274, 277, 280, 296, 355, 390, 393, 410, 413, 430, 433, 525, 528, 546, 549, 714, 715, 718, 720, 722, 752, 754, 762, 764], "14254655": 118, "1578213": 118, "380515": 118, "17": [118, 125, 159, 165, 168, 714, 726, 728, 889, 894], "trivial": 118, "By": [118, 121, 125, 128, 135, 136, 589, 607, 608, 714, 777, 779, 802, 828, 831, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968], "non": [118, 125, 126, 131, 194, 195, 268, 274, 292, 355, 511, 514, 515, 518, 701, 704, 714, 723, 725, 746, 748, 765, 767, 771, 773, 777, 779, 780, 782, 901, 902, 903, 904, 926, 931, 934, 935, 938, 939, 942, 943, 946, 955, 958, 959, 960, 963, 965, 968, 1004, 1005, 1008, 1012], "dictat": [118, 124, 128, 129], "exlud": 118, "unit": [119, 120, 148, 159, 160, 163, 165, 168, 170, 173, 305], "thoroughli": [119, 120], "ci": [119, 120, 148], "failur": 119, "On": [120, 132, 136], "fixtur": 120, "consum": [120, 125, 129, 305], "300": [120, 355, 550, 553], "hit": [120, 131], "permit": [120, 124, 129], "action": 120, "eleg": 120, "intellig": 120, "sampl": [120, 701, 709, 889, 890, 894, 895, 897, 926, 947, 950, 955, 958, 992, 1000], "rang": [120, 134, 135, 136, 197, 198, 199, 226, 227, 229, 230, 906, 907, 926, 943, 946, 951, 954, 970], "unexplor": 120, "known": 120, "repeatedli": [120, 125, 866, 875], "upload": 120, "artifact": 120, "parametr": 120, "strategi": 120, "statement": [120, 148], "plai": [120, 136], "verifi": [120, 126, 127, 133, 970, 976], "truth": [120, 355, 435, 438, 459, 462, 463, 466, 479, 482, 483, 486, 534, 537], "opt": [120, 122, 128, 133], "defer": [120, 121, 124, 125, 126, 127, 128], "suffic": [120, 123], "catch": [120, 589, 610], "systemat": 120, "safeguard": 120, "inabl": 120, "fact": [120, 134], "categor": [121, 127], "mutual": [121, 125], "constitut": [121, 131, 926, 947, 950, 955, 958], "venn": 121, "diagram": 121, "light": [121, 148], "wherea": [121, 124, 126, 127, 129, 136], "hand": [121, 148], "log_pr": [121, 125, 128], "array_arg": 121, "typic": 121, "whatsoev": [121, 125], "commonli": [121, 926, 947, 950, 955, 958], "outsid": [121, 127, 131, 133, 136, 802, 803, 806, 846, 849], "denomin": [121, 148, 589, 615, 625, 648, 653, 654, 884, 885, 888, 1006, 1007], "divis": [121, 355, 410, 413, 430, 433, 455, 458, 546, 549, 589, 615, 625, 648, 653, 654, 663, 665, 668, 670, 672, 683, 685, 1008, 1009, 1010], "deal": [121, 148], "concurr": [121, 125], "weight": [121, 125, 135, 136, 663, 665, 668, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 701, 710, 711, 713, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1004, 1005, 1008, 1010, 1011], "modif": 121, "decor": [121, 123, 125, 126, 127, 128], "group": [121, 125], "briefli": [121, 134], "cast": [121, 126, 268, 274, 277, 280, 802, 808, 811, 926, 943, 946, 951, 954, 970], "get_all_arrays_on_dev": 121, "nested_map": [121, 866], "index_nest": [121, 866], "implicit_backend": 122, "unless": [122, 127, 128, 148, 355, 525, 528, 589, 642], "__dict__": [122, 131, 133], "ivy_original_dict": [122, 131], "unmodifi": [122, 126], "moment": [122, 148, 663, 665, 668, 670, 672, 683, 685, 1008, 1009, 1010], "fallback": 122, "freedom": [122, 926, 947, 950, 955, 958], "recommend": [122, 355, 511, 514, 515, 518, 546, 549, 926, 935, 938], "achiev": [123, 134, 136], "wrapper": [123, 124, 125, 126, 128, 129, 133], "logic": [123, 124, 126, 127, 133, 305, 341, 355, 507, 510, 511, 514, 515, 518, 959, 960, 963, 965, 968, 970], "topic": [123, 133], "tf": [124, 126, 127, 128, 129, 131, 136, 148, 970], "_data": [124, 133], "organiz": [124, 125], "bear": [124, 125, 126], "mind": [124, 125], "necessarili": [124, 125], "although": [124, 125], "underpin": [124, 125, 131], "programmat": [124, 125], "backup": [124, 125], "accident": [124, 125], "readabl": [124, 125, 129, 133, 134], "absent": [124, 125], "perk": [124, 125], "auto": [124, 125, 134], "throw": [124, 133], "imposs": 124, "coupl": [124, 125, 133, 135], "anywai": 124, "secondli": [124, 126], "easier": 124, "five": [125, 134], "decis": [125, 131, 133], "displai": [125, 134], "arbitrarili": [125, 134], "__repr__": 125, "control": [125, 126, 128, 133, 134, 147], "__getattr__": 125, "underli": [125, 355, 394, 397, 406, 409, 414, 417, 519, 522], "__contains__": 125, "__getstate__": 125, "__setstate__": 125, "unpickl": 125, "expand": [125, 589, 616, 802, 816, 819], "children": 125, "shallowest": 125, "deepest": 125, "67": [125, 355, 414, 417, 426, 429], "22": [125, 355, 414, 417, 714, 726, 728, 752, 754, 901, 905, 926, 927, 930], "retain_grad": [125, 663, 674], "dy": [125, 663, 674], "dx": [125, 663, 674], "technic": [125, 128, 129, 148], "autograd": [125, 148], "grad": [125, 134, 135, 136, 970, 1008, 1012], "redund": 125, "num_head": [125, 701, 712, 992, 1003], "mask": [125, 701, 712, 713], "to_q_fn": [125, 701, 712], "to_kv_fn": [125, 701, 712], "to_out_fn": [125, 128, 701, 712], "to_q_v": [125, 701, 712], "to_kv_v": [125, 701, 712], "to_out_v": [125, 701, 712], "measur": [125, 701, 712, 992, 1003], "dot": [125, 701, 712, 713, 714, 771, 773, 777, 779, 992, 1003], "product": [125, 355, 525, 528, 589, 607, 701, 712, 713, 714, 720, 722, 738, 741, 752, 754, 771, 773, 777, 779, 926, 927, 930, 943, 946, 992, 1003], "implicitli": 125, "intuit": [125, 134, 135], "debug": [125, 134], "chronolog": 125, "had": [125, 128], "sequenti": [125, 135], "flow": [125, 147], "implic": 125, "slightli": [125, 131, 135], "eager": [125, 148], "int8": [126, 268, 289], "int16": [126, 268, 277, 280, 289, 926, 943, 946, 951, 954], "uint8": [126, 268, 277, 280, 289], "uint16": [126, 268, 290, 926, 943, 946, 951, 954], "uint32": [126, 268, 290, 926, 943, 946, 951, 954], "uint64": [126, 268, 290, 926, 943, 946, 951, 954], "bfloat16": [126, 268, 289], "float16": [126, 268, 290], "all_dtyp": 126, "all_numeric_dtyp": 126, "all_int_dtyp": 126, "all_float_dtyp": 126, "fall": [126, 130, 970, 1004, 1005, 1008, 1012], "valid": [126, 131, 268, 282, 701, 702, 703, 704, 705, 706, 707, 708, 802, 846, 849, 959, 960, 963, 965, 968, 992, 993, 994, 995, 996, 997, 998, 999], "invalid": [126, 714, 777, 779, 959, 960, 963, 965, 968], "thirdli": 126, "native_float32": 126, "importantli": [126, 133, 136, 147], "varieti": [126, 127], "conveni": [126, 127, 129, 132, 134, 135], "arguabl": [126, 127], "compound": 126, "overflow": [126, 355, 369, 372, 926, 951, 954], "arr": [126, 127, 884, 885, 888], "scalar": [126, 131, 136, 148, 197, 221, 224, 589, 642, 659, 662, 714, 780, 782], "settabl": [126, 127], "jnp": [126, 127, 128, 129, 136, 970], "jaxarrai": [126, 127, 128, 129], "mx": [126, 127, 128, 970], "nd": [126, 127, 128, 131, 136, 970], "deleg": 126, "as_n": [126, 268, 283, 284, 285, 286, 305, 324, 325, 346], "idx": [127, 133, 589, 595], "tpu": [127, 305, 327, 352], "aliv": [127, 305, 339, 343, 345, 589, 623, 641, 643], "amount": [127, 305, 351, 786, 787, 790, 792, 795, 797, 800], "dual": 127, "thrown": [127, 148, 589, 633], "rare": [127, 148], "program": 128, "strictli": 128, "ration": 128, "speak": 128, "subtli": 128, "ensure_in_backend": [128, 589, 633], "x_nativ": 128, "val_n": 128, "is_ivy_arrai": [128, 133, 589], "assign": [128, 133], "elif": 128, "irrespect": [128, 133, 268, 274], "inclus": [128, 197, 198, 199, 889, 891, 892], "omit": [128, 129, 906, 907, 908, 912, 914], "unspecifi": [128, 355, 542, 545, 546, 549, 714, 729, 731, 802, 846, 849], "predominantli": [128, 147], "math": [128, 136, 970], "presenc": 128, "altern": [128, 134], "_wrap_fn": 128, "maxim": [128, 131], "inner": [128, 133, 714, 729, 731, 738, 741, 862, 863, 864, 865], "third": [128, 148, 714, 765, 767, 906, 907], "addition": [128, 129], "leverag": 128, "equival": [128, 134, 136, 197, 198, 199, 355, 410, 413, 511, 514, 515, 518, 546, 549, 714, 746, 748, 755, 757, 762, 764, 780, 782], "input_arrai": 128, "adress": 129, "revisit": [129, 136], "dedic": [129, 133, 135, 663, 699, 981, 982], "__div__": 129, "dicat": 129, "futher": 129, "absenc": 129, "pep": 129, "484": 129, "annot": 129, "brittl": 129, "intend": [129, 926, 951, 954], "freeli": 129, "inde": [129, 148], "flexibl": 129, "original_typ": 129, "cumbersom": 129, "sound": 130, "higher": [130, 131, 136, 148, 663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693], "overview": [130, 147], "handler": [130, 132, 136, 970], "fledg": [131, 132], "syntact": [131, 136], "clip_by_valu": [131, 136], "clamp": [131, 136], "behavior": [131, 148, 355, 542, 545, 546, 549, 906, 907, 908, 912, 914], "fit": [131, 802, 828, 831], "construct": [131, 132, 135, 136, 802, 854, 857, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "power_seq": 131, "okai": 131, "bound": 131, "resid": [131, 135], "edg": [131, 136, 802, 803, 806, 812, 815, 858, 861, 970], "larger": [131, 136, 268, 288, 802, 803, 806, 836, 839, 926, 947, 950, 955, 958], "ml_framework": [131, 136, 197, 198, 199], "current_framework": [131, 136], "furthermor": 131, "concaten": [131, 134, 305, 334, 589, 616, 802, 808, 811, 970], "framework_handl": 131, "face": 131, "verbos": [131, 970, 1018], "cprint": [131, 1017], "framework_stack": 131, "_determine_framework_from_arg": 131, "valueerror": [131, 802, 842, 845], "get_framework": 131, "neither": [131, 355, 369, 372, 525, 528], "illustr": [131, 147], "un": [131, 268, 292], "nn": [131, 136, 197, 232, 235, 970], "init_h": [131, 701, 711], "init_c": [131, 701, 711], "kernel": [131, 148, 701, 711], "recurrent_kernel": [131, 701, 711], "bia": [131, 135, 701, 710, 711, 992, 993, 994, 995, 996, 997, 998, 999, 1002], "recurrent_bia": [131, 701, 711], "x_shape": 131, "batch_shap": [131, 133, 136, 589, 642, 701, 711, 712, 713, 714, 783, 785, 889, 890, 992, 1001], "timestep": [131, 701, 711, 992, 1001], "input_channel": [131, 135, 992, 993, 994, 995, 996, 997, 998, 1001, 1002], "x_flat": 131, "wi": 131, "wi_x": 131, "wii_x": 131, "wif_x": 131, "wig_x": 131, "wio_x": 131, "recurr": [131, 701, 711], "wh": 131, "lstm": [131, 701, 711, 992], "ht": 131, "ct": 131, "hts_list": 131, "unrol": [131, 134, 701, 711], "wii_xt": 131, "wif_xt": 131, "wig_xt": 131, "wio_xt": 131, "zip": 131, "htm1": 131, "ctm1": 131, "wh_htm1": 131, "whi_htm1": 131, "whf_htm1": 131, "whg_htm1": 131, "who_htm1": 131, "ft": 131, "gt": 131, "ot": 131, "offici": 131, "reliabl": 131, "sacrific": 131, "hear": 131, "virtu": 131, "pure_ivi": 131, "reduce_mean": [131, 134, 135, 136, 970], "reduce_sum": [131, 970], "reduce_var": 131, "compile_graph": [131, 136], "pure_torch": 131, "cat": [131, 136], "backbon": [131, 134], "_layer": 131, "super": [131, 134, 135, 136], "clean": [131, 132, 134], "random_unifrom": 131, "unclean": 131, "wx": 131, "temp": 131, "torchscript": 131, "fn": [131, 133, 149, 150, 151, 152, 153, 154, 155, 156, 157, 268, 289, 290, 305, 314, 315, 589, 595, 660, 866, 867, 872, 873, 874, 876, 877, 878, 973, 975], "example_input": [131, 194, 195], "static_argnum": [131, 194, 195], "static_argnam": [131, 194, 195], "jit": [131, 148], "frontend": 132, "primit": [132, 148], "hierarch": [132, 134, 135], "straight": [133, 970], "arraywithlinalg": 133, "arraywithlog": 133, "arraywithmath": 133, "arraywithmeta": 133, "arraywithreduct": 133, "is_native_arrai": [133, 589], "_shape": 133, "_size": 133, "functool": 133, "mul": 133, "_dtype": 133, "_devic": 133, "_dev_str": 133, "_pre_repr": 133, "_post_repr": 133, "ndim": [133, 714, 758, 760, 765, 767], "mt": 133, "answer": [133, 148], "consol": 133, "typeerror": 133, "immut": 133, "behav": 133, "claim": 133, "truli": 133, "_native_wrapp": 133, "attributeerror": 133, "genuin": 133, "some_method": 133, "similarli": [133, 197, 232, 235], "rewritten": 133, "__pow__": 133, "strang": 133, "power": [133, 134, 135, 355, 410, 413, 443, 446, 542, 545, 589, 624, 647, 654, 714, 745, 983], "enforc": 133, "notic": 133, "appear": [133, 802, 816, 819], "invers": [133, 147, 355, 361, 364, 365, 368, 374, 377, 378, 381, 382, 385, 386, 389, 390, 393, 714, 735, 737, 755, 757], "_wrap_method": 133, "func_wrapp": [133, 149, 150, 151, 152, 153, 154, 155, 156, 157], "__name__": 133, "non_wrapped_method": 133, "_method_wrap": 133, "native_arg": 133, "native_kwarg": 133, "inner_fn": 133, "whist": 133, "unwrap": 133, "transit": 133, "needlessli": 133, "randn": 133, "_unwrap_method": 133, "method_wrap": 133, "compartment": 133, "public": [133, 589, 605], "newshap": 133, "new_shap": 133, "tidi": 133, "shorter": 133, "crystal": 133, "enough": [133, 134, 135], "ton": 134, "ado": [134, 135], "incred": [134, 148], "hash": 134, "soup": 134, "walk": [134, 135], "dct": 134, "cnt": 134, "combo": [134, 970, 976], "hold": [134, 589, 645, 646], "1000": [134, 355, 566, 569], "uda": 134, "3333": 134, "6667": 134, "178": 134, "new_weight": 134, "0600": 134, "3100": 134, "2400": 134, "6900": 134, "delimit": 134, "autocomplet": 134, "midwai": 134, "agent": 134, "total_spe": 134, "total_height": 134, "total_width": 134, "ag": 134, "tot": 134, "total_": 134, "total_h": 134, "batch_siz": [134, 701, 702, 703, 704, 705, 706, 707, 708, 889, 890], "dir": 134, "adam": [134, 135, 136, 663, 665, 668, 670, 672, 683, 685, 970, 1008, 1010], "cnt0": 134, "cnt1": 134, "diff_0": 134, "diff_1": 134, "config0": 134, "config1": 134, "Not": [134, 135, 148, 196], "decod": 134, "l0": 134, "l1": [134, 714, 780, 782], "depth": [134, 135, 136, 147, 305, 329, 333, 337, 589, 627, 642, 866, 878, 1004, 1005], "clearer": 134, "truncat": 134, "decoder__l0": 134, "decoder__l1": 134, "encoder__l0": 134, "encoder__l1": 134, "height": 134, "l0__b": 134, "l0__w": 134, "l1__b": 134, "l1__w": 134, "printabl": 134, "obviou": 134, "foresight": 134, "untidili": 134, "update_ag": 134, "normalize_img": 134, "img": 134, "img_max": 134, "reduce_max": [134, 970], "img_min": 134, "reduce_min": [134, 970], "img_rang": 134, "agent_posit": 134, "agent_veloc": 134, "agent_cam_front_rgb": 134, "agent_cam_front_depth": 134, "agent_cam_rear_rgb": 134, "agent_cam_rear_depth": 134, "agent_cam_lidar": 134, "cleaner": 134, "camera": 134, "front_rgb": 134, "front_depth": 134, "rear_rgb": 134, "rear_depth": 134, "lidar": 134, "rgb": 134, "rear": 134, "veloc": 134, "cam": 134, "cam_max": 134, "cam_min": 134, "cam_rang": 134, "Of": 134, "ideal": 134, "perman": 134, "afterward": 134, "thread": 134, "incorpor": 134, "pretti": 134, "straightforward": 134, "dataload": [134, 146, 970], "_cnt": 134, "img_": 134, "_dataset_s": 134, "_batch_siz": 134, "_count": [134, 135], "__next__": 134, "filenam": 134, "img_fnam": 134, "fname": 134, "loaded_img": 134, "cv2": 134, "imread": 134, "loader": [134, 148], "batch_slic": 134, "model": [134, 135, 970], "mymodel": [134, 970], "linear0": [134, 135, 970], "linear1": [134, 135, 970], "x_in": [134, 135, 136, 970], "001": [134, 135, 663, 665, 668, 884, 885, 888], "loss_fn": [134, 135, 136, 970], "0145": 134, "grad_fn": 134, "addbackward0": 134, "_create_vari": 135, "output_channel": [135, 992, 993, 994, 995, 996, 997, 998, 1001, 1002], "with_bia": [135, 992, 1002], "_input_channel": 135, "_output_channel": 135, "_w_shape": 135, "_b_shape": 135, "_with_bia": 135, "8979": 135, "3198": 135, "0196": 135, "3126": 135, "3717": 135, "9687": 135, "6958": 135, "5122": 135, "3902": 135, "8800": 135, "5613": 135, "1982": 135, "nightmar": 135, "overcom": 135, "fc": 135, "9563": 135, "impact": 135, "v0": 135, "v1": 135, "6440": 135, "key0": 135, "1823": 135, "8075": 135, "linear3": 135, "v2": 135, "2346": 135, "counter": 135, "hidden": [135, 701, 711, 992, 1001], "fed": [135, 305, 349], "1300": 135, "decoupl": 135, "scheme": 135, "weight_initi": [135, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002], "glorotuniform": [135, 983, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002], "bias_initi": [135, 992, 993, 994, 995, 996, 997, 998, 999, 1002], "_w_init": 135, "_b_init": 135, "create_vari": [135, 983], "var_shap": [135, 983], "fan_out": [135, 983], "fan_in": [135, 983], "fan_mod": [135, 983], "fan_sum": 135, "slight": 135, "misnom": 135, "saw": 135, "vanilla": [135, 862, 864], "descent": [135, 663, 675, 677, 1008, 1013], "lar": [135, 663, 683, 685, 687, 689, 1008], "lamb": [135, 663, 683, 685, 1008], "compile_on_next_step": [135, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013], "_beta1": 135, "_beta2": 135, "_epsilon": 135, "_mw": 135, "_vw": 135, "_first_pass": 135, "_should_compil": 135, "_step": [135, 1008, 1012], "new_v": 135, "_lr": 135, "isinst": [135, 136, 589, 657], "_inplac": 135, "_stop_gradi": 135, "set_stat": [135, 1008, 1009, 1010, 1011, 1012, 1013], "pre": [136, 148, 305], "captur": 136, "sparse_funct": 136, "num_class": [136, 889, 890], "num_dim": 136, "new_axi": 136, "_linear": 136, "to_backend": 136, "jax_graph": 136, "learnabl": [136, 884, 885, 888, 1006, 1007], "to_ivy_modul": [136, 981], "thinli": 136, "whilst": 136, "to_haiku_modul": 136, "hk": 136, "loss_fn_t": 136, "transform": [136, 147, 701, 709, 710], "without_apply_rng": 136, "rng": 136, "prngkei": 136, "init": 136, "update_rul": 136, "01": [136, 355, 550, 553], "tree_multimap": 136, "mechan": [146, 148, 970], "vision": [146, 970], "robot": [146, 970], "focus": 147, "field": [147, 714, 729, 731, 758, 760, 765, 767, 906, 907, 908, 912], "perfect": 147, "3d": [147, 992, 997, 998], "differenti": 147, "demo": [147, 970], "orient": 147, "pose": 147, "euler": [147, 196], "quaternion": 147, "rotat": 147, "matric": [147, 197, 232, 235, 250, 254, 255, 259, 701, 710, 714, 715, 718, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 745, 746, 748, 749, 751, 755, 757, 758, 760, 762, 764, 765, 767, 768, 770, 774, 776], "angl": [147, 355, 386, 389, 426, 429, 562, 565, 584], "ivy_mech": 147, "target_facing_rotation_matrix": 147, "polar_to_cartesian_coord": 147, "ordin": [147, 714, 762, 764], "warp": 147, "optic": 147, "voxel": 147, "ivy_vis": 147, "coords_to_voxel_grid": 147, "render_pixel_coord": 147, "neural": [147, 701, 970, 978, 992], "radianc": 147, "nerf": 147, "trajectori": 147, "motion": 147, "plan": [147, 970], "mobil": 147, "ivy_robot": 147, "sample_spline_path": 147, "rigidmobil": 147, "sample_bodi": 147, "drone": 147, "sample_link": 147, "openai": 147, "swimmer": 147, "cumul": [147, 589, 607, 608], "reward": 147, "supervis": 147, "reinforc": 147, "door": [147, 148], "intersect": 147, "cartpol": 147, "mountain_car": 147, "pendulum": 147, "reacher": 147, "polici": 147, "condit": [147, 194, 195, 866, 876, 877, 901, 905], "learnt": 147, "ture": 147, "ntm": 147, "egospher": 147, "spatial": 147, "esm": 147, "ivy_memori": 147, "egocentr": 147, "room": 147, "inspir": 147, "doubt": 148, "grate": 148, "put": 148, "probe": 148, "undergo": 148, "remark": 148, "surpris": 148, "backward": [148, 355, 546, 549, 714, 777, 779, 959, 960, 963, 965, 968], "lock": 148, "contunu": 148, "minor": 148, "xla": 148, "buffer": 148, "kind": [148, 268, 288, 291, 355, 542, 545, 926, 943, 946, 951, 954], "gold": 148, "dex": 148, "phase": 148, "lax": 148, "scan": 148, "tricki": 148, "predictor": 148, "tight": 148, "driver": 148, "schedul": 148, "dispatch": 148, "Will": 148, "ast": 148, "dynamic": 148, "cond": 148, "jacobian": 148, "checkpoint": 148, "autodiff": 148, "shine": 148, "merci": 148, "superset": 148, "cluster": 148, "compet": 148, "paradigm": 148, "parallelis": [148, 305, 314, 315], "spmd": 148, "mixtur": [148, 663, 665, 668], "expert": 148, "sophist": 148, "depart": 148, "routin": 148, "hundr": 148, "thousand": 148, "deepli": [148, 866, 868], "broadli": 148, "heavili": 148, "supplementari": 148, "Is": 148, "reusabl": 148, "fanci": 148, "fusion": 148, "lose": 148, "vmap": 148, "pmap": 148, "overhead": 148, "ineffici": 148, "eventu": 148, "supplement": 148, "backdoor": 148, "callback": 148, "record": 148, "metric": 148, "somewhat": 148, "outsourc": 148, "inputs_to_ivy_arrai": 149, "gaussian": [159, 160, 163], "leaki": [159, 160, 163, 165, 168], "rectifi": [159, 165, 168, 170, 173], "slope": [159, 165, 168], "39": [159, 165, 168, 355, 443, 446, 663, 665, 668, 714, 752, 754, 926, 927, 930], "85": [159, 165, 168, 355, 414, 417], "48": [159, 165, 168, 355, 566, 569, 663, 665, 668, 714, 752, 754, 926, 927, 930], "88": [159, 165, 168, 355, 414, 417, 714, 752, 754, 926, 927, 930], "269": [159, 175, 178], "731": [159, 175, 178], "881": [159, 175, 178], "214": [159, 175, 178], "978": [159, 175, 178], "891": [159, 175, 178], "422": [159, 180, 183], "155": [159, 180, 183], "0768": [159, 180, 183], "231": [159, 180, 183], "693": [159, 180, 183, 786, 797, 800], "49": [159, 180, 183, 355, 566, 569, 926, 927, 930], "147": [159, 180, 183], "363": [159, 180, 183], "3461": [159, 185, 187], "6491": [159, 185, 187], "535": [159, 185, 187], "hyperbol": [159, 189, 193, 355, 365, 368, 378, 381, 390, 393, 426, 429, 562, 565, 584], "55": [159, 189, 193, 701, 707, 714, 752, 754, 926, 927, 930], "501": [159, 189, 193], "array_method": [160, 161, 165, 166, 170, 171, 175, 176, 180, 181, 189, 191, 201, 202, 207, 208, 215, 216, 221, 222, 232, 233, 237, 238, 245, 246, 250, 252, 255, 257, 263, 265, 277, 278, 356, 357, 361, 362, 365, 366, 369, 370, 374, 375, 378, 379, 382, 383, 386, 387, 390, 391, 394, 395, 398, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 435, 436, 439, 440, 443, 444, 447, 448, 451, 452, 455, 456, 459, 460, 463, 464, 467, 468, 471, 472, 475, 476, 479, 480, 483, 484, 487, 488, 491, 492, 495, 496, 499, 500, 503, 504, 507, 508, 511, 512, 515, 516, 519, 520, 525, 526, 530, 531, 534, 535, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 576, 579, 581, 585, 586, 590, 591, 618, 619, 665, 666, 715, 716, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 738, 739, 742, 743, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783, 784, 787, 788, 792, 793, 797, 798, 803, 804, 808, 809, 812, 813, 816, 817, 820, 821, 824, 825, 828, 829, 832, 833, 836, 837, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 885, 886, 908, 910, 916, 917, 921, 922, 927, 928, 931, 932, 935, 936, 939, 940, 943, 944, 947, 948, 951, 952, 955, 956, 960, 961, 965, 966], "container_method": [160, 162, 164, 165, 167, 169, 170, 172, 174, 175, 177, 179, 180, 182, 184, 185, 186, 188, 189, 190, 192, 198, 200, 201, 203, 205, 207, 209, 211, 212, 214, 215, 217, 219, 221, 223, 225, 226, 228, 229, 231, 232, 234, 236, 237, 239, 241, 242, 244, 245, 247, 249, 250, 251, 253, 255, 256, 258, 260, 261, 263, 264, 266, 277, 279, 281, 356, 358, 360, 361, 363, 365, 367, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 525, 527, 529, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 575, 577, 579, 580, 582, 585, 587, 590, 592, 594, 602, 603, 618, 620, 622, 665, 667, 669, 670, 671, 673, 675, 676, 678, 679, 680, 682, 683, 684, 686, 687, 688, 690, 691, 692, 694, 715, 717, 719, 738, 740, 787, 789, 791, 792, 794, 796, 797, 799, 801, 803, 805, 807, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 885, 887, 891, 893, 895, 896, 898, 908, 909, 911, 916, 918, 920, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 957, 960, 962, 964, 965, 967, 969], "faster": [194, 195], "invoc": [194, 195], "718281828459045": 196, "newaxi": 196, "alia": 196, "pi": 196, "141592653589793": 196, "mathemat": [196, 355, 369, 372, 386, 389, 447, 450, 525, 528, 714, 780, 782], "half": [197, 198, 199, 889, 891, 892, 895, 897], "chosen": [197, 198, 199, 355, 386, 389, 901, 905], "distanc": [197, 198, 199], "adjac": [197, 198, 199], "creation_funct": [197, 198, 199, 201, 204, 206, 207, 210, 212, 213, 215, 218, 220, 221, 224, 226, 227, 242, 243, 245, 248, 250, 254, 255, 259, 260, 262, 263, 267], "interpret": [197, 201, 204, 237, 240], "uniniti": [197, 206, 207, 210], "elsewher": [197, 212, 213, 901, 905], "row": [197, 212, 213, 714, 762, 764, 765, 767, 889, 890, 901, 904], "column": [197, 212, 213, 714, 729, 731, 758, 760, 762, 764, 765, 767], "__dlpack__": [197, 215, 218, 305, 350], "interchang": [197, 215, 218, 802, 850, 853], "coordin": [197, 232, 235, 355, 386, 389], "cartesian": [197, 232, 235], "ij": [197, 232, 235, 926, 927, 930], "rank": [197, 232, 235, 589, 661, 714, 720, 722, 746, 748, 758, 760, 762, 764, 774, 776, 777, 779, 780, 782, 802, 812, 815, 816, 819, 846, 849, 858, 861, 901, 904, 959, 960, 963, 965, 968], "ni": [197, 232, 235], "xi": [197, 232, 235], "n1": [197, 232, 235], "n2": [197, 232, 235], "n3": [197, 232, 235], "accordingli": [197, 232, 235, 355, 447, 450, 714, 780, 782, 901, 903, 906, 907, 908, 912, 914, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968], "xv": [197, 232, 235], "yv": [197, 232, 235], "triangular": [197, 250, 254, 255, 259, 714, 715, 718, 758, 760], "innermost": [197, 250, 254, 255, 259, 714, 715, 718, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 746, 748, 749, 751, 755, 757, 758, 760, 762, 764, 765, 767, 768, 770, 774, 776], "mxn": [197, 250, 254, 255, 259, 714, 726, 728, 746, 748, 749, 751, 755, 757, 758, 760, 768, 770, 774, 776], "defaultdtyp": [268, 269], "defaultfloatdtyp": [268, 270], "float_dtyp": [268, 284, 298], "defaultintdtyp": [268, 271], "dtype_in": [268, 272, 273, 287, 292, 293, 294, 304], "incompat": [268, 276], "occur": [268, 277, 280, 901, 902, 903, 906, 907, 908, 912, 914], "data_type_funct": [268, 277, 280], "closest": [268, 282, 355, 418, 421, 451, 454, 455, 458, 550, 553, 585, 588], "floatdtyp": [268, 284], "int_dtyp": [268, 285, 299], "intdtyp": [268, 285], "followng": [268, 288], "occupi": [268, 288, 291, 589, 645, 646], "ep": [268, 288, 714, 746, 748, 755, 757], "smallest_norm": [268, 288], "precis": [268, 288, 355, 525, 528, 566, 569], "encapsul": [268, 291], "type1": [268, 295], "type2": [268, 295], "arrays_and_dtyp": [268, 296], "ret1": [268, 300], "ret2": [268, 300], "noinspect": [269, 270, 271, 306, 664], "pyshadowingnam": [269, 270, 271, 306, 664], "defaultdevic": [305, 306], "__enter__": 305, "_dev": 305, "initialis": 305, "devcloneditem": [305, 327], "multidevitem": [305, 307, 310], "devclonedit": 305, "multidevit": [305, 308, 311, 314, 315, 319], "devclonednest": 305, "multidevnest": [305, 309, 312], "devdistitem": 305, "devdistit": 305, "devdistnest": 305, "devmanag": [305, 313], "dev_mapp": 305, "da_dim_s": 305, "safety_factor": 305, "min_dev_dim_s": 305, "max_dev_dim_step_ratio": 305, "min_unit_dev_tune_step": 305, "min_sf_tune_step": 305, "starting_split_factor": 305, "max_split_factor_step_s": 305, "tune_dev_alloc": 305, "tune_dev_split": 305, "mapper": [305, 314, 315], "receivess": 305, "ratio": [305, 663, 683, 685, 1008, 1010], "safe": [305, 314], "oom": 305, "tune": 305, "da_tune_step": 305, "ds_tune_step": 305, "to_clon": 305, "to_distribut": 305, "multidevic": [305, 314], "parallel": [305, 314, 315], "mutlidevic": [305, 314], "repeated_config_check": 305, "tune_step": 305, "devmapp": [305, 315], "ret_fn": [305, 314, 315], "queue_class": [305, 314, 315], "worker_class": [305, 314, 315], "worker": [305, 314, 315], "used_dev": [305, 314], "sf": [305, 314], "devmappermultiproc": 305, "multidev": [305, 316, 317, 318, 337], "profil": 305, "save_dir": [305, 320], "deviceic": [305, 326], "spread": [305, 337], "139740789224448": [305, 339], "physic": [305, 341], "x3": [305, 343], "x4": [305, 343], "process_specif": [305, 344, 354], "percentag": [305, 344], "ram": [305, 344, 351, 354], "alon": [305, 344, 354], "attr_onli": [305, 345], "chunk": [305, 347, 348, 349], "max_chunk_s": [305, 349], "chunk_siz": [305, 349], "input_ax": [305, 349], "output_ax": [305, 349], "feed": [305, 349], "fist": [305, 349], "stream": [305, 350], "caveat": [305, 350], "portabl": [305, 350, 970], "gb": [305, 351, 354], "reset": [305, 353], "magnitud": [355, 356, 359, 369, 372, 525, 528, 714, 765, 767, 768, 770], "princip": [355, 361, 364, 374, 377, 382, 385], "cosin": [355, 361, 364, 365, 368, 422, 425, 426, 429], "x1_i": [355, 369, 372, 386, 389, 394, 397, 402, 405, 406, 409, 410, 413, 414, 417, 430, 433, 435, 438, 455, 458, 459, 462, 463, 466, 479, 482, 483, 486, 503, 506, 507, 510, 515, 518, 519, 522, 525, 528, 534, 537, 542, 545, 546, 549, 574, 578], "x2_i": [355, 369, 372, 386, 389, 394, 397, 402, 405, 406, 409, 410, 413, 414, 417, 430, 433, 435, 438, 455, 458, 459, 462, 463, 466, 479, 482, 483, 486, 503, 506, 507, 510, 515, 518, 519, 522, 525, 528, 534, 537, 542, 545, 546, 549, 574, 578], "finit": [355, 369, 372, 386, 389, 467, 470, 525, 528, 542, 545, 546, 549], "nor": [355, 369, 372, 525, 528], "nearest": [355, 369, 372, 525, 528, 550, 553], "2019": [355, 369, 372, 447, 450, 525, 528], "commut": [355, 369, 372], "sine": [355, 374, 377, 378, 381, 558, 561, 562, 565], "57": [355, 374, 377, 414, 417, 426, 429], "524": [355, 374, 377], "644": [355, 374, 377], "201": [355, 374, 377, 550, 553], "305": [355, 374, 377], "412": [355, 374, 377], "quotient": [355, 386, 389], "notat": [355, 386, 389, 926, 927, 930], "denot": [355, 386, 389], "quadrant": [355, 386, 389], "3\u03c0": [355, 386, 389], "549": [355, 390, 393], "bitwis": [355, 394, 397, 406, 409, 414, 417, 519, 522], "AND": [355, 394, 397, 507, 510, 959, 960, 963], "binari": [355, 394, 397, 406, 409, 414, 417, 519, 522, 786, 787, 790], "invert": [355, 398, 401], "arithmet": [355, 410, 413, 926, 935, 938], "propag": [355, 410, 413, 926, 931, 934, 935, 938, 939, 942, 947, 950, 951, 954, 955, 958], "thu": [355, 410, 413, 542, 545, 546, 549, 714, 729, 731], "lh": [355, 410, 413], "rh": [355, 410, 413], "xor": [355, 414, 417, 519, 522], "78": [355, 414, 417, 714, 752, 754, 926, 927, 930], "91": [355, 414, 417, 714, 752, 754, 926, 927, 930], "23": [355, 414, 417, 701, 707, 714, 726, 728, 901, 905], "66": [355, 414, 417, 714, 752, 754, 926, 927, 930], "77": [355, 414, 417, 714, 752, 754, 926, 927, 930], "79": [355, 414, 417], "89": [355, 414, 417, 714, 771, 773, 926, 951, 954], "98": [355, 414, 417, 714, 752, 754, 901, 905, 926, 927, 930], "26": [355, 414, 417, 663, 665, 668, 701, 708, 714, 726, 728, 752, 754, 771, 773, 926, 927, 930], "21": [355, 414, 417, 589, 607, 714, 726, 728, 752, 754, 786, 797, 800, 926, 927, 930], "34": [355, 414, 417, 566, 569], "24": [355, 414, 417, 566, 569, 589, 607, 663, 665, 668, 714, 726, 728, 752, 754, 926, 927, 930], "51": [355, 414, 417], "27": [355, 414, 417, 426, 429, 566, 569, 701, 713, 714, 752, 754, 926, 927, 930], "74": [355, 414, 417], "59": [355, 414, 417], "416": [355, 422, 425], "122": [355, 426, 429], "368": [355, 426, 429], "670": [355, 426, 429], "202": [355, 426, 429, 550, 553], "548": [355, 426, 429], "1490": [355, 426, 429], "dividend": [355, 430, 433, 546, 549], "divisor": [355, 430, 433, 546, 549, 663, 665, 668, 670, 672, 683, 685, 926, 947, 950, 955, 958, 1008, 1009, 1010], "gauss": [355, 439, 442], "exponenti": [355, 439, 442, 443, 446, 503, 506, 542, 545], "logarithm": [355, 443, 446, 487, 490, 491, 494, 495, 498, 499, 502, 503, 506, 714, 761], "72": [355, 443, 446, 663, 665, 668, 714, 752, 754, 926, 927, 930], "fdlibm": [355, 447, 450], "compliant": [355, 447, 450, 511, 514, 515, 518, 926, 931, 934, 935, 938, 939, 942], "greatest": [355, 451, 454, 455, 458], "out_i": [355, 467, 470, 471, 474, 475, 478], "threshold": [355, 523, 524], "exce": [355, 524], "y_i": [355, 530, 533], "expon": [355, 542, 545, 589, 654], "versu": [355, 542, 545], "odd": [355, 542, 545], "modulu": [355, 546, 549], "primarili": [355, 546, 549], "5654": [355, 550, 553], "034": [355, 550, 553], "433": [355, 550, 553], "343": [355, 550, 553], "44": [355, 550, 553, 566, 569, 570, 573, 714, 752, 754, 901, 905, 926, 927, 930], "30": [355, 550, 553, 714, 752, 754, 926, 927, 930, 983, 989], "81": [355, 550, 553, 570, 573, 926, 927, 930], "527": [355, 550, 553], "301": [355, 550, 553], "indistinguish": [355, 566, 569], "infinit": [355, 566, 569], "83": [355, 566, 569], "32455532": [355, 566, 569], "89897949": [355, 566, 569], "50": [355, 566, 569, 714, 752, 754, 901, 904, 926, 927, 930], "31": [355, 566, 569], "169": [355, 566, 569], "47": [355, 566, 569], "93": [355, 566, 569], "35": [355, 566, 569, 701, 713, 714, 720, 722, 901, 905, 926, 927, 930], "09": [355, 570, 573, 701, 713], "61": [355, 570, 573, 786, 787, 790], "546": [355, 579, 583], "842": [355, 579, 583], "916": [355, 579, 583, 786, 787, 790], "996": [355, 579, 583], "328": [355, 579, 583], "real": [355, 584], "462": [355, 584], "604": [355, 584], "984": [355, 584], "997": [355, 584, 884, 885, 888], "decim": [355, 585, 588], "inspect": [589, 595, 974, 975], "downscal": [589, 601, 602, 604], "60": [589, 607, 714, 752, 754, 926, 927, 930], "default_v": [589, 610], "catch_except": [589, 610], "rev": [589, 610], "with_cal": [589, 610], "arrang": [589, 611], "123": [589, 614], "mod": [589, 615], "max_freq": [589, 616], "num_band": [589, 616], "pad": [589, 616, 701, 702, 703, 704, 705, 706, 707, 708, 802, 812, 815, 858, 861, 992, 993, 994, 995, 996, 997, 998, 999], "fourier": [589, 616], "band": [589, 616], "linearli": [589, 616, 714, 762, 764], "oppos": [589, 616], "geometr": [589, 616], "seen_set": [589, 627], "local_set": [589, 627], "decrement": [589, 631], "is_arrai": 589, "allow_dupl": [589, 639], "forkserv": [589, 640], "spawn": [589, 640], "hot": [589, 642], "scatter": [589, 642, 645, 646], "tmp_dr": [589, 650], "temporari": [589, 650], "min_denomin": [589, 653], "stabil": [589, 653, 654, 915, 916, 919, 921, 924], "_min_denomin": [589, 653], "min_bas": [589, 654], "_min_bas": [589, 654, 884, 885, 888, 1006, 1007], "100000023841858": [589, 657], "200000047683716": [589, 657], "299999952316284": [589, 657], "400000095367432": [589, 657], "599999904632568": [589, 657], "101": [589, 658], "unpack": [589, 661], "gradienttrack": [663, 664], "delta": [663, 665, 668], "cost": [663, 665, 668, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 862, 863, 864, 865], "ws": [663, 665, 668, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693], "en": [663, 665, 668, 670, 672], "wikipedia": [663, 665, 668, 670, 672], "wiki": [663, 665, 668, 670, 672], "stochastic_gradient_desc": [663, 665, 668, 670, 672], "dc": [663, 665, 668, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693], "dw": [663, 665, 668, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693], "averag": [663, 665, 668, 670, 672, 683, 685, 862, 863, 864], "forget": [663, 665, 668, 670, 672, 683, 685, 1008, 1009, 1010], "004": [663, 665, 668], "009": [663, 665, 668], "86": [663, 665, 668], "28": [663, 665, 668, 701, 704, 707, 708, 714, 752, 754, 926, 927, 930], "45": [663, 665, 668, 714, 752, 754, 802, 841, 884, 885, 888, 926, 927, 930], "0125": [663, 665, 668], "601": [663, 665, 668], "581": [663, 665, 668], "025": [663, 665, 668], "992": [663, 665, 668], "209": [663, 665, 668, 906, 907], "271": [663, 665, 668], "0717": [663, 665, 668], "142": [663, 665, 668], "182": [663, 665, 668], "624": [663, 665, 668, 889, 895, 897], "06": [663, 665, 668], "02": [663, 665, 668], "744": [663, 665, 668], "626": [663, 665, 668], "65": [663, 665, 668, 714, 752, 754, 926, 927, 930], "024": [663, 665, 668], "096": [663, 665, 668], "216": [663, 665, 668], "384": [663, 665, 668], "rate": [663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693, 862, 863, 864, 865, 992, 1003, 1008, 1009, 1010, 1011, 1012, 1013], "ws_new": [663, 670, 672, 675, 677, 683, 685, 687, 689, 691, 693], "retain": [663, 674], "trust": [663, 683, 685, 1008, 1010], "decai": [663, 683, 685, 687, 689, 1008, 1010, 1011], "layerwis": [663, 687, 689, 1008, 1011], "stride": [701, 702, 703, 704, 705, 706, 707, 708, 992, 993, 994, 995, 996, 997, 998, 999], "data_format": [701, 702, 703, 704, 705, 706, 707, 708, 992, 993, 994, 995, 996, 997, 998, 999], "nwc": [701, 702, 703, 992, 993, 994], "dilat": [701, 702, 703, 704, 705, 706, 707, 708, 992, 993, 994, 995, 996, 997, 998, 999], "convolut": [701, 702, 703, 704, 705, 706, 707, 708, 992, 993, 994, 995, 996, 997, 998, 999], "d_in": [701, 702, 703, 704, 705, 706, 707], "fw": [701, 702, 703, 704, 705, 706, 707, 708], "d_out": [701, 702, 703, 704, 705, 706, 707], "slide": [701, 702, 703, 704, 705, 706, 707, 708, 992, 993, 994, 995, 996, 997, 998, 999], "ncw": [701, 702, 703, 992, 993, 994], "wio": [701, 702], "output_shap": [701, 703, 705, 707, 992, 994, 996, 998], "nhwc": [701, 704, 705, 708, 992, 995, 996, 999], "fh": [701, 704, 705, 706, 707, 708], "nchw": [701, 704, 705, 708, 992, 995, 996, 999], "hwio": [701, 704], "unequ": [701, 704], "unsqueez": [701, 704, 708], "ndhwc": [701, 706, 707, 992, 997, 998], "volum": [701, 706], "fd": [701, 706, 707], "ncdhw": [701, 706, 707, 992, 997, 998], "dhwio": [701, 706], "256": [701, 707], "258": [701, 707], "128": [701, 707, 714, 752, 754], "depthwis": [701, 708, 992, 999], "333": [701, 708], "inp": [701, 708], "prob": [701, 709, 889, 890, 992, 1000], "randomli": [701, 709, 992, 1000], "bernoulli": [701, 709], "out_featur": [701, 709, 710], "incom": [701, 710], "outer_batch_shap": [701, 710], "inner_batch_shap": [701, 710], "in_featur": [701, 710], "cell": [701, 711, 992, 1001], "num_queri": [701, 712, 713], "x_feat_dim": [701, 712], "num_kei": [701, 712, 713], "cont_feat_dim": [701, 712], "numhead": [701, 712], "feat_dim": [701, 712, 713], "out_feat_dim": [701, 712], "score": [701, 713], "04": [701, 713], "03": [701, 713, 884, 885, 888], "08": [701, 713], "decomposit": [714, 715, 718, 758, 760, 765, 767], "symmetr": [714, 715, 718, 729, 731, 732, 734, 783, 785], "u": [714, 715, 718, 765, 767], "vif": [714, 720, 722], "92": [714, 723, 725], "293": [714, 723, 725], "46997": [714, 723, 725], "eigendecomposit": [714, 729, 731], "qlq\u1d40": [714, 729, 731], "orthogon": [714, 729, 731], "eig": [714, 729, 731], "eigenvalu": [714, 729, 731, 732, 734], "eigenvector": [714, 729, 731], "75": [714, 735, 737, 752, 754], "prepend": [714, 738, 741], "singular": [714, 746, 748, 755, 757, 765, 767, 768, 770], "toler": [714, 746, 748, 755, 757], "largest_singular_valu": [714, 746, 748, 755, 757], "array_lik": [714, 752, 754], "33": [714, 752, 754, 884, 885, 888, 926, 927, 930], "36": [714, 752, 754, 926, 927, 930], "84": [714, 752, 754, 926, 927, 930], "105": [714, 752, 754, 786, 787, 790], "112": [714, 752, 754, 926, 927, 930], "104": [714, 752, 754, 926, 927, 930], "120": [714, 752, 754], "moor": [714, 755, 757], "penros": [714, 755, 757], "pseudo": [714, 755, 757], "orthonorm": [714, 758, 760, 765, 767], "2d": [714, 761, 992, 995, 996, 999], "logdet": [714, 761], "coeffici": [714, 762, 764], "usvh": [714, 765, 767], "vh": [714, 765, 767], "hermitian": [714, 765, 767], "et": [714, 765, 767], "cetera": [714, 765, 767], "adjoint": [714, 765, 767], "reconstruct": [714, 765, 767, 906, 907, 913], "reconstructed_x": [714, 765, 767], "contract": [714, 771, 773, 926, 927, 930], "doubl": [714, 771, 773], "singleton": [714, 780, 782, 802, 842, 845, 901, 903, 926, 931, 934, 935, 938, 939, 942, 943, 946, 947, 950, 951, 954, 955, 958, 959, 960, 963, 965, 968], "liter": [714, 780, 782], "manhattan": [714, 780, 782], "l2": [714, 780, 782], "euclidean": [714, 780, 782], "mathbf": [714, 783, 785], "mathbb": [714, 783, 785], "skew": [714, 783, 785], "entropi": [786, 787, 790, 792, 795, 797, 800], "predict": [786, 787, 790, 792, 795, 797, 800], "smooth": [786, 787, 790, 792, 795, 797, 800], "223": [786, 787, 790], "357": [786, 787, 790, 797, 800], "511": [786, 787, 790], "discret": [786, 792, 795], "3862944": [786, 792, 795], "35667497": [786, 792, 795], "spars": [786, 797, 800], "logit": [786, 797, 800], "793291": [786, 797, 800], "512926": [786, 797, 800], "before_1": [802, 812, 815, 858, 861], "after_1": [802, 812, 815, 858, 861], "before_n": [802, 812, 815, 858, 861], "after_n": [802, 812, 815, 858, 861], "manipulation_funct": [802, 816, 819], "reorder": [802, 820, 823], "permut": [802, 824, 827, 850, 853], "repetit": [802, 828, 831, 854, 857], "restor": [802, 836, 839], "famili": [802, 846, 849], "intxx": [802, 846, 849], "floatxx": [802, 846, 849], "fomaml_step": 862, "inner_cost_fn": [862, 863, 864], "outer_cost_fn": [862, 863, 864], "inner_grad_step": [862, 863, 864, 865], "inner_learning_r": [862, 863, 864, 865], "inner_optimization_step": [862, 863, 864, 865], "inner_batch_fn": [862, 863, 864], "outer_batch_fn": [862, 863, 864], "average_across_step": [862, 863, 864], "inner_v": [862, 863, 864], "keep_inner_v": [862, 863, 864], "outer_v": [862, 863, 864], "keep_outer_v": [862, 863, 864], "return_inner_v": [862, 863, 864, 865], "num_task": [862, 863, 864, 865], "maml": [862, 863, 864], "recev": [862, 863, 864], "0x7f2f28e8adc0": [862, 863, 864, 865], "maml_step": 862, "rece": [862, 864], "reptile_step": 862, "cost_fn": [862, 865], "reptil": [862, 865], "receivng": [862, 865], "all_nested_indic": 866, "include_nest": [866, 867], "_index": [866, 867, 877], "_base": [866, 867, 876, 877], "copy_nest": 866, "to_mut": [866, 868, 878], "mutabl": [866, 868, 878], "insert_into_nest_at_index": 866, "insert_into_nest_at_indic": 866, "map_nest_at_index": 866, "map_nest_at_indic": 866, "multi_index_nest": 866, "nested_ani": 866, "check_nest": [866, 876, 877], "conditon": [866, 876, 877], "nested_indices_wher": 866, "stop_after_n_found": [866, 877], "_depth": [866, 878], "_tuple_check_fn": [866, 878], "_list_check_fn": [866, 878], "_dict_check_fn": [866, 878], "nested_multi_map": 866, "nest0": [866, 879], "ivy_arrai": [866, 879], "funciton": [866, 879], "prune_nest_at_index": 866, "prune_nest_at_indic": 866, "set_nest_at_index": 866, "set_nest_at_indic": 866, "mini": [884, 885, 888, 1006, 1007], "gamma": [884, 885, 888], "beta": [884, 885, 888], "0976": [884, 885, 888], "3452": [884, 885, 888], "2740": [884, 885, 888], "1047": [884, 885, 888], "5886": [884, 885, 888], "2732": [884, 885, 888], "7696": [884, 885, 888], "7024": [884, 885, 888], "2518": [884, 885, 888], "58": [884, 885, 888, 906, 907], "283": [884, 885, 888], "585": [884, 885, 888], "909": [884, 885, 888], "628": [884, 885, 888], "225": [884, 885, 888], "425": [884, 885, 888], "norm_idx": [884, 885, 888], "228": [884, 885, 888], "0285": [884, 885, 888], "199": [884, 885, 888], "204": [884, 885, 888], "population_s": [889, 890], "num_sampl": [889, 890], "draw": [889, 890, 894, 895, 897], "unnorm": [889, 890], "drawn": [889, 890, 891, 892, 894, 895, 897], "home": [889, 890, 894], "uniformli": [889, 891, 892, 895, 897], "highest": [889, 891, 892], "parameter": [889, 894, 895, 897], "6444774682897879": [889, 894], "811": [889, 894], "508": [889, 894], "564": [889, 894], "7268672": [889, 894], "968": [889, 894], "175": [889, 894, 906, 907], "064": [889, 894], "40935726": [889, 894], "556": [889, 894], "26431865": [889, 895, 897], "475": [889, 895, 897], "878": [889, 895, 897], "861": [889, 895, 897], "89150229": [889, 895, 897], "89629126": [889, 895, 897], "94198485": [889, 895, 897], "91405606": [889, 895, 897], "72848724": [889, 895, 897], "7550739": [889, 895, 897], "00109": [889, 895, 897], "occurr": [901, 902, 903, 906, 907], "yield": [901, 905], "43": [901, 905], "x_j": [906, 907, 908, 912, 914], "impli": [906, 907, 908, 912, 914], "inverse_indic": [906, 907, 913], "aggreg": [906, 907], "fourth": [906, 907], "607": [906, 907], "735": [906, 907], "667": [906, 907], "381": [906, 907], "857": [906, 907], "0396": [906, 907], "166": [906, 907], "828": [906, 907], "144": [906, 907], "40501155": [906, 907], "77361575": [906, 907], "97776199": [906, 907], "36831157": [906, 907], "89148434": [906, 907], "9512272": [906, 907], "67542176": [906, 907], "41985657": [906, 907], "23478023": [906, 907], "1141": [906, 907], "8101": [906, 907], "9298": [906, 907], "8460": [906, 907], "2119": [906, 907], "3519": [906, 907], "6252": [906, 907], "4033": [906, 907], "7443": [906, 907], "2577": [906, 907], "3707": [906, 907], "0545": [906, 907], "3238": [906, 907], "5944": [906, 907], "0775": [906, 907], "4327": [906, 907], "176": [906, 907], "889": [906, 907], "763": [906, 907], "071": [906, 907], "262": [906, 907], "456": [906, 907], "114": [906, 907], "349": [906, 907], "615": [906, 907], "594": [906, 907], "335": [906, 907], "212": [906, 907], "457": [906, 907], "827": [906, 907], "set_funct": [906, 908, 912], "ascend": [915, 916, 919], "einstein": [926, 927, 930], "summat": [926, 927, 930], "seq": [926, 927, 930], "jk": [926, 927, 930], "ik": [926, 927, 930], "126": [926, 927, 930], "510": [926, 927, 930], "99": [926, 927, 930], "108": [926, 927, 930], "117": [926, 927, 930], "sentinel": [926, 931, 934, 939, 942], "unsign": [926, 943, 946, 951, 954], "degre": [926, 947, 950, 955, 958], "bessel": [926, 947, 950, 955, 958], "8164966": [926, 947, 950], "varianc": [926, 955, 958], "unbias": [926, 955, 958], "simplicit": [959, 960, 963], "autom": 970, "grow": 970, "ai": 970, "got": 970, "colab": 970, "sharp": 970, "weekli": 970, "event": 970, "immedi": 970, "favorit": 970, "jax_concat": 970, "tf_concat": 970, "np_concat": 970, "mx_concat": 970, "torch_concat": 970, "prompt": 970, "get_devic": 970, "reduce_prod": 970, "gradient_imag": 970, "linalg": 970, "bilinear_resampl": 970, "stack_imag": 970, "neural_net": 970, "ecosystem": [970, 976], "popular": [970, 976], "acceler": 970, "articl": 970, "lenton2021ivi": 970, "inter": 970, "lenton": 970, "daniel": 970, "pardo": 970, "fabio": 970, "falck": 970, "fabian": 970, "jame": 970, "stephen": 970, "clark": 970, "ronald": 970, "journal": 970, "arxiv": 970, "preprint": 970, "2102": 970, "02886": 970, "2021": 970, "add_array_spec": 973, "fn_array_spec": 973, "geglu": 978, "native_modul": [981, 982], "native_module_class": [981, 982], "firstlayersiren": 983, "kaimingnorm": [983, 987], "negative_slop": 983, "Ones": 983, "siren": 983, "w0": [983, 989], "filter_s": [992, 993, 994], "1d": [992, 993, 994], "conv1dtranspos": 992, "filter_shap": [992, 995, 996, 997, 998, 999], "conv2dtranspos": 992, "conv3dtranspos": 992, "depthwiseconv2d": 992, "num_channel": [992, 999], "bernoul": [992, 1000], "num_lay": [992, 1001], "return_sequ": [992, 1001], "return_st": [992, 1001], "get_initial_st": [992, 1001], "dens": [992, 1002], "multiheadattent": 992, "query_dim": [992, 1003], "head_dim": [992, 1003], "dropout_r": [992, 1003], "context_dim": [992, 1003], "with_to_q_fn": [992, 1003], "with_to_kv_fn": [992, 1003], "with_to_out_fn": [992, 1003], "build_mod": [992, 1003, 1004, 1005], "on_init": [992, 1003, 1004, 1005], "__call__": [992, 1003, 1004, 1005], "store_var": [1004, 1005], "arg_stateful_idx": [1004, 1005], "kwarg_stateful_idx": [1004, 1005], "fallback_to_non_compil": [1004, 1005, 1008, 1012], "with_partial_v": [1004, 1005], "initialz": [1004, 1005], "from_cal": [1004, 1005], "check_submod_ret": [1004, 1005], "get_mod_kei": [1004, 1005], "top_mod": [1004, 1005], "mod_depth": [1004, 1005], "mod_height": [1004, 1005], "mod_with_top_mod_key_chain": [1004, 1005], "save_weight": [1004, 1005], "weights_path": [1004, 1005], "show_mod_in_top_mod": [1004, 1005], "upper_depth": [1004, 1005], "lower_depth": [1004, 1005], "show_structur": [1004, 1005], "show_v_in_top_v": [1004, 1005], "sub_mod": [1004, 1005], "show_v": [1004, 1005], "track_submod_call_ord": [1004, 1005], "track_submod_ret": [1004, 1005], "v_with_top_v_key_chain": [1004, 1005], "layernorm": 1006, "normalized_shap": [1006, 1007], "elementwise_affin": [1006, 1007], "trail": [1006, 1007], "affin": [1006, 1007], "0001": [1008, 1009, 1010], "init_on_first_step": [1008, 1012], "ignore_miss": [1008, 1012], "overriden": [1008, 1012], "sgd": 1008, "stochast": [1008, 1013], "sub_modul": [1014, 1015]}, "objects": {"ivy": [[23, 0, 0, "-", "Array"], [69, 0, 0, "-", "Container"], [0, 0, 0, "-", "backend_handler"], [149, 0, 0, "-", "func_wrapper"], [973, 0, 0, "-", "inspection"], [977, 0, 0, "-", "stateful"], [1017, 0, 0, "-", "verbosity"]], "ivy.Array": [[23, 1, 1, "", "__delattr__"], [23, 1, 1, "", "__format__"], [23, 1, 1, "", "__getattribute__"], [23, 1, 1, "", "__init_subclass__"], [23, 1, 1, "", "__new__"], [23, 1, 1, "", "__reduce__"], [23, 1, 1, "", "__reduce_ex__"], [23, 1, 1, "", "__setattr__"], [23, 1, 1, "", "__sizeof__"], [23, 1, 1, "", "__str__"], [23, 1, 1, "", "__subclasshook__"]], "ivy.Container": [[69, 1, 1, "", "__delattr__"], [69, 1, 1, "", "__delitem__"], [69, 1, 1, "", "__format__"], [69, 1, 1, "", "__getattribute__"], [69, 1, 1, "", "__init_subclass__"], [69, 1, 1, "", "__iter__"], [69, 1, 1, "", "__len__"], [69, 1, 1, "", "__new__"], [69, 1, 1, "", "__reduce__"], [69, 1, 1, "", "__reduce_ex__"], [69, 1, 1, "", "__reversed__"], [69, 1, 1, "", "__sizeof__"], [69, 1, 1, "", "__str__"], [69, 1, 1, "", "__subclasshook__"], [69, 1, 1, "", "clear"], [69, 1, 1, "", "fromkeys"], [69, 1, 1, "", "get"], [69, 1, 1, "", "items"], [69, 1, 1, "", "keys"], [69, 1, 1, "", "pop"], [69, 1, 1, "", "popitem"], [69, 1, 1, "", "setdefault"], [69, 1, 1, "", "update"], [69, 1, 1, "", "values"]], "ivy.array": [[24, 0, 0, "-", "activations"], [26, 0, 0, "-", "conversions"], [31, 0, 0, "-", "creation"], [33, 0, 0, "-", "data_type"], [35, 0, 0, "-", "device"], [37, 0, 0, "-", "elementwise"], [39, 0, 0, "-", "general"], [41, 0, 0, "-", "gradients"], [43, 0, 0, "-", "image"], [45, 0, 0, "-", "layers"], [47, 0, 0, "-", "linear_algebra"], [49, 0, 0, "-", "losses"], [51, 0, 0, "-", "manipulation"], [53, 0, 0, "-", "norms"], [55, 0, 0, "-", "random"], [57, 0, 0, "-", "searching"], [59, 0, 0, "-", "set"], [61, 0, 0, "-", "sorting"], [63, 0, 0, "-", "statistical"], [65, 0, 0, "-", "utility"], [67, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[25, 2, 1, "", "ArrayWithActivations"]], "ivy.array.activations.ArrayWithActivations": [[25, 3, 1, "", "gelu"], [25, 3, 1, "", "leaky_relu"], [25, 3, 1, "", "relu"], [25, 3, 1, "", "sigmoid"], [25, 3, 1, "", "softmax"], [25, 3, 1, "", "tanh"]], "ivy.array.array_methods": [[357, 1, 1, "", "abs"], [362, 1, 1, "", "acos"], [366, 1, 1, "", "acosh"], [666, 1, 1, "", "adam_step"], [370, 1, 1, "", "add"], [961, 1, 1, "", "all"], [591, 1, 1, "", "all_equal"], [966, 1, 1, "", "any"], [917, 1, 1, "", "argsort"], [202, 1, 1, "", "asarray"], [375, 1, 1, "", "asin"], [379, 1, 1, "", "asinh"], [383, 1, 1, "", "atan"], [387, 1, 1, "", "atan2"], [391, 1, 1, "", "atanh"], [788, 1, 1, "", "binary_cross_entropy"], [395, 1, 1, "", "bitwise_and"], [399, 1, 1, "", "bitwise_invert"], [403, 1, 1, "", "bitwise_left_shift"], [407, 1, 1, "", "bitwise_or"], [411, 1, 1, "", "bitwise_right_shift"], [415, 1, 1, "", "bitwise_xor"], [278, 1, 1, "", "can_cast"], [419, 1, 1, "", "ceil"], [716, 1, 1, "", "cholesky"], [804, 1, 1, "", "clip"], [809, 1, 1, "", "concat"], [813, 1, 1, "", "constant_pad"], [423, 1, 1, "", "cos"], [427, 1, 1, "", "cosh"], [721, 1, 1, "", "cross"], [793, 1, 1, "", "cross_entropy"], [724, 1, 1, "", "det"], [727, 1, 1, "", "diagonal"], [431, 1, 1, "", "divide"], [730, 1, 1, "", "eigh"], [733, 1, 1, "", "eigvalsh"], [928, 1, 1, "", "einsum"], [208, 1, 1, "", "empty_like"], [436, 1, 1, "", "equal"], [440, 1, 1, "", "erf"], [444, 1, 1, "", "exp"], [817, 1, 1, "", "expand_dims"], [448, 1, 1, "", "expm1"], [821, 1, 1, "", "flip"], [452, 1, 1, "", "floor"], [456, 1, 1, "", "floor_divide"], [216, 1, 1, "", "from_dlpack"], [222, 1, 1, "", "full_like"], [619, 1, 1, "", "gather_nd"], [161, 1, 1, "", "gelu"], [460, 1, 1, "", "greater"], [464, 1, 1, "", "greater_equal"], [736, 1, 1, "", "inv"], [468, 1, 1, "", "isfinite"], [472, 1, 1, "", "isinf"], [476, 1, 1, "", "isnan"], [886, 1, 1, "", "layer_norm"], [166, 1, 1, "", "leaky_relu"], [480, 1, 1, "", "less"], [484, 1, 1, "", "less_equal"], [488, 1, 1, "", "log"], [492, 1, 1, "", "log10"], [496, 1, 1, "", "log1p"], [500, 1, 1, "", "log2"], [504, 1, 1, "", "logaddexp"], [508, 1, 1, "", "logical_and"], [512, 1, 1, "", "logical_not"], [516, 1, 1, "", "logical_or"], [520, 1, 1, "", "logical_xor"], [739, 1, 1, "", "matmul"], [743, 1, 1, "", "matrix_norm"], [747, 1, 1, "", "matrix_rank"], [750, 1, 1, "", "matrix_transpose"], [932, 1, 1, "", "max"], [936, 1, 1, "", "mean"], [233, 1, 1, "", "meshgrid"], [940, 1, 1, "", "min"], [526, 1, 1, "", "multiply"], [238, 1, 1, "", "native_array"], [531, 1, 1, "", "negative"], [535, 1, 1, "", "not_equal"], [246, 1, 1, "", "ones_like"], [753, 1, 1, "", "outer"], [825, 1, 1, "", "permute_dims"], [756, 1, 1, "", "pinv"], [539, 1, 1, "", "positive"], [543, 1, 1, "", "pow"], [944, 1, 1, "", "prod"], [759, 1, 1, "", "qr"], [171, 1, 1, "", "relu"], [547, 1, 1, "", "remainder"], [829, 1, 1, "", "repeat"], [833, 1, 1, "", "reshape"], [837, 1, 1, "", "roll"], [551, 1, 1, "", "round"], [176, 1, 1, "", "sigmoid"], [555, 1, 1, "", "sign"], [559, 1, 1, "", "sin"], [563, 1, 1, "", "sinh"], [181, 1, 1, "", "softmax"], [763, 1, 1, "", "solve"], [922, 1, 1, "", "sort"], [798, 1, 1, "", "sparse_cross_entropy"], [567, 1, 1, "", "sqrt"], [571, 1, 1, "", "square"], [843, 1, 1, "", "squeeze"], [847, 1, 1, "", "stack"], [948, 1, 1, "", "std"], [576, 1, 1, "", "subtract"], [952, 1, 1, "", "sum"], [766, 1, 1, "", "svd"], [769, 1, 1, "", "svdvals"], [851, 1, 1, "", "swapaxes"], [581, 1, 1, "", "tan"], [191, 1, 1, "", "tanh"], [772, 1, 1, "", "tensordot"], [855, 1, 1, "", "tile"], [775, 1, 1, "", "trace"], [252, 1, 1, "", "tril"], [257, 1, 1, "", "triu"], [586, 1, 1, "", "trunc"], [910, 1, 1, "", "unique_counts"], [956, 1, 1, "", "var"], [778, 1, 1, "", "vecdot"], [781, 1, 1, "", "vector_norm"], [784, 1, 1, "", "vector_to_skew_symmetric_matrix"], [859, 1, 1, "", "zero_pad"], [265, 1, 1, "", "zeros_like"]], "ivy.array.conversions": [[27, 1, 1, "", "args_to_ivy"], [28, 1, 1, "", "args_to_native"], [29, 1, 1, "", "to_ivy"], [30, 1, 1, "", "to_native"]], "ivy.array.creation": [[32, 2, 1, "", "ArrayWithCreation"]], "ivy.array.creation.ArrayWithCreation": [[32, 3, 1, "", "asarray"], [32, 3, 1, "", "empty_like"], [32, 3, 1, "", "from_dlpack"], [32, 3, 1, "", "full_like"], [32, 3, 1, "", "meshgrid"], [32, 3, 1, "", "native_array"], [32, 3, 1, "", "ones_like"], [32, 3, 1, "", "tril"], [32, 3, 1, "", "triu"], [32, 3, 1, "", "zeros_like"]], "ivy.array.data_type": [[34, 2, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[34, 3, 1, "", "can_cast"]], "ivy.array.device": [[36, 2, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[38, 2, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[38, 3, 1, "", "abs"], [38, 3, 1, "", "acos"], [38, 3, 1, "", "acosh"], [38, 3, 1, "", "add"], [38, 3, 1, "", "asin"], [38, 3, 1, "", "asinh"], [38, 3, 1, "", "atan"], [38, 3, 1, "", "atan2"], [38, 3, 1, "", "atanh"], [38, 3, 1, "", "bitwise_and"], [38, 3, 1, "", "bitwise_invert"], [38, 3, 1, "", "bitwise_left_shift"], [38, 3, 1, "", "bitwise_or"], [38, 3, 1, "", "bitwise_right_shift"], [38, 3, 1, "", "bitwise_xor"], [38, 3, 1, "", "ceil"], [38, 3, 1, "", "cos"], [38, 3, 1, "", "cosh"], [38, 3, 1, "", "divide"], [38, 3, 1, "", "equal"], [38, 3, 1, "", "erf"], [38, 3, 1, "", "exp"], [38, 3, 1, "", "expm1"], [38, 3, 1, "", "floor"], [38, 3, 1, "", "floor_divide"], [38, 3, 1, "", "greater"], [38, 3, 1, "", "greater_equal"], [38, 3, 1, "", "isfinite"], [38, 3, 1, "", "isinf"], [38, 3, 1, "", "isnan"], [38, 3, 1, "", "less"], [38, 3, 1, "", "less_equal"], [38, 3, 1, "", "log"], [38, 3, 1, "", "log10"], [38, 3, 1, "", "log1p"], [38, 3, 1, "", "log2"], [38, 3, 1, "", "logaddexp"], [38, 3, 1, "", "logical_and"], [38, 3, 1, "", "logical_not"], [38, 3, 1, "", "logical_or"], [38, 3, 1, "", "logical_xor"], [38, 3, 1, "", "multiply"], [38, 3, 1, "", "negative"], [38, 3, 1, "", "not_equal"], [38, 3, 1, "", "positive"], [38, 3, 1, "", "pow"], [38, 3, 1, "", "remainder"], [38, 3, 1, "", "round"], [38, 3, 1, "", "sign"], [38, 3, 1, "", "sin"], [38, 3, 1, "", "sinh"], [38, 3, 1, "", "sqrt"], [38, 3, 1, "", "square"], [38, 3, 1, "", "subtract"], [38, 3, 1, "", "tan"], [38, 3, 1, "", "tanh"], [38, 3, 1, "", "trunc"]], "ivy.array.general": [[40, 2, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[40, 3, 1, "", "all_equal"], [40, 3, 1, "", "gather_nd"]], "ivy.array.gradients": [[42, 2, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[42, 3, 1, "", "adam_step"]], "ivy.array.image": [[44, 2, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[46, 2, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[48, 2, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[48, 3, 1, "", "cholesky"], [48, 3, 1, "", "cross"], [48, 3, 1, "", "det"], [48, 3, 1, "", "diagonal"], [48, 3, 1, "", "eigh"], [48, 3, 1, "", "eigvalsh"], [48, 3, 1, "", "inv"], [48, 3, 1, "", "matmul"], [48, 3, 1, "", "matrix_norm"], [48, 3, 1, "", "matrix_rank"], [48, 3, 1, "", "matrix_transpose"], [48, 3, 1, "", "outer"], [48, 3, 1, "", "pinv"], [48, 3, 1, "", "qr"], [48, 3, 1, "", "solve"], [48, 3, 1, "", "svd"], [48, 3, 1, "", "svdvals"], [48, 3, 1, "", "tensordot"], [48, 3, 1, "", "trace"], [48, 3, 1, "", "vecdot"], [48, 3, 1, "", "vector_norm"], [48, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[50, 2, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[50, 3, 1, "", "binary_cross_entropy"], [50, 3, 1, "", "cross_entropy"], [50, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[52, 2, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[52, 3, 1, "", "clip"], [52, 3, 1, "", "concat"], [52, 3, 1, "", "constant_pad"], [52, 3, 1, "", "expand_dims"], [52, 3, 1, "", "flip"], [52, 3, 1, "", "permute_dims"], [52, 3, 1, "", "repeat"], [52, 3, 1, "", "reshape"], [52, 3, 1, "", "roll"], [52, 3, 1, "", "squeeze"], [52, 3, 1, "", "stack"], [52, 3, 1, "", "swapaxes"], [52, 3, 1, "", "tile"], [52, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[54, 2, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[54, 3, 1, "", "layer_norm"]], "ivy.array.random": [[56, 2, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[58, 2, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[60, 2, 1, "", "ArrayWithSet"]], "ivy.array.set.ArrayWithSet": [[60, 3, 1, "", "unique_counts"]], "ivy.array.sorting": [[62, 2, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[62, 3, 1, "", "argsort"], [62, 3, 1, "", "sort"]], "ivy.array.statistical": [[64, 2, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[64, 3, 1, "", "einsum"], [64, 3, 1, "", "max"], [64, 3, 1, "", "mean"], [64, 3, 1, "", "min"], [64, 3, 1, "", "prod"], [64, 3, 1, "", "std"], [64, 3, 1, "", "sum"], [64, 3, 1, "", "var"]], "ivy.array.utility": [[66, 2, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[66, 3, 1, "", "all"], [66, 3, 1, "", "any"]], "ivy.array.wrapping": [[68, 1, 1, "", "add_ivy_array_instance_methods"]], "ivy.backend_handler": [[0, 2, 1, "", "ContextManager"], [2, 1, 1, "", "choose_random_backend"], [3, 1, 1, "", "clear_backend_stack"], [4, 1, 1, "", "current_backend"], [5, 1, 1, "", "get_backend"], [6, 1, 1, "", "set_backend"], [7, 1, 1, "", "try_import_ivy_jax"], [8, 1, 1, "", "try_import_ivy_mxnet"], [9, 1, 1, "", "try_import_ivy_numpy"], [10, 1, 1, "", "try_import_ivy_tf"], [11, 1, 1, "", "try_import_ivy_torch"], [12, 1, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[0, 3, 1, "", "__init__"]], "ivy.container": [[70, 0, 0, "-", "activations"], [72, 0, 0, "-", "base"], [74, 0, 0, "-", "container"], [77, 0, 0, "-", "creation"], [79, 0, 0, "-", "data_type"], [81, 0, 0, "-", "device"], [83, 0, 0, "-", "elementwise"], [85, 0, 0, "-", "general"], [87, 0, 0, "-", "gradients"], [89, 0, 0, "-", "image"], [91, 0, 0, "-", "layers"], [93, 0, 0, "-", "linear_algebra"], [95, 0, 0, "-", "losses"], [97, 0, 0, "-", "manipulation"], [99, 0, 0, "-", "norms"], [101, 0, 0, "-", "random"], [103, 0, 0, "-", "searching"], [105, 0, 0, "-", "set"], [107, 0, 0, "-", "sorting"], [109, 0, 0, "-", "statistical"], [111, 0, 0, "-", "utility"], [113, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[71, 2, 1, "", "ContainerWithActivations"]], "ivy.container.activations.ContainerWithActivations": [[71, 3, 1, "", "gelu"], [71, 3, 1, "", "leaky_relu"], [71, 3, 1, "", "relu"], [71, 3, 1, "", "sigmoid"], [71, 3, 1, "", "softmax"], [71, 3, 1, "", "softplus"], [71, 3, 1, "", "static_gelu"], [71, 3, 1, "", "static_leaky_relu"], [71, 3, 1, "", "static_relu"], [71, 3, 1, "", "static_sigmoid"], [71, 3, 1, "", "static_softmax"], [71, 3, 1, "", "static_softplus"], [71, 3, 1, "", "static_tanh"], [71, 3, 1, "", "tanh"]], "ivy.container.base": [[73, 2, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[73, 3, 1, "", "__getitem__"], [73, 3, 1, "", "__init__"], [73, 3, 1, "", "__setitem__"], [73, 3, 1, "", "all_false"], [73, 3, 1, "", "all_key_chains"], [73, 3, 1, "", "all_true"], [73, 3, 1, "", "arrays_as_lists"], [73, 3, 1, "", "as_arrays"], [73, 3, 1, "", "as_bools"], [73, 3, 1, "", "as_ones"], [73, 3, 1, "", "as_random_uniform"], [73, 3, 1, "", "as_variables"], [73, 3, 1, "", "as_zeros"], [73, 3, 1, "", "assert_contains_sub_container"], [73, 3, 1, "", "assert_contains_sub_structure"], [73, 3, 1, "", "assert_identical"], [73, 3, 1, "", "assert_identical_structure"], [73, 3, 1, "", "at_key_chain"], [73, 3, 1, "", "at_key_chains"], [73, 3, 1, "", "at_keys"], [73, 3, 1, "", "clip"], [73, 3, 1, "", "combine"], [73, 3, 1, "", "common_key_chains"], [73, 4, 1, "", "config"], [73, 3, 1, "", "contains_sub_container"], [73, 3, 1, "", "contains_sub_structure"], [73, 3, 1, "", "copy"], [73, 3, 1, "", "create_if_absent"], [73, 3, 1, "", "cutoff_at_depth"], [73, 3, 1, "", "cutoff_at_height"], [73, 3, 1, "", "deep_copy"], [73, 4, 1, "", "dev"], [73, 3, 1, "", "dev_clone"], [73, 3, 1, "", "dev_dist"], [73, 4, 1, "", "dev_str"], [73, 3, 1, "", "diff"], [73, 3, 1, "", "dtype"], [73, 3, 1, "", "einops_rearrange"], [73, 3, 1, "", "einops_reduce"], [73, 3, 1, "", "einops_repeat"], [73, 3, 1, "", "find_sub_container"], [73, 3, 1, "", "find_sub_structure"], [73, 3, 1, "", "flatten_key_chain"], [73, 3, 1, "", "flatten_key_chains"], [73, 3, 1, "", "format_key_chains"], [73, 3, 1, "", "from_disk_as_hdf5"], [73, 3, 1, "", "from_disk_as_json"], [73, 3, 1, "", "from_disk_as_pickled"], [73, 3, 1, "", "from_flat_list"], [73, 3, 1, "", "from_numpy"], [73, 3, 1, "", "gather"], [73, 3, 1, "", "gather_nd"], [73, 3, 1, "", "h5_file_size"], [73, 3, 1, "", "handle_inplace"], [73, 3, 1, "", "has_key"], [73, 3, 1, "", "has_key_chain"], [73, 3, 1, "", "has_nans"], [73, 3, 1, "", "identical"], [73, 3, 1, "", "identical_array_shapes"], [73, 3, 1, "", "identical_configs"], [73, 3, 1, "", "identical_structure"], [73, 3, 1, "", "if_exists"], [73, 3, 1, "", "inplace_update"], [73, 4, 1, "", "ivy"], [73, 3, 1, "", "key_chains_containing"], [73, 3, 1, "", "list_join"], [73, 3, 1, "", "list_stack"], [73, 3, 1, "", "map"], [73, 3, 1, "", "map_conts"], [73, 3, 1, "", "matrix_norm"], [73, 4, 1, "", "max_depth"], [73, 3, 1, "", "maximum"], [73, 3, 1, "", "minimum"], [73, 3, 1, "", "multi_map"], [73, 3, 1, "", "multi_map_in_static_method"], [73, 3, 1, "", "num_arrays"], [73, 3, 1, "", "overwrite_at_key_chain"], [73, 3, 1, "", "overwrite_at_key_chains"], [73, 3, 1, "", "prune_empty"], [73, 3, 1, "", "prune_key_chain"], [73, 3, 1, "", "prune_key_chains"], [73, 3, 1, "", "prune_key_from_key_chains"], [73, 3, 1, "", "prune_keys"], [73, 3, 1, "", "prune_keys_from_key_chains"], [73, 3, 1, "", "reduce"], [73, 3, 1, "", "remove_key_length_limit"], [73, 3, 1, "", "remove_print_limit"], [73, 3, 1, "", "reshape_like"], [73, 3, 1, "", "restructure"], [73, 3, 1, "", "restructure_key_chains"], [73, 3, 1, "", "set_at_key_chain"], [73, 3, 1, "", "set_at_key_chains"], [73, 3, 1, "", "set_at_keys"], [73, 3, 1, "", "set_framework"], [73, 3, 1, "", "set_ivy_backend"], [73, 4, 1, "", "shape"], [73, 4, 1, "", "shapes"], [73, 3, 1, "", "show"], [73, 3, 1, "", "show_sub_container"], [73, 3, 1, "", "shuffle"], [73, 3, 1, "", "shuffle_h5_file"], [73, 3, 1, "", "size_ordered_arrays"], [73, 3, 1, "", "slice_keys"], [73, 3, 1, "", "slice_via_key"], [73, 3, 1, "", "sort_by_key"], [73, 3, 1, "", "split"], [73, 3, 1, "", "stop_gradients"], [73, 3, 1, "", "structural_diff"], [73, 3, 1, "", "to_device"], [73, 3, 1, "", "to_dict"], [73, 3, 1, "", "to_disk_as_hdf5"], [73, 3, 1, "", "to_disk_as_json"], [73, 3, 1, "", "to_disk_as_pickled"], [73, 3, 1, "", "to_flat_list"], [73, 3, 1, "", "to_iterator"], [73, 3, 1, "", "to_iterator_keys"], [73, 3, 1, "", "to_iterator_values"], [73, 3, 1, "", "to_ivy"], [73, 3, 1, "", "to_jsonable"], [73, 3, 1, "", "to_list"], [73, 3, 1, "", "to_multi_dev"], [73, 3, 1, "", "to_native"], [73, 3, 1, "", "to_numpy"], [73, 3, 1, "", "to_raw"], [73, 3, 1, "", "trim_key"], [73, 3, 1, "", "try_kc"], [73, 3, 1, "", "unify"], [73, 3, 1, "", "unstack"], [73, 3, 1, "", "update_config"], [73, 3, 1, "", "vector_norm"], [73, 3, 1, "", "with_default_key_color"], [73, 3, 1, "", "with_entries_as_lists"], [73, 3, 1, "", "with_ivy_backend"], [73, 3, 1, "", "with_key_length_limit"], [73, 3, 1, "", "with_print_indent"], [73, 3, 1, "", "with_print_limit"], [73, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[75, 2, 1, "", "Container"], [76, 2, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[75, 3, 1, "", "__add__"], [75, 3, 1, "", "__init__"], [75, 3, 1, "", "__radd__"], [75, 3, 1, "", "arange"], [75, 3, 1, "", "arg_info"], [75, 3, 1, "", "arg_names"], [75, 3, 1, "", "argmax"], [75, 3, 1, "", "argmin"], [75, 3, 1, "", "array"], [75, 3, 1, "", "array_equal"], [75, 3, 1, "", "arrays_equal"], [75, 3, 1, "", "as_ivy_dev"], [75, 3, 1, "", "as_ivy_dtype"], [75, 3, 1, "", "as_native_dev"], [75, 3, 1, "", "as_native_dtype"], [75, 3, 1, "", "assert_supports_inplace"], [75, 3, 1, "", "astype"], [75, 3, 1, "", "broadcast_arrays"], [75, 3, 1, "", "broadcast_to"], [75, 3, 1, "", "cache_fn"], [75, 3, 1, "", "clear_mem_on_dev"], [75, 3, 1, "", "clip_matrix_norm"], [75, 3, 1, "", "closest_valid_dtype"], [75, 3, 1, "", "container_types"], [75, 3, 1, "", "conv1d"], [75, 3, 1, "", "conv1d_transpose"], [75, 3, 1, "", "conv2d"], [75, 3, 1, "", "conv2d_transpose"], [75, 3, 1, "", "conv3d"], [75, 3, 1, "", "conv3d_transpose"], [75, 3, 1, "", "copy_array"], [75, 3, 1, "", "cross"], [75, 3, 1, "", "cumprod"], [75, 3, 1, "", "cumsum"], [75, 3, 1, "", "current_backend"], [75, 3, 1, "", "current_backend_str"], [75, 3, 1, "", "default"], [75, 3, 1, "", "default_device"], [75, 3, 1, "", "default_dtype"], [75, 3, 1, "", "default_float_dtype"], [75, 3, 1, "", "default_int_dtype"], [75, 3, 1, "", "depthwise_conv2d"], [75, 3, 1, "", "det"], [75, 3, 1, "", "dev_clone_array"], [75, 3, 1, "", "dev_clone_iter"], [75, 3, 1, "", "dev_clone_nest"], [75, 3, 1, "", "dev_dist_array"], [75, 3, 1, "", "dev_dist_iter"], [75, 3, 1, "", "dev_dist_nest"], [75, 3, 1, "", "dev_unify"], [75, 3, 1, "", "dev_unify_array"], [75, 3, 1, "", "dev_unify_iter"], [75, 3, 1, "", "dev_unify_nest"], [75, 3, 1, "", "dev_util"], [75, 3, 1, "", "diagonal"], [75, 3, 1, "", "dropout"], [75, 3, 1, "", "dtype_bits"], [75, 3, 1, "", "eigh"], [75, 3, 1, "", "eigvalsh"], [75, 3, 1, "", "empty"], [75, 3, 1, "", "execute_with_gradients"], [75, 3, 1, "", "exists"], [75, 3, 1, "", "eye"], [75, 3, 1, "", "finfo"], [75, 3, 1, "", "floormod"], [75, 3, 1, "", "fourier_encode"], [75, 3, 1, "", "full"], [75, 3, 1, "", "function_supported_dtypes"], [75, 3, 1, "", "function_unsupported_dtypes"], [75, 3, 1, "", "get_all_arrays_in_memory"], [75, 3, 1, "", "get_all_ivy_arrays_on_dev"], [75, 3, 1, "", "get_min_base"], [75, 3, 1, "", "get_min_denominator"], [75, 3, 1, "", "get_num_dims"], [75, 3, 1, "", "get_referrers_recursive"], [75, 3, 1, "", "gpu_is_available"], [75, 3, 1, "", "handle_nestable"], [75, 3, 1, "", "handle_out_argument"], [75, 3, 1, "", "iinfo"], [75, 3, 1, "", "indices_where"], [75, 3, 1, "", "infer_device"], [75, 3, 1, "", "infer_dtype"], [75, 3, 1, "", "inplace_arrays_supported"], [75, 3, 1, "", "inplace_decrement"], [75, 3, 1, "", "inplace_increment"], [75, 3, 1, "", "inplace_variables_supported"], [75, 3, 1, "", "inputs_to_native_arrays"], [75, 3, 1, "", "inv"], [75, 3, 1, "", "invalid_dtype"], [75, 3, 1, "", "is_float_dtype"], [75, 3, 1, "", "is_int_dtype"], [75, 3, 1, "", "is_ivy_container"], [75, 3, 1, "", "linear"], [75, 3, 1, "", "linspace"], [75, 3, 1, "", "logspace"], [75, 3, 1, "", "lstm_update"], [75, 3, 1, "", "match_kwargs"], [75, 3, 1, "", "matrix_power"], [75, 3, 1, "", "matrix_rank"], [75, 3, 1, "", "matrix_transpose"], [75, 3, 1, "", "multi_head_attention"], [75, 3, 1, "", "multinomial"], [75, 3, 1, "", "multiprocessing"], [75, 3, 1, "", "nonzero"], [75, 3, 1, "", "num_arrays_in_memory"], [75, 3, 1, "", "num_cpu_cores"], [75, 3, 1, "", "num_gpus"], [75, 3, 1, "", "num_ivy_arrays_on_dev"], [75, 3, 1, "", "one_hot"], [75, 3, 1, "", "ones"], [75, 3, 1, "", "outer"], [75, 3, 1, "", "outputs_to_ivy_arrays"], [75, 3, 1, "", "percent_used_mem_on_dev"], [75, 3, 1, "", "pinv"], [75, 3, 1, "", "print_all_arrays_in_memory"], [75, 3, 1, "", "print_all_ivy_arrays_on_dev"], [75, 3, 1, "", "promote_types"], [75, 3, 1, "", "qr"], [75, 3, 1, "", "queue_timeout"], [75, 3, 1, "", "randint"], [75, 3, 1, "", "random_normal"], [75, 3, 1, "", "result_type"], [75, 3, 1, "", "scaled_dot_product_attention"], [75, 3, 1, "", "scatter_flat"], [75, 3, 1, "", "scatter_nd"], [75, 3, 1, "", "seed"], [75, 3, 1, "", "set_default_device"], [75, 3, 1, "", "set_default_dtype"], [75, 3, 1, "", "set_default_float_dtype"], [75, 3, 1, "", "set_default_int_dtype"], [75, 3, 1, "", "set_min_base"], [75, 3, 1, "", "set_min_denominator"], [75, 3, 1, "", "set_queue_timeout"], [75, 3, 1, "", "set_split_factor"], [75, 3, 1, "", "set_tmp_dir"], [75, 3, 1, "", "set_with_grads"], [75, 3, 1, "", "shape_to_tuple"], [75, 3, 1, "", "slogdet"], [75, 3, 1, "", "solve"], [75, 3, 1, "", "split_factor"], [75, 3, 1, "", "split_func_call"], [75, 3, 1, "", "stable_divide"], [75, 3, 1, "", "stable_pow"], [75, 3, 1, "", "static_acos"], [75, 3, 1, "", "static_acosh"], [75, 3, 1, "", "static_arg_info"], [75, 3, 1, "", "static_arg_names"], [75, 3, 1, "", "static_argmax"], [75, 3, 1, "", "static_argmin"], [75, 3, 1, "", "static_array"], [75, 3, 1, "", "static_array_equal"], [75, 3, 1, "", "static_arrays_equal"], [75, 3, 1, "", "static_as_ivy_dev"], [75, 3, 1, "", "static_as_ivy_dtype"], [75, 3, 1, "", "static_as_native_dev"], [75, 3, 1, "", "static_as_native_dtype"], [75, 3, 1, "", "static_asin"], [75, 3, 1, "", "static_asinh"], [75, 3, 1, "", "static_assert_supports_inplace"], [75, 3, 1, "", "static_astype"], [75, 3, 1, "", "static_atan"], [75, 3, 1, "", "static_atan2"], [75, 3, 1, "", "static_atanh"], [75, 3, 1, "", "static_bitwise_and"], [75, 3, 1, "", "static_bitwise_invert"], [75, 3, 1, "", "static_bitwise_left_shift"], [75, 3, 1, "", "static_bitwise_or"], [75, 3, 1, "", "static_bitwise_right_shift"], [75, 3, 1, "", "static_bitwise_xor"], [75, 3, 1, "", "static_broadcast_arrays"], [75, 3, 1, "", "static_broadcast_to"], [75, 3, 1, "", "static_cache_fn"], [75, 3, 1, "", "static_ceil"], [75, 3, 1, "", "static_clear_mem_on_dev"], [75, 3, 1, "", "static_clip_matrix_norm"], [75, 3, 1, "", "static_clip_vector_norm"], [75, 3, 1, "", "static_closest_valid_dtype"], [75, 3, 1, "", "static_concat"], [75, 3, 1, "", "static_constant_pad"], [75, 3, 1, "", "static_container_types"], [75, 3, 1, "", "static_conv1d"], [75, 3, 1, "", "static_conv1d_transpose"], [75, 3, 1, "", "static_conv2d"], [75, 3, 1, "", "static_conv2d_transpose"], [75, 3, 1, "", "static_conv3d"], [75, 3, 1, "", "static_conv3d_transpose"], [75, 3, 1, "", "static_copy_array"], [75, 3, 1, "", "static_cos"], [75, 3, 1, "", "static_cosh"], [75, 3, 1, "", "static_cross"], [75, 3, 1, "", "static_cumprod"], [75, 3, 1, "", "static_cumsum"], [75, 3, 1, "", "static_current_backend"], [75, 3, 1, "", "static_current_backend_str"], [75, 3, 1, "", "static_default"], [75, 3, 1, "", "static_default_device"], [75, 3, 1, "", "static_default_dtype"], [75, 3, 1, "", "static_default_float_dtype"], [75, 3, 1, "", "static_default_int_dtype"], [75, 3, 1, "", "static_depthwise_conv2d"], [75, 3, 1, "", "static_det"], [75, 3, 1, "", "static_dev"], [75, 3, 1, "", "static_dev_clone"], [75, 3, 1, "", "static_dev_clone_array"], [75, 3, 1, "", "static_dev_clone_iter"], [75, 3, 1, "", "static_dev_clone_nest"], [75, 3, 1, "", "static_dev_dist"], [75, 3, 1, "", "static_dev_dist_array"], [75, 3, 1, "", "static_dev_dist_iter"], [75, 3, 1, "", "static_dev_dist_nest"], [75, 3, 1, "", "static_dev_unify"], [75, 3, 1, "", "static_dev_unify_array"], [75, 3, 1, "", "static_dev_unify_iter"], [75, 3, 1, "", "static_dev_unify_nest"], [75, 3, 1, "", "static_dev_util"], [75, 3, 1, "", "static_diagonal"], [75, 3, 1, "", "static_dropout"], [75, 3, 1, "", "static_dtype"], [75, 3, 1, "", "static_dtype_bits"], [75, 3, 1, "", "static_eigh"], [75, 3, 1, "", "static_eigvalsh"], [75, 3, 1, "", "static_einops_rearrange"], [75, 3, 1, "", "static_einops_reduce"], [75, 3, 1, "", "static_einops_repeat"], [75, 3, 1, "", "static_einsum"], [75, 3, 1, "", "static_empty"], [75, 3, 1, "", "static_equal"], [75, 3, 1, "", "static_erf"], [75, 3, 1, "", "static_execute_with_gradients"], [75, 3, 1, "", "static_exists"], [75, 3, 1, "", "static_exp"], [75, 3, 1, "", "static_expand_dims"], [75, 3, 1, "", "static_expm1"], [75, 3, 1, "", "static_finfo"], [75, 3, 1, "", "static_flip"], [75, 3, 1, "", "static_floor"], [75, 3, 1, "", "static_floor_divide"], [75, 3, 1, "", "static_floormod"], [75, 3, 1, "", "static_fourier_encode"], [75, 3, 1, "", "static_full"], [75, 3, 1, "", "static_function_supported_dtypes"], [75, 3, 1, "", "static_function_unsupported_dtypes"], [75, 3, 1, "", "static_gather"], [75, 3, 1, "", "static_get_all_arrays_in_memory"], [75, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [75, 3, 1, "", "static_get_min_base"], [75, 3, 1, "", "static_get_min_denominator"], [75, 3, 1, "", "static_get_num_dims"], [75, 3, 1, "", "static_get_referrers_recursive"], [75, 3, 1, "", "static_gpu_is_available"], [75, 3, 1, "", "static_greater"], [75, 3, 1, "", "static_greater_equal"], [75, 3, 1, "", "static_handle_nestable"], [75, 3, 1, "", "static_handle_out_argument"], [75, 3, 1, "", "static_has_nans"], [75, 3, 1, "", "static_iinfo"], [75, 3, 1, "", "static_indices_where"], [75, 3, 1, "", "static_infer_device"], [75, 3, 1, "", "static_infer_dtype"], [75, 3, 1, "", "static_inplace_arrays_supported"], [75, 3, 1, "", "static_inplace_decrement"], [75, 3, 1, "", "static_inplace_increment"], [75, 3, 1, "", "static_inplace_update"], [75, 3, 1, "", "static_inplace_variables_supported"], [75, 3, 1, "", "static_inputs_to_native_arrays"], [75, 3, 1, "", "static_inv"], [75, 3, 1, "", "static_invalid_dtype"], [75, 3, 1, "", "static_is_array"], [75, 3, 1, "", "static_is_float_dtype"], [75, 3, 1, "", "static_is_int_dtype"], [75, 3, 1, "", "static_is_ivy_array"], [75, 3, 1, "", "static_is_ivy_container"], [75, 3, 1, "", "static_is_native_array"], [75, 3, 1, "", "static_isfinite"], [75, 3, 1, "", "static_isinf"], [75, 3, 1, "", "static_isnan"], [75, 3, 1, "", "static_layer_norm"], [75, 3, 1, "", "static_less"], [75, 3, 1, "", "static_less_equal"], [75, 3, 1, "", "static_linear"], [75, 3, 1, "", "static_log"], [75, 3, 1, "", "static_log10"], [75, 3, 1, "", "static_log1p"], [75, 3, 1, "", "static_log2"], [75, 3, 1, "", "static_logaddexp"], [75, 3, 1, "", "static_logical_and"], [75, 3, 1, "", "static_logical_not"], [75, 3, 1, "", "static_logical_or"], [75, 3, 1, "", "static_logical_xor"], [75, 3, 1, "", "static_lstm_update"], [75, 3, 1, "", "static_match_kwargs"], [75, 3, 1, "", "static_matmul"], [75, 3, 1, "", "static_matrix_norm"], [75, 3, 1, "", "static_matrix_power"], [75, 3, 1, "", "static_matrix_rank"], [75, 3, 1, "", "static_matrix_transpose"], [75, 3, 1, "", "static_max"], [75, 3, 1, "", "static_maximum"], [75, 3, 1, "", "static_mean"], [75, 3, 1, "", "static_min"], [75, 3, 1, "", "static_minimum"], [75, 3, 1, "", "static_multi_head_attention"], [75, 3, 1, "", "static_multinomial"], [75, 3, 1, "", "static_multiprocessing"], [75, 3, 1, "", "static_negative"], [75, 3, 1, "", "static_nonzero"], [75, 3, 1, "", "static_not_equal"], [75, 3, 1, "", "static_num_arrays_in_memory"], [75, 3, 1, "", "static_num_cpu_cores"], [75, 3, 1, "", "static_num_gpus"], [75, 3, 1, "", "static_num_ivy_arrays_on_dev"], [75, 3, 1, "", "static_one_hot"], [75, 3, 1, "", "static_outer"], [75, 3, 1, "", "static_outputs_to_ivy_arrays"], [75, 3, 1, "", "static_percent_used_mem_on_dev"], [75, 3, 1, "", "static_permute_dims"], [75, 3, 1, "", "static_pinv"], [75, 3, 1, "", "static_positive"], [75, 3, 1, "", "static_pow"], [75, 3, 1, "", "static_print_all_arrays_in_memory"], [75, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [75, 3, 1, "", "static_prod"], [75, 3, 1, "", "static_promote_types"], [75, 3, 1, "", "static_qr"], [75, 3, 1, "", "static_queue_timeout"], [75, 3, 1, "", "static_random_normal"], [75, 3, 1, "", "static_remainder"], [75, 3, 1, "", "static_repeat"], [75, 3, 1, "", "static_reshape"], [75, 3, 1, "", "static_result_type"], [75, 3, 1, "", "static_round"], [75, 3, 1, "", "static_scaled_dot_product_attention"], [75, 3, 1, "", "static_scatter_flat"], [75, 3, 1, "", "static_scatter_nd"], [75, 3, 1, "", "static_seed"], [75, 3, 1, "", "static_set_default_device"], [75, 3, 1, "", "static_set_default_dtype"], [75, 3, 1, "", "static_set_default_float_dtype"], [75, 3, 1, "", "static_set_default_int_dtype"], [75, 3, 1, "", "static_set_min_base"], [75, 3, 1, "", "static_set_min_denominator"], [75, 3, 1, "", "static_set_queue_timeout"], [75, 3, 1, "", "static_set_split_factor"], [75, 3, 1, "", "static_set_tmp_dir"], [75, 3, 1, "", "static_set_with_grads"], [75, 3, 1, "", "static_shape"], [75, 3, 1, "", "static_shape_to_tuple"], [75, 3, 1, "", "static_shuffle"], [75, 3, 1, "", "static_sign"], [75, 3, 1, "", "static_sin"], [75, 3, 1, "", "static_sinh"], [75, 3, 1, "", "static_slogdet"], [75, 3, 1, "", "static_solve"], [75, 3, 1, "", "static_split"], [75, 3, 1, "", "static_split_factor"], [75, 3, 1, "", "static_split_func_call"], [75, 3, 1, "", "static_sqrt"], [75, 3, 1, "", "static_square"], [75, 3, 1, "", "static_squeeze"], [75, 3, 1, "", "static_stable_divide"], [75, 3, 1, "", "static_stable_pow"], [75, 3, 1, "", "static_stack"], [75, 3, 1, "", "static_std"], [75, 3, 1, "", "static_stop_gradient"], [75, 3, 1, "", "static_sum"], [75, 3, 1, "", "static_supports_inplace"], [75, 3, 1, "", "static_svd"], [75, 3, 1, "", "static_svdvals"], [75, 3, 1, "", "static_swapaxes"], [75, 3, 1, "", "static_tensordot"], [75, 3, 1, "", "static_tile"], [75, 3, 1, "", "static_tmp_dir"], [75, 3, 1, "", "static_to_device"], [75, 3, 1, "", "static_to_list"], [75, 3, 1, "", "static_to_native_arrays_and_back"], [75, 3, 1, "", "static_to_numpy"], [75, 3, 1, "", "static_to_scalar"], [75, 3, 1, "", "static_total_mem_on_dev"], [75, 3, 1, "", "static_tpu_is_available"], [75, 3, 1, "", "static_trace"], [75, 3, 1, "", "static_trunc"], [75, 3, 1, "", "static_try_else_none"], [75, 3, 1, "", "static_type_promote_arrays"], [75, 3, 1, "", "static_unique_all"], [75, 3, 1, "", "static_unique_inverse"], [75, 3, 1, "", "static_unique_values"], [75, 3, 1, "", "static_unset_default_device"], [75, 3, 1, "", "static_unset_default_dtype"], [75, 3, 1, "", "static_unset_default_float_dtype"], [75, 3, 1, "", "static_unset_default_int_dtype"], [75, 3, 1, "", "static_unset_with_grads"], [75, 3, 1, "", "static_unstack"], [75, 3, 1, "", "static_used_mem_on_dev"], [75, 3, 1, "", "static_valid_dtype"], [75, 3, 1, "", "static_value_is_nan"], [75, 3, 1, "", "static_var"], [75, 3, 1, "", "static_variable"], [75, 3, 1, "", "static_variable_data"], [75, 3, 1, "", "static_vecdot"], [75, 3, 1, "", "static_vector_norm"], [75, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [75, 3, 1, "", "static_where"], [75, 3, 1, "", "static_with_grads"], [75, 3, 1, "", "static_zero_pad"], [75, 3, 1, "", "stop_gradient"], [75, 3, 1, "", "supports_inplace"], [75, 3, 1, "", "svd"], [75, 3, 1, "", "svdvals"], [75, 3, 1, "", "tensordot"], [75, 3, 1, "", "tmp_dir"], [75, 3, 1, "", "to_native_arrays_and_back"], [75, 3, 1, "", "to_scalar"], [75, 3, 1, "", "total_mem_on_dev"], [75, 3, 1, "", "tpu_is_available"], [75, 3, 1, "", "trace"], [75, 3, 1, "", "try_else_none"], [75, 3, 1, "", "type_promote_arrays"], [75, 3, 1, "", "unique_all"], [75, 3, 1, "", "unique_inverse"], [75, 3, 1, "", "unique_values"], [75, 3, 1, "", "unset_default_device"], [75, 3, 1, "", "unset_default_dtype"], [75, 3, 1, "", "unset_default_float_dtype"], [75, 3, 1, "", "unset_default_int_dtype"], [75, 3, 1, "", "unset_with_grads"], [75, 3, 1, "", "used_mem_on_dev"], [75, 3, 1, "", "valid_dtype"], [75, 3, 1, "", "value_is_nan"], [75, 3, 1, "", "variable"], [75, 3, 1, "", "variable_data"], [75, 3, 1, "", "vecdot"], [75, 3, 1, "", "vector_to_skew_symmetric_matrix"], [75, 3, 1, "", "where"], [75, 3, 1, "", "with_grads"], [75, 3, 1, "", "zeros"]], "ivy.container.container.MultiDevContainer": [[76, 3, 1, "", "__init__"], [76, 3, 1, "", "at_dev"], [76, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[358, 1, 1, "", "abs"], [363, 1, 1, "", "acos"], [367, 1, 1, "", "acosh"], [667, 1, 1, "", "adam_step"], [671, 1, 1, "", "adam_update"], [371, 1, 1, "", "add"], [962, 1, 1, "", "all"], [592, 1, 1, "", "all_equal"], [967, 1, 1, "", "any"], [918, 1, 1, "", "argsort"], [203, 1, 1, "", "asarray"], [376, 1, 1, "", "asin"], [380, 1, 1, "", "asinh"], [384, 1, 1, "", "atan"], [388, 1, 1, "", "atan2"], [392, 1, 1, "", "atanh"], [789, 1, 1, "", "binary_cross_entropy"], [396, 1, 1, "", "bitwise_and"], [400, 1, 1, "", "bitwise_invert"], [404, 1, 1, "", "bitwise_left_shift"], [408, 1, 1, "", "bitwise_or"], [412, 1, 1, "", "bitwise_right_shift"], [416, 1, 1, "", "bitwise_xor"], [279, 1, 1, "", "can_cast"], [420, 1, 1, "", "ceil"], [717, 1, 1, "", "cholesky"], [805, 1, 1, "", "clip"], [603, 1, 1, "", "clip_vector_norm"], [810, 1, 1, "", "concat"], [814, 1, 1, "", "constant_pad"], [424, 1, 1, "", "cos"], [428, 1, 1, "", "cosh"], [794, 1, 1, "", "cross_entropy"], [432, 1, 1, "", "divide"], [929, 1, 1, "", "einsum"], [209, 1, 1, "", "empty_like"], [437, 1, 1, "", "equal"], [441, 1, 1, "", "erf"], [445, 1, 1, "", "exp"], [818, 1, 1, "", "expand_dims"], [449, 1, 1, "", "expm1"], [822, 1, 1, "", "flip"], [453, 1, 1, "", "floor"], [457, 1, 1, "", "floor_divide"], [217, 1, 1, "", "from_dlpack"], [223, 1, 1, "", "full_like"], [620, 1, 1, "", "gather_nd"], [162, 1, 1, "", "gelu"], [676, 1, 1, "", "gradient_descent_update"], [461, 1, 1, "", "greater"], [465, 1, 1, "", "greater_equal"], [680, 1, 1, "", "is_variable"], [469, 1, 1, "", "isfinite"], [473, 1, 1, "", "isinf"], [477, 1, 1, "", "isnan"], [684, 1, 1, "", "lamb_update"], [688, 1, 1, "", "lars_update"], [887, 1, 1, "", "layer_norm"], [167, 1, 1, "", "leaky_relu"], [481, 1, 1, "", "less"], [485, 1, 1, "", "less_equal"], [489, 1, 1, "", "log"], [493, 1, 1, "", "log10"], [497, 1, 1, "", "log1p"], [501, 1, 1, "", "log2"], [505, 1, 1, "", "logaddexp"], [509, 1, 1, "", "logical_and"], [513, 1, 1, "", "logical_not"], [517, 1, 1, "", "logical_or"], [521, 1, 1, "", "logical_xor"], [740, 1, 1, "", "matmul"], [933, 1, 1, "", "max"], [937, 1, 1, "", "mean"], [234, 1, 1, "", "meshgrid"], [941, 1, 1, "", "min"], [527, 1, 1, "", "multiply"], [239, 1, 1, "", "native_array"], [532, 1, 1, "", "negative"], [536, 1, 1, "", "not_equal"], [247, 1, 1, "", "ones_like"], [692, 1, 1, "", "optimizer_update"], [826, 1, 1, "", "permute_dims"], [540, 1, 1, "", "positive"], [544, 1, 1, "", "pow"], [945, 1, 1, "", "prod"], [896, 1, 1, "", "random_uniform"], [172, 1, 1, "", "relu"], [548, 1, 1, "", "remainder"], [830, 1, 1, "", "repeat"], [834, 1, 1, "", "reshape"], [838, 1, 1, "", "roll"], [552, 1, 1, "", "round"], [177, 1, 1, "", "sigmoid"], [556, 1, 1, "", "sign"], [560, 1, 1, "", "sin"], [564, 1, 1, "", "sinh"], [182, 1, 1, "", "softmax"], [186, 1, 1, "", "softplus"], [923, 1, 1, "", "sort"], [799, 1, 1, "", "sparse_cross_entropy"], [568, 1, 1, "", "sqrt"], [572, 1, 1, "", "square"], [844, 1, 1, "", "squeeze"], [848, 1, 1, "", "stack"], [360, 1, 1, "", "static_abs"], [669, 1, 1, "", "static_adam_step"], [673, 1, 1, "", "static_adam_update"], [373, 1, 1, "", "static_add"], [964, 1, 1, "", "static_all"], [594, 1, 1, "", "static_all_equal"], [969, 1, 1, "", "static_any"], [200, 1, 1, "", "static_arange"], [920, 1, 1, "", "static_argsort"], [205, 1, 1, "", "static_asarray"], [791, 1, 1, "", "static_binary_cross_entropy"], [281, 1, 1, "", "static_can_cast"], [719, 1, 1, "", "static_cholesky"], [807, 1, 1, "", "static_clip"], [796, 1, 1, "", "static_cross_entropy"], [434, 1, 1, "", "static_divide"], [211, 1, 1, "", "static_empty_like"], [214, 1, 1, "", "static_eye"], [219, 1, 1, "", "static_from_dlpack"], [225, 1, 1, "", "static_full_like"], [622, 1, 1, "", "static_gather_nd"], [164, 1, 1, "", "static_gelu"], [678, 1, 1, "", "static_gradient_descent_update"], [682, 1, 1, "", "static_is_variable"], [686, 1, 1, "", "static_lamb_update"], [690, 1, 1, "", "static_lars_update"], [169, 1, 1, "", "static_leaky_relu"], [228, 1, 1, "", "static_linspace"], [231, 1, 1, "", "static_logspace"], [236, 1, 1, "", "static_meshgrid"], [529, 1, 1, "", "static_multiply"], [241, 1, 1, "", "static_native_array"], [244, 1, 1, "", "static_ones"], [249, 1, 1, "", "static_ones_like"], [694, 1, 1, "", "static_optimizer_update"], [893, 1, 1, "", "static_randint"], [898, 1, 1, "", "static_random_uniform"], [174, 1, 1, "", "static_relu"], [840, 1, 1, "", "static_roll"], [179, 1, 1, "", "static_sigmoid"], [184, 1, 1, "", "static_softmax"], [188, 1, 1, "", "static_softplus"], [925, 1, 1, "", "static_sort"], [801, 1, 1, "", "static_sparse_cross_entropy"], [575, 1, 1, "", "static_subtract"], [580, 1, 1, "", "static_tan"], [190, 1, 1, "", "static_tanh"], [251, 1, 1, "", "static_tril"], [256, 1, 1, "", "static_triu"], [909, 1, 1, "", "static_unique_counts"], [261, 1, 1, "", "static_zeros"], [264, 1, 1, "", "static_zeros_like"], [949, 1, 1, "", "std"], [577, 1, 1, "", "subtract"], [953, 1, 1, "", "sum"], [852, 1, 1, "", "swapaxes"], [582, 1, 1, "", "tan"], [192, 1, 1, "", "tanh"], [856, 1, 1, "", "tile"], [253, 1, 1, "", "tril"], [258, 1, 1, "", "triu"], [587, 1, 1, "", "trunc"], [911, 1, 1, "", "unique_counts"], [957, 1, 1, "", "var"], [860, 1, 1, "", "zero_pad"], [266, 1, 1, "", "zeros_like"]], "ivy.container.creation": [[78, 2, 1, "", "ContainerWithCreation"]], "ivy.container.creation.ContainerWithCreation": [[78, 3, 1, "", "asarray"], [78, 3, 1, "", "empty_like"], [78, 3, 1, "", "from_dlpack"], [78, 3, 1, "", "full_like"], [78, 3, 1, "", "meshgrid"], [78, 3, 1, "", "native_array"], [78, 3, 1, "", "ones_like"], [78, 3, 1, "", "static_arange"], [78, 3, 1, "", "static_asarray"], [78, 3, 1, "", "static_empty_like"], [78, 3, 1, "", "static_eye"], [78, 3, 1, "", "static_from_dlpack"], [78, 3, 1, "", "static_full_like"], [78, 3, 1, "", "static_linspace"], [78, 3, 1, "", "static_logspace"], [78, 3, 1, "", "static_meshgrid"], [78, 3, 1, "", "static_native_array"], [78, 3, 1, "", "static_ones"], [78, 3, 1, "", "static_ones_like"], [78, 3, 1, "", "static_tril"], [78, 3, 1, "", "static_triu"], [78, 3, 1, "", "static_zeros"], [78, 3, 1, "", "static_zeros_like"], [78, 3, 1, "", "tril"], [78, 3, 1, "", "triu"], [78, 3, 1, "", "zeros_like"]], "ivy.container.data_type": [[80, 2, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[80, 3, 1, "", "can_cast"], [80, 3, 1, "", "static_can_cast"]], "ivy.container.device": [[82, 2, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[84, 2, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[84, 3, 1, "", "abs"], [84, 3, 1, "", "acos"], [84, 3, 1, "", "acosh"], [84, 3, 1, "", "add"], [84, 3, 1, "", "asin"], [84, 3, 1, "", "asinh"], [84, 3, 1, "", "atan"], [84, 3, 1, "", "atan2"], [84, 3, 1, "", "atanh"], [84, 3, 1, "", "bitwise_and"], [84, 3, 1, "", "bitwise_invert"], [84, 3, 1, "", "bitwise_left_shift"], [84, 3, 1, "", "bitwise_or"], [84, 3, 1, "", "bitwise_right_shift"], [84, 3, 1, "", "bitwise_xor"], [84, 3, 1, "", "ceil"], [84, 3, 1, "", "cos"], [84, 3, 1, "", "cosh"], [84, 3, 1, "", "divide"], [84, 3, 1, "", "equal"], [84, 3, 1, "", "erf"], [84, 3, 1, "", "exp"], [84, 3, 1, "", "expm1"], [84, 3, 1, "", "floor"], [84, 3, 1, "", "floor_divide"], [84, 3, 1, "", "greater"], [84, 3, 1, "", "greater_equal"], [84, 3, 1, "", "isfinite"], [84, 3, 1, "", "isinf"], [84, 3, 1, "", "isnan"], [84, 3, 1, "", "less"], [84, 3, 1, "", "less_equal"], [84, 3, 1, "", "log"], [84, 3, 1, "", "log10"], [84, 3, 1, "", "log1p"], [84, 3, 1, "", "log2"], [84, 3, 1, "", "logaddexp"], [84, 3, 1, "", "logical_and"], [84, 3, 1, "", "logical_not"], [84, 3, 1, "", "logical_or"], [84, 3, 1, "", "logical_xor"], [84, 3, 1, "", "multiply"], [84, 3, 1, "", "negative"], [84, 3, 1, "", "not_equal"], [84, 3, 1, "", "positive"], [84, 3, 1, "", "pow"], [84, 3, 1, "", "remainder"], [84, 3, 1, "", "round"], [84, 3, 1, "", "sign"], [84, 3, 1, "", "sin"], [84, 3, 1, "", "sinh"], [84, 3, 1, "", "sqrt"], [84, 3, 1, "", "square"], [84, 3, 1, "", "static_abs"], [84, 3, 1, "", "static_add"], [84, 3, 1, "", "static_divide"], [84, 3, 1, "", "static_multiply"], [84, 3, 1, "", "static_subtract"], [84, 3, 1, "", "static_tan"], [84, 3, 1, "", "static_tanh"], [84, 3, 1, "", "subtract"], [84, 3, 1, "", "tan"], [84, 3, 1, "", "tanh"], [84, 3, 1, "", "trunc"]], "ivy.container.general": [[86, 2, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[86, 3, 1, "", "all_equal"], [86, 3, 1, "", "clip_vector_norm"], [86, 3, 1, "", "gather_nd"], [86, 3, 1, "", "static_all_equal"], [86, 3, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[88, 2, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[88, 3, 1, "", "adam_step"], [88, 3, 1, "", "adam_update"], [88, 3, 1, "", "gradient_descent_update"], [88, 3, 1, "", "is_variable"], [88, 3, 1, "", "lamb_update"], [88, 3, 1, "", "lars_update"], [88, 3, 1, "", "optimizer_update"], [88, 3, 1, "", "static_adam_step"], [88, 3, 1, "", "static_adam_update"], [88, 3, 1, "", "static_gradient_descent_update"], [88, 3, 1, "", "static_is_variable"], [88, 3, 1, "", "static_lamb_update"], [88, 3, 1, "", "static_lars_update"], [88, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[90, 2, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[92, 2, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[94, 2, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[94, 3, 1, "", "cholesky"], [94, 3, 1, "", "matmul"], [94, 3, 1, "", "static_cholesky"]], "ivy.container.losses": [[96, 2, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[96, 3, 1, "", "binary_cross_entropy"], [96, 3, 1, "", "cross_entropy"], [96, 3, 1, "", "sparse_cross_entropy"], [96, 3, 1, "", "static_binary_cross_entropy"], [96, 3, 1, "", "static_cross_entropy"], [96, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[98, 2, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[98, 3, 1, "", "clip"], [98, 3, 1, "", "concat"], [98, 3, 1, "", "constant_pad"], [98, 3, 1, "", "expand_dims"], [98, 3, 1, "", "flip"], [98, 3, 1, "", "permute_dims"], [98, 3, 1, "", "repeat"], [98, 3, 1, "", "reshape"], [98, 3, 1, "", "roll"], [98, 3, 1, "", "squeeze"], [98, 3, 1, "", "stack"], [98, 3, 1, "", "static_clip"], [98, 3, 1, "", "static_roll"], [98, 3, 1, "", "swapaxes"], [98, 3, 1, "", "tile"], [98, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[100, 2, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[100, 3, 1, "", "layer_norm"]], "ivy.container.random": [[102, 2, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[102, 3, 1, "", "random_uniform"], [102, 3, 1, "", "static_randint"], [102, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[104, 2, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[106, 2, 1, "", "ContainerWithSet"]], "ivy.container.set.ContainerWithSet": [[106, 3, 1, "", "static_unique_counts"], [106, 3, 1, "", "unique_counts"]], "ivy.container.sorting": [[108, 2, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[108, 3, 1, "", "argsort"], [108, 3, 1, "", "sort"], [108, 3, 1, "", "static_argsort"], [108, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[110, 2, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[110, 3, 1, "", "einsum"], [110, 3, 1, "", "max"], [110, 3, 1, "", "mean"], [110, 3, 1, "", "min"], [110, 3, 1, "", "prod"], [110, 3, 1, "", "std"], [110, 3, 1, "", "sum"], [110, 3, 1, "", "var"]], "ivy.container.utility": [[112, 2, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[112, 3, 1, "", "all"], [112, 3, 1, "", "any"], [112, 3, 1, "", "static_all"], [112, 3, 1, "", "static_any"]], "ivy.container.wrapping": [[114, 1, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[150, 1, 1, "", "handle_nestable"], [151, 1, 1, "", "handle_out_argument"], [152, 1, 1, "", "infer_device"], [153, 1, 1, "", "infer_dtype"], [154, 1, 1, "", "inputs_to_ivy_arrays"], [155, 1, 1, "", "inputs_to_native_arrays"], [156, 1, 1, "", "outputs_to_ivy_arrays"], [157, 1, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[159, 0, 0, "-", "activations"], [194, 0, 0, "-", "compilation"], [196, 0, 0, "-", "constants"], [197, 0, 0, "-", "creation"], [268, 0, 0, "-", "data_type"], [305, 0, 0, "-", "device"], [355, 0, 0, "-", "elementwise"], [589, 0, 0, "-", "general"], [663, 0, 0, "-", "gradients"], [701, 0, 0, "-", "layers"], [714, 0, 0, "-", "linear_algebra"], [786, 0, 0, "-", "losses"], [802, 0, 0, "-", "manipulation"], [862, 0, 0, "-", "meta"], [866, 0, 0, "-", "nest"], [884, 0, 0, "-", "norms"], [889, 0, 0, "-", "random"], [901, 0, 0, "-", "searching"], [906, 0, 0, "-", "set"], [915, 0, 0, "-", "sorting"], [926, 0, 0, "-", "statistical"], [959, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[163, 1, 1, "", "gelu"], [168, 1, 1, "", "leaky_relu"], [173, 1, 1, "", "relu"], [178, 1, 1, "", "sigmoid"], [183, 1, 1, "", "softmax"], [187, 1, 1, "", "softplus"], [193, 1, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[195, 1, 1, "", "compile"]], "ivy.functional.ivy.constants": [[196, 5, 1, "", "e"], [196, 5, 1, "", "inf"], [196, 5, 1, "", "nan"], [196, 5, 1, "", "newaxis"], [196, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[199, 1, 1, "", "arange"], [197, 1, 1, "", "array"], [204, 1, 1, "", "asarray"], [206, 1, 1, "", "empty"], [210, 1, 1, "", "empty_like"], [213, 1, 1, "", "eye"], [218, 1, 1, "", "from_dlpack"], [220, 1, 1, "", "full"], [224, 1, 1, "", "full_like"], [227, 1, 1, "", "linspace"], [230, 1, 1, "", "logspace"], [235, 1, 1, "", "meshgrid"], [240, 1, 1, "", "native_array"], [243, 1, 1, "", "ones"], [248, 1, 1, "", "ones_like"], [254, 1, 1, "", "tril"], [259, 1, 1, "", "triu"], [262, 1, 1, "", "zeros"], [267, 1, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[268, 2, 1, "", "DefaultDtype"], [268, 2, 1, "", "DefaultFloatDtype"], [268, 2, 1, "", "DefaultIntDtype"], [272, 1, 1, "", "as_ivy_dtype"], [273, 1, 1, "", "as_native_dtype"], [274, 1, 1, "", "astype"], [275, 1, 1, "", "broadcast_arrays"], [276, 1, 1, "", "broadcast_to"], [280, 1, 1, "", "can_cast"], [282, 1, 1, "", "closest_valid_dtype"], [283, 1, 1, "", "default_dtype"], [284, 1, 1, "", "default_float_dtype"], [285, 1, 1, "", "default_int_dtype"], [286, 1, 1, "", "dtype"], [287, 1, 1, "", "dtype_bits"], [288, 1, 1, "", "finfo"], [289, 1, 1, "", "function_supported_dtypes"], [290, 1, 1, "", "function_unsupported_dtypes"], [291, 1, 1, "", "iinfo"], [292, 1, 1, "", "invalid_dtype"], [293, 1, 1, "", "is_float_dtype"], [294, 1, 1, "", "is_int_dtype"], [295, 1, 1, "", "promote_types"], [296, 1, 1, "", "result_type"], [297, 1, 1, "", "set_default_dtype"], [298, 1, 1, "", "set_default_float_dtype"], [299, 1, 1, "", "set_default_int_dtype"], [300, 1, 1, "", "type_promote_arrays"], [301, 1, 1, "", "unset_default_dtype"], [302, 1, 1, "", "unset_default_float_dtype"], [303, 1, 1, "", "unset_default_int_dtype"], [304, 1, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[268, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[268, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[268, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[305, 2, 1, "", "DefaultDevice"], [307, 2, 1, "", "DevClonedItem"], [308, 2, 1, "", "DevClonedIter"], [309, 2, 1, "", "DevClonedNest"], [310, 2, 1, "", "DevDistItem"], [311, 2, 1, "", "DevDistIter"], [312, 2, 1, "", "DevDistNest"], [305, 2, 1, "", "DevManager"], [314, 2, 1, "", "DevMapper"], [315, 2, 1, "", "DevMapperMultiProc"], [305, 2, 1, "", "MultiDev"], [317, 2, 1, "", "MultiDevItem"], [318, 2, 1, "", "MultiDevIter"], [319, 2, 1, "", "MultiDevNest"], [320, 2, 1, "", "Profiler"], [321, 1, 1, "", "as_ivy_dev"], [322, 1, 1, "", "as_native_dev"], [323, 1, 1, "", "clear_mem_on_dev"], [324, 1, 1, "", "default_device"], [325, 1, 1, "", "dev"], [326, 1, 1, "", "dev_clone"], [327, 1, 1, "", "dev_clone_array"], [328, 1, 1, "", "dev_clone_iter"], [329, 1, 1, "", "dev_clone_nest"], [330, 1, 1, "", "dev_dist"], [331, 1, 1, "", "dev_dist_array"], [332, 1, 1, "", "dev_dist_iter"], [333, 1, 1, "", "dev_dist_nest"], [334, 1, 1, "", "dev_unify"], [335, 1, 1, "", "dev_unify_array"], [336, 1, 1, "", "dev_unify_iter"], [337, 1, 1, "", "dev_unify_nest"], [338, 1, 1, "", "dev_util"], [339, 1, 1, "", "get_all_ivy_arrays_on_dev"], [340, 1, 1, "", "gpu_is_available"], [341, 1, 1, "", "num_cpu_cores"], [342, 1, 1, "", "num_gpus"], [343, 1, 1, "", "num_ivy_arrays_on_dev"], [344, 1, 1, "", "percent_used_mem_on_dev"], [345, 1, 1, "", "print_all_ivy_arrays_on_dev"], [346, 1, 1, "", "set_default_device"], [347, 1, 1, "", "set_split_factor"], [348, 1, 1, "", "split_factor"], [349, 1, 1, "", "split_func_call"], [350, 1, 1, "", "to_device"], [351, 1, 1, "", "total_mem_on_dev"], [352, 1, 1, "", "tpu_is_available"], [353, 1, 1, "", "unset_default_device"], [354, 1, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[305, 3, 1, "", "__enter__"], [305, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[305, 3, 1, "", "__init__"], [305, 3, 1, "", "da_tune_step"], [305, 4, 1, "", "dim_size"], [305, 3, 1, "", "ds_tune_step"], [305, 3, 1, "", "map"], [305, 3, 1, "", "repeated_config_check"], [305, 4, 1, "", "tune_step"], [305, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[314, 3, 1, "", "__init__"], [314, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[315, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[305, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[317, 3, 1, "", "__init__"], [317, 3, 1, "", "items"], [317, 3, 1, "", "keys"], [317, 4, 1, "", "shape"], [317, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[318, 3, 1, "", "__init__"], [318, 3, 1, "", "at_dev"], [318, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[319, 3, 1, "", "__init__"], [319, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[320, 3, 1, "", "__init__"], [320, 3, 1, "", "start"], [320, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[359, 1, 1, "", "abs"], [364, 1, 1, "", "acos"], [368, 1, 1, "", "acosh"], [372, 1, 1, "", "add"], [377, 1, 1, "", "asin"], [381, 1, 1, "", "asinh"], [385, 1, 1, "", "atan"], [389, 1, 1, "", "atan2"], [393, 1, 1, "", "atanh"], [397, 1, 1, "", "bitwise_and"], [401, 1, 1, "", "bitwise_invert"], [405, 1, 1, "", "bitwise_left_shift"], [409, 1, 1, "", "bitwise_or"], [413, 1, 1, "", "bitwise_right_shift"], [417, 1, 1, "", "bitwise_xor"], [421, 1, 1, "", "ceil"], [425, 1, 1, "", "cos"], [429, 1, 1, "", "cosh"], [433, 1, 1, "", "divide"], [438, 1, 1, "", "equal"], [442, 1, 1, "", "erf"], [446, 1, 1, "", "exp"], [450, 1, 1, "", "expm1"], [454, 1, 1, "", "floor"], [458, 1, 1, "", "floor_divide"], [462, 1, 1, "", "greater"], [466, 1, 1, "", "greater_equal"], [470, 1, 1, "", "isfinite"], [474, 1, 1, "", "isinf"], [478, 1, 1, "", "isnan"], [482, 1, 1, "", "less"], [486, 1, 1, "", "less_equal"], [490, 1, 1, "", "log"], [494, 1, 1, "", "log10"], [498, 1, 1, "", "log1p"], [502, 1, 1, "", "log2"], [506, 1, 1, "", "logaddexp"], [510, 1, 1, "", "logical_and"], [514, 1, 1, "", "logical_not"], [518, 1, 1, "", "logical_or"], [522, 1, 1, "", "logical_xor"], [523, 1, 1, "", "maximum"], [524, 1, 1, "", "minimum"], [528, 1, 1, "", "multiply"], [533, 1, 1, "", "negative"], [537, 1, 1, "", "not_equal"], [541, 1, 1, "", "positive"], [545, 1, 1, "", "pow"], [549, 1, 1, "", "remainder"], [553, 1, 1, "", "round"], [557, 1, 1, "", "sign"], [561, 1, 1, "", "sin"], [565, 1, 1, "", "sinh"], [569, 1, 1, "", "sqrt"], [573, 1, 1, "", "square"], [578, 1, 1, "", "subtract"], [583, 1, 1, "", "tan"], [584, 1, 1, "", "tanh"], [588, 1, 1, "", "trunc"]], "ivy.functional.ivy.general": [[593, 1, 1, "", "all_equal"], [595, 1, 1, "", "arg_info"], [596, 1, 1, "", "arg_names"], [597, 1, 1, "", "array_equal"], [598, 1, 1, "", "arrays_equal"], [599, 1, 1, "", "assert_supports_inplace"], [600, 1, 1, "", "cache_fn"], [601, 1, 1, "", "clip_matrix_norm"], [604, 1, 1, "", "clip_vector_norm"], [605, 1, 1, "", "container_types"], [606, 1, 1, "", "copy_array"], [607, 1, 1, "", "cumprod"], [608, 1, 1, "", "cumsum"], [609, 1, 1, "", "current_backend_str"], [610, 1, 1, "", "default"], [611, 1, 1, "", "einops_rearrange"], [612, 1, 1, "", "einops_reduce"], [613, 1, 1, "", "einops_repeat"], [614, 1, 1, "", "exists"], [615, 1, 1, "", "floormod"], [616, 1, 1, "", "fourier_encode"], [617, 1, 1, "", "gather"], [621, 1, 1, "", "gather_nd"], [623, 1, 1, "", "get_all_arrays_in_memory"], [624, 1, 1, "", "get_min_base"], [625, 1, 1, "", "get_min_denominator"], [626, 1, 1, "", "get_num_dims"], [627, 1, 1, "", "get_referrers_recursive"], [628, 1, 1, "", "has_nans"], [629, 1, 1, "", "indices_where"], [630, 1, 1, "", "inplace_arrays_supported"], [631, 1, 1, "", "inplace_decrement"], [632, 1, 1, "", "inplace_increment"], [633, 1, 1, "", "inplace_update"], [634, 1, 1, "", "inplace_variables_supported"], [635, 1, 1, "", "is_array"], [636, 1, 1, "", "is_ivy_array"], [637, 1, 1, "", "is_ivy_container"], [638, 1, 1, "", "is_native_array"], [639, 1, 1, "", "match_kwargs"], [640, 1, 1, "", "multiprocessing"], [641, 1, 1, "", "num_arrays_in_memory"], [642, 1, 1, "", "one_hot"], [643, 1, 1, "", "print_all_arrays_in_memory"], [644, 1, 1, "", "queue_timeout"], [645, 1, 1, "", "scatter_flat"], [646, 1, 1, "", "scatter_nd"], [647, 1, 1, "", "set_min_base"], [648, 1, 1, "", "set_min_denominator"], [649, 1, 1, "", "set_queue_timeout"], [650, 1, 1, "", "set_tmp_dir"], [651, 1, 1, "", "shape"], [652, 1, 1, "", "shape_to_tuple"], [653, 1, 1, "", "stable_divide"], [654, 1, 1, "", "stable_pow"], [655, 1, 1, "", "supports_inplace"], [656, 1, 1, "", "tmp_dir"], [657, 1, 1, "", "to_list"], [658, 1, 1, "", "to_numpy"], [659, 1, 1, "", "to_scalar"], [660, 1, 1, "", "try_else_none"], [661, 1, 1, "", "unstack"], [662, 1, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[663, 2, 1, "", "GradientTracking"], [668, 1, 1, "", "adam_step"], [672, 1, 1, "", "adam_update"], [674, 1, 1, "", "execute_with_gradients"], [677, 1, 1, "", "gradient_descent_update"], [681, 1, 1, "", "is_variable"], [685, 1, 1, "", "lamb_update"], [689, 1, 1, "", "lars_update"], [693, 1, 1, "", "optimizer_update"], [695, 1, 1, "", "set_with_grads"], [696, 1, 1, "", "stop_gradient"], [697, 1, 1, "", "unset_with_grads"], [698, 1, 1, "", "variable"], [699, 1, 1, "", "variable_data"], [700, 1, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[663, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[702, 1, 1, "", "conv1d"], [703, 1, 1, "", "conv1d_transpose"], [704, 1, 1, "", "conv2d"], [705, 1, 1, "", "conv2d_transpose"], [706, 1, 1, "", "conv3d"], [707, 1, 1, "", "conv3d_transpose"], [708, 1, 1, "", "depthwise_conv2d"], [709, 1, 1, "", "dropout"], [710, 1, 1, "", "linear"], [711, 1, 1, "", "lstm_update"], [712, 1, 1, "", "multi_head_attention"], [713, 1, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[718, 1, 1, "", "cholesky"], [722, 1, 1, "", "cross"], [725, 1, 1, "", "det"], [728, 1, 1, "", "diagonal"], [731, 1, 1, "", "eigh"], [734, 1, 1, "", "eigvalsh"], [737, 1, 1, "", "inv"], [741, 1, 1, "", "matmul"], [744, 1, 1, "", "matrix_norm"], [745, 1, 1, "", "matrix_power"], [748, 1, 1, "", "matrix_rank"], [751, 1, 1, "", "matrix_transpose"], [754, 1, 1, "", "outer"], [757, 1, 1, "", "pinv"], [760, 1, 1, "", "qr"], [761, 1, 1, "", "slogdet"], [764, 1, 1, "", "solve"], [767, 1, 1, "", "svd"], [770, 1, 1, "", "svdvals"], [773, 1, 1, "", "tensordot"], [776, 1, 1, "", "trace"], [779, 1, 1, "", "vecdot"], [782, 1, 1, "", "vector_norm"], [785, 1, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[790, 1, 1, "", "binary_cross_entropy"], [795, 1, 1, "", "cross_entropy"], [800, 1, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[806, 1, 1, "", "clip"], [811, 1, 1, "", "concat"], [815, 1, 1, "", "constant_pad"], [819, 1, 1, "", "expand_dims"], [823, 1, 1, "", "flip"], [827, 1, 1, "", "permute_dims"], [831, 1, 1, "", "repeat"], [835, 1, 1, "", "reshape"], [839, 1, 1, "", "roll"], [841, 1, 1, "", "split"], [845, 1, 1, "", "squeeze"], [849, 1, 1, "", "stack"], [853, 1, 1, "", "swapaxes"], [857, 1, 1, "", "tile"], [861, 1, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[863, 1, 1, "", "fomaml_step"], [864, 1, 1, "", "maml_step"], [865, 1, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[867, 1, 1, "", "all_nested_indices"], [868, 1, 1, "", "copy_nest"], [869, 1, 1, "", "index_nest"], [870, 1, 1, "", "insert_into_nest_at_index"], [871, 1, 1, "", "insert_into_nest_at_indices"], [872, 1, 1, "", "map"], [873, 1, 1, "", "map_nest_at_index"], [874, 1, 1, "", "map_nest_at_indices"], [875, 1, 1, "", "multi_index_nest"], [876, 1, 1, "", "nested_any"], [877, 1, 1, "", "nested_indices_where"], [878, 1, 1, "", "nested_map"], [879, 1, 1, "", "nested_multi_map"], [880, 1, 1, "", "prune_nest_at_index"], [881, 1, 1, "", "prune_nest_at_indices"], [882, 1, 1, "", "set_nest_at_index"], [883, 1, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[888, 1, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[890, 1, 1, "", "multinomial"], [892, 1, 1, "", "randint"], [894, 1, 1, "", "random_normal"], [897, 1, 1, "", "random_uniform"], [899, 1, 1, "", "seed"], [900, 1, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[902, 1, 1, "", "argmax"], [903, 1, 1, "", "argmin"], [904, 1, 1, "", "nonzero"], [905, 1, 1, "", "where"]], "ivy.functional.ivy.set": [[907, 1, 1, "", "unique_all"], [912, 1, 1, "", "unique_counts"], [913, 1, 1, "", "unique_inverse"], [914, 1, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[919, 1, 1, "", "argsort"], [924, 1, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[930, 1, 1, "", "einsum"], [934, 1, 1, "", "max"], [938, 1, 1, "", "mean"], [942, 1, 1, "", "min"], [946, 1, 1, "", "prod"], [950, 1, 1, "", "std"], [954, 1, 1, "", "sum"], [958, 1, 1, "", "var"]], "ivy.functional.ivy.utility": [[963, 1, 1, "", "all"], [968, 1, 1, "", "any"]], "ivy.inspection": [[974, 1, 1, "", "add_array_specs"], [975, 1, 1, "", "fn_array_spec"]], "ivy.stateful": [[978, 0, 0, "-", "activations"], [981, 0, 0, "-", "converters"], [983, 0, 0, "-", "initializers"], [992, 0, 0, "-", "layers"], [1004, 0, 0, "-", "module"], [1006, 0, 0, "-", "norms"], [1008, 0, 0, "-", "optimizers"], [1014, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[979, 2, 1, "", "GEGLU"], [980, 2, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[979, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[980, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[982, 1, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[983, 2, 1, "", "Constant"], [985, 2, 1, "", "FirstLayerSiren"], [986, 2, 1, "", "GlorotUniform"], [983, 2, 1, "", "KaimingNormal"], [988, 2, 1, "", "Ones"], [989, 2, 1, "", "Siren"], [983, 2, 1, "", "Uniform"], [991, 2, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[983, 3, 1, "", "__init__"], [983, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[985, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[986, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[983, 3, 1, "", "__init__"], [983, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[988, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[989, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[983, 3, 1, "", "__init__"], [983, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[991, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[993, 2, 1, "", "Conv1D"], [994, 2, 1, "", "Conv1DTranspose"], [995, 2, 1, "", "Conv2D"], [996, 2, 1, "", "Conv2DTranspose"], [997, 2, 1, "", "Conv3D"], [998, 2, 1, "", "Conv3DTranspose"], [999, 2, 1, "", "DepthwiseConv2D"], [1000, 2, 1, "", "Dropout"], [1001, 2, 1, "", "LSTM"], [1002, 2, 1, "", "Linear"], [1003, 2, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[993, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[994, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[995, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[996, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[997, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[998, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[999, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[1000, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[1001, 3, 1, "", "__init__"], [1001, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[1002, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[1003, 3, 1, "", "__init__"]], "ivy.stateful.module": [[1005, 2, 1, "", "Module"]], "ivy.stateful.module.Module": [[1005, 3, 1, "", "__init__"], [1005, 3, 1, "", "build"], [1005, 4, 1, "", "build_mode"], [1005, 4, 1, "", "built"], [1005, 3, 1, "", "check_submod_rets"], [1005, 3, 1, "", "get_mod_key"], [1005, 3, 1, "", "mod_depth"], [1005, 3, 1, "", "mod_height"], [1005, 3, 1, "", "mod_with_top_mod_key_chain"], [1005, 3, 1, "", "save_weights"], [1005, 3, 1, "", "show_mod_in_top_mod"], [1005, 3, 1, "", "show_structure"], [1005, 3, 1, "", "show_v_in_top_v"], [1005, 3, 1, "", "sub_mods"], [1005, 3, 1, "", "track_submod_call_order"], [1005, 3, 1, "", "track_submod_rets"], [1005, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[1007, 2, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[1007, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[1009, 2, 1, "", "Adam"], [1010, 2, 1, "", "LAMB"], [1011, 2, 1, "", "LARS"], [1012, 2, 1, "", "Optimizer"], [1013, 2, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[1009, 3, 1, "", "__init__"], [1009, 3, 1, "", "set_state"], [1009, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[1010, 3, 1, "", "__init__"], [1010, 3, 1, "", "set_state"], [1010, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[1011, 3, 1, "", "__init__"], [1011, 3, 1, "", "set_state"], [1011, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[1012, 3, 1, "", "__init__"], [1012, 3, 1, "", "set_state"], [1012, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[1013, 3, 1, "", "__init__"], [1013, 3, 1, "", "set_state"], [1013, 4, 1, "", "state"]], "ivy.stateful.sequential": [[1015, 2, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[1015, 3, 1, "", "__init__"]], "ivy.verbosity": [[1018, 1, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"backend": [0, 116, 122, 131, 148], "handler": [0, 131], "choose_random_backend": 2, "clear_backend_stack": 3, "current_backend": 4, "get_backend": 5, "set_backend": 6, "try_import_ivy_jax": 7, "try_import_ivy_mxnet": 8, "try_import_ivy_numpi": 9, "try_import_ivy_tf": 10, "try_import_ivy_torch": 11, "unset_backend": 12, "background": [13, 970], "ml": 14, "explos": 14, "standard": 15, "skeptic": 15, "complimentari": 15, "vs": [15, 148], "competit": 15, "do": 15, "work": [15, 21], "The": [15, 19, 133, 148], "arrai": [15, 23, 119, 124, 129, 133, 161, 166, 171, 176, 181, 191, 202, 208, 216, 222, 233, 238, 246, 252, 257, 265, 278, 357, 362, 366, 370, 375, 379, 383, 387, 391, 395, 399, 403, 407, 411, 415, 419, 423, 427, 431, 436, 440, 444, 448, 452, 456, 460, 464, 468, 472, 476, 480, 484, 488, 492, 496, 500, 504, 508, 512, 516, 520, 526, 531, 535, 539, 543, 547, 551, 555, 559, 563, 567, 571, 576, 581, 586, 591, 619, 666, 716, 721, 724, 727, 730, 733, 736, 739, 743, 747, 750, 753, 756, 759, 763, 766, 769, 772, 775, 778, 781, 784, 788, 793, 798, 804, 809, 813, 817, 821, 825, 829, 833, 837, 843, 847, 851, 855, 859, 886, 910, 917, 922, 928, 932, 936, 940, 944, 948, 952, 956, 961, 966], "api": [15, 20, 116, 119, 125, 131, 133, 135, 136], "why": 16, "unifi": [16, 133], "No": [16, 18], "more": 16, "re": 16, "implement": 16, "infinit": 16, "shelf": 16, "life": 16, "contribut": [17, 970], "set": [18, 59, 105, 122, 906], "up": 18, "clone": 18, "ivi": [18, 116, 118, 120, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 161, 162, 163, 164, 166, 167, 168, 169, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 199, 200, 202, 203, 204, 205, 208, 209, 210, 211, 213, 214, 216, 217, 218, 219, 222, 223, 224, 225, 227, 228, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 278, 279, 280, 281, 357, 358, 359, 360, 362, 363, 364, 366, 367, 368, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 383, 384, 385, 387, 388, 389, 391, 392, 393, 395, 396, 397, 399, 400, 401, 403, 404, 405, 407, 408, 409, 411, 412, 413, 415, 416, 417, 419, 420, 421, 423, 424, 425, 427, 428, 429, 431, 432, 433, 434, 436, 437, 438, 440, 441, 442, 444, 445, 446, 448, 449, 450, 452, 453, 454, 456, 457, 458, 460, 461, 462, 464, 465, 466, 468, 469, 470, 472, 473, 474, 476, 477, 478, 480, 481, 482, 484, 485, 486, 488, 489, 490, 492, 493, 494, 496, 497, 498, 500, 501, 502, 504, 505, 506, 508, 509, 510, 512, 513, 514, 516, 517, 518, 520, 521, 522, 526, 527, 528, 529, 531, 532, 533, 535, 536, 537, 539, 540, 541, 543, 544, 545, 547, 548, 549, 551, 552, 553, 555, 556, 557, 559, 560, 561, 563, 564, 565, 567, 568, 569, 571, 572, 573, 575, 576, 577, 578, 580, 581, 582, 583, 586, 587, 588, 591, 592, 593, 594, 603, 604, 619, 620, 621, 622, 666, 667, 668, 669, 671, 672, 673, 676, 677, 678, 680, 681, 682, 684, 685, 686, 688, 689, 690, 692, 693, 694, 716, 717, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 733, 734, 736, 737, 739, 740, 741, 743, 744, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 763, 764, 766, 767, 769, 770, 772, 773, 775, 776, 778, 779, 781, 782, 784, 785, 788, 789, 790, 791, 793, 794, 795, 796, 798, 799, 800, 801, 804, 805, 806, 807, 809, 810, 811, 813, 814, 815, 817, 818, 819, 821, 822, 823, 825, 826, 827, 829, 830, 831, 833, 834, 835, 837, 838, 839, 840, 843, 844, 845, 847, 848, 849, 851, 852, 853, 855, 856, 857, 859, 860, 861, 886, 887, 888, 892, 893, 896, 897, 898, 909, 910, 911, 912, 917, 918, 919, 920, 922, 923, 924, 925, 928, 929, 930, 932, 933, 934, 936, 937, 938, 940, 941, 942, 944, 945, 946, 948, 949, 950, 952, 953, 954, 956, 957, 958, 961, 962, 963, 964, 966, 967, 968, 969], "pycharm": 18, "virtual": 18, "environ": 18, "docker": [18, 19, 21], "us": [18, 21, 134], "miniconda": [18, 21], "venv": [18, 21], "interpret": 18, "window": 18, "maco": 18, "ubuntu": 18, "github": 18, "codespac": 18, "pre": 18, "commit": [18, 19], "basic": 19, "get": 19, "help": 19, "todo": 19, "list": 19, "issu": 19, "manag": 19, "your": 19, "fork": 19, "who": 19, "To": 19, "ask": 19, "With": 19, "command": 19, "line": 19, "browser": 19, "pull": 19, "request": 19, "small": 19, "often": 19, "run": 19, "test": [19, 119, 120], "local": 19, "open": 20, "task": 20, "function": [20, 121, 123, 125, 126, 127, 129, 131, 136, 148], "format": 20, "frontend": [20, 136], "build": [21, 131], "doc": 21, "dockerless": 21, "document": 21, "pipelin": [21, 148], "make_doc": 21, "sh": 21, "entrypoint": 21, "_make_doc": 21, "generate_src_rst_fil": 21, "py": 21, "sphinx": 21, "correct_built_html_fil": 21, "remove_fil": 21, "data": [22, 33, 79, 120, 126, 134, 148, 268, 906, 907, 908, 912, 914], "class": [22, 133, 977], "activ": [24, 70, 159, 978], "arraywithactiv": 25, "convers": 26, "args_to_ivi": 27, "args_to_n": 28, "to_ivi": 29, "to_n": 30, "creation": [31, 77, 197], "arraywithcr": 32, "type": [33, 79, 121, 126, 148, 268], "arraywithdatatyp": 34, "devic": [35, 81, 127, 129, 305], "arraywithdevic": 36, "elementwis": [37, 83, 355], "arraywithelementwis": 38, "gener": [39, 85, 120, 589], "arraywithgener": 40, "gradient": [41, 87, 663], "arraywithgradi": 42, "imag": [43, 89], "arraywithimag": 44, "layer": [45, 91, 701, 992], "arraywithlay": 46, "linear": [47, 93, 710, 714, 1002], "algebra": [47, 93, 714], "arraywithlinearalgebra": 48, "loss": [49, 95, 786], "arraywithloss": 50, "manipul": [51, 97, 802], "arraywithmanipul": 52, "norm": [53, 99, 884, 1006], "arraywithnorm": 54, "random": [55, 101, 889], "arraywithrandom": 56, "search": [57, 103, 901], "arraywithsearch": 58, "arraywithset": 60, "sort": [61, 107, 915, 921, 922, 923, 924], "arraywithsort": 62, "statist": [63, 109, 926], "arraywithstatist": 64, "util": [65, 111, 959], "arraywithutil": 66, "wrap": [67, 113, 123], "add_ivy_array_instance_method": 68, "contain": [69, 74, 75, 125, 134, 162, 164, 167, 169, 172, 174, 177, 179, 182, 184, 186, 188, 190, 192, 200, 203, 205, 209, 211, 214, 217, 219, 223, 225, 228, 231, 234, 236, 239, 241, 244, 247, 249, 251, 253, 256, 258, 261, 264, 266, 279, 281, 358, 360, 363, 367, 371, 373, 376, 380, 384, 388, 392, 396, 400, 404, 408, 412, 416, 420, 424, 428, 432, 434, 437, 441, 445, 449, 453, 457, 461, 465, 469, 473, 477, 481, 485, 489, 493, 497, 501, 505, 509, 513, 517, 521, 527, 529, 532, 536, 540, 544, 548, 552, 556, 560, 564, 568, 572, 575, 577, 580, 582, 587, 592, 594, 603, 620, 622, 667, 669, 671, 673, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 717, 719, 740, 789, 791, 794, 796, 799, 801, 805, 807, 810, 814, 818, 822, 826, 830, 834, 838, 840, 844, 848, 852, 856, 860, 887, 893, 896, 898, 909, 911, 918, 920, 923, 925, 929, 933, 937, 941, 945, 949, 953, 957, 962, 964, 967, 969], "containerwithactiv": 71, "base": 72, "containerbas": 73, "multidevcontain": 76, "containerwithcr": 78, "containerwithdatatyp": 80, "containerwithdevic": 82, "containerwithelementwis": 84, "containerwithgener": 86, "containerwithgradi": 88, "containerwithimag": 90, "containerwithlay": 92, "containerwithlinearalgebra": 94, "containerwithloss": 96, "containerwithmanipul": 98, "containerwithnorm": 100, "containerwithrandom": 102, "containerwithsearch": 104, "containerwithset": 106, "containerwithsort": 108, "containerwithstatist": 110, "containerwithutil": 112, "add_ivy_container_instance_method": 114, "deep": 115, "dive": 115, "navig": 116, "code": 116, "categor": 116, "submodul": 116, "design": [116, 130, 970], "docstr": [117, 118], "exampl": [118, 129], "tan": [118, 579, 581, 582, 583], "roll": [118, 836, 837, 838, 839], "add": [118, 369, 370, 371, 372], "hypothesi": 120, "self": 120, "consist": 120, "explicit": 120, "test_array_funct": 120, "primari": 121, "composit": 121, "mix": 121, "standalon": 121, "nestabl": [121, 125, 129], "conveni": 121, "nativ": 124, "handl": 124, "instanc": [125, 133], "method": [125, 133, 134], "static": 125, "special": 125, "modul": [126, 127, 135, 1004, 1005], "argument": [126, 127, 128, 129], "other": [126, 127], "inplac": 128, "updat": 128, "out": [128, 129], "copi": 128, "dtype": [129, 286], "number": 129, "oper": [129, 133, 148], "integ": 129, "sequenc": 129, "block": 131, "framework": [131, 132, 977], "graph": [131, 136], "compil": [131, 136, 194, 195], "monkei": 133, "patch": 133, "construct": 134, "represent": 134, "recurs": 134, "built": 134, "ins": 134, "access": 134, "save": 134, "load": 134, "comparison": 134, "custom": [134, 148], "case": 134, "compartment": 134, "configur": 134, "network": [134, 136], "weight": 134, "state": [135, 148], "initi": [135, 983], "optim": [135, 1008, 1012], "transpil": 136, "role": 136, "convert": [136, 981], "model": [136, 143, 148], "builder": 138, "ecosystem": 139, "gym": [140, 147], "mech": 141, "memori": [142, 147], "robot": [144, 147], "vision": [145, 147], "extens": [146, 970], "appli": 147, "librari": 147, "mechan": 147, "faq": 148, "maintain": 148, "version": 148, "dynam": 148, "size": 148, "shape": [148, 651, 906, 907, 908, 912, 914], "check": 148, "control": 148, "flow": 148, "auto": 148, "differenti": 148, "replica": 148, "parallel": 148, "support": 148, "altern": 148, "structur": 148, "func": 149, "wrapper": 149, "handle_nest": 150, "handle_out_argu": 151, "infer_devic": 152, "infer_dtyp": 153, "inputs_to_ivy_arrai": 154, "inputs_to_native_arrai": 155, "outputs_to_ivy_arrai": 156, "to_native_arrays_and_back": 157, "gelu": [160, 161, 162, 163, 980], "static_gelu": 164, "leaky_relu": [165, 166, 167, 168], "static_leaky_relu": 169, "relu": [170, 171, 172, 173], "static_relu": 174, "sigmoid": [175, 176, 177, 178], "static_sigmoid": 179, "softmax": [180, 181, 182, 183], "static_softmax": 184, "softplu": [185, 186, 187], "static_softplu": 188, "tanh": [189, 191, 192, 193, 584], "static_tanh": 190, "constant": 196, "note": [197, 215, 218], "arang": [198, 199], "static_arang": 200, "asarrai": [201, 202, 203, 204], "static_asarrai": 205, "empti": 206, "empty_lik": [207, 208, 209, 210], "static_empty_lik": 211, "ey": [212, 213], "static_ey": 214, "from_dlpack": [215, 216, 217, 218], "static_from_dlpack": 219, "full": 220, "full_lik": [221, 222, 223, 224], "static_full_lik": 225, "linspac": [226, 227], "static_linspac": 228, "logspac": [229, 230], "static_logspac": 231, "meshgrid": [232, 233, 234, 235], "static_meshgrid": 236, "native_arrai": [237, 238, 239, 240], "static_native_arrai": 241, "ones": [242, 243], "static_on": 244, "ones_lik": [245, 246, 247, 248], "static_ones_lik": 249, "tril": [250, 252, 253, 254], "static_tril": 251, "triu": [255, 257, 258, 259], "static_triu": 256, "zero": [260, 262, 991], "static_zero": 261, "zeros_lik": [263, 265, 266, 267], "static_zeros_lik": 264, "as_ivy_dtyp": 272, "as_native_dtyp": 273, "astyp": 274, "broadcast_arrai": 275, "broadcast_to": 276, "can_cast": [277, 278, 279, 280], "static_can_cast": 281, "closest_valid_dtyp": 282, "default_dtyp": 283, "default_float_dtyp": 284, "default_int_dtyp": 285, "dtype_bit": 287, "finfo": 288, "function_supported_dtyp": 289, "function_unsupported_dtyp": 290, "iinfo": 291, "invalid_dtyp": 292, "is_float_dtyp": 293, "is_int_dtyp": 294, "promote_typ": 295, "result_typ": 296, "set_default_dtyp": 297, "set_default_float_dtyp": 298, "set_default_int_dtyp": 299, "type_promote_arrai": 300, "unset_default_dtyp": 301, "unset_default_float_dtyp": 302, "unset_default_int_dtyp": 303, "valid_dtyp": 304, "devcloneditem": 307, "devclonedit": 308, "devclonednest": 309, "devdistitem": 310, "devdistit": 311, "devdistnest": 312, "devmapp": 314, "devmappermultiproc": 315, "multidevitem": 317, "multidevit": 318, "multidevnest": 319, "profil": 320, "as_ivy_dev": 321, "as_native_dev": 322, "clear_mem_on_dev": 323, "default_devic": 324, "dev": 325, "dev_clon": 326, "dev_clone_arrai": 327, "dev_clone_it": 328, "dev_clone_nest": 329, "dev_dist": 330, "dev_dist_arrai": 331, "dev_dist_it": 332, "dev_dist_nest": 333, "dev_unifi": 334, "dev_unify_arrai": 335, "dev_unify_it": 336, "dev_unify_nest": 337, "dev_util": 338, "get_all_ivy_arrays_on_dev": 339, "gpu_is_avail": 340, "num_cpu_cor": 341, "num_gpu": 342, "num_ivy_arrays_on_dev": 343, "percent_used_mem_on_dev": 344, "print_all_ivy_arrays_on_dev": 345, "set_default_devic": 346, "set_split_factor": 347, "split_factor": 348, "split_func_cal": 349, "to_devic": 350, "total_mem_on_dev": 351, "tpu_is_avail": 352, "unset_default_devic": 353, "used_mem_on_dev": 354, "ab": [356, 357, 358, 359], "static_ab": 360, "aco": [361, 362, 363, 364], "acosh": [365, 366, 367, 368], "static_add": 373, "asin": [374, 375, 376, 377], "asinh": [378, 379, 380, 381], "atan": [382, 383, 384, 385], "atan2": [386, 387, 388, 389], "atanh": [390, 391, 392, 393], "bitwise_and": [394, 395, 396, 397], "bitwise_invert": [398, 399, 400, 401], "bitwise_left_shift": [402, 403, 404, 405], "bitwise_or": [406, 407, 408, 409], "bitwise_right_shift": [410, 411, 412, 413], "bitwise_xor": [414, 415, 416, 417], "ceil": [418, 419, 420, 421], "co": [422, 423, 424, 425], "cosh": [426, 427, 428, 429], "divid": [430, 431, 432, 433], "static_divid": 434, "equal": [435, 436, 437, 438], "erf": [439, 440, 441, 442], "exp": [443, 444, 445, 446], "expm1": [447, 448, 449, 450], "floor": [451, 452, 453, 454], "floor_divid": [455, 456, 457, 458], "greater": [459, 460, 461, 462], "greater_equ": [463, 464, 465, 466], "isfinit": [467, 468, 469, 470], "isinf": [471, 472, 473, 474], "isnan": [475, 476, 477, 478], "less": [479, 480, 481, 482], "less_equ": [483, 484, 485, 486], "log": [487, 488, 489, 490], "log10": [491, 492, 493, 494], "log1p": [495, 496, 497, 498], "log2": [499, 500, 501, 502], "logaddexp": [503, 504, 505, 506], "logical_and": [507, 508, 509, 510], "logical_not": [511, 512, 513, 514], "logical_or": [515, 516, 517, 518], "logical_xor": [519, 520, 521, 522], "maximum": 523, "minimum": 524, "multipli": [525, 526, 527, 528], "static_multipli": 529, "neg": [530, 531, 532, 533], "not_equ": [534, 535, 536, 537], "posit": [538, 539, 540, 541], "pow": [542, 543, 544, 545], "remaind": [546, 547, 548, 549], "round": [550, 551, 552, 553], "sign": [554, 555, 556, 557], "sin": [558, 559, 560, 561], "sinh": [562, 563, 564, 565], "sqrt": [566, 567, 568, 569], "squar": [570, 571, 572, 573], "subtract": [574, 576, 577, 578], "static_subtract": 575, "static_tan": 580, "trunc": [585, 586, 587, 588], "all_equ": [590, 591, 592, 593], "static_all_equ": 594, "arg_info": 595, "arg_nam": 596, "array_equ": 597, "arrays_equ": 598, "assert_supports_inplac": 599, "cache_fn": 600, "clip_matrix_norm": 601, "clip_vector_norm": [602, 603, 604], "container_typ": 605, "copy_arrai": 606, "cumprod": 607, "cumsum": 608, "current_backend_str": 609, "default": 610, "einops_rearrang": 611, "einops_reduc": 612, "einops_repeat": 613, "exist": 614, "floormod": 615, "fourier_encod": 616, "gather": 617, "gather_nd": [618, 619, 620, 621], "static_gather_nd": 622, "get_all_arrays_in_memori": 623, "get_min_bas": 624, "get_min_denomin": 625, "get_num_dim": 626, "get_referrers_recurs": 627, "has_nan": 628, "indices_wher": 629, "inplace_arrays_support": 630, "inplace_decr": 631, "inplace_incr": 632, "inplace_upd": 633, "inplace_variables_support": 634, "is_arrai": 635, "is_ivy_arrai": 636, "is_ivy_contain": 637, "is_native_arrai": 638, "match_kwarg": 639, "multiprocess": 640, "num_arrays_in_memori": 641, "one_hot": 642, "print_all_arrays_in_memori": 643, "queue_timeout": 644, "scatter_flat": 645, "scatter_nd": 646, "set_min_bas": 647, "set_min_denomin": 648, "set_queue_timeout": 649, "set_tmp_dir": 650, "shape_to_tupl": 652, "stable_divid": 653, "stable_pow": 654, "supports_inplac": 655, "tmp_dir": 656, "to_list": 657, "to_numpi": 658, "to_scalar": 659, "try_else_non": 660, "unstack": 661, "value_is_nan": 662, "adam_step": [665, 666, 667, 668], "static_adam_step": 669, "adam_upd": [670, 671, 672], "static_adam_upd": 673, "execute_with_gradi": 674, "gradient_descent_upd": [675, 676, 677], "static_gradient_descent_upd": 678, "is_vari": [679, 680, 681], "static_is_vari": 682, "lamb_upd": [683, 684, 685], "static_lamb_upd": 686, "lars_upd": [687, 688, 689], "static_lars_upd": 690, "optimizer_upd": [691, 692, 693], "static_optimizer_upd": 694, "set_with_grad": 695, "stop_gradi": 696, "unset_with_grad": 697, "variabl": 698, "variable_data": 699, "with_grad": 700, "conv1d": [702, 993], "conv1d_transpos": 703, "conv2d": [704, 995], "conv2d_transpos": 705, "conv3d": [706, 997], "conv3d_transpos": 707, "depthwise_conv2d": 708, "dropout": [709, 1000], "lstm_updat": 711, "multi_head_attent": 712, "scaled_dot_product_attent": 713, "choleski": [715, 716, 717, 718], "static_choleski": 719, "cross": [720, 721, 722], "det": [723, 724, 725], "diagon": [726, 727, 728], "eigh": [729, 730, 731], "eigvalsh": [732, 733, 734], "inv": [735, 736, 737], "matmul": [738, 739, 740, 741], "matrix_norm": [742, 743, 744], "matrix_pow": 745, "matrix_rank": [746, 747, 748], "matrix_transpos": [749, 750, 751], "outer": [752, 753, 754], "pinv": [755, 756, 757], "qr": [758, 759, 760], "slogdet": 761, "solv": [762, 763, 764], "svd": [765, 766, 767], "svdval": [768, 769, 770], "tensordot": [771, 772, 773], "trace": [774, 775, 776], "vecdot": [777, 778, 779], "vector_norm": [780, 781, 782], "vector_to_skew_symmetric_matrix": [783, 784, 785], "binary_cross_entropi": [787, 788, 789, 790], "static_binary_cross_entropi": 791, "cross_entropi": [792, 793, 794, 795], "static_cross_entropi": 796, "sparse_cross_entropi": [797, 798, 799, 800], "static_sparse_cross_entropi": 801, "clip": [803, 804, 805, 806], "static_clip": 807, "concat": [808, 809, 810, 811], "constant_pad": [812, 813, 814, 815], "expand_dim": [816, 817, 818, 819], "flip": [820, 821, 822, 823], "permute_dim": [824, 825, 826, 827], "repeat": [828, 829, 830, 831], "reshap": [832, 833, 834, 835], "static_rol": 840, "split": 841, "squeez": [842, 843, 844, 845], "stack": [846, 847, 848, 849], "swapax": [850, 851, 852, 853], "tile": [854, 855, 856, 857], "zero_pad": [858, 859, 860, 861], "meta": 862, "fomaml_step": 863, "maml_step": 864, "reptile_step": 865, "nest": 866, "all_nested_indic": 867, "copy_nest": 868, "index_nest": 869, "insert_into_nest_at_index": 870, "insert_into_nest_at_indic": 871, "map": 872, "map_nest_at_index": 873, "map_nest_at_indic": 874, "multi_index_nest": 875, "nested_ani": 876, "nested_indices_wher": 877, "nested_map": 878, "nested_multi_map": 879, "prune_nest_at_index": 880, "prune_nest_at_indic": 881, "set_nest_at_index": 882, "set_nest_at_indic": 883, "layer_norm": [885, 886, 887, 888], "multinomi": 890, "randint": [891, 892], "static_randint": 893, "random_norm": 894, "random_uniform": [895, 896, 897], "static_random_uniform": 898, "seed": 899, "shuffl": 900, "argmax": 902, "argmin": 903, "nonzero": 904, "where": 905, "depend": [906, 907, 908, 912, 914], "output": [906, 907, 908, 912, 914], "unique_al": 907, "unique_count": [908, 910, 911, 912], "static_unique_count": 909, "unique_invers": 913, "unique_valu": 914, "argsort": [916, 917, 918, 919], "static_argsort": 920, "static_sort": 925, "einsum": [927, 928, 929, 930], "max": [931, 932, 933, 934], "mean": [935, 936, 937, 938], "min": [939, 940, 941, 942], "prod": [943, 944, 945, 946], "std": [947, 948, 949, 950], "sum": [951, 952, 953, 954], "var": [955, 956, 957, 958], "all": [960, 961, 962, 963], "static_al": 964, "ani": [965, 966, 967, 968], "static_ani": 969, "content": 970, "overview": 970, "quick": 970, "start": 970, "roadmap": [970, 976], "citat": 970, "inspect": 973, "add_array_spec": 974, "fn_array_spec": 975, "geglu": 979, "to_ivy_modul": 982, "firstlayersiren": 985, "glorotuniform": 986, "Ones": 988, "siren": 989, "conv1dtranspos": 994, "conv2dtranspos": 996, "conv3dtranspos": 998, "depthwiseconv2d": 999, "lstm": 1001, "multiheadattent": 1003, "layernorm": 1007, "adam": 1009, "lamb": 1010, "lar": 1011, "sgd": 1013, "sequenti": [1014, 1015], "verbos": 1017, "cprint": 1018}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})