Search.setIndex({"docnames": ["array/activations", "array/activations/ArrayWithActivations", "array/array_methods", "array/array_methods/abs", "array/array_methods/acos", "array/array_methods/acosh", "array/array_methods/adam_step", "array/array_methods/add", "array/array_methods/add_ivy_array_instance_methods", "array/array_methods/all", "array/array_methods/all_equal", "array/array_methods/any", "array/array_methods/argsort", "array/array_methods/asin", "array/array_methods/asinh", "array/array_methods/atan", "array/array_methods/atan2", "array/array_methods/atanh", "array/array_methods/binary_cross_entropy", "array/array_methods/bitwise_and", "array/array_methods/bitwise_invert", "array/array_methods/bitwise_left_shift", "array/array_methods/bitwise_or", "array/array_methods/bitwise_right_shift", "array/array_methods/bitwise_xor", "array/array_methods/can_cast", "array/array_methods/ceil", "array/array_methods/cholesky", "array/array_methods/clip", "array/array_methods/concat", "array/array_methods/constant_pad", "array/array_methods/cos", "array/array_methods/cosh", "array/array_methods/cross", "array/array_methods/cross_entropy", "array/array_methods/det", "array/array_methods/diagonal", "array/array_methods/divide", "array/array_methods/eigh", "array/array_methods/eigvalsh", "array/array_methods/einsum", "array/array_methods/equal", "array/array_methods/erf", "array/array_methods/exp", "array/array_methods/expand_dims", "array/array_methods/expm1", "array/array_methods/flip", "array/array_methods/floor", "array/array_methods/floor_divide", "array/array_methods/gather_nd", "array/array_methods/gelu", "array/array_methods/greater", "array/array_methods/greater_equal", "array/array_methods/inv", "array/array_methods/isfinite", "array/array_methods/isinf", "array/array_methods/isnan", "array/array_methods/layer_norm", "array/array_methods/leaky_relu", "array/array_methods/less", "array/array_methods/less_equal", "array/array_methods/log", "array/array_methods/log10", "array/array_methods/log1p", "array/array_methods/log2", "array/array_methods/logaddexp", "array/array_methods/logical_and", "array/array_methods/logical_not", "array/array_methods/logical_or", "array/array_methods/logical_xor", "array/array_methods/matmul", "array/array_methods/matrix_norm", "array/array_methods/matrix_rank", "array/array_methods/matrix_transpose", "array/array_methods/max", "array/array_methods/mean", "array/array_methods/min", "array/array_methods/multiply", "array/array_methods/negative", "array/array_methods/not_equal", "array/array_methods/outer", "array/array_methods/permute_dims", "array/array_methods/pinv", "array/array_methods/positive", "array/array_methods/pow", "array/array_methods/prod", "array/array_methods/qr", "array/array_methods/relu", "array/array_methods/remainder", "array/array_methods/repeat", "array/array_methods/reshape", "array/array_methods/roll", "array/array_methods/round", "array/array_methods/sigmoid", "array/array_methods/sign", "array/array_methods/sin", "array/array_methods/sinh", "array/array_methods/softmax", "array/array_methods/solve", "array/array_methods/sort", "array/array_methods/sparse_cross_entropy", "array/array_methods/sqrt", "array/array_methods/square", "array/array_methods/squeeze", "array/array_methods/stack", "array/array_methods/std", "array/array_methods/subtract", "array/array_methods/sum", "array/array_methods/svd", "array/array_methods/svdvals", "array/array_methods/swapaxes", "array/array_methods/tan", "array/array_methods/tanh", "array/array_methods/tensordot", "array/array_methods/tile", "array/array_methods/trace", "array/array_methods/trunc", "array/array_methods/var", "array/array_methods/vecdot", "array/array_methods/vector_norm", "array/array_methods/vector_to_skew_symmetric_matrix", "array/array_methods/zero_pad", "array/conversions", "array/conversions/args_to_ivy", "array/conversions/args_to_native", "array/conversions/to_ivy", "array/conversions/to_native", "array/creation", "array/creation/ArrayWithCreation", "array/data_type", "array/data_type/ArrayWithDataTypes", "array/device", "array/device/ArrayWithDevice", "array/elementwise", "array/elementwise/ArrayWithElementwise", "array/general", "array/general/ArrayWithGeneral", "array/gradients", "array/gradients/ArrayWithGradients", "array/image", "array/image/ArrayWithImage", "array/layers", "array/layers/ArrayWithLayers", "array/linear_algebra", "array/linear_algebra/ArrayWithLinearAlgebra", "array/losses", "array/losses/ArrayWithLosses", "array/manipulation", "array/manipulation/ArrayWithManipulation", "array/norms", "array/norms/ArrayWithNorms", "array/random", "array/random/ArrayWithRandom", "array/searching", "array/searching/ArrayWithSearching", "array/set", "array/set/ArrayWithSet", "array/sorting", "array/sorting/ArrayWithSorting", "array/statistical", "array/statistical/ArrayWithStatistical", "array/utility", "array/utility/ArrayWithUtility", "array/wrapping", "array/wrapping/add_ivy_array_instance_methods", "backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "container/activations", "container/activations/ContainerWithActivations", "container/base", "container/base/ContainerBase", "container/container", "container/container/Container", "container/container/MultiDevContainer", "container/container_methods", "container/container_methods/abs", "container/container_methods/acos", "container/container_methods/acosh", "container/container_methods/adam_step", "container/container_methods/adam_update", "container/container_methods/add", "container/container_methods/add_ivy_container_instance_methods", "container/container_methods/all", "container/container_methods/all_equal", "container/container_methods/any", "container/container_methods/argsort", "container/container_methods/asin", "container/container_methods/asinh", "container/container_methods/at_dev", "container/container_methods/at_devs", "container/container_methods/atan", "container/container_methods/atan2", "container/container_methods/atanh", "container/container_methods/binary_cross_entropy", "container/container_methods/bitwise_and", "container/container_methods/bitwise_invert", "container/container_methods/bitwise_left_shift", "container/container_methods/bitwise_or", "container/container_methods/bitwise_right_shift", "container/container_methods/bitwise_xor", "container/container_methods/can_cast", "container/container_methods/ceil", "container/container_methods/clip", "container/container_methods/clip_vector_norm", "container/container_methods/concat", "container/container_methods/constant_pad", "container/container_methods/cos", "container/container_methods/cosh", "container/container_methods/cross_entropy", "container/container_methods/divide", "container/container_methods/einsum", "container/container_methods/equal", "container/container_methods/erf", "container/container_methods/exp", "container/container_methods/expand_dims", "container/container_methods/expm1", "container/container_methods/flip", "container/container_methods/floor", "container/container_methods/floor_divide", "container/container_methods/gather_nd", "container/container_methods/gelu", "container/container_methods/gradient_descent_update", "container/container_methods/greater", "container/container_methods/greater_equal", "container/container_methods/isfinite", "container/container_methods/isinf", "container/container_methods/isnan", "container/container_methods/lamb_update", "container/container_methods/lars_update", "container/container_methods/layer_norm", "container/container_methods/leaky_relu", "container/container_methods/less", "container/container_methods/less_equal", "container/container_methods/log", "container/container_methods/log10", "container/container_methods/log1p", "container/container_methods/log2", "container/container_methods/logaddexp", "container/container_methods/logical_and", "container/container_methods/logical_not", "container/container_methods/logical_or", "container/container_methods/logical_xor", "container/container_methods/matmul", "container/container_methods/max", "container/container_methods/mean", "container/container_methods/min", "container/container_methods/multiply", "container/container_methods/negative", "container/container_methods/not_equal", "container/container_methods/optimizer_update", "container/container_methods/permute_dims", "container/container_methods/positive", "container/container_methods/pow", "container/container_methods/prod", "container/container_methods/random_uniform", "container/container_methods/relu", "container/container_methods/remainder", "container/container_methods/repeat", "container/container_methods/reshape", "container/container_methods/roll", "container/container_methods/round", "container/container_methods/sigmoid", "container/container_methods/sign", "container/container_methods/sin", "container/container_methods/sinh", "container/container_methods/softmax", "container/container_methods/softplus", "container/container_methods/sort", "container/container_methods/sparse_cross_entropy", "container/container_methods/sqrt", "container/container_methods/square", "container/container_methods/squeeze", "container/container_methods/stack", "container/container_methods/static_abs", "container/container_methods/static_adam_step", "container/container_methods/static_adam_update", "container/container_methods/static_add", "container/container_methods/static_all_equal", "container/container_methods/static_argsort", "container/container_methods/static_binary_cross_entropy", "container/container_methods/static_can_cast", "container/container_methods/static_clip", "container/container_methods/static_cross_entropy", "container/container_methods/static_divide", "container/container_methods/static_gather_nd", "container/container_methods/static_gradient_descent_update", "container/container_methods/static_lamb_update", "container/container_methods/static_lars_update", "container/container_methods/static_multiply", "container/container_methods/static_optimizer_update", "container/container_methods/static_randint", "container/container_methods/static_random_uniform", "container/container_methods/static_roll", "container/container_methods/static_sort", "container/container_methods/static_sparse_cross_entropy", "container/container_methods/static_subtract", "container/container_methods/static_tan", "container/container_methods/static_tanh", "container/container_methods/std", "container/container_methods/subtract", "container/container_methods/sum", "container/container_methods/swapaxes", "container/container_methods/tan", "container/container_methods/tanh", "container/container_methods/tile", "container/container_methods/trunc", "container/container_methods/var", "container/container_methods/zero_pad", "container/creation", "container/creation/ContainerWithCreation", "container/data_type", "container/data_type/ContainerWithDataTypes", "container/device", "container/device/ContainerWithDevice", "container/elementwise", "container/elementwise/ContainerWithElementwise", "container/general", "container/general/ContainerWithGeneral", "container/gradients", "container/gradients/ContainerWithGradients", "container/image", "container/image/ContainerWithImage", "container/layers", "container/layers/ContainerWithLayers", "container/linear_algebra", "container/linear_algebra/ContainerWithLinearAlgebra", "container/losses", "container/losses/ContainerWithLosses", "container/manipulation", "container/manipulation/ContainerWithManipulation", "container/norms", "container/norms/ContainerWithNorms", "container/random", "container/random/ContainerWithRandom", "container/searching", "container/searching/ContainerWithSearching", "container/set", "container/set/ContainerWithSet", "container/sorting", "container/sorting/ContainerWithSorting", "container/statistical", "container/statistical/ContainerWithStatistical", "container/utility", "container/utility/ContainerWithUtility", "container/wrapping", "container/wrapping/add_ivy_container_instance_methods", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/gelu/gelu_array", "functional/ivy/activations/gelu/gelu_container", "functional/ivy/activations/gelu/gelu_functional", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/leaky_relu/leaky_relu_array", "functional/ivy/activations/leaky_relu/leaky_relu_container", "functional/ivy/activations/leaky_relu/leaky_relu_functional", "functional/ivy/activations/relu", "functional/ivy/activations/relu/relu_array", "functional/ivy/activations/relu/relu_container", "functional/ivy/activations/relu/relu_functional", "functional/ivy/activations/sigmoid", "functional/ivy/activations/sigmoid/sigmoid_array", "functional/ivy/activations/sigmoid/sigmoid_container", "functional/ivy/activations/sigmoid/sigmoid_functional", "functional/ivy/activations/softmax", "functional/ivy/activations/softmax/softmax_array", "functional/ivy/activations/softmax/softmax_container", "functional/ivy/activations/softmax/softmax_functional", "functional/ivy/activations/softplus", "functional/ivy/activations/softplus/softplus_container", "functional/ivy/activations/softplus/softplus_functional", "functional/ivy/activations/tanh", "functional/ivy/activations/tanh/tanh_array", "functional/ivy/activations/tanh/tanh_container", "functional/ivy/activations/tanh/tanh_functional", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/native_array", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/tril", "functional/ivy/creation/triu", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/abs/static_abs_container", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_step/static_adam_step_container", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["array/activations.rst", "array/activations/ArrayWithActivations.rst", "array/array_methods.rst", "array/array_methods/abs.rst", "array/array_methods/acos.rst", "array/array_methods/acosh.rst", "array/array_methods/adam_step.rst", "array/array_methods/add.rst", "array/array_methods/add_ivy_array_instance_methods.rst", "array/array_methods/all.rst", "array/array_methods/all_equal.rst", "array/array_methods/any.rst", "array/array_methods/argsort.rst", "array/array_methods/asin.rst", "array/array_methods/asinh.rst", "array/array_methods/atan.rst", "array/array_methods/atan2.rst", "array/array_methods/atanh.rst", "array/array_methods/binary_cross_entropy.rst", "array/array_methods/bitwise_and.rst", "array/array_methods/bitwise_invert.rst", "array/array_methods/bitwise_left_shift.rst", "array/array_methods/bitwise_or.rst", "array/array_methods/bitwise_right_shift.rst", "array/array_methods/bitwise_xor.rst", "array/array_methods/can_cast.rst", "array/array_methods/ceil.rst", "array/array_methods/cholesky.rst", "array/array_methods/clip.rst", "array/array_methods/concat.rst", "array/array_methods/constant_pad.rst", "array/array_methods/cos.rst", "array/array_methods/cosh.rst", "array/array_methods/cross.rst", "array/array_methods/cross_entropy.rst", "array/array_methods/det.rst", "array/array_methods/diagonal.rst", "array/array_methods/divide.rst", "array/array_methods/eigh.rst", "array/array_methods/eigvalsh.rst", "array/array_methods/einsum.rst", "array/array_methods/equal.rst", "array/array_methods/erf.rst", "array/array_methods/exp.rst", "array/array_methods/expand_dims.rst", "array/array_methods/expm1.rst", "array/array_methods/flip.rst", "array/array_methods/floor.rst", "array/array_methods/floor_divide.rst", "array/array_methods/gather_nd.rst", "array/array_methods/gelu.rst", "array/array_methods/greater.rst", "array/array_methods/greater_equal.rst", "array/array_methods/inv.rst", "array/array_methods/isfinite.rst", "array/array_methods/isinf.rst", "array/array_methods/isnan.rst", "array/array_methods/layer_norm.rst", "array/array_methods/leaky_relu.rst", "array/array_methods/less.rst", "array/array_methods/less_equal.rst", "array/array_methods/log.rst", "array/array_methods/log10.rst", "array/array_methods/log1p.rst", "array/array_methods/log2.rst", "array/array_methods/logaddexp.rst", "array/array_methods/logical_and.rst", "array/array_methods/logical_not.rst", "array/array_methods/logical_or.rst", "array/array_methods/logical_xor.rst", "array/array_methods/matmul.rst", "array/array_methods/matrix_norm.rst", "array/array_methods/matrix_rank.rst", "array/array_methods/matrix_transpose.rst", "array/array_methods/max.rst", "array/array_methods/mean.rst", "array/array_methods/min.rst", "array/array_methods/multiply.rst", "array/array_methods/negative.rst", "array/array_methods/not_equal.rst", "array/array_methods/outer.rst", "array/array_methods/permute_dims.rst", "array/array_methods/pinv.rst", "array/array_methods/positive.rst", "array/array_methods/pow.rst", "array/array_methods/prod.rst", "array/array_methods/qr.rst", "array/array_methods/relu.rst", "array/array_methods/remainder.rst", "array/array_methods/repeat.rst", "array/array_methods/reshape.rst", "array/array_methods/roll.rst", "array/array_methods/round.rst", "array/array_methods/sigmoid.rst", "array/array_methods/sign.rst", "array/array_methods/sin.rst", "array/array_methods/sinh.rst", "array/array_methods/softmax.rst", "array/array_methods/solve.rst", "array/array_methods/sort.rst", "array/array_methods/sparse_cross_entropy.rst", "array/array_methods/sqrt.rst", "array/array_methods/square.rst", "array/array_methods/squeeze.rst", "array/array_methods/stack.rst", "array/array_methods/std.rst", "array/array_methods/subtract.rst", "array/array_methods/sum.rst", "array/array_methods/svd.rst", "array/array_methods/svdvals.rst", "array/array_methods/swapaxes.rst", "array/array_methods/tan.rst", "array/array_methods/tanh.rst", "array/array_methods/tensordot.rst", "array/array_methods/tile.rst", "array/array_methods/trace.rst", "array/array_methods/trunc.rst", "array/array_methods/var.rst", "array/array_methods/vecdot.rst", "array/array_methods/vector_norm.rst", "array/array_methods/vector_to_skew_symmetric_matrix.rst", "array/array_methods/zero_pad.rst", "array/conversions.rst", "array/conversions/args_to_ivy.rst", "array/conversions/args_to_native.rst", "array/conversions/to_ivy.rst", "array/conversions/to_native.rst", "array/creation.rst", "array/creation/ArrayWithCreation.rst", "array/data_type.rst", "array/data_type/ArrayWithDataTypes.rst", "array/device.rst", "array/device/ArrayWithDevice.rst", "array/elementwise.rst", "array/elementwise/ArrayWithElementwise.rst", "array/general.rst", "array/general/ArrayWithGeneral.rst", "array/gradients.rst", "array/gradients/ArrayWithGradients.rst", "array/image.rst", "array/image/ArrayWithImage.rst", "array/layers.rst", "array/layers/ArrayWithLayers.rst", "array/linear_algebra.rst", "array/linear_algebra/ArrayWithLinearAlgebra.rst", "array/losses.rst", "array/losses/ArrayWithLosses.rst", "array/manipulation.rst", "array/manipulation/ArrayWithManipulation.rst", "array/norms.rst", "array/norms/ArrayWithNorms.rst", "array/random.rst", "array/random/ArrayWithRandom.rst", "array/searching.rst", "array/searching/ArrayWithSearching.rst", "array/set.rst", "array/set/ArrayWithSet.rst", "array/sorting.rst", "array/sorting/ArrayWithSorting.rst", "array/statistical.rst", "array/statistical/ArrayWithStatistical.rst", "array/utility.rst", "array/utility/ArrayWithUtility.rst", "array/wrapping.rst", "array/wrapping/add_ivy_array_instance_methods.rst", "backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "container/activations.rst", "container/activations/ContainerWithActivations.rst", "container/base.rst", "container/base/ContainerBase.rst", "container/container.rst", "container/container/Container.rst", "container/container/MultiDevContainer.rst", "container/container_methods.rst", "container/container_methods/abs.rst", "container/container_methods/acos.rst", "container/container_methods/acosh.rst", "container/container_methods/adam_step.rst", "container/container_methods/adam_update.rst", "container/container_methods/add.rst", "container/container_methods/add_ivy_container_instance_methods.rst", "container/container_methods/all.rst", "container/container_methods/all_equal.rst", "container/container_methods/any.rst", "container/container_methods/argsort.rst", "container/container_methods/asin.rst", "container/container_methods/asinh.rst", "container/container_methods/at_dev.rst", "container/container_methods/at_devs.rst", "container/container_methods/atan.rst", "container/container_methods/atan2.rst", "container/container_methods/atanh.rst", "container/container_methods/binary_cross_entropy.rst", "container/container_methods/bitwise_and.rst", "container/container_methods/bitwise_invert.rst", "container/container_methods/bitwise_left_shift.rst", "container/container_methods/bitwise_or.rst", "container/container_methods/bitwise_right_shift.rst", "container/container_methods/bitwise_xor.rst", "container/container_methods/can_cast.rst", "container/container_methods/ceil.rst", "container/container_methods/clip.rst", "container/container_methods/clip_vector_norm.rst", "container/container_methods/concat.rst", "container/container_methods/constant_pad.rst", "container/container_methods/cos.rst", "container/container_methods/cosh.rst", "container/container_methods/cross_entropy.rst", "container/container_methods/divide.rst", "container/container_methods/einsum.rst", "container/container_methods/equal.rst", "container/container_methods/erf.rst", "container/container_methods/exp.rst", "container/container_methods/expand_dims.rst", "container/container_methods/expm1.rst", "container/container_methods/flip.rst", "container/container_methods/floor.rst", "container/container_methods/floor_divide.rst", "container/container_methods/gather_nd.rst", "container/container_methods/gelu.rst", "container/container_methods/gradient_descent_update.rst", "container/container_methods/greater.rst", "container/container_methods/greater_equal.rst", "container/container_methods/isfinite.rst", "container/container_methods/isinf.rst", "container/container_methods/isnan.rst", "container/container_methods/lamb_update.rst", "container/container_methods/lars_update.rst", "container/container_methods/layer_norm.rst", "container/container_methods/leaky_relu.rst", "container/container_methods/less.rst", "container/container_methods/less_equal.rst", "container/container_methods/log.rst", "container/container_methods/log10.rst", "container/container_methods/log1p.rst", "container/container_methods/log2.rst", "container/container_methods/logaddexp.rst", "container/container_methods/logical_and.rst", "container/container_methods/logical_not.rst", "container/container_methods/logical_or.rst", "container/container_methods/logical_xor.rst", "container/container_methods/matmul.rst", "container/container_methods/max.rst", "container/container_methods/mean.rst", "container/container_methods/min.rst", "container/container_methods/multiply.rst", "container/container_methods/negative.rst", "container/container_methods/not_equal.rst", "container/container_methods/optimizer_update.rst", "container/container_methods/permute_dims.rst", "container/container_methods/positive.rst", "container/container_methods/pow.rst", "container/container_methods/prod.rst", "container/container_methods/random_uniform.rst", "container/container_methods/relu.rst", "container/container_methods/remainder.rst", "container/container_methods/repeat.rst", "container/container_methods/reshape.rst", "container/container_methods/roll.rst", "container/container_methods/round.rst", "container/container_methods/sigmoid.rst", "container/container_methods/sign.rst", "container/container_methods/sin.rst", "container/container_methods/sinh.rst", "container/container_methods/softmax.rst", "container/container_methods/softplus.rst", "container/container_methods/sort.rst", "container/container_methods/sparse_cross_entropy.rst", "container/container_methods/sqrt.rst", "container/container_methods/square.rst", "container/container_methods/squeeze.rst", "container/container_methods/stack.rst", "container/container_methods/static_abs.rst", "container/container_methods/static_adam_step.rst", "container/container_methods/static_adam_update.rst", "container/container_methods/static_add.rst", "container/container_methods/static_all_equal.rst", "container/container_methods/static_argsort.rst", "container/container_methods/static_binary_cross_entropy.rst", "container/container_methods/static_can_cast.rst", "container/container_methods/static_clip.rst", "container/container_methods/static_cross_entropy.rst", "container/container_methods/static_divide.rst", "container/container_methods/static_gather_nd.rst", "container/container_methods/static_gradient_descent_update.rst", "container/container_methods/static_lamb_update.rst", "container/container_methods/static_lars_update.rst", "container/container_methods/static_multiply.rst", "container/container_methods/static_optimizer_update.rst", "container/container_methods/static_randint.rst", "container/container_methods/static_random_uniform.rst", "container/container_methods/static_roll.rst", "container/container_methods/static_sort.rst", "container/container_methods/static_sparse_cross_entropy.rst", "container/container_methods/static_subtract.rst", "container/container_methods/static_tan.rst", "container/container_methods/static_tanh.rst", "container/container_methods/std.rst", "container/container_methods/subtract.rst", "container/container_methods/sum.rst", "container/container_methods/swapaxes.rst", "container/container_methods/tan.rst", "container/container_methods/tanh.rst", "container/container_methods/tile.rst", "container/container_methods/trunc.rst", "container/container_methods/var.rst", "container/container_methods/zero_pad.rst", "container/creation.rst", "container/creation/ContainerWithCreation.rst", "container/data_type.rst", "container/data_type/ContainerWithDataTypes.rst", "container/device.rst", "container/device/ContainerWithDevice.rst", "container/elementwise.rst", "container/elementwise/ContainerWithElementwise.rst", "container/general.rst", "container/general/ContainerWithGeneral.rst", "container/gradients.rst", "container/gradients/ContainerWithGradients.rst", "container/image.rst", "container/image/ContainerWithImage.rst", "container/layers.rst", "container/layers/ContainerWithLayers.rst", "container/linear_algebra.rst", "container/linear_algebra/ContainerWithLinearAlgebra.rst", "container/losses.rst", "container/losses/ContainerWithLosses.rst", "container/manipulation.rst", "container/manipulation/ContainerWithManipulation.rst", "container/norms.rst", "container/norms/ContainerWithNorms.rst", "container/random.rst", "container/random/ContainerWithRandom.rst", "container/searching.rst", "container/searching/ContainerWithSearching.rst", "container/set.rst", "container/set/ContainerWithSet.rst", "container/sorting.rst", "container/sorting/ContainerWithSorting.rst", "container/statistical.rst", "container/statistical/ContainerWithStatistical.rst", "container/utility.rst", "container/utility/ContainerWithUtility.rst", "container/wrapping.rst", "container/wrapping/add_ivy_container_instance_methods.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/gelu/gelu_array.rst", "functional/ivy/activations/gelu/gelu_container.rst", "functional/ivy/activations/gelu/gelu_functional.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/leaky_relu/leaky_relu_array.rst", "functional/ivy/activations/leaky_relu/leaky_relu_container.rst", "functional/ivy/activations/leaky_relu/leaky_relu_functional.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/relu/relu_array.rst", "functional/ivy/activations/relu/relu_container.rst", "functional/ivy/activations/relu/relu_functional.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/sigmoid/sigmoid_array.rst", "functional/ivy/activations/sigmoid/sigmoid_container.rst", "functional/ivy/activations/sigmoid/sigmoid_functional.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softmax/softmax_array.rst", "functional/ivy/activations/softmax/softmax_container.rst", "functional/ivy/activations/softmax/softmax_functional.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/softplus/softplus_container.rst", "functional/ivy/activations/softplus/softplus_functional.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/activations/tanh/tanh_array.rst", "functional/ivy/activations/tanh/tanh_container.rst", "functional/ivy/activations/tanh/tanh_functional.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/abs/static_abs_container.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_step/static_adam_step_container.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Activations", "ArrayWithActivations", "Array methods", "abs array", "acos array", "acosh array", "adam_step array", "add array", "add_ivy_array_instance_methods array", "all array", "all_equal array", "any array", "argsort array", "asin array", "asinh array", "atan array", "atan2 array", "atanh array", "binary_cross_entropy array", "bitwise_and array", "bitwise_invert array", "bitwise_left_shift array", "bitwise_or array", "bitwise_right_shift array", "bitwise_xor array", "can_cast array", "ceil array", "cholesky array", "clip array", "concat array", "constant_pad array", "cos array", "cosh array", "cross array", "cross_entropy array", "det array", "diagonal array", "divide array", "eigh array", "eigvalsh array", "einsum array", "equal array", "erf array", "exp array", "expand_dims array", "expm1 array", "flip array", "floor array", "floor_divide array", "gather_nd array", "gelu array", "greater array", "greater_equal array", "inv array", "isfinite array", "isinf array", "isnan array", "layer_norm array", "leaky_relu array", "less array", "less_equal array", "log array", "log10 array", "log1p array", "log2 array", "logaddexp array", "logical_and array", "logical_not array", "logical_or array", "logical_xor array", "matmul array", "matrix_norm array", "matrix_rank array", "matrix_transpose array", "max array", "mean array", "min array", "multiply array", "negative array", "not_equal array", "outer array", "permute_dims array", "pinv array", "positive array", "pow array", "prod array", "qr array", "relu array", "remainder array", "repeat array", "reshape array", "roll array", "round array", "sigmoid array", "sign array", "sin array", "sinh array", "softmax array", "solve array", "sort array", "sparse_cross_entropy array", "sqrt array", "square array", "squeeze array", "stack array", "std array", "subtract array", "sum array", "svd array", "svdvals array", "swapaxes array", "tan array", "tanh array", "tensordot array", "tile array", "trace array", "trunc array", "var array", "vecdot array", "vector_norm array", "vector_to_skew_symmetric_matrix array", "zero_pad array", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Container methods", "abs container", "acos container", "acosh container", "adam_step container", "adam_update container", "add container", "add_ivy_container_instance_methods container", "all container", "all_equal container", "any container", "argsort container", "asin container", "asinh container", "at_dev container", "at_devs container", "atan container", "atan2 container", "atanh container", "binary_cross_entropy container", "bitwise_and container", "bitwise_invert container", "bitwise_left_shift container", "bitwise_or container", "bitwise_right_shift container", "bitwise_xor container", "can_cast container", "ceil container", "clip container", "clip_vector_norm container", "concat container", "constant_pad container", "cos container", "cosh container", "cross_entropy container", "divide container", "einsum container", "equal container", "erf container", "exp container", "expand_dims container", "expm1 container", "flip container", "floor container", "floor_divide container", "gather_nd container", "gelu container", "gradient_descent_update container", "greater container", "greater_equal container", "isfinite container", "isinf container", "isnan container", "lamb_update container", "lars_update container", "layer_norm container", "leaky_relu container", "less container", "less_equal container", "log container", "log10 container", "log1p container", "log2 container", "logaddexp container", "logical_and container", "logical_not container", "logical_or container", "logical_xor container", "matmul container", "max container", "mean container", "min container", "multiply container", "negative container", "not_equal container", "optimizer_update container", "permute_dims container", "positive container", "pow container", "prod container", "random_uniform container", "relu container", "remainder container", "repeat container", "reshape container", "roll container", "round container", "sigmoid container", "sign container", "sin container", "sinh container", "softmax container", "softplus container", "sort container", "sparse_cross_entropy container", "sqrt container", "square container", "squeeze container", "stack container", "static_abs container", "static_adam_step container", "static_adam_update container", "static_add container", "static_all_equal container", "static_argsort container", "static_binary_cross_entropy container", "static_can_cast container", "static_clip container", "static_cross_entropy container", "static_divide container", "static_gather_nd container", "static_gradient_descent_update container", "static_lamb_update container", "static_lars_update container", "static_multiply container", "static_optimizer_update container", "static_randint container", "static_random_uniform container", "static_roll container", "static_sort container", "static_sparse_cross_entropy container", "static_subtract container", "static_tan container", "static_tanh container", "std container", "subtract container", "sum container", "swapaxes container", "tan container", "tanh container", "tile container", "trunc container", "var container", "zero_pad container", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "ivy.Array.gelu", "ivy.Container.gelu", "ivy.gelu", "leaky_relu", "ivy.Array.leaky_relu", "ivy.Container.leaky_relu", "ivy.leaky_relu", "relu", "ivy.Array.relu", "ivy.Container.relu", "ivy.relu", "sigmoid", "ivy.Array.sigmoid", "ivy.Container.sigmoid", "ivy.sigmoid", "softmax", "ivy.Array.softmax", "ivy.Container.softmax", "ivy.softmax", "softplus", "ivy.Container.softplus", "ivy.softplus", "tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "ivy.Container.static_abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "ivy.Container.static_adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 1, 2, 8, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 171, 177, 182, 183, 184, 185, 186, 187, 188, 189, 193, 196, 289, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 365, 368, 369, 371, 375, 376, 377, 378, 380, 382, 383, 385, 386, 387, 397, 398, 399, 460, 483, 497, 499, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 512, 783, 790, 827, 833, 852, 857, 859, 861, 863, 890, 1055, 1057, 1067, 1090, 1093, 1153, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197], "ivi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 364, 365, 366, 368, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 415, 419, 423, 427, 431, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 465, 466, 467, 468, 469, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 557, 561, 566, 570, 574, 578, 582, 586, 590, 594, 598, 602, 606, 610, 614, 618, 622, 627, 631, 635, 639, 643, 647, 651, 655, 659, 663, 667, 671, 675, 679, 683, 687, 691, 695, 699, 703, 707, 711, 715, 716, 717, 722, 726, 730, 734, 738, 742, 746, 750, 754, 758, 762, 766, 771, 776, 779, 783, 784, 789, 790, 791, 792, 793, 794, 795, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 864, 868, 869, 873, 874, 878, 882, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 909, 912, 915, 918, 921, 924, 927, 931, 934, 935, 938, 941, 944, 947, 950, 951, 954, 957, 960, 963, 966, 969, 972, 975, 976, 981, 986, 991, 992, 997, 1001, 1005, 1009, 1013, 1017, 1021, 1025, 1030, 1031, 1035, 1039, 1043, 1047, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1078, 1079, 1080, 1083, 1084, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1106, 1111, 1112, 1116, 1120, 1124, 1128, 1132, 1136, 1140, 1144, 1145, 1149, 1153, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200], "arrai": [0, 1, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 169, 184, 185, 186, 187, 188, 189, 190, 193, 195, 198, 215, 216, 217, 232, 234, 274, 288, 289, 291, 292, 295, 296, 299, 305, 307, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 343, 344, 347, 348, 362, 363, 364, 366, 367, 368, 369, 371, 372, 373, 374, 376, 377, 378, 379, 381, 382, 383, 385, 386, 387, 399, 400, 408, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 466, 467, 468, 469, 471, 472, 473, 478, 480, 483, 485, 486, 488, 492, 497, 516, 517, 518, 519, 522, 523, 524, 525, 526, 527, 528, 529, 531, 535, 537, 541, 542, 547, 548, 550, 551, 552, 553, 556, 557, 560, 561, 563, 564, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 612, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 634, 635, 638, 639, 642, 643, 645, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 772, 774, 775, 776, 777, 778, 779, 782, 783, 784, 786, 787, 788, 791, 792, 793, 795, 796, 798, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 820, 822, 823, 824, 825, 826, 827, 829, 830, 832, 835, 836, 837, 839, 840, 845, 846, 849, 851, 852, 853, 855, 856, 857, 859, 861, 862, 863, 864, 866, 869, 871, 873, 874, 876, 878, 880, 882, 884, 887, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 930, 931, 933, 934, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 950, 951, 953, 954, 956, 957, 959, 960, 962, 963, 965, 966, 968, 969, 971, 972, 974, 975, 976, 979, 981, 984, 986, 989, 991, 992, 994, 995, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1067, 1068, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1153, 1156, 1158, 1174, 1182, 1185], "arraywithactiv": 0, "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 375, 376, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1156, 1157, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200], "base": [0, 1, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 182, 183, 185, 186, 187, 188, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 363, 371, 374, 376, 382, 398, 441, 451, 460, 497, 499, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 512, 547, 635, 679, 682, 683, 686, 687, 690, 691, 694, 734, 737, 783, 818, 841, 848, 857, 1095, 1096, 1097, 1099, 1111, 1112, 1115, 1139, 1160, 1161, 1162, 1165, 1167, 1168, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197], "abc": [0, 1, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 184, 185, 384, 497, 506, 512, 783, 808, 1186, 1187, 1190, 1194], "gelu": [0, 1, 2, 182, 183, 189, 410, 1160], "approxim": [0, 1, 2, 50, 182, 183, 189, 235, 368, 410, 411, 412, 413, 414, 547, 553, 556, 557, 560, 566, 569, 570, 573, 574, 578, 581, 614, 617, 618, 621, 635, 639, 642, 679, 682, 683, 686, 687, 690, 691, 694, 734, 737, 750, 753, 754, 757, 771, 776, 905, 926, 935, 937, 944, 946], "true": [0, 1, 2, 8, 10, 12, 25, 50, 99, 108, 129, 130, 135, 136, 143, 144, 157, 158, 163, 164, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 369, 371, 372, 376, 377, 379, 382, 384, 385, 386, 387, 410, 411, 412, 413, 414, 415, 417, 421, 422, 423, 425, 427, 429, 431, 432, 434, 436, 438, 439, 441, 450, 460, 466, 469, 470, 471, 472, 473, 497, 516, 533, 537, 538, 547, 548, 550, 552, 555, 556, 557, 559, 563, 564, 565, 566, 568, 570, 572, 576, 577, 578, 580, 582, 584, 586, 588, 589, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 609, 610, 612, 616, 617, 620, 621, 624, 625, 626, 629, 630, 631, 633, 637, 638, 639, 641, 645, 646, 647, 649, 651, 653, 654, 655, 657, 658, 659, 661, 662, 663, 665, 666, 667, 669, 670, 671, 673, 674, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 706, 707, 709, 710, 711, 713, 717, 719, 721, 722, 724, 726, 728, 729, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 767, 769, 772, 774, 775, 777, 778, 779, 781, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 796, 797, 801, 808, 810, 812, 814, 816, 822, 823, 830, 845, 851, 853, 856, 857, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 892, 900, 905, 906, 908, 927, 929, 931, 933, 954, 955, 957, 969, 971, 975, 976, 978, 979, 980, 981, 983, 984, 985, 986, 988, 989, 990, 991, 992, 994, 996, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1030, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1065, 1066, 1068, 1074, 1076, 1078, 1079, 1084, 1085, 1087, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1116, 1118, 1119, 1120, 1122, 1123, 1124, 1126, 1127, 1128, 1130, 1131, 1132, 1134, 1135, 1136, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1151, 1152, 1174, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195], "out": [0, 1, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 133, 134, 135, 136, 143, 144, 145, 146, 147, 148, 149, 150, 157, 158, 159, 160, 161, 162, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 195, 197, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 293, 294, 296, 297, 298, 299, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 329, 330, 331, 332, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 353, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 381, 382, 384, 385, 386, 387, 398, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 466, 468, 497, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 795, 796, 797, 798, 800, 801, 802, 805, 806, 807, 809, 811, 812, 813, 814, 815, 816, 823, 836, 839, 840, 857, 887, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1094, 1095, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1174, 1182], "none": [0, 1, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 133, 134, 135, 136, 143, 144, 145, 146, 147, 148, 149, 150, 157, 158, 159, 160, 161, 162, 165, 167, 170, 177, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 367, 369, 372, 376, 377, 378, 379, 380, 382, 384, 386, 387, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 466, 468, 469, 471, 473, 475, 476, 477, 480, 483, 497, 506, 507, 515, 516, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 788, 789, 795, 796, 797, 798, 800, 801, 802, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 821, 823, 824, 828, 834, 836, 839, 840, 841, 842, 847, 848, 854, 857, 864, 865, 866, 867, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 950, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1061, 1066, 1067, 1068, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1095, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1163, 1164, 1165, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197], "return": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 133, 134, 135, 136, 137, 138, 143, 144, 145, 146, 147, 148, 149, 150, 157, 158, 159, 160, 161, 162, 165, 169, 170, 177, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 329, 330, 331, 332, 333, 334, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 353, 354, 355, 356, 357, 358, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 492, 496, 497, 506, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 871, 872, 873, 874, 876, 877, 878, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1061, 1065, 1066, 1067, 1068, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1156, 1158, 1163, 1164, 1174, 1183, 1184, 1190, 1194], "type": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 133, 134, 135, 136, 137, 138, 143, 144, 145, 146, 147, 148, 149, 150, 157, 158, 159, 160, 161, 162, 163, 164, 165, 171, 177, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 329, 330, 331, 332, 333, 334, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 353, 354, 355, 356, 357, 358, 359, 360, 362, 364, 366, 367, 368, 369, 374, 375, 376, 378, 379, 380, 382, 384, 385, 387, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 492, 496, 497, 513, 514, 515, 516, 517, 519, 529, 530, 531, 532, 533, 534, 535, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 791, 792, 794, 795, 796, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 822, 823, 825, 826, 827, 829, 830, 831, 832, 836, 839, 840, 841, 842, 845, 847, 848, 849, 851, 852, 853, 855, 856, 857, 859, 860, 861, 862, 863, 864, 866, 867, 869, 871, 872, 873, 874, 876, 877, 878, 880, 881, 882, 883, 884, 885, 887, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1061, 1065, 1066, 1067, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185], "leaky_relu": [0, 1, 2, 182, 183, 189, 410, 422, 1153], "alpha": [0, 1, 2, 58, 182, 183, 189, 245, 410, 415, 416, 417, 418, 422], "0": [0, 1, 2, 3, 6, 10, 26, 28, 29, 30, 36, 44, 47, 57, 58, 91, 104, 105, 111, 112, 115, 117, 133, 134, 135, 136, 137, 138, 143, 144, 147, 148, 149, 150, 159, 160, 165, 169, 182, 183, 184, 185, 186, 187, 188, 189, 193, 194, 198, 215, 216, 217, 219, 220, 229, 232, 242, 243, 244, 269, 274, 287, 288, 289, 290, 291, 292, 295, 296, 299, 301, 302, 305, 306, 307, 311, 312, 313, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 363, 367, 368, 369, 382, 384, 385, 386, 387, 410, 415, 416, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 435, 436, 437, 441, 442, 446, 450, 451, 455, 456, 457, 458, 459, 460, 466, 469, 471, 472, 473, 480, 497, 499, 502, 506, 509, 513, 516, 517, 519, 522, 523, 524, 525, 526, 527, 528, 529, 531, 535, 538, 540, 541, 545, 547, 548, 549, 551, 552, 553, 556, 557, 560, 561, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 594, 597, 602, 605, 606, 609, 610, 611, 612, 613, 614, 617, 618, 621, 630, 635, 639, 642, 643, 644, 645, 647, 654, 655, 658, 679, 682, 683, 686, 691, 694, 695, 715, 716, 717, 720, 722, 725, 726, 729, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 791, 792, 795, 796, 798, 800, 801, 802, 808, 811, 812, 815, 816, 821, 830, 836, 839, 840, 845, 851, 852, 853, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 874, 875, 876, 877, 878, 879, 880, 881, 892, 893, 895, 897, 898, 899, 904, 905, 906, 908, 909, 911, 912, 915, 916, 917, 924, 954, 960, 962, 963, 964, 965, 969, 971, 975, 976, 979, 981, 984, 986, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1047, 1049, 1055, 1067, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1104, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1132, 1133, 1134, 1135, 1136, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1148, 1153, 1165, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1197], "2": [0, 1, 2, 3, 6, 7, 10, 25, 26, 28, 36, 47, 49, 58, 91, 111, 112, 113, 119, 129, 130, 133, 134, 135, 136, 137, 138, 143, 144, 147, 148, 165, 169, 184, 185, 186, 187, 189, 190, 193, 195, 198, 215, 216, 217, 232, 234, 274, 288, 289, 291, 295, 296, 299, 305, 307, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 343, 344, 347, 348, 362, 363, 365, 369, 373, 376, 380, 381, 382, 384, 385, 386, 387, 399, 410, 415, 416, 418, 419, 422, 423, 426, 427, 430, 434, 435, 436, 437, 440, 441, 448, 449, 452, 454, 455, 459, 460, 466, 469, 470, 471, 472, 473, 497, 516, 517, 519, 531, 533, 535, 542, 547, 548, 549, 550, 551, 552, 561, 562, 563, 565, 566, 569, 574, 577, 578, 581, 582, 586, 589, 590, 593, 602, 605, 606, 609, 610, 611, 612, 613, 614, 618, 630, 635, 643, 644, 645, 647, 651, 654, 655, 658, 671, 674, 691, 694, 695, 715, 716, 722, 725, 726, 729, 742, 745, 758, 761, 762, 765, 771, 772, 773, 774, 776, 777, 778, 783, 784, 785, 786, 787, 791, 792, 795, 796, 798, 801, 808, 811, 812, 813, 814, 815, 816, 830, 845, 846, 851, 857, 859, 860, 861, 862, 863, 892, 895, 896, 897, 898, 899, 904, 905, 906, 908, 909, 911, 912, 915, 916, 917, 924, 926, 927, 930, 931, 933, 935, 937, 941, 943, 944, 946, 947, 949, 954, 960, 961, 962, 963, 965, 969, 970, 971, 975, 976, 979, 986, 989, 991, 992, 993, 994, 995, 996, 997, 1000, 1005, 1008, 1009, 1012, 1017, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1039, 1042, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1112, 1115, 1116, 1119, 1139, 1144, 1145, 1148, 1153], "relu": [0, 1, 2, 8, 163, 164, 182, 183, 189, 385, 386, 410, 411, 414, 415, 418, 1153], "sigmoid": [0, 1, 2, 182, 183, 189, 382, 385, 386, 410, 1153], "softmax": [0, 1, 2, 8, 163, 164, 182, 183, 189, 410, 892, 903, 904, 1153], "axi": [0, 1, 2, 9, 11, 12, 29, 33, 34, 44, 46, 74, 75, 76, 85, 89, 91, 97, 99, 100, 103, 104, 105, 107, 117, 118, 119, 143, 144, 145, 146, 147, 148, 157, 158, 159, 160, 161, 162, 182, 183, 184, 185, 189, 197, 199, 200, 219, 223, 229, 231, 258, 259, 260, 268, 272, 274, 280, 282, 283, 286, 287, 293, 297, 307, 308, 309, 313, 315, 321, 341, 342, 343, 344, 353, 354, 355, 356, 357, 358, 369, 372, 376, 377, 379, 380, 382, 384, 387, 398, 410, 427, 428, 429, 430, 441, 450, 451, 497, 499, 502, 509, 522, 523, 524, 525, 526, 527, 528, 529, 541, 783, 801, 802, 811, 855, 905, 909, 910, 911, 915, 917, 966, 967, 968, 969, 970, 971, 975, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 997, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1017, 1018, 1019, 1020, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1078, 1089, 1090, 1091, 1092, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152], "tanh": [0, 1, 2, 133, 134, 182, 183, 189, 312, 329, 330, 382, 410, 547, 582, 777, 1153], "activ": [1, 2, 8, 163, 164, 183, 189, 196, 359, 360, 362, 363, 365, 367, 386, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 1153, 1161, 1162], "support": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 368, 369, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 387, 401, 402, 403, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1157, 1158, 1159, 1161, 1162, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1187, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1197, 1198, 1200], "framework": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 366, 370, 372, 373, 374, 375, 378, 380, 381, 384, 387, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1187, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1197, 1198, 1200], "array_method": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 411, 412, 415, 416, 420, 423, 424, 427, 428, 434, 435, 469, 470, 548, 549, 554, 557, 558, 562, 566, 567, 570, 571, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 599, 602, 603, 606, 607, 610, 611, 615, 619, 623, 628, 631, 632, 636, 639, 640, 644, 647, 648, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 691, 692, 695, 696, 699, 700, 703, 704, 707, 708, 711, 712, 717, 718, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 742, 743, 746, 747, 750, 751, 754, 755, 758, 759, 762, 763, 766, 768, 773, 779, 780, 784, 785, 812, 813, 859, 860, 906, 907, 909, 910, 913, 915, 916, 918, 919, 921, 922, 925, 926, 927, 928, 931, 932, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950, 951, 952, 955, 956, 957, 958, 960, 961, 963, 964, 966, 967, 969, 970, 972, 973, 976, 977, 981, 982, 986, 987, 992, 993, 997, 998, 1001, 1002, 1005, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1021, 1022, 1025, 1026, 1031, 1032, 1035, 1036, 1039, 1040, 1043, 1044, 1047, 1048, 1074, 1075, 1101, 1102, 1106, 1107, 1112, 1113, 1116, 1117, 1120, 1121, 1124, 1125, 1128, 1129, 1132, 1133, 1137, 1140, 1141, 1145, 1146, 1149, 1150], "ab": [2, 133, 134, 189, 288, 329, 330, 371, 374, 547, 552, 734, 737, 905, 969, 971, 1153], "self": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 184, 185, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 375, 376, 382, 384, 385, 386, 387, 411, 412, 413, 415, 416, 417, 420, 421, 422, 423, 424, 425, 427, 428, 429, 431, 432, 434, 435, 436, 469, 470, 471, 497, 548, 549, 550, 554, 555, 556, 557, 558, 559, 562, 563, 564, 566, 567, 568, 570, 571, 572, 575, 576, 577, 578, 579, 580, 582, 583, 584, 586, 587, 588, 590, 591, 592, 594, 595, 596, 598, 599, 600, 602, 603, 604, 606, 607, 608, 610, 611, 612, 615, 616, 617, 619, 620, 621, 623, 624, 625, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 659, 660, 661, 663, 664, 665, 667, 668, 669, 671, 672, 673, 675, 676, 677, 679, 680, 681, 683, 684, 685, 687, 688, 689, 691, 692, 693, 695, 696, 697, 699, 700, 701, 703, 704, 705, 707, 708, 709, 711, 712, 713, 717, 718, 719, 722, 723, 724, 726, 727, 728, 730, 731, 732, 734, 735, 736, 738, 739, 740, 742, 743, 744, 746, 747, 748, 750, 751, 752, 754, 755, 756, 758, 759, 760, 762, 763, 764, 766, 768, 769, 773, 774, 775, 778, 779, 780, 781, 784, 785, 786, 796, 797, 812, 813, 814, 859, 860, 861, 864, 865, 869, 870, 874, 875, 878, 879, 882, 883, 906, 907, 909, 910, 913, 915, 916, 918, 919, 921, 922, 925, 926, 927, 928, 929, 931, 932, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950, 951, 952, 955, 956, 957, 958, 960, 961, 963, 964, 966, 967, 969, 970, 972, 973, 976, 977, 978, 981, 982, 983, 986, 987, 988, 992, 993, 994, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1017, 1018, 1019, 1021, 1022, 1023, 1025, 1026, 1027, 1031, 1032, 1033, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1074, 1075, 1076, 1084, 1085, 1101, 1102, 1103, 1106, 1107, 1108, 1112, 1113, 1114, 1116, 1117, 1118, 1120, 1121, 1122, 1124, 1125, 1126, 1128, 1129, 1130, 1132, 1133, 1134, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1146, 1147, 1149, 1150, 1151, 1153, 1190, 1194], "instanc": [2, 3, 6, 7, 8, 10, 25, 26, 28, 47, 49, 91, 111, 112, 122, 123, 124, 125, 126, 129, 130, 133, 134, 135, 136, 137, 138, 147, 148, 163, 164, 184, 185, 186, 187, 189, 190, 193, 195, 196, 198, 215, 216, 217, 232, 234, 274, 289, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 343, 344, 359, 360, 364, 368, 369, 371, 372, 375, 377, 379, 380, 385, 386, 387, 400, 408, 410, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 435, 436, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 469, 470, 471, 472, 497, 506, 538, 547, 548, 549, 550, 551, 561, 562, 563, 566, 569, 577, 582, 586, 589, 606, 609, 610, 611, 612, 613, 618, 630, 643, 644, 645, 647, 654, 655, 658, 695, 715, 716, 722, 725, 726, 729, 742, 745, 758, 761, 762, 765, 771, 773, 774, 776, 778, 783, 784, 785, 786, 800, 811, 812, 813, 814, 827, 851, 853, 859, 860, 861, 863, 892, 895, 898, 904, 905, 906, 908, 909, 911, 912, 975, 976, 979, 991, 992, 993, 994, 1005, 1008, 1009, 1012, 1017, 1020, 1025, 1026, 1027, 1028, 1030, 1039, 1042, 1073, 1074, 1077, 1078, 1083, 1084, 1086, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1112, 1115, 1116, 1119, 1139, 1144, 1145, 1148, 1163, 1164], "variant": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 91, 111, 112, 129, 130, 133, 134, 135, 136, 137, 138, 147, 148, 189, 190, 193, 195, 198, 215, 216, 217, 232, 234, 274, 288, 289, 291, 292, 295, 296, 299, 305, 307, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 343, 344, 347, 348, 368, 369, 434, 435, 436, 469, 470, 471, 473, 548, 549, 550, 552, 562, 563, 565, 577, 582, 610, 611, 612, 644, 645, 647, 695, 772, 773, 774, 777, 778, 784, 785, 786, 788, 812, 813, 814, 816, 859, 860, 861, 863, 992, 993, 994, 996, 1025, 1026, 1027, 1029, 1080, 1082], "thi": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 91, 111, 112, 129, 130, 133, 134, 135, 136, 137, 138, 147, 148, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 193, 195, 198, 215, 216, 217, 232, 234, 274, 288, 289, 291, 292, 295, 296, 299, 305, 307, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 343, 344, 347, 348, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 398, 399, 434, 435, 436, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 469, 470, 471, 472, 473, 497, 521, 525, 529, 536, 541, 546, 547, 548, 549, 550, 551, 552, 561, 562, 563, 565, 566, 569, 577, 582, 586, 589, 602, 605, 606, 609, 610, 611, 612, 613, 618, 639, 642, 643, 644, 645, 647, 695, 703, 706, 707, 710, 726, 729, 738, 741, 742, 745, 758, 761, 762, 765, 771, 772, 773, 774, 776, 777, 778, 783, 784, 785, 786, 788, 810, 811, 812, 813, 814, 816, 827, 838, 843, 857, 859, 860, 861, 863, 864, 866, 869, 871, 873, 874, 876, 878, 880, 882, 884, 890, 892, 895, 901, 904, 905, 912, 914, 931, 933, 950, 991, 992, 993, 994, 996, 1005, 1008, 1009, 1012, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1035, 1038, 1055, 1061, 1067, 1068, 1073, 1074, 1077, 1080, 1082, 1090, 1091, 1095, 1096, 1097, 1099, 1100, 1101, 1104, 1111, 1116, 1119, 1120, 1123, 1132, 1135, 1140, 1143, 1144, 1145, 1148, 1153, 1159, 1186, 1187, 1190, 1191, 1192, 1193, 1194, 1195], "simpli": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 91, 111, 112, 129, 130, 133, 134, 135, 136, 137, 138, 147, 148, 184, 185, 189, 190, 193, 195, 198, 215, 216, 217, 232, 234, 274, 288, 289, 291, 292, 295, 296, 299, 305, 307, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 343, 344, 347, 348, 363, 368, 369, 371, 372, 375, 376, 378, 379, 380, 382, 386, 387, 434, 435, 436, 469, 470, 471, 473, 547, 548, 549, 550, 552, 562, 563, 565, 577, 582, 610, 611, 612, 639, 642, 644, 645, 647, 695, 772, 773, 774, 777, 778, 784, 785, 786, 788, 812, 813, 814, 816, 859, 860, 861, 863, 992, 993, 994, 996, 1025, 1026, 1027, 1029, 1080, 1082], "wrap": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 91, 111, 112, 122, 129, 130, 133, 134, 135, 136, 137, 138, 147, 148, 164, 184, 185, 186, 187, 188, 189, 190, 193, 195, 198, 215, 216, 217, 232, 234, 274, 288, 289, 291, 292, 295, 296, 299, 305, 307, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 343, 344, 347, 348, 360, 366, 368, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 384, 387, 399, 400, 408, 434, 435, 436, 469, 470, 471, 473, 548, 549, 550, 552, 562, 563, 565, 577, 582, 610, 611, 612, 644, 645, 647, 695, 772, 773, 774, 777, 778, 783, 784, 785, 786, 788, 794, 812, 813, 814, 816, 857, 859, 860, 861, 863, 890, 992, 993, 994, 996, 1025, 1026, 1027, 1029, 1080, 1082], "function": [2, 3, 6, 7, 8, 10, 25, 26, 28, 47, 49, 91, 111, 112, 122, 129, 130, 133, 134, 135, 136, 137, 138, 147, 148, 163, 164, 165, 169, 170, 171, 179, 184, 185, 189, 190, 193, 195, 196, 198, 215, 216, 217, 232, 234, 274, 288, 289, 291, 292, 295, 296, 299, 305, 307, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 343, 344, 347, 348, 359, 360, 363, 365, 366, 367, 368, 369, 370, 371, 373, 375, 379, 381, 383, 384, 385, 386, 397, 398, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 560, 561, 562, 563, 564, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 611, 612, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 634, 635, 638, 639, 642, 643, 644, 645, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 866, 868, 869, 871, 873, 874, 876, 878, 880, 882, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 930, 931, 933, 934, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 950, 951, 953, 954, 956, 957, 959, 960, 962, 963, 965, 966, 968, 969, 971, 972, 974, 975, 976, 979, 981, 984, 986, 989, 991, 992, 993, 994, 995, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1153, 1156, 1158, 1160, 1161, 1162, 1190, 1193, 1195], "so": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 91, 111, 112, 122, 125, 126, 129, 130, 133, 134, 135, 136, 137, 138, 147, 148, 179, 180, 184, 185, 189, 190, 193, 195, 198, 215, 216, 217, 232, 234, 274, 288, 289, 291, 292, 295, 296, 299, 305, 307, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 343, 344, 347, 348, 362, 363, 367, 368, 369, 371, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 399, 400, 408, 434, 435, 436, 469, 470, 471, 473, 548, 549, 550, 552, 562, 563, 565, 577, 582, 610, 611, 612, 644, 645, 647, 695, 772, 773, 774, 777, 778, 784, 785, 786, 788, 812, 813, 814, 816, 859, 860, 861, 863, 992, 993, 994, 996, 1025, 1026, 1027, 1029, 1055, 1056, 1066, 1080, 1082, 1153], "docstr": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 91, 111, 112, 129, 130, 133, 134, 135, 136, 137, 138, 147, 148, 189, 190, 193, 195, 198, 215, 216, 217, 232, 234, 274, 288, 289, 291, 292, 295, 296, 299, 305, 307, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 343, 344, 347, 348, 364, 365, 366, 367, 372, 376, 380, 434, 435, 436, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 469, 470, 471, 472, 473, 547, 548, 549, 550, 551, 552, 561, 562, 563, 565, 566, 569, 577, 582, 586, 589, 606, 609, 610, 611, 612, 613, 618, 643, 644, 645, 647, 695, 726, 729, 742, 745, 758, 761, 762, 765, 771, 772, 773, 774, 776, 777, 778, 784, 785, 786, 788, 812, 813, 814, 816, 859, 860, 861, 863, 905, 912, 991, 992, 993, 994, 996, 1005, 1008, 1009, 1012, 1025, 1026, 1027, 1028, 1029, 1080, 1082, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119, 1144, 1145, 1148], "also": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 91, 111, 112, 122, 123, 124, 125, 126, 129, 130, 133, 134, 135, 136, 137, 138, 147, 148, 179, 180, 184, 185, 189, 190, 193, 195, 198, 215, 216, 217, 232, 234, 274, 288, 289, 291, 292, 295, 296, 299, 305, 307, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 343, 344, 347, 348, 361, 362, 363, 366, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 398, 399, 434, 435, 436, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 469, 470, 471, 472, 473, 547, 548, 549, 550, 551, 552, 561, 562, 563, 565, 566, 569, 577, 582, 586, 589, 606, 609, 610, 611, 612, 613, 618, 643, 644, 645, 647, 695, 726, 729, 742, 745, 758, 761, 762, 765, 771, 772, 773, 774, 776, 777, 778, 783, 784, 785, 786, 788, 811, 812, 813, 814, 816, 827, 857, 859, 860, 861, 863, 864, 866, 892, 895, 901, 904, 905, 912, 991, 992, 993, 994, 996, 1005, 1008, 1009, 1012, 1025, 1026, 1027, 1028, 1029, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1065, 1066, 1067, 1073, 1074, 1077, 1080, 1082, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119, 1144, 1145, 1148, 1174, 1184], "appli": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 91, 111, 112, 122, 125, 126, 129, 130, 133, 134, 135, 136, 137, 138, 147, 148, 184, 185, 189, 190, 193, 195, 198, 215, 216, 217, 232, 234, 274, 288, 289, 291, 292, 295, 296, 299, 305, 307, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 343, 344, 347, 348, 362, 363, 364, 368, 369, 371, 372, 374, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 397, 399, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 435, 436, 437, 460, 469, 470, 471, 473, 488, 548, 549, 550, 552, 562, 563, 565, 577, 582, 610, 611, 612, 644, 645, 647, 695, 772, 773, 774, 777, 778, 783, 784, 785, 786, 788, 805, 806, 807, 812, 813, 814, 816, 857, 859, 860, 861, 863, 874, 876, 878, 880, 892, 901, 903, 904, 905, 926, 935, 937, 944, 946, 975, 976, 979, 981, 984, 986, 989, 991, 992, 993, 994, 996, 1025, 1026, 1027, 1029, 1035, 1038, 1051, 1052, 1053, 1055, 1061, 1064, 1067, 1068, 1073, 1074, 1077, 1080, 1082, 1153, 1160, 1161, 1162, 1188, 1189], "minim": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 91, 111, 112, 129, 130, 133, 134, 135, 136, 137, 138, 147, 148, 189, 190, 193, 195, 198, 215, 216, 217, 232, 234, 274, 288, 289, 291, 292, 295, 296, 299, 305, 307, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 343, 344, 347, 348, 368, 379, 382, 434, 435, 436, 469, 470, 471, 473, 548, 549, 550, 552, 562, 563, 565, 577, 582, 610, 611, 612, 644, 645, 647, 695, 772, 773, 774, 777, 778, 784, 785, 786, 788, 812, 813, 814, 816, 859, 860, 861, 863, 992, 993, 994, 996, 1025, 1026, 1027, 1029, 1080, 1082], "chang": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 91, 111, 112, 129, 130, 133, 134, 135, 136, 137, 138, 147, 148, 181, 189, 190, 193, 195, 198, 215, 216, 217, 232, 234, 274, 288, 289, 291, 292, 295, 296, 299, 305, 307, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 343, 344, 347, 348, 362, 363, 364, 365, 368, 370, 371, 376, 382, 386, 399, 434, 435, 436, 469, 470, 471, 473, 497, 548, 549, 550, 552, 562, 563, 565, 577, 582, 610, 611, 612, 644, 645, 647, 695, 772, 773, 774, 777, 778, 784, 785, 786, 788, 812, 813, 814, 816, 859, 860, 861, 863, 905, 909, 911, 991, 992, 993, 994, 996, 1021, 1024, 1025, 1026, 1027, 1029, 1055, 1057, 1067, 1080, 1082, 1153, 1159], "exampl": [2, 3, 6, 7, 8, 10, 25, 26, 28, 47, 49, 91, 111, 112, 129, 130, 133, 134, 135, 136, 137, 138, 147, 148, 163, 164, 165, 169, 170, 171, 177, 181, 186, 187, 189, 190, 193, 195, 196, 198, 215, 216, 217, 232, 234, 274, 288, 289, 291, 292, 295, 296, 299, 305, 307, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 343, 344, 347, 348, 359, 360, 362, 363, 364, 366, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382, 384, 385, 386, 387, 398, 399, 410, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 435, 436, 437, 438, 439, 441, 448, 449, 452, 454, 455, 458, 459, 460, 466, 469, 470, 471, 472, 473, 481, 482, 497, 516, 517, 519, 531, 532, 533, 534, 535, 538, 540, 542, 544, 545, 547, 548, 549, 550, 551, 552, 561, 562, 563, 565, 566, 569, 577, 582, 585, 586, 589, 590, 593, 602, 605, 606, 609, 610, 611, 612, 613, 614, 618, 630, 635, 643, 644, 645, 647, 651, 654, 655, 658, 671, 674, 695, 715, 716, 722, 725, 726, 729, 742, 745, 758, 761, 762, 765, 771, 772, 773, 774, 775, 776, 777, 778, 783, 784, 785, 786, 787, 788, 791, 792, 800, 801, 808, 811, 812, 813, 814, 815, 816, 819, 830, 845, 846, 851, 852, 853, 857, 859, 860, 861, 862, 863, 892, 893, 895, 897, 898, 899, 904, 905, 906, 908, 909, 911, 912, 915, 917, 924, 935, 937, 941, 943, 954, 960, 962, 963, 965, 975, 976, 979, 981, 984, 986, 989, 991, 992, 993, 994, 995, 996, 997, 1000, 1005, 1008, 1009, 1012, 1017, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1038, 1039, 1042, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1112, 1115, 1132, 1135, 1136, 1139, 1144, 1145, 1148, 1153], "us": [2, 3, 8, 133, 134, 163, 164, 165, 170, 177, 180, 181, 184, 185, 186, 187, 188, 189, 190, 196, 329, 330, 359, 360, 361, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 384, 386, 387, 398, 399, 410, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 440, 460, 479, 497, 506, 507, 532, 536, 539, 540, 541, 542, 544, 546, 547, 548, 549, 550, 566, 569, 586, 589, 606, 609, 618, 630, 654, 655, 658, 715, 716, 722, 725, 726, 729, 742, 745, 758, 761, 783, 811, 818, 819, 833, 839, 840, 841, 842, 847, 848, 857, 859, 862, 864, 866, 874, 876, 878, 880, 892, 898, 900, 901, 903, 904, 905, 912, 915, 917, 931, 933, 975, 976, 979, 991, 1005, 1008, 1009, 1012, 1017, 1020, 1025, 1028, 1039, 1042, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1064, 1065, 1066, 1068, 1073, 1074, 1077, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1111, 1112, 1115, 1139, 1144, 1145, 1148, 1153, 1174, 1182, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193], "x": [2, 3, 7, 25, 26, 28, 47, 49, 91, 104, 111, 112, 122, 125, 126, 129, 130, 133, 134, 135, 136, 147, 148, 165, 169, 177, 184, 185, 186, 187, 189, 190, 195, 215, 216, 217, 232, 234, 274, 287, 288, 291, 293, 295, 296, 299, 305, 307, 308, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 343, 344, 347, 348, 353, 354, 365, 367, 368, 369, 372, 373, 376, 379, 380, 382, 384, 385, 386, 387, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 435, 436, 437, 441, 443, 445, 447, 449, 452, 453, 455, 456, 457, 458, 459, 460, 466, 468, 469, 470, 471, 472, 473, 478, 497, 516, 517, 518, 519, 522, 523, 531, 535, 540, 542, 547, 548, 549, 550, 551, 552, 553, 556, 557, 560, 561, 562, 563, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 606, 609, 610, 611, 612, 613, 614, 617, 618, 621, 630, 631, 634, 635, 639, 642, 643, 644, 645, 647, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 679, 682, 683, 686, 687, 690, 691, 694, 695, 703, 706, 715, 716, 722, 725, 730, 733, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 791, 792, 793, 795, 796, 798, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 822, 823, 825, 826, 827, 829, 830, 831, 832, 836, 845, 846, 849, 851, 852, 853, 855, 856, 857, 868, 873, 887, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 931, 933, 934, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 950, 954, 956, 957, 959, 960, 962, 963, 965, 969, 971, 975, 976, 979, 981, 984, 986, 989, 991, 992, 993, 994, 995, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1055, 1056, 1061, 1065, 1066, 1067, 1073, 1074, 1077, 1078, 1080, 1081, 1082, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1104, 1105, 1106, 1109, 1110, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1153, 1174, 1185], "6": [2, 3, 6, 7, 26, 28, 133, 134, 137, 138, 147, 148, 186, 187, 189, 190, 195, 216, 288, 291, 299, 305, 329, 330, 331, 332, 347, 348, 365, 369, 373, 376, 384, 385, 386, 410, 415, 418, 419, 422, 427, 430, 441, 449, 497, 519, 535, 547, 548, 549, 550, 551, 552, 561, 562, 563, 565, 566, 569, 586, 589, 590, 593, 606, 609, 610, 611, 612, 613, 618, 630, 643, 654, 655, 658, 695, 715, 716, 722, 725, 742, 745, 758, 761, 762, 765, 771, 776, 783, 792, 801, 811, 812, 815, 816, 846, 851, 857, 859, 860, 862, 892, 895, 898, 899, 904, 905, 909, 911, 912, 915, 917, 941, 943, 954, 960, 962, 975, 976, 979, 986, 989, 991, 992, 993, 995, 997, 1000, 1005, 1008, 1009, 1012, 1017, 1020, 1021, 1024, 1025, 1028, 1030, 1039, 1042, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1082, 1090, 1091, 1094, 1095, 1096, 1097, 1111, 1112, 1115, 1116, 1119, 1139], "1": [2, 3, 6, 7, 10, 12, 25, 26, 28, 33, 34, 36, 47, 49, 57, 91, 99, 100, 111, 112, 118, 129, 130, 133, 134, 135, 136, 137, 138, 143, 144, 145, 146, 147, 148, 149, 150, 157, 158, 165, 171, 177, 180, 181, 184, 185, 186, 187, 189, 190, 193, 195, 198, 200, 215, 216, 217, 223, 232, 234, 244, 269, 274, 282, 283, 289, 291, 292, 293, 295, 296, 297, 299, 305, 306, 307, 308, 309, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 341, 342, 343, 344, 345, 346, 347, 348, 353, 354, 365, 369, 372, 376, 379, 380, 381, 382, 384, 385, 386, 387, 399, 410, 415, 418, 419, 422, 423, 426, 427, 430, 434, 435, 436, 437, 441, 442, 449, 450, 451, 452, 454, 455, 459, 460, 466, 469, 470, 471, 472, 473, 480, 497, 501, 504, 506, 511, 516, 517, 519, 521, 525, 529, 531, 534, 535, 542, 547, 548, 549, 550, 551, 553, 556, 557, 560, 561, 562, 563, 565, 566, 569, 577, 578, 581, 582, 586, 589, 590, 593, 602, 605, 606, 609, 610, 611, 612, 613, 614, 617, 618, 621, 630, 635, 639, 642, 643, 644, 645, 647, 651, 654, 655, 658, 671, 674, 679, 682, 683, 686, 687, 690, 691, 694, 695, 715, 716, 722, 725, 726, 729, 734, 737, 742, 745, 746, 749, 750, 753, 758, 761, 762, 765, 771, 772, 773, 774, 776, 777, 778, 783, 784, 785, 786, 787, 788, 791, 792, 800, 801, 808, 811, 812, 813, 814, 815, 816, 830, 836, 839, 840, 845, 846, 848, 851, 852, 853, 855, 857, 859, 860, 861, 862, 863, 892, 893, 894, 895, 896, 897, 898, 899, 900, 904, 905, 906, 908, 909, 910, 911, 912, 915, 916, 917, 924, 935, 937, 941, 943, 951, 953, 954, 960, 962, 963, 965, 966, 967, 968, 969, 971, 975, 976, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 1000, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1038, 1039, 1042, 1055, 1067, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1115, 1116, 1119, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1153, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1196, 1197], "y": [2, 3, 7, 10, 26, 28, 47, 49, 91, 111, 112, 133, 134, 135, 136, 147, 148, 186, 187, 189, 190, 195, 198, 216, 217, 232, 234, 274, 288, 291, 292, 296, 299, 305, 307, 311, 312, 317, 318, 329, 330, 331, 332, 343, 344, 347, 348, 367, 369, 373, 376, 382, 384, 410, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 435, 436, 437, 441, 448, 449, 452, 454, 455, 459, 460, 466, 497, 517, 531, 535, 540, 547, 548, 549, 550, 551, 552, 561, 562, 563, 565, 566, 569, 577, 578, 581, 582, 586, 589, 590, 593, 602, 605, 606, 609, 610, 611, 612, 613, 614, 618, 630, 635, 643, 644, 645, 647, 654, 655, 658, 695, 715, 716, 722, 725, 726, 729, 742, 745, 758, 761, 762, 765, 771, 772, 773, 774, 776, 777, 778, 783, 784, 785, 786, 787, 788, 791, 792, 800, 801, 808, 809, 811, 812, 813, 814, 815, 816, 845, 851, 852, 853, 857, 868, 892, 898, 899, 901, 905, 906, 908, 909, 911, 912, 924, 941, 943, 960, 962, 963, 965, 975, 976, 979, 981, 984, 986, 989, 991, 992, 993, 994, 995, 996, 997, 1000, 1005, 1008, 1009, 1012, 1017, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1039, 1042, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1100, 1101, 1104, 1111, 1112, 1115, 1116, 1119, 1132, 1135, 1136, 1139, 1144, 1145, 1148], "print": [2, 3, 6, 7, 8, 10, 25, 26, 28, 47, 49, 91, 111, 112, 129, 130, 133, 134, 135, 136, 137, 138, 147, 148, 163, 164, 165, 169, 170, 171, 177, 184, 185, 186, 187, 188, 189, 190, 195, 196, 198, 215, 216, 217, 232, 234, 274, 288, 289, 291, 292, 295, 296, 299, 305, 307, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 343, 344, 347, 348, 359, 360, 362, 369, 376, 382, 384, 385, 386, 410, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 435, 436, 437, 441, 448, 449, 452, 454, 455, 458, 459, 460, 466, 469, 470, 471, 472, 473, 481, 482, 497, 517, 531, 532, 533, 534, 535, 537, 540, 544, 547, 548, 549, 550, 551, 552, 561, 562, 563, 565, 566, 569, 577, 582, 585, 586, 589, 590, 593, 602, 605, 606, 609, 610, 611, 612, 613, 614, 618, 630, 635, 643, 644, 645, 647, 651, 654, 655, 658, 671, 674, 695, 715, 716, 722, 725, 726, 729, 742, 745, 758, 761, 762, 765, 771, 772, 773, 774, 775, 776, 777, 778, 783, 784, 785, 786, 787, 788, 791, 792, 800, 801, 808, 811, 812, 813, 814, 815, 816, 819, 837, 845, 846, 851, 852, 853, 857, 859, 860, 862, 863, 892, 893, 895, 897, 898, 899, 904, 905, 906, 908, 909, 911, 912, 915, 917, 924, 941, 943, 954, 960, 962, 963, 965, 975, 976, 979, 981, 984, 986, 989, 991, 992, 993, 994, 995, 996, 1005, 1008, 1009, 1012, 1017, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1039, 1042, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1112, 1115, 1116, 1119, 1132, 1135, 1136, 1139, 1144, 1145, 1148, 1153], "aco": [2, 133, 134, 189, 329, 330, 547, 557, 1153], "acosh": [2, 133, 134, 189, 329, 330, 460, 481, 482, 547, 556, 617, 621, 1153], "adam_step": [2, 137, 138, 189, 289, 333, 334, 857, 863], "mw": [2, 6, 137, 138, 189, 193, 289, 333, 334, 386, 857, 859, 860, 861, 862, 863, 864, 866], "vw": [2, 6, 137, 138, 189, 193, 289, 333, 334, 386, 857, 859, 860, 861, 862, 863, 864, 866], "step": [2, 6, 137, 138, 181, 184, 185, 189, 193, 194, 242, 289, 290, 301, 333, 334, 362, 363, 365, 369, 373, 375, 376, 377, 378, 382, 385, 386, 387, 398, 441, 442, 450, 451, 497, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 871, 874, 875, 876, 877, 878, 880, 882, 884, 1051, 1052, 1053, 1054, 1153, 1190, 1191, 1192, 1193, 1194, 1195], "beta1": [2, 6, 137, 138, 189, 193, 194, 242, 289, 290, 301, 333, 334, 386, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 874, 875, 876, 877, 1190, 1191, 1192], "9": [2, 6, 7, 28, 133, 134, 137, 138, 147, 148, 186, 187, 189, 193, 194, 195, 242, 289, 290, 291, 301, 305, 329, 330, 333, 334, 347, 348, 365, 369, 385, 386, 547, 561, 562, 563, 565, 586, 589, 590, 593, 695, 715, 716, 742, 745, 758, 761, 762, 765, 783, 811, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 874, 875, 876, 877, 892, 895, 898, 899, 905, 909, 911, 912, 915, 917, 941, 943, 954, 960, 962, 991, 992, 993, 995, 1009, 1012, 1017, 1020, 1025, 1028, 1030, 1078, 1079, 1080, 1081, 1082, 1090, 1094, 1095, 1096, 1111, 1112, 1115, 1139, 1190, 1191, 1192], "beta2": [2, 6, 137, 138, 189, 193, 194, 242, 289, 290, 301, 333, 334, 386, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 874, 875, 876, 877, 1190, 1191, 1192], "999": [2, 6, 137, 138, 189, 193, 194, 242, 289, 290, 301, 312, 318, 329, 330, 333, 334, 386, 434, 436, 547, 582, 776, 777, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 874, 875, 876, 877, 1190, 1191, 1192], "epsilon": [2, 6, 18, 34, 57, 100, 137, 138, 145, 146, 149, 150, 189, 193, 194, 208, 223, 242, 244, 283, 289, 290, 294, 297, 301, 309, 333, 334, 341, 342, 345, 346, 372, 376, 379, 386, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 874, 875, 876, 877, 905, 926, 935, 937, 944, 946, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 1073, 1074, 1075, 1076, 1077, 1188, 1189, 1190, 1191, 1192], "1e": [2, 6, 18, 34, 57, 100, 137, 138, 145, 146, 149, 150, 189, 193, 194, 208, 223, 242, 244, 283, 289, 290, 294, 297, 301, 309, 333, 334, 341, 342, 345, 346, 372, 376, 379, 386, 387, 783, 819, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 874, 875, 876, 877, 905, 954, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 1073, 1074, 1075, 1076, 1077, 1153, 1190, 1191, 1192, 1193, 1195], "07": [2, 6, 18, 34, 100, 137, 138, 145, 146, 189, 193, 194, 208, 223, 242, 283, 289, 290, 294, 297, 301, 309, 333, 334, 341, 342, 386, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 874, 875, 876, 877, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 1190, 1191, 1192], "With": [2, 6, 10, 135, 136, 137, 138, 180, 181, 184, 185, 186, 187, 189, 198, 288, 291, 292, 296, 299, 305, 307, 311, 312, 329, 330, 331, 332, 343, 344, 347, 348, 362, 369, 371, 382, 410, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 441, 452, 460, 469, 472, 497, 519, 535, 547, 548, 551, 552, 561, 565, 566, 569, 577, 582, 586, 589, 606, 609, 610, 613, 618, 630, 643, 654, 655, 658, 695, 715, 716, 722, 725, 726, 729, 742, 745, 758, 761, 762, 765, 771, 772, 776, 777, 778, 783, 784, 785, 786, 787, 788, 792, 800, 801, 808, 811, 812, 815, 816, 846, 851, 852, 853, 857, 859, 860, 862, 892, 895, 898, 899, 904, 905, 906, 908, 909, 911, 912, 915, 917, 931, 933, 960, 962, 975, 976, 979, 986, 989, 991, 992, 995, 996, 1005, 1008, 1009, 1012, 1017, 1020, 1025, 1028, 1029, 1030, 1039, 1042, 1073, 1074, 1077, 1078, 1079, 1080, 1082, 1083, 1084, 1086, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1112, 1115, 1139, 1144, 1145, 1148], "input": [2, 6, 122, 125, 126, 137, 138, 184, 185, 186, 187, 188, 189, 193, 288, 289, 291, 292, 296, 299, 305, 307, 311, 312, 329, 330, 331, 332, 333, 334, 343, 344, 347, 348, 367, 368, 369, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 399, 400, 408, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 466, 467, 468, 469, 472, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 492, 497, 506, 507, 516, 517, 518, 519, 521, 522, 525, 529, 535, 541, 542, 547, 548, 551, 552, 553, 556, 557, 560, 561, 564, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 772, 775, 776, 777, 778, 779, 782, 783, 784, 787, 788, 789, 791, 792, 793, 795, 796, 798, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 820, 822, 823, 825, 826, 827, 829, 830, 831, 832, 836, 839, 840, 845, 846, 849, 851, 852, 853, 855, 856, 857, 859, 860, 861, 862, 863, 868, 873, 887, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 930, 931, 933, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 950, 951, 953, 954, 956, 957, 959, 960, 962, 963, 965, 966, 968, 969, 971, 972, 974, 975, 976, 979, 981, 984, 986, 989, 991, 992, 995, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1028, 1029, 1030, 1031, 1034, 1035, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1188, 1189], "dcdw": [2, 6, 137, 138, 189, 193, 194, 236, 242, 243, 289, 290, 300, 301, 302, 333, 334, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881], "3": [2, 6, 7, 10, 25, 28, 47, 49, 129, 130, 133, 134, 135, 136, 137, 138, 147, 148, 186, 187, 189, 190, 193, 195, 198, 215, 216, 217, 232, 234, 274, 288, 289, 291, 295, 296, 299, 305, 307, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 343, 344, 347, 348, 362, 365, 369, 373, 376, 382, 384, 385, 386, 387, 410, 415, 418, 419, 422, 423, 426, 427, 430, 434, 436, 440, 441, 449, 452, 455, 458, 459, 460, 469, 470, 471, 472, 473, 497, 516, 519, 535, 542, 547, 548, 550, 551, 552, 561, 562, 563, 565, 566, 569, 577, 582, 586, 589, 602, 605, 606, 609, 610, 612, 613, 618, 630, 635, 643, 644, 645, 647, 651, 654, 655, 658, 671, 674, 695, 715, 716, 722, 725, 726, 729, 742, 745, 758, 761, 762, 765, 771, 772, 774, 776, 777, 778, 783, 784, 785, 786, 791, 792, 801, 808, 811, 812, 813, 814, 815, 816, 845, 846, 851, 853, 857, 859, 860, 861, 862, 863, 892, 893, 894, 895, 897, 898, 899, 904, 905, 906, 908, 909, 911, 912, 915, 917, 924, 935, 937, 941, 943, 954, 960, 962, 963, 965, 972, 974, 975, 976, 979, 986, 989, 991, 992, 993, 994, 995, 996, 997, 1000, 1005, 1008, 1009, 1012, 1017, 1020, 1021, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1034, 1039, 1042, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1112, 1115, 1116, 1119, 1136, 1139, 1144, 1145, 1148, 1153], "adam_step_delta": [2, 6, 137, 138, 189, 193, 289, 333, 334, 857, 859, 860, 861, 862, 863], "639": [2, 6, 137, 138, 857, 859, 860, 862], "11": [2, 6, 137, 138, 186, 187, 189, 195, 291, 305, 329, 330, 347, 348, 369, 376, 547, 561, 563, 565, 586, 589, 695, 742, 745, 783, 801, 811, 859, 860, 905, 915, 917, 941, 943, 975, 986, 989, 991, 1009, 1012, 1017, 1020, 1078, 1080, 1081, 1082, 1090, 1094, 1095, 1096, 1111, 1112, 1115, 1139], "32": [2, 6, 137, 138, 385, 410, 415, 418, 422, 547, 606, 609, 859, 860, 892, 895, 898, 905, 941, 943, 1090, 1094, 1111, 1112, 1115, 1139], "63": [2, 6, 137, 138, 547, 758, 761, 859, 860, 905, 906, 908, 941, 943, 1111, 1112, 1115, 1139], "00121": [2, 6, 137, 138, 859, 860], "0102": [2, 6, 137, 138, 859, 860], "0397": [2, 6, 137, 138, 859, 860], "add": [2, 8, 133, 134, 163, 164, 184, 185, 186, 187, 189, 196, 291, 292, 329, 330, 331, 332, 359, 360, 362, 363, 364, 366, 367, 368, 372, 373, 375, 376, 380, 382, 384, 399, 547, 548, 551, 565, 695, 784, 788, 1073, 1074, 1077, 1153, 1159, 1188, 1189], "x2": [2, 7, 10, 16, 19, 21, 22, 23, 24, 33, 37, 41, 48, 51, 52, 59, 60, 65, 66, 68, 69, 70, 77, 79, 80, 84, 88, 98, 106, 113, 118, 133, 134, 135, 136, 143, 144, 184, 185, 189, 195, 198, 206, 209, 211, 212, 213, 214, 224, 226, 233, 237, 238, 246, 247, 252, 253, 255, 256, 257, 261, 263, 267, 271, 291, 292, 298, 303, 310, 314, 329, 330, 331, 332, 339, 340, 369, 380, 460, 492, 497, 535, 547, 561, 562, 563, 564, 565, 578, 579, 580, 581, 586, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 671, 672, 673, 674, 675, 676, 677, 678, 695, 696, 697, 698, 699, 700, 701, 702, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 726, 727, 728, 729, 734, 735, 736, 737, 738, 739, 740, 741, 766, 767, 768, 769, 770, 783, 784, 785, 786, 787, 788, 892, 897, 905, 909, 910, 911, 927, 928, 929, 930, 941, 942, 943, 951, 952, 953, 960, 961, 962, 966, 967, 968, 1090, 1094], "4": [2, 7, 28, 133, 134, 147, 148, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 193, 195, 215, 216, 217, 232, 234, 274, 288, 289, 291, 295, 296, 299, 305, 307, 311, 312, 317, 318, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 365, 369, 373, 376, 382, 384, 385, 386, 387, 410, 415, 418, 419, 422, 427, 430, 434, 436, 441, 449, 452, 455, 459, 460, 469, 471, 472, 473, 497, 519, 535, 547, 548, 550, 551, 552, 561, 562, 563, 565, 566, 569, 577, 578, 581, 582, 586, 589, 606, 609, 610, 612, 613, 618, 630, 643, 645, 647, 654, 655, 658, 695, 715, 716, 722, 725, 726, 729, 742, 745, 758, 761, 762, 765, 771, 772, 774, 776, 777, 778, 783, 792, 801, 810, 811, 812, 814, 815, 816, 846, 851, 857, 859, 861, 862, 863, 892, 895, 896, 897, 899, 902, 904, 905, 909, 911, 912, 915, 917, 924, 935, 937, 941, 943, 960, 962, 963, 965, 975, 986, 989, 991, 992, 993, 994, 995, 996, 997, 1000, 1005, 1008, 1009, 1012, 1017, 1020, 1021, 1024, 1025, 1027, 1028, 1029, 1030, 1039, 1042, 1073, 1074, 1077, 1078, 1079, 1080, 1082, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1112, 1115, 1116, 1119, 1139, 1144, 1145, 1148, 1153, 1190, 1191, 1192, 1193, 1195], "5": [2, 7, 10, 26, 28, 47, 133, 134, 135, 136, 147, 148, 186, 187, 189, 190, 193, 195, 215, 216, 217, 232, 274, 288, 289, 291, 295, 296, 299, 305, 307, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 343, 344, 347, 348, 363, 365, 369, 373, 380, 384, 385, 386, 410, 415, 418, 419, 422, 427, 430, 434, 436, 441, 449, 452, 455, 458, 459, 460, 469, 471, 472, 473, 497, 519, 535, 547, 548, 550, 551, 552, 561, 562, 563, 565, 566, 569, 577, 582, 585, 586, 589, 602, 605, 606, 609, 610, 611, 612, 613, 618, 630, 643, 644, 645, 647, 654, 655, 658, 695, 715, 716, 722, 725, 726, 729, 742, 745, 758, 761, 762, 765, 771, 772, 774, 775, 776, 777, 778, 783, 784, 785, 792, 801, 811, 812, 815, 816, 846, 851, 857, 859, 861, 862, 863, 892, 895, 897, 898, 904, 905, 906, 908, 909, 911, 912, 915, 917, 924, 941, 943, 960, 962, 963, 965, 975, 986, 989, 991, 992, 993, 994, 995, 996, 997, 1000, 1005, 1008, 1009, 1012, 1017, 1020, 1021, 1024, 1025, 1027, 1028, 1029, 1030, 1039, 1042, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1082, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1112, 1115, 1116, 1119, 1139, 1144, 1145, 1148, 1174, 1185], "z": [2, 7, 49, 133, 134, 135, 136, 186, 187, 189, 195, 234, 291, 299, 329, 330, 331, 332, 369, 373, 376, 382, 384, 497, 531, 547, 561, 562, 563, 565, 586, 589, 606, 609, 630, 654, 655, 658, 695, 715, 716, 783, 791, 792, 811, 812, 813, 814, 816, 845, 905, 909, 911, 975, 976, 979, 981, 984, 991, 992, 995, 1090, 1091, 1111, 1112, 1115, 1116, 1119, 1139], "7": [2, 7, 28, 133, 134, 147, 148, 186, 187, 189, 195, 291, 305, 329, 330, 347, 348, 363, 365, 369, 372, 376, 379, 410, 415, 418, 419, 422, 497, 519, 547, 548, 551, 561, 562, 563, 565, 586, 589, 590, 593, 606, 609, 610, 613, 618, 630, 635, 643, 654, 655, 658, 695, 715, 716, 742, 745, 758, 761, 771, 776, 783, 792, 801, 811, 857, 859, 862, 864, 866, 874, 876, 892, 898, 899, 904, 905, 909, 911, 912, 915, 917, 941, 943, 960, 962, 975, 976, 979, 981, 984, 986, 989, 991, 992, 993, 995, 1005, 1008, 1009, 1012, 1017, 1020, 1030, 1039, 1042, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1090, 1094, 1095, 1096, 1111, 1112, 1115, 1139], "add_ivy_array_instance_method": [2, 163], "cl": [2, 8, 163, 164, 189, 196, 359, 360], "modul": [2, 8, 163, 164, 165, 169, 170, 181, 184, 185, 186, 187, 188, 189, 196, 359, 360, 362, 365, 371, 372, 373, 375, 379, 382, 383, 385, 387, 398, 399, 783, 834, 1078, 1079, 1083, 1153, 1160, 1161, 1162, 1163, 1164, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1188, 1189, 1196, 1197], "to_ignor": [2, 8, 163, 164, 189, 196, 359, 360, 1055, 1066], "loop": [2, 8, 163, 164, 189, 196, 359, 360, 373, 399, 1051, 1052, 1053, 1054], "over": [2, 8, 163, 164, 165, 169, 179, 181, 184, 185, 189, 196, 359, 360, 362, 368, 369, 373, 379, 384, 399, 905, 931, 933, 960, 962, 966, 968, 969, 971, 1073, 1074, 1077, 1078, 1084, 1086, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1188, 1189], "all": [2, 8, 122, 123, 124, 125, 126, 161, 162, 163, 164, 179, 180, 181, 184, 185, 189, 196, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 398, 399, 400, 408, 438, 439, 441, 442, 456, 457, 497, 506, 531, 537, 783, 784, 787, 791, 792, 817, 837, 852, 892, 902, 905, 951, 953, 960, 962, 969, 971, 991, 1009, 1012, 1025, 1028, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1066, 1067, 1068, 1078, 1079, 1084, 1086, 1144, 1153, 1156, 1158], "gener": [2, 8, 136, 163, 164, 184, 185, 189, 196, 332, 359, 360, 363, 364, 365, 366, 367, 368, 369, 372, 375, 376, 377, 378, 379, 380, 381, 382, 384, 386, 387, 398, 399, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 469, 472, 547, 548, 551, 566, 569, 606, 609, 610, 613, 618, 643, 726, 729, 738, 741, 758, 761, 762, 765, 784, 787, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 873, 991, 1005, 1008, 1025, 1028, 1078, 1079, 1080, 1081, 1084, 1086, 1088, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119, 1153, 1190, 1194], "etc": [2, 8, 163, 164, 181, 184, 185, 189, 196, 359, 360, 362, 363, 364, 367, 369, 371, 375, 376, 377, 380, 382, 384, 385, 399, 441, 450, 451, 783, 811, 812, 815, 836, 839, 840, 1078, 1079, 1080, 1081, 1084, 1086, 1095, 1096, 1097, 1099, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1196, 1197], "_wrap_funct": [2, 8, 163, 164, 189, 196, 359, 360, 372, 374], "paramet": [2, 8, 122, 123, 124, 125, 126, 163, 164, 165, 169, 170, 184, 185, 186, 187, 188, 189, 196, 359, 360, 367, 368, 371, 384, 385, 398, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 465, 466, 467, 468, 469, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 496, 497, 506, 507, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782, 783, 784, 787, 789, 790, 791, 792, 793, 794, 795, 796, 798, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 859, 862, 864, 866, 868, 869, 871, 873, 874, 876, 878, 880, 882, 884, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 930, 931, 933, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 950, 951, 953, 954, 956, 957, 959, 960, 962, 963, 965, 966, 968, 969, 971, 972, 974, 975, 976, 979, 981, 984, 986, 989, 991, 992, 995, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1028, 1030, 1031, 1034, 1035, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1156, 1158, 1163, 1164, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197], "we": [2, 8, 163, 164, 165, 170, 171, 177, 178, 179, 180, 181, 189, 196, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 379, 380, 382, 383, 384, 385, 386, 387, 398, 399, 857, 868, 1153, 1159], "want": [2, 8, 163, 164, 165, 170, 180, 189, 196, 359, 360, 361, 362, 363, 371, 385, 386, 387, 399], "list": [2, 8, 122, 123, 124, 125, 126, 163, 164, 184, 185, 189, 193, 196, 289, 333, 334, 359, 360, 362, 364, 365, 367, 369, 377, 378, 380, 382, 385, 386, 387, 399, 441, 442, 443, 444, 452, 453, 454, 458, 460, 467, 497, 506, 507, 516, 518, 519, 522, 523, 526, 527, 541, 783, 792, 846, 851, 855, 859, 861, 863, 892, 893, 894, 895, 896, 897, 898, 899, 905, 960, 962, 991, 997, 1000, 1009, 1012, 1030, 1035, 1038, 1055, 1056, 1057, 1061, 1066, 1067, 1073, 1074, 1077, 1090, 1093, 1144, 1145, 1148, 1149, 1152, 1153, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181], "option": [2, 8, 122, 123, 124, 125, 126, 163, 164, 165, 170, 184, 185, 186, 187, 189, 196, 359, 360, 362, 363, 367, 368, 369, 372, 376, 377, 378, 379, 380, 382, 387, 399, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 466, 468, 474, 475, 476, 477, 484, 496, 497, 516, 540, 541, 542, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782, 783, 789, 795, 796, 798, 801, 802, 803, 805, 806, 807, 809, 811, 812, 815, 823, 834, 836, 839, 840, 847, 848, 857, 887, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 921, 923, 924, 926, 927, 930, 931, 933, 935, 937, 938, 940, 941, 943, 944, 946, 950, 951, 953, 954, 956, 957, 959, 960, 962, 963, 965, 966, 968, 969, 971, 972, 974, 975, 976, 979, 981, 984, 986, 989, 991, 992, 995, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1028, 1030, 1031, 1034, 1035, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1061, 1066, 1067, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1089, 1090, 1091, 1092, 1094, 1095, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1145, 1148, 1149, 1152], "iter": [2, 8, 122, 123, 124, 125, 126, 163, 164, 181, 184, 185, 186, 187, 188, 189, 196, 359, 360, 376, 382, 385, 438, 439, 497, 519, 520, 522, 523, 524, 525, 528, 541, 783, 784, 787, 840, 845, 991, 1001, 1004, 1017, 1020, 1030, 1043, 1046, 1047, 1050, 1055, 1056, 1057, 1061, 1065, 1066, 1067], "ani": [2, 8, 122, 123, 124, 161, 162, 163, 164, 165, 169, 177, 179, 180, 181, 184, 185, 189, 196, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 398, 399, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 469, 472, 497, 542, 547, 548, 551, 561, 566, 569, 610, 613, 627, 630, 643, 654, 655, 658, 675, 678, 726, 729, 758, 761, 762, 765, 771, 783, 784, 787, 804, 805, 806, 807, 808, 811, 822, 829, 830, 831, 832, 847, 848, 857, 868, 892, 895, 902, 904, 991, 1025, 1028, 1051, 1052, 1053, 1054, 1055, 1061, 1065, 1073, 1074, 1077, 1078, 1084, 1086, 1111, 1116, 1119, 1144, 1145, 1148, 1153], "item": [2, 8, 122, 126, 163, 164, 184, 185, 377, 382, 384, 385, 387, 460, 475, 497, 506, 507, 509, 516, 518, 520, 522, 524, 528, 783, 799, 821, 847, 848, 1055, 1060, 1061, 1062, 1063, 1067, 1071, 1072, 1153, 1186, 1187], "don": [2, 8, 163, 164, 181, 189, 196, 359, 360, 362, 363, 364, 377, 386, 399], "t": [2, 8, 163, 164, 165, 170, 180, 181, 189, 196, 359, 360, 362, 363, 364, 365, 369, 377, 382, 384, 385, 386, 387, 399, 783, 792, 892, 901, 902], "an": [2, 8, 122, 125, 126, 163, 164, 180, 181, 184, 185, 189, 196, 359, 360, 362, 363, 364, 365, 367, 368, 369, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 398, 399, 410, 419, 423, 426, 431, 433, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 466, 467, 468, 469, 472, 480, 485, 486, 488, 497, 519, 523, 542, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782, 783, 794, 795, 796, 798, 800, 809, 810, 811, 823, 827, 829, 830, 831, 832, 852, 853, 854, 857, 873, 887, 889, 890, 892, 895, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 930, 934, 935, 937, 938, 940, 944, 946, 947, 949, 950, 951, 953, 954, 963, 965, 966, 968, 969, 971, 991, 992, 995, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1021, 1024, 1025, 1028, 1030, 1031, 1034, 1035, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1055, 1061, 1073, 1074, 1077, 1078, 1080, 1081, 1089, 1090, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1153, 1163, 1164, 1186, 1187, 1190, 1191, 1192, 1194], "default": [2, 8, 122, 123, 124, 125, 126, 163, 164, 165, 170, 184, 185, 186, 187, 188, 189, 196, 359, 360, 363, 368, 369, 372, 373, 376, 377, 378, 380, 386, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 466, 468, 475, 476, 477, 478, 497, 506, 507, 516, 517, 521, 522, 523, 524, 525, 526, 527, 528, 529, 536, 538, 539, 540, 541, 542, 545, 546, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782, 783, 784, 787, 789, 795, 796, 798, 801, 802, 805, 806, 807, 809, 810, 811, 812, 815, 820, 821, 822, 823, 824, 827, 828, 829, 830, 832, 833, 834, 836, 838, 839, 840, 843, 845, 847, 848, 855, 856, 857, 859, 862, 864, 866, 868, 869, 871, 873, 874, 876, 878, 880, 882, 884, 887, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 921, 923, 924, 926, 927, 930, 931, 933, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 950, 951, 953, 954, 956, 957, 959, 960, 962, 963, 965, 966, 968, 969, 971, 972, 974, 975, 976, 979, 981, 984, 986, 989, 991, 992, 995, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1028, 1030, 1031, 1034, 1035, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1061, 1065, 1066, 1067, 1068, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1163, 1164, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197], "As": [2, 8, 163, 164, 179, 189, 196, 359, 360, 363, 371, 372, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 399, 1095, 1096, 1097, 1099], "shown": [2, 8, 163, 164, 184, 185, 189, 196, 359, 360, 363, 369, 380, 382, 384, 399, 547, 586, 589, 606, 609, 618, 742, 745, 776, 905, 912, 991, 1005, 1008, 1009, 1012, 1095, 1096, 1097, 1100, 1101, 1104], "appropri": [2, 8, 163, 164, 189, 196, 359, 360, 363, 374, 547, 561, 717, 720, 1090, 1091], "from": [2, 8, 122, 123, 124, 125, 126, 163, 164, 165, 169, 170, 171, 179, 180, 181, 184, 185, 186, 187, 188, 189, 196, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 398, 399, 441, 442, 443, 445, 447, 448, 449, 452, 453, 455, 459, 460, 469, 472, 488, 497, 506, 507, 516, 531, 535, 540, 541, 547, 651, 758, 761, 783, 804, 811, 812, 815, 851, 857, 864, 866, 874, 876, 892, 900, 903, 905, 915, 917, 954, 966, 968, 991, 1009, 1012, 1021, 1024, 1031, 1034, 1051, 1052, 1053, 1054, 1055, 1057, 1067, 1068, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1090, 1094, 1095, 1096, 1098, 1111, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1153, 1159, 1163, 1164, 1174, 1182, 1185, 1190, 1194], "our": [2, 8, 163, 164, 179, 180, 189, 196, 359, 360, 361, 362, 363, 369, 376, 381, 384, 385, 386, 387, 399, 1153], "toi": [2, 8, 163, 164, 189, 196, 359, 360], "arrayexampl": [2, 8, 163, 164], "import": [2, 8, 163, 164, 165, 169, 180, 189, 196, 359, 360, 364, 367, 368, 369, 373, 375, 376, 377, 378, 379, 382, 384, 385, 387, 399, 497, 538, 1153, 1159], "pass": [2, 8, 163, 164, 165, 169, 184, 185, 186, 187, 188, 189, 196, 359, 360, 364, 368, 369, 370, 371, 372, 373, 375, 376, 379, 380, 384, 399, 460, 474, 497, 506, 541, 547, 578, 581, 783, 794, 827, 857, 890, 1051, 1052, 1053, 1163, 1164, 1186, 1187, 1190, 1194, 1196, 1197], "hasattr": [2, 8, 163, 164, 189, 196, 359, 360, 384], "keepdim": [2, 9, 11, 71, 74, 75, 76, 85, 105, 107, 117, 119, 143, 144, 159, 160, 161, 162, 184, 185, 189, 197, 199, 258, 259, 260, 268, 313, 315, 321, 355, 356, 357, 358, 783, 855, 905, 931, 932, 933, 969, 970, 971, 1090, 1091, 1092, 1111, 1112, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152], "fals": [2, 9, 10, 11, 12, 27, 71, 74, 75, 76, 85, 99, 105, 107, 117, 119, 122, 123, 124, 125, 126, 135, 136, 143, 144, 157, 158, 159, 160, 161, 162, 165, 172, 173, 174, 175, 176, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 369, 376, 379, 385, 386, 387, 411, 413, 415, 417, 421, 422, 423, 425, 427, 429, 431, 432, 434, 436, 460, 466, 469, 471, 472, 473, 478, 497, 516, 517, 528, 532, 533, 536, 541, 544, 546, 547, 548, 550, 552, 555, 556, 557, 559, 563, 564, 565, 566, 568, 570, 572, 576, 577, 578, 580, 582, 584, 586, 588, 589, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 616, 617, 620, 621, 624, 625, 626, 629, 630, 631, 633, 637, 638, 639, 641, 645, 646, 647, 649, 651, 653, 654, 655, 657, 658, 659, 661, 662, 663, 665, 666, 667, 669, 670, 671, 673, 674, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 706, 707, 709, 710, 711, 713, 717, 719, 721, 722, 724, 726, 728, 729, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 767, 769, 772, 774, 775, 777, 778, 779, 781, 783, 784, 785, 786, 787, 788, 791, 792, 796, 797, 801, 804, 808, 810, 812, 814, 816, 820, 827, 829, 830, 832, 833, 845, 855, 857, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 905, 906, 907, 908, 927, 929, 931, 932, 933, 954, 969, 970, 971, 976, 978, 980, 981, 983, 985, 986, 988, 990, 991, 992, 994, 996, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1030, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1061, 1065, 1066, 1067, 1068, 1074, 1076, 1078, 1079, 1084, 1085, 1087, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1163, 1164, 1186, 1187, 1190, 1191, 1192, 1193, 1194, 1195], "all_equ": [2, 135, 136, 189, 292, 331, 332, 783, 788], "equality_matrix": [2, 10, 135, 136, 189, 198, 292, 331, 332, 783, 784, 785, 786, 787, 788], "contain": [2, 10, 122, 125, 126, 135, 136, 179, 182, 183, 184, 185, 188, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 368, 369, 371, 372, 377, 379, 380, 381, 382, 383, 386, 387, 399, 410, 411, 415, 419, 422, 423, 426, 427, 431, 433, 434, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 469, 472, 497, 518, 519, 522, 531, 535, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 730, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782, 783, 784, 785, 787, 789, 792, 795, 796, 798, 800, 801, 808, 811, 812, 815, 822, 831, 851, 852, 853, 857, 859, 862, 864, 869, 874, 878, 882, 892, 895, 898, 899, 904, 905, 906, 908, 909, 911, 912, 915, 917, 918, 920, 921, 923, 924, 926, 927, 930, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 951, 953, 954, 956, 957, 959, 960, 962, 963, 965, 966, 968, 969, 971, 975, 976, 979, 981, 984, 986, 989, 991, 992, 995, 997, 1001, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1025, 1028, 1030, 1031, 1035, 1039, 1042, 1043, 1047, 1051, 1052, 1053, 1054, 1055, 1068, 1073, 1074, 1077, 1078, 1079, 1080, 1083, 1084, 1086, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1104, 1106, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1153, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1190, 1194, 1196, 1197], "x1": [2, 10, 135, 136, 189, 198, 291, 292, 298, 303, 310, 329, 330, 331, 332, 369, 380, 460, 492, 497, 535, 547, 561, 564, 565, 578, 581, 586, 589, 594, 597, 598, 601, 602, 605, 606, 609, 622, 625, 626, 627, 630, 638, 646, 647, 650, 651, 654, 655, 658, 671, 674, 675, 678, 695, 698, 699, 702, 707, 710, 711, 714, 715, 716, 717, 720, 721, 726, 729, 734, 737, 738, 741, 766, 767, 770, 783, 784, 785, 786, 787, 788, 791, 892, 897, 905, 909, 911, 927, 930, 941, 943, 951, 953, 960, 962, 966, 968, 1090, 1094], "mix": [2, 10, 135, 136, 186, 187, 189, 366, 369, 371, 382, 460, 488, 497, 535, 547, 561, 586, 589, 606, 609, 630, 654, 655, 658, 715, 716, 726, 729, 783, 784, 785, 800, 808, 811, 812, 815, 851, 852, 853, 892, 895, 898, 899, 904, 905, 960, 962, 975, 976, 979, 986, 989, 991, 992, 995, 1073, 1074, 1077, 1090, 1094, 1111, 1112, 1115, 1120, 1123, 1139], "nativearrai": [2, 10, 49, 122, 125, 126, 135, 136, 367, 369, 372, 375, 376, 379, 380, 382, 384, 387, 400, 408, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 441, 442, 443, 445, 449, 450, 451, 452, 453, 455, 456, 457, 459, 460, 466, 467, 468, 469, 472, 478, 480, 483, 485, 486, 488, 492, 497, 516, 517, 519, 535, 541, 542, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782, 783, 784, 785, 787, 791, 792, 795, 796, 798, 800, 801, 802, 805, 806, 807, 809, 810, 811, 812, 813, 815, 820, 822, 823, 825, 826, 827, 836, 839, 840, 845, 846, 851, 852, 853, 855, 856, 857, 859, 862, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 887, 889, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 930, 931, 933, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 950, 951, 953, 954, 956, 957, 959, 960, 962, 963, 965, 966, 968, 969, 971, 972, 974, 975, 976, 979, 981, 984, 986, 989, 991, 992, 995, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1028, 1030, 1031, 1034, 1035, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1055, 1057, 1067, 1073, 1074, 1077, 1078, 1079, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1145, 1148, 1149, 1152], "native_arrai": [2, 10, 135, 136, 165, 171, 177, 186, 187, 189, 198, 292, 331, 332, 410, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 441, 452, 460, 469, 472, 497, 519, 535, 547, 548, 551, 566, 569, 586, 589, 606, 609, 610, 613, 630, 643, 654, 655, 658, 715, 716, 722, 725, 726, 729, 758, 761, 762, 765, 776, 783, 784, 785, 786, 787, 788, 792, 800, 801, 808, 811, 812, 815, 846, 851, 852, 853, 857, 859, 862, 892, 895, 898, 899, 904, 905, 909, 911, 912, 915, 917, 960, 962, 975, 976, 979, 986, 989, 991, 992, 995, 1005, 1008, 1009, 1012, 1017, 1020, 1030, 1039, 1042, 1073, 1074, 1077, 1078, 1079, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1111, 1112, 1115, 1116, 1119, 1139, 1144, 1145, 1148], "argsort": [2, 157, 158, 189, 353, 354, 1100], "descend": [2, 12, 99, 157, 158, 189, 200, 282, 293, 308, 353, 354, 905, 954, 956, 957, 959, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110], "stabl": [2, 12, 99, 157, 158, 189, 200, 282, 293, 308, 353, 354, 362, 382, 399, 783, 818, 819, 841, 842, 847, 848, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110], "asin": [2, 133, 134, 189, 329, 330, 547, 1153], "asinh": [2, 133, 134, 189, 329, 330, 547, 1153], "atan": [2, 133, 134, 189, 329, 330, 547, 582, 778, 1153], "atan2": [2, 133, 134, 189, 329, 330, 547, 1153], "atanh": [2, 133, 134, 189, 329, 330, 547, 577, 775, 778, 1153], "binary_cross_entropi": [2, 145, 146, 189, 341, 342, 975], "pred": [2, 18, 34, 100, 145, 146, 189, 208, 223, 283, 294, 297, 309, 341, 342, 372, 376, 379, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990], "bitwise_and": [2, 133, 134, 189, 329, 330, 547], "bitwise_invert": [2, 133, 134, 189, 329, 330, 547], "bitwise_left_shift": [2, 133, 134, 189, 329, 330, 547], "bitwise_or": [2, 133, 134, 189, 329, 330, 547], "bitwise_right_shift": [2, 133, 134, 189, 329, 330, 547], "bitwise_xor": [2, 133, 134, 189, 329, 330, 547], "can_cast": [2, 129, 130, 189, 295, 325, 326, 372, 377, 460, 473], "dtype": [2, 25, 85, 107, 129, 130, 159, 160, 184, 185, 189, 215, 268, 295, 315, 325, 326, 355, 356, 367, 369, 372, 377, 378, 384, 441, 442, 443, 444, 445, 446, 448, 449, 450, 453, 454, 455, 458, 459, 460, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 496, 497, 537, 547, 602, 605, 783, 791, 792, 836, 852, 892, 900, 991, 1005, 1008, 1073, 1074, 1077, 1078, 1084, 1086, 1090, 1091, 1092, 1100, 1106, 1109, 1111, 1112, 1128, 1129, 1130, 1131, 1132, 1135, 1136, 1137, 1138, 1144, 1145, 1148, 1153, 1165, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1196, 1197], "float32": [2, 25, 129, 130, 189, 215, 295, 325, 326, 369, 377, 460, 464, 465, 469, 470, 471, 472, 473, 481, 1073, 1074, 1077], "float64": [2, 25, 129, 130, 377, 460, 466, 469, 470, 472, 481], "bool": [2, 25, 122, 123, 124, 125, 126, 129, 130, 184, 185, 189, 196, 359, 360, 369, 376, 377, 379, 387, 438, 439, 441, 448, 460, 466, 469, 470, 472, 475, 476, 477, 478, 481, 484, 485, 486, 496, 497, 516, 517, 532, 541, 544, 547, 586, 589, 590, 593, 598, 601, 606, 609, 627, 630, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 699, 702, 703, 706, 707, 710, 726, 729, 783, 784, 787, 791, 792, 801, 804, 808, 810, 820, 822, 827, 829, 830, 831, 832, 845, 855, 856, 857, 887, 905, 906, 908, 931, 933, 954, 969, 971, 991, 1030, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1061, 1065, 1066, 1067, 1078, 1079, 1090, 1091, 1092, 1100, 1101, 1104, 1106, 1109, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152], "ceil": [2, 133, 134, 189, 329, 330, 441, 442, 547, 1153], "choleski": [2, 143, 144, 186, 187, 905], "upper": [2, 27, 143, 144, 184, 185, 441, 446, 457, 905, 906, 907, 908, 947, 949, 1078, 1084, 1086], "clip": [2, 147, 148, 184, 185, 189, 296, 343, 344, 372, 376, 379, 382, 385, 387, 547, 715, 716, 783, 795, 796, 798, 991, 996, 1153], "x_min": [2, 28, 147, 148, 184, 185, 189, 217, 296, 343, 344, 382, 387, 991, 992, 993, 994, 995, 996], "x_max": [2, 28, 147, 148, 184, 185, 189, 217, 296, 343, 344, 382, 387, 991, 992, 993, 994, 995, 996], "roll": [2, 28, 147, 148, 189, 307, 343, 344, 376, 380, 991, 992, 993, 1029], "8": [2, 28, 147, 148, 186, 187, 189, 291, 305, 329, 330, 347, 348, 362, 365, 369, 376, 381, 385, 410, 423, 426, 497, 519, 547, 561, 565, 586, 589, 610, 613, 618, 630, 654, 655, 658, 695, 715, 716, 742, 745, 758, 761, 762, 765, 776, 783, 792, 811, 857, 859, 862, 892, 899, 905, 909, 911, 912, 915, 917, 941, 943, 960, 962, 975, 976, 979, 991, 992, 993, 995, 1009, 1012, 1017, 1020, 1030, 1078, 1079, 1080, 1081, 1082, 1090, 1094, 1095, 1096, 1111, 1112, 1115, 1139, 1153, 1174, 1185], "concat": [2, 147, 148, 184, 185, 189, 343, 344, 497, 526, 527, 528, 529, 541, 783, 810, 991, 1153], "xs": [2, 29, 147, 148, 189, 219, 343, 344, 376, 497, 520, 524, 526, 527, 528, 783, 784, 787, 792, 857, 868, 991, 997, 998, 999, 1000], "constant_pad": [2, 147, 148, 189, 343, 344, 991], "pad_width": [2, 30, 121, 147, 148, 189, 220, 322, 343, 344, 991, 1001, 1002, 1003, 1004, 1047, 1048, 1049, 1050], "valu": [2, 30, 147, 148, 184, 185, 186, 187, 188, 189, 220, 322, 343, 344, 363, 369, 371, 372, 376, 377, 378, 379, 380, 382, 384, 387, 399, 441, 442, 446, 448, 449, 450, 451, 460, 466, 475, 476, 477, 497, 509, 540, 541, 547, 548, 551, 553, 561, 566, 569, 574, 610, 613, 625, 627, 630, 631, 634, 643, 646, 647, 650, 651, 654, 655, 658, 671, 674, 675, 678, 715, 716, 717, 720, 726, 729, 730, 733, 734, 737, 742, 745, 776, 779, 782, 783, 795, 796, 798, 799, 804, 810, 811, 812, 815, 821, 824, 828, 838, 839, 840, 841, 842, 843, 856, 857, 859, 862, 864, 866, 868, 874, 876, 887, 891, 892, 893, 894, 895, 896, 897, 898, 899, 902, 903, 904, 905, 914, 926, 935, 937, 944, 946, 947, 949, 950, 951, 953, 954, 956, 957, 959, 969, 971, 991, 992, 995, 1001, 1002, 1003, 1004, 1017, 1020, 1021, 1024, 1047, 1049, 1050, 1051, 1052, 1053, 1055, 1059, 1060, 1061, 1062, 1063, 1068, 1071, 1072, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1088, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1194], "co": [2, 133, 134, 180, 189, 329, 330, 382, 398, 547, 556, 557, 621, 783, 810, 1153], "cosh": [2, 133, 134, 189, 329, 330, 547, 556, 557, 1153], "cross": [2, 143, 144, 186, 187, 905, 975, 976, 979, 981, 984, 986, 989, 1153], "cross_entropi": [2, 145, 146, 189, 341, 342, 372, 376, 379, 975, 986, 989], "det": [2, 143, 144, 186, 187, 905, 950], "diagon": [2, 143, 144, 186, 187, 441, 446, 456, 457, 905, 963, 965], "offset": [2, 36, 57, 115, 143, 144, 149, 150, 189, 244, 345, 346, 905, 915, 916, 917, 963, 964, 965, 1073, 1074, 1075, 1076, 1077], "axis1": [2, 36, 110, 143, 144, 147, 148, 189, 316, 343, 344, 905, 915, 916, 917, 991, 1039, 1040, 1041, 1042], "axis2": [2, 36, 143, 144, 905, 915, 916, 917], "divid": [2, 133, 134, 184, 185, 189, 329, 330, 369, 375, 547, 646, 647, 650, 783, 847, 991, 1030], "eigh": [2, 143, 144, 186, 187, 905], "namedtupl": [2, 38, 86, 143, 144, 905, 918, 919, 920, 947, 948, 949, 954, 1095, 1096, 1097], "eigvalsh": [2, 143, 144, 186, 187, 905], "einsum": [2, 159, 160, 189, 355, 356, 1111, 1139], "equat": [2, 40, 159, 160, 189, 225, 355, 356, 905, 951, 953, 1111, 1112, 1113, 1114, 1115, 1139], "equal": [2, 133, 134, 184, 185, 189, 329, 330, 369, 376, 377, 441, 446, 448, 449, 460, 466, 547, 594, 597, 602, 605, 655, 659, 662, 663, 666, 734, 737, 742, 745, 783, 784, 787, 791, 792, 905, 915, 917, 926, 935, 937, 944, 946, 991, 992, 995, 1001, 1004, 1030, 1047, 1050, 1078, 1084, 1086, 1095, 1096, 1097, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1120, 1123, 1132, 1135, 1136, 1140, 1143], "erf": [2, 133, 134, 189, 329, 330, 547], "exp": [2, 133, 134, 189, 329, 330, 547, 564, 639, 642, 695, 698, 1153], "expand_dim": [2, 147, 148, 189, 343, 344, 382, 385, 991, 1153], "expm1": [2, 133, 134, 189, 329, 330, 547], "flip": [2, 147, 148, 189, 343, 344, 384, 385, 387, 547, 590, 593, 991, 1017, 1020, 1153], "floor": [2, 133, 134, 189, 329, 330, 547, 602, 605, 647, 783, 809, 1153], "floor_divid": [2, 133, 134, 189, 329, 330, 547, 625, 646], "gather_nd": [2, 135, 136, 184, 185, 189, 299, 331, 332, 783, 816, 1153], "indic": [2, 49, 135, 136, 184, 185, 189, 234, 299, 331, 332, 365, 383, 387, 410, 427, 430, 547, 746, 749, 783, 811, 812, 813, 814, 815, 816, 823, 836, 839, 840, 892, 893, 894, 895, 896, 897, 898, 899, 905, 969, 971, 991, 1025, 1028, 1055, 1056, 1058, 1060, 1062, 1063, 1064, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1077, 1078, 1079, 1090, 1091, 1092, 1093, 1095, 1096, 1098, 1100, 1101, 1104, 1106, 1109, 1153, 1156, 1158, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1186, 1187], "union": [2, 49, 108, 122, 125, 126, 135, 136, 143, 144, 184, 185, 367, 369, 372, 375, 376, 377, 378, 379, 380, 382, 387, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 465, 466, 467, 468, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 496, 497, 513, 514, 515, 516, 517, 519, 522, 523, 524, 525, 530, 536, 538, 540, 541, 542, 543, 546, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782, 783, 784, 787, 791, 792, 795, 796, 798, 801, 802, 805, 806, 807, 809, 810, 811, 812, 813, 815, 820, 822, 823, 825, 826, 827, 836, 839, 840, 845, 846, 851, 852, 853, 855, 856, 857, 859, 862, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 887, 889, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 930, 931, 933, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 950, 951, 953, 954, 955, 956, 957, 959, 960, 962, 963, 965, 966, 968, 969, 971, 972, 974, 975, 976, 979, 981, 984, 986, 989, 991, 992, 995, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1028, 1030, 1031, 1034, 1035, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1066, 1067, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1145, 1148, 1149, 1152], "greater": [2, 133, 134, 184, 185, 189, 329, 330, 547, 553, 566, 569, 578, 581, 594, 597, 602, 605, 625, 630, 643, 646, 647, 650, 655, 734, 737, 738, 741, 746, 749, 779, 782, 905, 909, 911, 991, 1031, 1034, 1078, 1084, 1086], "greater_equ": [2, 133, 134, 189, 329, 330, 547, 630, 654], "inv": [2, 143, 144, 186, 187, 384, 905, 944, 1153], "isfinit": [2, 133, 134, 189, 329, 330, 547], "isinf": [2, 133, 134, 189, 329, 330, 547], "isnan": [2, 133, 134, 189, 329, 330, 547], "layer_norm": [2, 149, 150, 189, 345, 346, 1073], "normalized_idx": [2, 57, 149, 150, 189, 244, 345, 346, 1073, 1074, 1075, 1076, 1077], "05": [2, 57, 149, 150, 189, 244, 345, 346, 497, 857, 859, 862, 1073, 1074, 1075, 1076, 1077], "scale": [2, 57, 149, 150, 189, 244, 345, 346, 376, 497, 539, 540, 857, 878, 880, 892, 900, 903, 904, 1073, 1074, 1075, 1076, 1077, 1174, 1182, 1185, 1190, 1193], "new_std": [2, 57, 149, 150, 189, 244, 345, 346, 1073, 1074, 1075, 1076, 1077, 1188, 1189], "less": [2, 133, 134, 180, 184, 185, 189, 329, 330, 363, 369, 376, 380, 381, 382, 547, 553, 556, 557, 560, 566, 569, 578, 581, 610, 613, 617, 621, 679, 682, 683, 686, 691, 694, 734, 737, 738, 741, 746, 749, 758, 761, 905, 926, 935, 937, 944, 946, 969, 971, 1078, 1084, 1086, 1111, 1140, 1143], "less_equ": [2, 133, 134, 189, 329, 330, 547], "log": [2, 133, 134, 189, 329, 330, 362, 363, 372, 376, 379, 382, 385, 441, 451, 547, 564, 638, 687, 690, 695, 698, 905, 914, 950, 1153], "log10": [2, 133, 134, 189, 329, 330, 547], "log1p": [2, 133, 134, 189, 329, 330, 547], "log2": [2, 133, 134, 189, 329, 330, 547], "logaddexp": [2, 133, 134, 189, 329, 330, 547, 564, 638], "logical_and": [2, 133, 134, 189, 329, 330, 547, 1153], "logical_not": [2, 133, 134, 189, 329, 330, 547, 1153], "logical_or": [2, 133, 134, 189, 329, 330, 547, 1153], "logical_xor": [2, 133, 134, 189, 329, 330, 547], "matmul": [2, 143, 144, 189, 339, 340, 367, 373, 382, 905, 954, 1153], "matrix_norm": [2, 143, 144, 184, 185, 905], "ord": [2, 71, 119, 143, 144, 184, 185, 905, 931, 932, 933, 969, 970, 971], "fro": [2, 71, 143, 144, 905, 931, 932, 933], "matrix_rank": [2, 143, 144, 186, 187, 905], "rtol": [2, 72, 82, 143, 144, 905, 926, 935, 936, 937, 944, 945, 946], "matrix_transpos": [2, 143, 144, 186, 187, 384, 905], "max": [2, 159, 160, 184, 185, 189, 355, 356, 460, 480, 483, 547, 715, 783, 795, 796, 798, 806, 839, 840, 905, 926, 935, 937, 944, 946, 1111, 1190, 1192], "mean": [2, 159, 160, 184, 185, 189, 196, 355, 356, 359, 360, 362, 363, 366, 369, 372, 376, 377, 378, 379, 382, 384, 385, 386, 387, 398, 399, 497, 526, 527, 528, 529, 541, 783, 806, 1051, 1052, 1053, 1054, 1055, 1061, 1078, 1083, 1095, 1096, 1111, 1153, 1165], "min": [2, 159, 160, 184, 185, 189, 355, 356, 460, 480, 483, 547, 716, 783, 806, 839, 840, 847, 905, 947, 949, 954, 956, 957, 959, 969, 971, 1111], "multipli": [2, 133, 134, 189, 329, 330, 369, 373, 375, 547, 783, 801], "neg": [2, 133, 134, 189, 329, 330, 372, 376, 379, 410, 415, 418, 422, 441, 442, 446, 547, 659, 662, 663, 666, 717, 720, 734, 737, 738, 741, 905, 954, 966, 968, 969, 971, 991, 1009, 1012, 1025, 1028, 1144, 1145, 1148, 1149, 1152], "not_equ": [2, 133, 134, 189, 329, 330, 547], "outer": [2, 143, 144, 186, 187, 905, 1051, 1052, 1053, 1054], "permute_dim": [2, 147, 148, 189, 343, 344, 991], "ax": [2, 81, 113, 143, 144, 147, 148, 184, 185, 189, 265, 343, 344, 367, 369, 377, 384, 497, 541, 783, 801, 905, 931, 933, 951, 953, 960, 961, 962, 969, 971, 991, 1001, 1004, 1009, 1012, 1013, 1014, 1015, 1016, 1025, 1028, 1031, 1034, 1039, 1042, 1047, 1050, 1090, 1091, 1092, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152], "pinv": [2, 143, 144, 186, 187, 905, 926, 1153], "posit": [2, 122, 123, 124, 133, 134, 189, 329, 330, 380, 385, 398, 440, 441, 446, 460, 480, 497, 521, 525, 529, 547, 548, 551, 659, 662, 663, 666, 717, 720, 738, 741, 783, 810, 905, 906, 908, 991, 1005, 1008, 1025, 1028, 1078, 1088, 1090, 1093, 1144, 1145, 1148, 1149, 1152, 1163, 1164], "pow": [2, 133, 134, 189, 329, 330, 547], "prod": [2, 159, 160, 184, 185, 189, 355, 356, 369, 377, 783, 806, 1111], "qr": [2, 143, 144, 186, 187, 905], "mode": [2, 86, 143, 144, 184, 185, 362, 369, 376, 399, 438, 439, 497, 526, 527, 528, 529, 541, 547, 561, 717, 720, 905, 947, 948, 949], "reduc": [2, 86, 143, 144, 184, 185, 384, 497, 541, 783, 806, 905, 947, 948, 949, 1090, 1091, 1092, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152], "remaind": [2, 133, 134, 184, 185, 189, 329, 330, 547, 783, 809, 991, 1030], "repeat": [2, 147, 148, 184, 185, 189, 343, 344, 363, 368, 369, 373, 375, 376, 783, 807, 991, 1043, 1046], "reshap": [2, 147, 148, 184, 185, 189, 343, 344, 379, 382, 384, 387, 991, 1153], "shape": [2, 90, 147, 148, 184, 185, 189, 193, 273, 289, 305, 306, 333, 334, 343, 344, 347, 348, 363, 367, 368, 369, 377, 378, 379, 380, 382, 384, 385, 386, 387, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 466, 467, 468, 497, 509, 537, 542, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782, 783, 795, 796, 798, 801, 805, 806, 807, 809, 812, 815, 820, 823, 836, 839, 840, 846, 857, 859, 861, 863, 887, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 930, 931, 933, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 950, 951, 953, 954, 956, 957, 959, 960, 962, 963, 965, 966, 968, 969, 971, 972, 974, 975, 976, 979, 981, 984, 986, 989, 991, 992, 995, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1030, 1031, 1034, 1035, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1087, 1089, 1090, 1091, 1093, 1094, 1100, 1101, 1104, 1106, 1109, 1111, 1112, 1115, 1139, 1144, 1145, 1148, 1149, 1152, 1153, 1174, 1176, 1177, 1178, 1179, 1180, 1181, 1188, 1189], "shift": [2, 91, 147, 148, 189, 274, 307, 343, 344, 369, 380, 547, 594, 597, 602, 605, 991, 1025, 1026, 1027, 1028, 1029], "round": [2, 133, 134, 179, 180, 181, 189, 329, 330, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 398, 547, 561, 610, 613, 625, 643, 646, 647, 650, 717, 720, 758, 761, 779, 782, 1153], "sign": [2, 133, 134, 180, 189, 329, 330, 362, 383, 387, 441, 442, 547, 548, 551, 561, 578, 581, 602, 605, 717, 720, 738, 741, 905, 914, 950, 1095, 1096, 1097, 1099, 1111, 1128, 1131, 1136], "sin": [2, 133, 134, 189, 329, 330, 375, 382, 547, 783, 810, 1153], "sinh": [2, 133, 134, 189, 329, 330, 547, 1153], "solv": [2, 143, 144, 186, 187, 383, 398, 905], "sort": [2, 158, 184, 185, 186, 187, 188, 189, 354, 367, 905, 918, 920, 954, 956, 957, 959, 1101, 1104], "sparse_cross_entropi": [2, 145, 146, 189, 341, 342, 975], "sqrt": [2, 133, 134, 189, 329, 330, 547, 905, 969, 971], "squar": [2, 133, 134, 189, 329, 330, 547, 758, 761, 892, 895, 905, 906, 908, 912, 914, 918, 920, 921, 923, 924, 934, 950, 951, 953, 954], "squeez": [2, 147, 148, 189, 343, 344, 991, 1153], "stack": [2, 147, 148, 184, 185, 189, 343, 344, 382, 441, 456, 457, 905, 912, 915, 917, 918, 920, 921, 923, 924, 926, 927, 930, 934, 935, 937, 938, 940, 944, 946, 947, 949, 954, 956, 957, 959, 963, 965, 991, 1055, 1056, 1065, 1066, 1153, 1174, 1183], "std": [2, 159, 160, 189, 355, 356, 369, 1078, 1083, 1095, 1096, 1111], "correct": [2, 105, 117, 159, 160, 189, 313, 321, 355, 356, 363, 364, 366, 372, 376, 377, 378, 380, 460, 492, 991, 992, 995, 1111, 1132, 1133, 1134, 1135, 1140, 1141, 1142, 1143, 1153], "subtract": [2, 133, 134, 189, 329, 330, 369, 375, 547], "sum": [2, 159, 160, 184, 185, 189, 355, 356, 372, 376, 377, 379, 382, 497, 526, 527, 528, 529, 541, 547, 561, 564, 638, 695, 698, 783, 802, 806, 839, 840, 892, 904, 905, 954, 963, 965, 969, 971, 1111, 1112, 1115, 1132, 1135], "svd": [2, 143, 144, 186, 187, 905, 957, 1153], "full_matric": [2, 108, 143, 144, 905, 954, 955, 957], "tupl": [2, 108, 122, 123, 124, 125, 126, 143, 144, 184, 185, 367, 376, 377, 378, 380, 384, 385, 386, 399, 438, 439, 441, 443, 444, 448, 453, 454, 458, 460, 468, 482, 497, 516, 783, 810, 846, 892, 895, 898, 899, 902, 905, 926, 935, 937, 944, 946, 954, 955, 957, 960, 962, 969, 971, 991, 997, 1000, 1001, 1004, 1009, 1012, 1013, 1016, 1021, 1024, 1025, 1028, 1031, 1034, 1035, 1038, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1060, 1062, 1063, 1064, 1066, 1067, 1069, 1070, 1071, 1072, 1078, 1083, 1084, 1086, 1090, 1093, 1095, 1096, 1097, 1098, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152], "svdval": [2, 143, 144, 186, 187, 905, 956], "swapax": [2, 147, 148, 189, 343, 344, 991], "axis0": [2, 110, 147, 148, 189, 316, 343, 344, 991, 1039, 1040, 1041, 1042], "tan": [2, 133, 134, 189, 311, 329, 330, 368, 372, 376, 379, 380, 382, 547, 566, 569, 577, 582, 772, 778, 1095, 1096, 1097, 1100, 1101, 1104, 1153], "56": [2, 111, 133, 134, 189, 311, 317, 329, 330, 369, 547, 577, 582, 758, 761, 771, 772, 773, 774, 778, 857, 859, 862, 905, 941, 943, 1111, 1112, 1115, 1139], "19": [2, 111, 133, 134, 189, 311, 317, 329, 330, 369, 547, 577, 582, 606, 609, 771, 772, 773, 774, 778, 905, 915, 917], "762": [2, 112, 133, 134, 189, 318, 329, 330, 410, 434, 435, 436, 437, 547, 776], "964": [2, 112, 133, 134, 189, 318, 329, 330, 410, 434, 435, 436, 437, 547, 776], "tensordot": [2, 143, 144, 186, 187, 905], "tile": [2, 147, 148, 189, 343, 344, 991, 1153], "rep": [2, 114, 147, 148, 189, 319, 343, 344, 991, 1043, 1044, 1045, 1046], "trace": [2, 143, 144, 184, 185, 186, 187, 382, 399, 783, 829, 830, 832, 905], "trunc": [2, 133, 134, 189, 329, 330, 547], "var": [2, 159, 160, 189, 196, 355, 356, 359, 360, 369, 382, 1051, 1052, 1053, 1111], "vecdot": [2, 143, 144, 186, 187, 905], "vector_norm": [2, 143, 144, 184, 185, 905], "vector_to_skew_symmetric_matrix": [2, 143, 144, 186, 187, 905, 1153], "zero_pad": [2, 147, 148, 189, 343, 344, 991, 1153], "method": [3, 6, 7, 8, 10, 25, 26, 28, 47, 49, 91, 111, 112, 129, 130, 133, 134, 135, 136, 137, 138, 147, 148, 163, 164, 184, 185, 186, 187, 188, 190, 193, 195, 196, 198, 215, 216, 217, 232, 234, 274, 288, 289, 291, 292, 295, 296, 299, 305, 307, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 343, 344, 347, 348, 359, 360, 364, 367, 368, 369, 371, 372, 375, 380, 382, 383, 386, 387, 399, 410, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 435, 436, 437, 441, 447, 469, 470, 471, 473, 547, 548, 549, 550, 552, 562, 563, 565, 566, 569, 577, 582, 586, 589, 606, 609, 610, 611, 612, 613, 618, 630, 643, 644, 645, 647, 654, 655, 658, 695, 715, 716, 722, 725, 726, 729, 742, 745, 758, 761, 762, 765, 772, 773, 774, 776, 777, 778, 783, 784, 785, 786, 788, 799, 800, 811, 812, 813, 814, 816, 839, 840, 851, 853, 857, 859, 860, 861, 863, 874, 876, 878, 880, 892, 898, 904, 905, 906, 908, 909, 911, 912, 975, 976, 979, 991, 992, 993, 994, 996, 1005, 1008, 1009, 1012, 1017, 1020, 1025, 1026, 1027, 1029, 1030, 1039, 1042, 1055, 1056, 1066, 1067, 1068, 1073, 1074, 1077, 1078, 1080, 1082, 1083, 1084, 1086, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1112, 1115, 1116, 1119, 1139, 1144, 1145, 1148, 1153, 1174, 1185, 1186, 1187], "collect": [122, 184, 185, 371, 398, 410, 438, 497, 783, 857, 892, 975, 1055, 1068, 1073, 1078, 1160, 1174, 1188, 1190], "accept": [122, 362, 363, 368, 369, 371, 372, 375, 376, 378, 379, 380, 384, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 469, 472, 547, 548, 551, 561, 566, 569, 586, 589, 606, 609, 610, 613, 618, 643, 703, 706, 707, 710, 726, 729, 738, 741, 742, 745, 758, 761, 762, 765, 771, 776, 783, 811, 892, 895, 904, 905, 912, 991, 1005, 1008, 1009, 1012, 1025, 1028, 1073, 1074, 1077, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119, 1120, 1123, 1144, 1145, 1148, 1153], "args_to_ivi": 122, "arg": [122, 123, 124, 165, 169, 184, 185, 365, 382, 384, 386, 497, 506, 521, 525, 529, 541, 783, 840, 1163, 1164, 1186, 1187], "include_deriv": [122, 123, 124, 125, 126, 1055, 1057, 1067], "kwarg": [122, 123, 124, 165, 169, 182, 183, 184, 185, 186, 187, 188, 189, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 382, 384, 386, 497, 506, 521, 525, 529, 783, 833, 1163, 1164, 1186, 1187], "keyword": [122, 123, 124, 184, 185, 186, 187, 188, 367, 377, 378, 379, 380, 385, 441, 452, 497, 506, 507, 521, 525, 529, 783, 790, 833, 1055, 1061, 1111, 1136, 1186, 1187], "variabl": [122, 123, 124, 125, 126, 184, 185, 186, 187, 368, 373, 376, 377, 379, 380, 385, 386, 387, 399, 783, 793, 825, 826, 827, 828, 829, 830, 832, 849, 857, 864, 866, 868, 869, 871, 873, 874, 876, 878, 880, 882, 884, 887, 890, 892, 903, 905, 951, 953, 1051, 1052, 1053, 1054, 1073, 1074, 1077, 1153, 1163, 1164, 1165, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197], "form": [122, 123, 124, 125, 126, 180, 184, 185, 361, 372, 386, 387, 441, 443, 453, 456, 457, 783, 789, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 892, 905, 906, 908, 912, 915, 917, 918, 920, 921, 923, 924, 926, 935, 937, 938, 940, 944, 946, 947, 949, 951, 953, 954, 956, 957, 959, 963, 965, 1055, 1057, 1067], "nest": [122, 123, 124, 125, 126, 184, 185, 186, 187, 188, 367, 372, 375, 376, 384, 385, 386, 399, 497, 521, 525, 529, 783, 851, 1051, 1052, 1053, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1186, 1187, 1190, 1191, 1192, 1193, 1194, 1195], "otherwis": [122, 123, 124, 125, 126, 165, 177, 184, 185, 375, 377, 378, 380, 382, 384, 441, 442, 460, 466, 469, 472, 475, 476, 477, 497, 516, 547, 659, 662, 663, 666, 667, 670, 783, 793, 854, 857, 873, 887, 905, 906, 908, 912, 966, 968, 969, 971, 1051, 1052, 1053, 1055, 1068, 1090, 1091, 1092, 1094, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152], "argument": [122, 123, 124, 125, 126, 165, 169, 170, 179, 184, 185, 186, 187, 188, 364, 366, 367, 368, 369, 371, 372, 373, 375, 376, 382, 384, 385, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 469, 472, 488, 497, 506, 507, 521, 525, 529, 547, 548, 551, 561, 566, 569, 610, 613, 643, 726, 729, 758, 761, 762, 765, 771, 783, 789, 790, 794, 804, 811, 833, 840, 892, 895, 904, 991, 1025, 1028, 1055, 1061, 1073, 1074, 1077, 1111, 1116, 1119, 1136, 1144, 1145, 1148, 1156, 1158, 1163, 1164, 1186, 1187], "ar": [122, 123, 124, 179, 180, 181, 184, 185, 186, 187, 188, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 398, 399, 400, 408, 441, 442, 497, 506, 507, 531, 535, 537, 541, 547, 614, 703, 706, 707, 710, 742, 745, 750, 753, 771, 783, 784, 787, 791, 792, 793, 817, 823, 824, 828, 835, 837, 849, 892, 901, 905, 909, 911, 926, 927, 930, 931, 933, 935, 937, 944, 946, 954, 956, 957, 959, 966, 968, 991, 992, 995, 1009, 1012, 1025, 1028, 1055, 1057, 1061, 1067, 1078, 1083, 1084, 1086, 1090, 1091, 1092, 1093, 1095, 1096, 1153, 1196, 1197], "unchang": [122, 123, 124, 125, 126], "The": [122, 123, 124, 125, 126, 165, 169, 170, 178, 179, 181, 184, 185, 186, 187, 188, 361, 362, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 385, 386, 387, 398, 410, 411, 414, 415, 418, 422, 427, 430, 434, 437, 438, 439, 441, 442, 447, 451, 456, 457, 460, 464, 465, 466, 474, 479, 481, 482, 484, 487, 492, 496, 497, 506, 507, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 535, 536, 537, 538, 539, 540, 541, 543, 546, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 717, 720, 726, 729, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 771, 775, 776, 778, 779, 782, 783, 789, 791, 794, 795, 803, 804, 810, 812, 815, 825, 826, 827, 829, 830, 831, 832, 834, 839, 840, 841, 842, 843, 846, 847, 848, 856, 857, 859, 862, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 887, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 931, 933, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 950, 951, 953, 954, 956, 957, 959, 960, 962, 963, 965, 966, 968, 969, 971, 975, 976, 979, 981, 984, 986, 989, 991, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1030, 1043, 1046, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1077, 1078, 1079, 1083, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1153, 1163, 1164, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194], "check": [122, 123, 124, 125, 126, 179, 180, 181, 184, 185, 362, 363, 376, 381, 382, 384, 385, 386, 387, 398, 460, 474, 481, 482, 484, 496, 497, 536, 546, 783, 793, 808, 822, 829, 830, 831, 832, 849, 856, 857, 873, 905, 918, 920, 1055, 1056, 1065, 1066, 1067, 1153], "dict": [122, 123, 124, 125, 126, 165, 177, 184, 185, 186, 187, 188, 376, 385, 386, 497, 506, 507, 516, 519, 522, 523, 524, 525, 783, 789, 805, 806, 807, 1055, 1057, 1058, 1061, 1064, 1067, 1068], "whether": [122, 123, 124, 125, 126, 184, 185, 186, 187, 188, 189, 196, 359, 360, 361, 362, 377, 379, 380, 410, 411, 414, 438, 439, 460, 466, 478, 484, 485, 486, 496, 497, 516, 517, 528, 532, 533, 536, 537, 541, 544, 546, 547, 667, 670, 783, 784, 787, 791, 792, 801, 804, 808, 810, 820, 822, 824, 827, 828, 829, 830, 831, 832, 833, 845, 849, 855, 856, 857, 864, 866, 868, 869, 871, 873, 874, 876, 878, 880, 882, 884, 887, 892, 900, 905, 918, 920, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1061, 1065, 1066, 1067, 1068, 1078, 1079, 1144, 1145, 1148, 1149, 1152, 1163, 1164, 1174, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195], "recurs": [122, 123, 124, 125, 126, 184, 185, 362, 365, 372, 376, 386, 399, 1055, 1056, 1057, 1065, 1066, 1067], "deriv": [122, 123, 124, 125, 126, 377, 378, 384, 386, 441, 445, 449, 455, 459, 857, 859, 862, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 1055, 1057, 1067, 1186, 1190, 1194, 1196], "str": [122, 123, 124, 165, 170, 184, 185, 377, 378, 441, 452, 460, 464, 474, 475, 476, 479, 480, 483, 484, 485, 486, 489, 490, 491, 496, 497, 513, 516, 517, 519, 522, 523, 524, 525, 541, 783, 789, 803, 805, 806, 807, 834, 839, 840, 892, 893, 895, 897, 898, 899, 905, 947, 949, 1051, 1052, 1053, 1054, 1055, 1061, 1111, 1112, 1115, 1139], "kei": [122, 123, 124, 184, 185, 186, 187, 188, 376, 385, 497, 509, 783, 789, 799, 892, 903, 904, 1051, 1052, 1053, 1055, 1058, 1064, 1068, 1163, 1164, 1174, 1185, 1190, 1194], "word": [122, 123, 124, 441, 442, 1078, 1084, 1086, 1163, 1164], "ret": [122, 123, 124, 125, 126, 165, 169, 170, 177, 184, 185, 367, 368, 382, 387, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 465, 466, 467, 468, 469, 472, 474, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 496, 497, 506, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 540, 541, 542, 543, 544, 546, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782, 783, 784, 787, 789, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 839, 840, 845, 847, 848, 849, 851, 852, 853, 855, 856, 857, 859, 862, 864, 866, 868, 869, 871, 873, 874, 876, 878, 880, 882, 884, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 930, 931, 933, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 950, 951, 953, 954, 956, 957, 959, 960, 962, 963, 965, 966, 968, 969, 971, 972, 974, 975, 976, 979, 981, 984, 986, 989, 991, 992, 995, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1028, 1030, 1031, 1034, 1035, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1061, 1065, 1066, 1067, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1156, 1158, 1163, 1164, 1190, 1194], "same": [122, 123, 124, 179, 181, 184, 185, 362, 363, 365, 367, 369, 371, 372, 375, 376, 378, 379, 380, 382, 384, 386, 387, 441, 442, 445, 449, 452, 455, 456, 457, 459, 460, 466, 467, 468, 497, 506, 507, 541, 547, 548, 551, 561, 590, 593, 610, 613, 643, 717, 720, 738, 741, 742, 745, 746, 749, 779, 782, 783, 809, 811, 812, 815, 836, 839, 840, 857, 873, 887, 892, 893, 894, 895, 896, 897, 898, 899, 904, 905, 906, 908, 909, 911, 912, 915, 917, 918, 920, 921, 923, 924, 926, 938, 940, 944, 946, 947, 949, 951, 953, 954, 963, 965, 966, 968, 991, 997, 1000, 1009, 1012, 1013, 1016, 1025, 1028, 1031, 1034, 1035, 1038, 1051, 1052, 1053, 1055, 1068, 1095, 1096, 1097, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1136, 1139, 1140, 1143, 1153, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181], "convert": [122, 123, 124, 125, 126, 181, 184, 185, 375, 382, 399, 400, 408, 441, 443, 453, 460, 464, 465, 497, 513, 514, 515, 516, 536, 543, 546, 783, 846, 852, 853, 905, 972, 974, 1055, 1057, 1067, 1068, 1164], "args_to_n": [122, 379, 384], "nativ": [122, 124, 125, 126, 165, 171, 184, 185, 377, 379, 384, 385, 441, 453, 460, 464, 465, 474, 497, 513, 514, 515, 516, 517, 536, 543, 546, 783, 827, 829, 832, 1163, 1164], "backend": [122, 124, 126, 169, 170, 171, 177, 179, 184, 185, 363, 364, 366, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 383, 384, 387, 460, 481, 482, 484, 496, 497, 532, 534, 544, 783, 824, 827, 828, 834, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 890, 1153, 1159, 1163, 1164, 1190, 1191, 1192, 1193, 1194, 1195], "to_ivi": [122, 184, 185, 384, 1055, 1068], "If": [122, 125, 126, 165, 169, 170, 171, 179, 184, 185, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 387, 399, 441, 442, 444, 445, 446, 448, 449, 452, 454, 455, 456, 457, 458, 459, 460, 466, 468, 488, 497, 516, 540, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 578, 581, 610, 613, 614, 617, 618, 621, 635, 638, 639, 642, 643, 679, 682, 683, 686, 691, 694, 695, 698, 703, 706, 707, 710, 717, 720, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 771, 776, 779, 782, 783, 827, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 905, 906, 908, 909, 911, 926, 931, 933, 935, 937, 944, 946, 947, 949, 951, 953, 954, 966, 968, 969, 971, 975, 976, 979, 981, 984, 986, 989, 991, 1005, 1008, 1009, 1012, 1025, 1028, 1030, 1031, 1034, 1035, 1038, 1051, 1052, 1053, 1055, 1067, 1068, 1078, 1083, 1084, 1086, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1153], "set": [122, 125, 126, 156, 165, 169, 170, 171, 177, 179, 184, 185, 352, 361, 363, 366, 367, 372, 374, 375, 376, 377, 378, 379, 382, 384, 385, 497, 516, 526, 527, 538, 539, 540, 541, 547, 578, 581, 783, 784, 787, 841, 842, 843, 844, 857, 864, 866, 869, 871, 873, 874, 876, 878, 880, 882, 884, 905, 909, 911, 926, 931, 933, 935, 937, 944, 946, 951, 953, 1055, 1056, 1065, 1066, 1067, 1071, 1072, 1078, 1088, 1090, 1091, 1096, 1097, 1098, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1132, 1135, 1140, 1143, 1174, 1183, 1190, 1191, 1192, 1193, 1194, 1195], "leaf": [122, 125, 126, 184, 185, 372, 376, 385, 1055, 1056, 1065, 1066], "within": [122, 125, 126, 363, 371, 386, 399, 441, 442, 1078, 1084, 1086], "mayb": [122, 125, 126, 362, 382, 384], "manner": [122, 125, 126, 179, 184, 185, 367, 368, 378, 385, 398, 399, 1055, 1067], "travers": [122, 125, 126, 184, 185, 376, 382, 384, 1055, 1067], "lowest": [122, 125, 126, 184, 185, 372, 399, 1055, 1067, 1078, 1080, 1081], "leav": [122, 125, 126, 184, 185, 186, 187, 189, 368, 369, 371, 372, 376, 377, 379, 380, 385, 386, 991, 1035, 1038, 1055, 1056, 1057, 1065, 1066, 1067], "search": [122, 125, 126, 154, 179, 184, 185, 350, 362, 367, 369, 371, 1091, 1092, 1093, 1094], "s": [122, 125, 126, 165, 169, 170, 171, 177, 180, 181, 184, 185, 361, 362, 363, 365, 366, 368, 369, 371, 373, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 398, 399, 440, 441, 452, 456, 457, 460, 481, 482, 497, 516, 540, 547, 738, 741, 783, 792, 857, 864, 866, 869, 871, 874, 876, 882, 884, 905, 954, 956, 957, 959, 1055, 1061, 1067, 1111, 1132, 1135, 1140, 1143, 1153, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1196, 1197], "case": [122, 125, 126, 180, 184, 185, 186, 187, 188, 362, 363, 364, 367, 368, 369, 372, 373, 375, 376, 377, 378, 379, 380, 382, 384, 386, 387, 399, 441, 452, 497, 536, 543, 546, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 578, 581, 606, 609, 610, 613, 614, 617, 618, 621, 635, 638, 639, 642, 643, 679, 682, 683, 686, 691, 694, 695, 698, 717, 720, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 771, 776, 779, 782, 783, 827, 839, 840, 905, 931, 933, 991, 1021, 1024, 1055, 1058, 1064, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1132, 1135, 1136, 1140, 1143, 1174, 1185, 1186, 1187, 1190, 1194], "to_n": [122, 184, 185], "convers": [123, 124, 125, 126, 181, 184, 185, 381, 383, 387, 398, 399, 1153, 1159], "arraywithcr": 127, "creation": [128, 184, 185, 186, 187, 188, 324, 367, 377, 378, 382, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459], "data_typ": [129, 130, 325, 326, 367, 377, 460, 464, 465, 466, 467, 468, 469, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496], "arraywithdatatyp": 129, "arraywithdevic": [131, 384], "devic": [132, 180, 184, 185, 189, 269, 305, 306, 328, 347, 348, 363, 366, 367, 372, 374, 377, 384, 385, 399, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 499, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 783, 811, 812, 815, 836, 839, 840, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1163, 1164, 1165, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1196, 1197], "arraywithelementwis": [133, 364, 375], "elementwis": [134, 184, 185, 330, 367, 372, 382, 387, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782], "arraywithgener": [135, 384], "arraywithgradi": [137, 384], "gradient": [138, 184, 185, 334, 367, 376, 385, 386, 398, 399, 497, 541, 859, 862, 864, 866, 868, 869, 871, 873, 874, 876, 878, 880, 882, 884, 886, 887, 888, 889, 890, 891, 1051, 1052, 1053, 1054, 1153, 1190, 1191, 1192, 1193, 1194, 1195], "arraywithimag": [139, 384], "imag": [140, 336, 362, 365, 367, 382, 383, 385, 387, 398, 892, 893, 894, 895, 896, 898, 899, 1153], "arraywithlay": 141, "layer": [142, 179, 338, 367, 368, 382, 383, 386, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 1073, 1074, 1077, 1153, 1165, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1196, 1197], "linear_algebra": [143, 144, 339, 340, 367, 384, 905, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 930, 931, 933, 934, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 950, 951, 953, 954, 956, 957, 959, 960, 962, 963, 965, 966, 968, 969, 971, 972, 974], "arraywithlinearalgebra": 143, "arraywithloss": 145, "loss": [146, 342, 367, 372, 385, 386, 387, 976, 979, 981, 984, 986, 989, 1153], "arraywithmanipul": 147, "manipul": [148, 179, 344, 367, 387, 398, 992, 995, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1028, 1030, 1031, 1034, 1035, 1038, 1039, 1042, 1043, 1046, 1047, 1050], "arraywithnorm": 149, "norm": [150, 184, 185, 346, 367, 783, 795, 796, 798, 905, 931, 933, 969, 971, 1074, 1077, 1153, 1189, 1190, 1192], "arraywithrandom": [151, 384], "random": [152, 184, 185, 348, 367, 378, 387, 398, 1079, 1080, 1081, 1083, 1084, 1086, 1088, 1089, 1153], "arraywithsearch": 153, "arraywithset": 155, "arraywithsort": 157, "arraywithstatist": 159, "statist": [160, 189, 196, 356, 359, 360, 367, 377, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1143], "arraywithutil": 161, "util": [162, 358, 367, 378, 497, 530, 1145, 1148, 1149, 1152], "backend_handl": [165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 1153], "contextmanag": [165, 166], "object": [165, 184, 185, 186, 187, 188, 384, 387, 441, 447, 460, 480, 497, 542, 857, 1055, 1058, 1060, 1062, 1063, 1064, 1069, 1070, 1071, 1072, 1078, 1089, 1165, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1186, 1187], "__init__": [165, 166, 169, 170, 184, 185, 186, 187, 188, 189, 367, 373, 377, 382, 384, 385, 386, 387, 460, 461, 462, 463, 497, 498, 505, 506, 507, 508, 509, 510, 511, 512, 857, 858, 1078, 1079, 1083, 1153, 1160, 1161, 1162, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197], "choose_random_backend": 165, "exclud": [165, 167, 369, 382, 441, 442, 1078, 1084, 1086], "clear_backend_stack": 165, "current_backend": [165, 186, 187, 367, 372], "current": [165, 169, 170, 177, 181, 184, 185, 186, 187, 188, 362, 363, 364, 365, 372, 378, 382, 387, 398, 399, 460, 481, 482, 484, 496, 497, 506, 530, 531, 535, 537, 783, 817, 824, 828, 835, 837, 1055, 1056, 1065, 1066, 1153], "prioriti": [165, 169, 184, 185, 363, 379], "global_backend": [165, 169], "which": [165, 169, 170, 179, 180, 181, 184, 185, 186, 187, 188, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 398, 399, 410, 427, 430, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 469, 472, 474, 478, 480, 483, 484, 496, 497, 506, 507, 517, 522, 523, 524, 525, 526, 527, 528, 529, 531, 535, 537, 539, 540, 541, 547, 738, 741, 783, 789, 801, 802, 804, 811, 812, 815, 817, 823, 827, 835, 836, 837, 839, 840, 855, 857, 864, 866, 868, 869, 871, 874, 876, 878, 880, 882, 884, 887, 889, 890, 892, 903, 905, 909, 911, 915, 917, 931, 933, 951, 953, 954, 966, 968, 969, 971, 975, 981, 984, 986, 989, 991, 997, 1000, 1009, 1012, 1017, 1020, 1025, 1028, 1030, 1035, 1038, 1055, 1060, 1061, 1062, 1063, 1068, 1069, 1070, 1071, 1072, 1078, 1079, 1080, 1081, 1084, 1086, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1153, 1156, 1158, 1163, 1164, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1196, 1197], "try": [165, 169, 178, 180, 181, 184, 185, 362, 363, 364, 365, 375, 376, 384, 399, 783, 854, 1153], "infer": [165, 169, 366, 373, 377, 378, 382, 387, 438, 439, 441, 442, 443, 445, 448, 449, 453, 455, 459, 547, 651, 783, 820, 845, 991, 1021, 1024], "when": [165, 169, 179, 180, 184, 185, 186, 187, 188, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 387, 399, 460, 466, 497, 547, 561, 639, 642, 734, 737, 783, 794, 827, 848, 975, 976, 979, 981, 984, 986, 989, 1055, 1066, 1090, 1091, 1092, 1094, 1111, 1116, 1119, 1124, 1127, 1132, 1135, 1140, 1143, 1153, 1186, 1187], "global": [165, 169, 170, 171, 177, 184, 185, 186, 187, 188, 372, 373, 377, 378, 382, 460, 475, 476, 477, 497, 506, 507, 539, 540, 541, 783, 818, 819, 838, 841, 842, 843, 847, 848, 1073, 1074, 1077, 1188, 1189], "numpi": [165, 169, 170, 171, 179, 180, 184, 185, 363, 364, 371, 373, 377, 378, 379, 380, 382, 384, 387, 783, 852, 1111, 1112, 1115, 1139, 1153], "np": [165, 169, 375, 377, 378, 379, 380, 384, 385, 387, 1153], "py": [165, 169, 170, 363, 367, 368, 372, 373, 377, 378, 380, 382, 384, 386, 387, 1078, 1079, 1083], "noqa": [165, 169, 170, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 469, 472, 547, 548, 551, 561, 586, 589, 606, 609, 610, 613, 618, 726, 729, 742, 745, 758, 761, 762, 765, 771, 776, 905, 912, 991, 1005, 1008, 1009, 1012, 1025, 1028, 1111, 1116, 1119], "set_backend": [165, 169, 170, 177, 372, 373, 374, 377, 460, 481, 482, 497, 538, 783, 845, 1153], "ha": [165, 169, 170, 179, 180, 181, 184, 185, 363, 368, 369, 372, 373, 374, 377, 378, 382, 384, 386, 387, 398, 399, 441, 452, 497, 516, 547, 548, 551, 717, 720, 734, 737, 905, 914, 927, 930, 950, 951, 953, 954, 963, 965, 991, 1005, 1008, 1031, 1034, 1095, 1096, 1097, 1099, 1111, 1120, 1123, 1128, 1131, 1132, 1135, 1136, 1140, 1143], "jax": [165, 169, 170, 171, 180, 181, 363, 364, 373, 377, 378, 379, 380, 382, 384, 387, 399, 857, 873, 1095, 1096, 1097, 1099, 1153], "get_backend": [165, 372, 373], "specifi": [165, 170, 184, 185, 366, 371, 372, 377, 378, 379, 380, 382, 385, 386, 387, 441, 442, 444, 448, 450, 451, 454, 456, 457, 458, 460, 466, 468, 497, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 531, 535, 537, 540, 541, 542, 547, 738, 741, 783, 789, 801, 811, 812, 815, 822, 855, 905, 915, 917, 931, 933, 960, 962, 963, 965, 966, 968, 969, 971, 975, 976, 979, 981, 984, 986, 989, 991, 992, 995, 997, 1000, 1001, 1004, 1009, 1012, 1025, 1028, 1031, 1034, 1035, 1038, 1047, 1050, 1055, 1060, 1062, 1063, 1069, 1070, 1071, 1072, 1090, 1091, 1092, 1095, 1096, 1097, 1099, 1100, 1101, 1104, 1111, 1112, 1115, 1128, 1131, 1136, 1139, 1144, 1145, 1148, 1149, 1152], "isn": [165, 170, 363, 385, 399], "associ": [165, 170, 363, 372, 374, 399, 547, 561, 717, 720, 905, 926, 935, 937, 944, 946, 972, 974], "retriev": [165, 170, 363, 783, 789], "i": [165, 170, 363, 365, 366, 382, 385, 387, 441, 442, 452, 547, 548, 551, 578, 581, 594, 597, 602, 605, 610, 613, 625, 643, 646, 647, 650, 659, 662, 715, 716, 722, 725, 734, 737, 738, 741, 783, 791, 792, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 905, 909, 911, 926, 927, 930, 935, 937, 944, 946, 951, 953, 954, 963, 965, 969, 971, 991, 1035, 1038, 1095, 1096, 1097, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1132, 1135, 1136, 1139, 1140, 1143], "e": [165, 170, 180, 181, 361, 363, 365, 366, 376, 385, 399, 440, 441, 452, 460, 465, 488, 497, 513, 547, 548, 551, 578, 581, 594, 597, 602, 605, 610, 613, 625, 635, 643, 646, 647, 650, 659, 662, 679, 682, 687, 690, 715, 716, 722, 725, 734, 737, 738, 741, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 905, 909, 911, 926, 927, 930, 935, 937, 944, 946, 951, 953, 954, 969, 971, 991, 1035, 1038, 1078, 1083, 1084, 1086, 1095, 1096, 1097, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143], "one": [165, 170, 180, 181, 184, 185, 189, 198, 288, 291, 292, 296, 299, 305, 307, 329, 330, 331, 332, 343, 344, 347, 348, 362, 363, 369, 372, 375, 376, 377, 379, 380, 381, 384, 385, 387, 399, 441, 442, 452, 460, 467, 469, 472, 497, 526, 527, 528, 529, 541, 548, 552, 565, 695, 783, 784, 786, 787, 788, 812, 816, 833, 836, 839, 840, 905, 927, 930, 931, 933, 941, 943, 947, 949, 966, 968, 969, 971, 991, 992, 996, 1005, 1008, 1009, 1012, 1025, 1028, 1029, 1031, 1034, 1080, 1082, 1090, 1091, 1093, 1095, 1096, 1097, 1098, 1099, 1111, 1112, 1115, 1139, 1153], "torch": [165, 170, 177, 363, 367, 372, 373, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 399, 438, 439, 460, 481, 482, 497, 538, 783, 845, 991, 1005, 1008, 1153], "tensorflow": [165, 170, 177, 180, 181, 363, 364, 377, 378, 379, 380, 382, 387, 399, 1153], "mxnet": [165, 170, 180, 364, 377, 378, 379, 382, 387, 1153], "either": [165, 170, 177, 184, 185, 362, 363, 365, 368, 369, 372, 373, 376, 377, 378, 382, 384, 385, 399, 441, 447, 547, 561, 564, 578, 581, 638, 663, 666, 679, 682, 683, 686, 691, 694, 695, 698, 717, 720, 738, 741, 746, 749, 750, 753, 771, 783, 804, 829, 833, 834, 905, 927, 930, 1051, 1052, 1053, 1054, 1111, 1128, 1131, 1136, 1174, 1185, 1186, 1187], "doesn": [165, 170, 362, 365, 369, 377, 382, 399], "matter": [165, 170, 179, 369], "been": [165, 170, 363, 368, 372, 373, 376, 377, 378, 380, 382, 398, 399, 497, 516, 783, 805, 806, 807, 1078, 1079], "ivy_np": [165, 170], "ivy_jax": [165, 170], "subsequ": [165, 171, 362, 369, 371, 372, 375, 379, 380, 386], "call": [165, 171, 177, 180, 186, 187, 189, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 399, 497, 541, 783, 838, 843, 854, 857, 868, 1055, 1056, 1061, 1065, 1066, 1174, 1185, 1186, 1187, 1190, 1194], "ndarrai": [165, 171, 375, 377, 378, 379, 380, 384, 441, 443, 453, 783, 852], "Or": [165, 171, 385], "jaxlib": [165, 171, 362, 377, 378, 380, 384], "xla_extens": [165, 171, 377, 378, 380, 384], "devicearrai": [165, 171, 384], "try_import_ivy_jax": 165, "warn": [165, 172, 173, 174, 175, 176], "try_import_ivy_mxnet": 165, "try_import_ivy_numpi": 165, "try_import_ivy_tf": 165, "try_import_ivy_torch": 165, "unset_backend": [165, 373], "unset": [165, 177, 373, 382, 384], "adjust": [165, 177, 1111, 1132, 1135, 1140, 1143], "previous": [165, 177, 362, 365, 371, 372, 382, 783, 794], "implement": [165, 177, 364, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 398, 399, 460, 466, 488, 497, 542, 547, 548, 551, 553, 556, 557, 560, 566, 569, 570, 573, 574, 578, 581, 614, 617, 618, 621, 635, 639, 642, 679, 682, 683, 686, 687, 690, 691, 694, 717, 720, 734, 737, 738, 741, 750, 753, 754, 757, 771, 776, 905, 918, 920, 1095, 1096, 1097, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1153], "wa": [165, 177, 180, 184, 185, 369, 382, 384, 783, 854, 1055, 1068, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152], "last": [165, 177, 181, 184, 185, 363, 369, 373, 399, 410, 427, 430, 497, 516, 892, 902, 905, 909, 911, 915, 917, 931, 933, 963, 965, 966, 968, 975, 981, 984, 986, 989, 991, 1009, 1012, 1025, 1028, 1030, 1035, 1038, 1100, 1101, 1104, 1106, 1109, 1144, 1145, 1148, 1149, 1152, 1174, 1184], "henc": [165, 177, 1095, 1096, 1097, 1099], "here": [165, 177, 362, 363, 364, 367, 369, 376, 380, 382, 383, 384, 385, 386, 387, 398, 399], "tensor": [165, 177, 179, 184, 185, 367, 372, 373, 375, 377, 378, 379, 380, 382, 384, 385, 386, 387, 399, 441, 450, 451, 460, 478, 547, 586, 589, 715, 716, 783, 836, 839, 840, 892, 900, 902, 905, 960, 962, 991, 1005, 1008, 1021, 1024, 1030, 1078, 1079, 1090, 1093, 1153, 1174, 1182, 1184], "howev": [165, 177, 180, 362, 364, 368, 371, 372, 373, 375, 376, 377, 378, 379, 380, 384, 385, 386, 387, 399], "befor": [165, 177, 184, 185, 362, 363, 364, 368, 371, 375, 377, 378, 379, 382, 385, 399, 497, 541, 547, 779, 782, 892, 903, 904, 1051, 1052, 1053, 1055, 1067, 1095, 1096, 1097, 1099, 1111, 1128, 1131, 1136], "becom": [165, 177, 179, 181, 363, 369, 376, 382, 387, 399, 991, 992, 995], "swap": [165, 177, 991, 1039, 1042], "python": [165, 177, 178, 179, 180, 362, 363, 365, 382, 384, 385, 399, 441, 442, 497, 536, 546, 547, 738, 741, 1153, 1159], "op": [165, 177, 367, 382, 399], "eagertensor": [165, 177], "def": [166, 364, 367, 369, 372, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 461, 462, 463, 498, 505, 508, 858, 1153, 1166, 1169, 1172], "ml": [178, 180, 181, 361, 381, 382, 383, 385, 386, 387, 398, 1153, 1159], "explos": [178, 180, 1153], "A": [178, 179, 180, 181, 184, 185, 186, 187, 188, 365, 366, 371, 372, 376, 377, 378, 382, 385, 399, 441, 446, 453, 497, 506, 507, 541, 547, 730, 733, 783, 819, 851, 905, 914, 941, 943, 950, 951, 953, 954, 991, 1030, 1035, 1038, 1055, 1056, 1058, 1060, 1062, 1063, 1064, 1065, 1066, 1069, 1070, 1071, 1072, 1111, 1112, 1115, 1139, 1144, 1145, 1148, 1149, 1152, 1153, 1196, 1197], "huge": [178, 180, 385, 1153], "number": [178, 179, 184, 185, 186, 187, 188, 189, 362, 369, 376, 378, 379, 382, 385, 387, 438, 439, 440, 441, 442, 443, 446, 450, 451, 452, 453, 460, 467, 479, 480, 483, 485, 486, 488, 497, 533, 534, 535, 547, 561, 578, 581, 610, 613, 625, 643, 646, 647, 650, 715, 716, 717, 720, 734, 737, 738, 741, 742, 745, 746, 749, 779, 782, 783, 784, 787, 810, 819, 820, 835, 853, 856, 892, 903, 905, 914, 918, 920, 935, 937, 950, 954, 966, 968, 991, 992, 995, 1001, 1004, 1013, 1016, 1017, 1020, 1025, 1028, 1030, 1035, 1038, 1043, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1078, 1079, 1088, 1090, 1093, 1095, 1096, 1097, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1153, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185], "tool": [178, 181, 363, 383, 387, 398, 399, 1153], "have": [178, 179, 180, 181, 184, 185, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 398, 399, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 466, 467, 468, 480, 497, 542, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782, 783, 795, 796, 798, 801, 805, 806, 807, 809, 812, 815, 823, 836, 839, 840, 857, 873, 887, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 930, 931, 933, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 950, 951, 953, 954, 956, 957, 959, 960, 962, 963, 965, 966, 968, 969, 971, 972, 974, 975, 976, 979, 981, 984, 986, 989, 991, 992, 995, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1028, 1031, 1034, 1035, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1153], "explod": [178, 179, 1153], "onto": [178, 179, 497, 526, 527, 1055, 1061, 1067, 1153], "scene": [178, 179, 366, 381, 383, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 1153], "b": [178, 181, 186, 187, 189, 190, 193, 195, 198, 215, 216, 217, 232, 234, 274, 288, 289, 291, 292, 295, 296, 299, 305, 307, 311, 312, 317, 318, 325, 326, 329, 330, 331, 332, 333, 334, 343, 344, 347, 348, 361, 366, 369, 372, 373, 376, 381, 382, 383, 385, 386, 387, 397, 434, 436, 460, 469, 471, 472, 473, 497, 519, 547, 548, 550, 551, 552, 561, 563, 565, 566, 569, 577, 582, 586, 589, 606, 609, 610, 612, 613, 618, 630, 643, 645, 647, 654, 655, 658, 695, 722, 725, 726, 729, 742, 745, 758, 761, 762, 765, 771, 772, 774, 776, 777, 778, 783, 784, 786, 787, 788, 791, 792, 800, 801, 808, 811, 812, 814, 815, 816, 853, 857, 859, 861, 862, 863, 892, 895, 898, 899, 904, 905, 906, 908, 909, 911, 912, 941, 943, 951, 953, 960, 962, 972, 974, 975, 976, 979, 991, 992, 994, 995, 996, 1005, 1008, 1009, 1012, 1017, 1020, 1025, 1027, 1028, 1029, 1035, 1038, 1039, 1042, 1073, 1074, 1077, 1078, 1080, 1082, 1083, 1084, 1086, 1090, 1092, 1093, 1094, 1100, 1101, 1104, 1111, 1112, 1115, 1116, 1119, 1139, 1144, 1145, 1148, 1153, 1159], "why": [178, 180, 363, 376, 379, 380, 384, 1153], "unifi": [178, 180, 184, 185, 375, 382, 399, 497, 526, 527, 528, 529, 541, 1153], "should": [178, 180, 184, 185, 186, 187, 188, 189, 196, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 385, 386, 438, 439, 441, 452, 456, 457, 460, 468, 497, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 635, 638, 639, 642, 643, 659, 662, 663, 666, 667, 670, 671, 674, 679, 682, 683, 686, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 717, 720, 726, 729, 734, 737, 738, 741, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782, 783, 794, 827, 836, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 892, 904, 905, 906, 908, 909, 911, 912, 915, 917, 924, 926, 927, 930, 935, 937, 941, 943, 944, 946, 947, 949, 951, 953, 954, 960, 962, 963, 965, 966, 968, 969, 971, 991, 1021, 1024, 1078, 1089, 1090, 1091, 1092, 1095, 1096, 1097, 1099, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1143, 1153], "them": [178, 179, 180, 181, 371, 373, 375, 376, 382, 384, 385, 386, 399, 1153], "c": [178, 180, 181, 189, 305, 347, 348, 361, 366, 369, 372, 376, 381, 382, 383, 385, 399, 547, 726, 729, 783, 791, 792, 800, 853, 857, 859, 862, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 892, 898, 991, 1035, 1038, 1080, 1082, 1090, 1093, 1111, 1112, 1115, 1132, 1135, 1139, 1140, 1143, 1153, 1159], "standard": [178, 366, 367, 368, 370, 371, 375, 379, 380, 399, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 469, 472, 480, 547, 548, 551, 561, 566, 569, 586, 589, 606, 609, 610, 613, 618, 643, 726, 729, 742, 745, 758, 761, 762, 765, 771, 776, 905, 912, 991, 1005, 1008, 1009, 1012, 1025, 1028, 1073, 1074, 1077, 1078, 1083, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119, 1132, 1135, 1140, 1143, 1144, 1145, 1148, 1153, 1159, 1188, 1189], "re": [178, 179, 180, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 387, 399, 497, 541, 783, 805, 905, 960, 962, 991, 1025, 1028, 1090, 1094, 1153], "collabor": [178, 179, 180, 1153], "consortium": [178, 180, 1153, 1159], "data": [178, 180, 184, 185, 186, 187, 188, 366, 367, 368, 372, 374, 376, 378, 379, 380, 384, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 464, 465, 466, 468, 469, 472, 474, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 492, 496, 497, 499, 500, 501, 502, 503, 504, 509, 510, 511, 513, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 717, 720, 726, 729, 734, 737, 738, 741, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782, 783, 791, 792, 829, 830, 832, 849, 857, 873, 890, 892, 901, 905, 906, 908, 909, 911, 912, 915, 917, 918, 920, 921, 923, 924, 926, 927, 930, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 951, 953, 954, 960, 962, 963, 965, 966, 968, 969, 971, 991, 1005, 1008, 1009, 1012, 1013, 1016, 1021, 1024, 1025, 1028, 1031, 1034, 1035, 1038, 1078, 1089, 1090, 1091, 1092, 1093, 1100, 1101, 1104, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1153, 1159, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185], "api": [178, 179, 362, 363, 366, 368, 369, 371, 372, 374, 375, 377, 378, 379, 380, 381, 383, 385, 399, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 469, 472, 547, 548, 551, 561, 566, 569, 586, 589, 606, 609, 610, 613, 618, 643, 726, 729, 742, 745, 758, 761, 762, 765, 771, 776, 905, 912, 991, 1005, 1008, 1009, 1012, 1025, 1028, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119, 1144, 1145, 1148, 1153, 1159], "open": [179, 180, 181, 361, 362, 365, 368, 398, 441, 442, 1078, 1080, 1081, 1084, 1086, 1153], "project": [179, 180, 181, 362, 363, 365, 367, 373, 384, 386, 398, 399, 1078, 1079, 1083], "grown": 179, "consider": [179, 369, 380], "recent": [179, 180, 362, 363], "year": [179, 181, 399, 1153], "especi": [179, 362], "deep": [179, 184, 185, 361, 363, 364, 381, 385, 1153], "learn": [179, 180, 362, 364, 366, 372, 381, 387, 398, 547, 651, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 1051, 1052, 1053, 1054, 1153, 1190, 1191, 1192, 1193, 1194, 1195], "can": [179, 180, 181, 361, 362, 363, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 398, 399, 441, 443, 453, 460, 469, 472, 497, 539, 540, 541, 905, 924, 991, 1021, 1024, 1078, 1080, 1081, 1153, 1159], "seen": [179, 180, 369, 384, 385], "rapidli": 179, "increas": [179, 497, 521, 525, 529, 991, 1001, 1004, 1047, 1050, 1055, 1067], "github": [179, 363, 364, 368, 371], "repo": [179, 180, 181, 362, 363, 370, 382, 384, 385, 386, 387, 398, 1153, 1159], "term": [179, 363, 376, 892, 902, 1174, 1184], "time": [179, 180, 181, 362, 363, 364, 371, 372, 376, 377, 380, 382, 385, 387, 399, 857, 864, 866, 874, 876, 892, 902, 991, 1043, 1046, 1051, 1052, 1053, 1054, 1090, 1091, 1092, 1095, 1096, 1097, 1174, 1185, 1186, 1187], "These": [179, 180, 181, 363, 368, 369, 371, 372, 376, 377, 379, 380, 382, 383, 385, 386, 387, 399, 905, 918, 920, 1153, 1159], "written": [179, 362, 367, 368, 375, 379, 380, 382, 384, 387, 399], "mani": [179, 180, 181, 184, 185, 362, 363, 364, 368, 369, 372, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 399, 991, 1030], "differ": [179, 180, 181, 184, 185, 186, 187, 188, 362, 363, 366, 367, 368, 369, 371, 372, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 399, 460, 480, 497, 518, 519, 522, 523, 547, 561, 717, 720, 766, 770, 892, 901, 991, 1035, 1038, 1111, 1128, 1131, 1136, 1153], "while": [179, 180, 184, 185, 186, 187, 188, 362, 363, 369, 373, 379, 386, 387, 399, 547, 703, 706, 707, 710, 1095, 1096, 1111, 1120, 1123], "wonder": [179, 181, 384], "thing": [179, 180, 181, 362, 363, 364, 373, 384, 385], "research": [179, 398], "develop": [179, 180, 181, 361, 362, 363, 364, 398, 399, 1153], "consid": [179, 180, 184, 185, 367, 372, 383, 384, 385, 547, 703, 706, 707, 710, 1095, 1096, 1097, 1099], "speed": 179, "evolv": 179, "sharabl": 179, "code": [179, 180, 181, 184, 185, 186, 187, 188, 189, 193, 289, 333, 334, 362, 363, 364, 365, 366, 368, 369, 372, 373, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 397, 399, 410, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 497, 519, 542, 547, 606, 609, 762, 765, 857, 859, 861, 862, 863, 892, 898, 899, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1112, 1115, 1139, 1153, 1159], "significantli": 179, "hinder": [179, 380], "librari": [179, 180, 181, 382, 387, 397, 399, 497, 542, 547, 639, 642, 703, 706, 707, 710, 905, 918, 920, 1095, 1096, 1097, 1099, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1153], "outdat": 179, "month": 179, "rigor": 179, "maintain": [179, 363, 1100, 1101, 1104, 1106, 1109], "against": [179, 184, 185, 371, 399, 460, 467, 905, 926, 927, 930, 931, 933, 935, 937, 944, 946, 1090, 1091], "newest": 179, "version": [179, 180, 181, 362, 368, 382, 384, 905, 918, 920, 1153], "For": [179, 180, 181, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 398, 399, 441, 442, 452, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 578, 581, 610, 613, 614, 617, 618, 621, 635, 638, 639, 642, 643, 679, 682, 683, 686, 691, 694, 695, 698, 717, 720, 734, 737, 738, 741, 742, 745, 750, 753, 754, 757, 758, 761, 771, 776, 779, 782, 857, 873, 890, 905, 954, 963, 965, 991, 992, 995, 1035, 1038, 1095, 1096, 1097, 1099, 1111, 1116, 1119, 1124, 1127, 1136, 1163, 1164], "softwar": [179, 180, 362, 363], "pipelin": [179, 375, 387], "where": [179, 180, 181, 184, 185, 186, 187, 361, 362, 363, 364, 365, 368, 372, 373, 375, 376, 377, 378, 379, 382, 385, 386, 387, 399, 441, 448, 449, 452, 547, 578, 581, 635, 687, 690, 717, 720, 734, 737, 783, 823, 827, 836, 905, 918, 920, 926, 935, 937, 944, 946, 947, 949, 954, 956, 957, 959, 963, 965, 966, 968, 991, 992, 995, 1001, 1004, 1005, 1008, 1013, 1016, 1035, 1038, 1047, 1050, 1055, 1056, 1066, 1078, 1079, 1090, 1093, 1111, 1132, 1135, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1153], "rapid": [179, 180, 362], "prototyp": 179, "vital": [179, 387], "signific": [179, 180, 399], "bottleneck": 179, "new": [179, 180, 181, 184, 185, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 374, 376, 377, 379, 381, 384, 387, 398, 441, 444, 447, 448, 449, 454, 455, 458, 459, 460, 492, 547, 577, 582, 585, 687, 690, 730, 733, 775, 778, 783, 805, 806, 807, 810, 811, 812, 815, 839, 840, 841, 842, 847, 848, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 991, 1005, 1008, 1021, 1024, 1035, 1038, 1055, 1060, 1071, 1072, 1073, 1074, 1077, 1153, 1163, 1164, 1174, 1184, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195], "futur": [179, 181, 362, 363, 384, 399, 905, 918, 920], "avail": [179, 184, 185, 362, 363, 368, 378, 399, 497, 516, 532, 533, 534, 544, 783, 806], "specif": [179, 184, 185, 364, 372, 375, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 398, 399, 460, 488, 497, 539, 542, 547, 703, 706, 707, 710, 783, 805, 806, 807, 834, 905, 918, 920, 960, 962, 991, 1035, 1038, 1051, 1052, 1053, 1054, 1078, 1079, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1153, 1156, 1158, 1159, 1186, 1187], "quickli": [179, 181, 362, 363, 385, 386], "obsolet": [179, 181], "user": [179, 180, 362, 363, 365, 366, 371, 373, 376, 379, 381, 399, 1174, 1185, 1186, 1187], "constantli": 179, "invent": 179, "wheel": 179, "desir": [179, 184, 185, 460, 466, 469, 472, 497, 542, 783, 823, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185], "provid": [179, 184, 185, 362, 363, 368, 369, 372, 375, 376, 377, 378, 379, 380, 382, 386, 398, 399, 438, 439, 441, 452, 460, 475, 476, 477, 484, 488, 496, 497, 516, 783, 804, 836, 840, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 905, 966, 968, 991, 1009, 1012, 1035, 1038, 1090, 1091, 1111, 1132, 1135, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1190, 1191, 1192, 1193, 1194, 1195], "simultan": [179, 181], "modern": [179, 180], "simpl": [179, 362, 363, 367, 368, 369, 371, 372, 375, 376, 377, 378, 379, 382, 384, 386, 387, 399, 783, 808], "scalabl": [179, 382], "must": [179, 181, 184, 185, 186, 187, 188, 362, 363, 364, 367, 368, 369, 372, 375, 376, 377, 378, 380, 382, 386, 387, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 466, 467, 468, 497, 526, 527, 528, 529, 541, 542, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782, 783, 795, 796, 798, 801, 805, 806, 807, 809, 812, 815, 823, 836, 839, 840, 857, 887, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 930, 931, 933, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 950, 951, 953, 954, 956, 957, 959, 960, 962, 963, 965, 966, 968, 969, 971, 972, 974, 975, 976, 979, 981, 984, 986, 989, 991, 992, 995, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1028, 1031, 1034, 1035, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1190, 1194], "determin": [179, 184, 185, 368, 372, 376, 377, 378, 460, 469, 472, 474, 479, 484, 485, 486, 496, 497, 532, 533, 534, 544, 547, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 594, 597, 598, 601, 602, 605, 606, 609, 614, 617, 618, 621, 622, 635, 638, 639, 642, 659, 662, 663, 666, 667, 670, 679, 682, 683, 686, 691, 694, 695, 698, 711, 714, 717, 720, 734, 737, 738, 741, 750, 753, 754, 757, 758, 761, 771, 775, 776, 778, 783, 784, 787, 791, 792, 822, 824, 828, 829, 830, 831, 832, 849, 856, 857, 873, 892, 903, 905, 906, 908, 909, 911, 912, 914, 915, 917, 924, 926, 927, 930, 935, 937, 941, 943, 944, 946, 950, 951, 953, 963, 965, 966, 968, 969, 971, 1051, 1052, 1053, 1054, 1095, 1096, 1097, 1099, 1144, 1145, 1148, 1149, 1152], "exactli": [179, 181, 369, 376, 378, 1153, 1159], "common": [179, 184, 185, 364, 369, 372, 374, 376, 378, 399], "ground": [179, 371], "li": 179, "between": [179, 184, 185, 186, 187, 188, 369, 371, 372, 375, 376, 380, 381, 383, 384, 385, 387, 398, 441, 442, 460, 480, 547, 578, 581, 734, 737, 975, 976, 979, 981, 984, 986, 989, 991, 1005, 1008, 1035, 1038, 1055, 1061, 1078, 1080, 1081, 1095, 1096, 1097, 1099, 1153, 1190, 1192], "find": [179, 184, 185, 362, 363, 382, 385, 1095, 1096, 1097, 1099, 1153], "exist": [179, 180, 184, 185, 186, 187, 362, 364, 365, 368, 369, 370, 371, 372, 373, 374, 379, 382, 399, 783, 804, 1190, 1194], "essenti": [179, 180, 364, 369, 372, 378], "order": [179, 184, 185, 186, 187, 188, 362, 363, 365, 368, 369, 373, 375, 376, 377, 378, 380, 384, 385, 387, 399, 547, 578, 581, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 905, 918, 920, 931, 933, 954, 956, 957, 959, 969, 971, 991, 1009, 1012, 1051, 1052, 1053, 1090, 1093, 1095, 1096, 1097, 1099, 1100, 1101, 1104, 1106, 1109, 1196, 1197], "design": [179, 180, 366, 379, 382, 384, 399], "univers": 179, "abstract": [179, 376, 386, 399, 497, 512, 1190, 1194], "In": [179, 181, 362, 363, 367, 368, 369, 372, 373, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 398, 399, 497, 536, 542, 543, 546, 547, 561, 717, 720, 738, 741, 783, 789, 827, 991, 1021, 1024, 1078, 1084, 1086, 1153], "languag": [179, 181, 382], "first": [179, 180, 362, 363, 365, 369, 372, 375, 376, 380, 382, 384, 385, 387, 438, 439, 441, 450, 451, 460, 487, 492, 497, 516, 528, 547, 561, 564, 586, 589, 594, 597, 598, 601, 602, 605, 606, 609, 625, 627, 630, 638, 646, 647, 650, 654, 655, 658, 671, 674, 675, 678, 695, 698, 699, 702, 707, 710, 711, 714, 717, 720, 726, 729, 734, 737, 766, 770, 783, 791, 857, 868, 905, 909, 911, 915, 917, 918, 920, 927, 930, 941, 943, 947, 949, 954, 960, 962, 966, 968, 991, 997, 1000, 1025, 1028, 1035, 1038, 1039, 1042, 1051, 1052, 1053, 1054, 1055, 1056, 1065, 1066, 1078, 1089, 1090, 1091, 1092, 1095, 1096, 1097, 1174, 1185, 1186, 1187, 1190, 1194], "see": [179, 361, 362, 363, 364, 370, 372, 376, 378, 380, 384, 385, 398, 399, 441, 442, 447, 450, 451, 460, 468, 488, 547, 561, 564, 586, 589, 594, 597, 598, 601, 602, 605, 606, 609, 622, 638, 639, 642, 671, 674, 695, 698, 707, 710, 711, 714, 717, 720, 726, 729, 734, 737, 738, 741, 766, 770, 905, 926, 935, 937, 944, 946, 951, 953, 966, 968, 969, 971, 1090, 1092, 1095, 1096, 1097, 1099, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1153], "clear": [179, 180, 181, 363, 364, 369, 371, 377, 378, 382, 384, 497, 515], "front": [179, 381, 382, 385, 1153, 1159], "runner": 179, "look": [179, 362, 363, 365, 367, 369, 372, 373, 376, 377, 378, 380, 382, 384, 386, 387, 1153], "littl": [179, 384], "deeper": [179, 363, 366, 381, 497, 521, 525, 529, 1055, 1066, 1067], "follow": [179, 180, 184, 185, 362, 363, 364, 365, 367, 368, 369, 371, 373, 375, 376, 377, 378, 379, 381, 382, 384, 385, 386, 387, 399, 460, 483, 497, 541, 547, 738, 741, 783, 825, 826, 827, 847, 848, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 892, 903, 904, 905, 947, 949, 969, 971, 1055, 1061, 1067, 1095, 1096, 1097, 1099, 1153, 1174, 1184, 1190, 1194], "core": [179, 362, 364, 378, 382, 387, 497, 533, 1153], "principl": 179, "oper": [179, 184, 185, 186, 187, 189, 362, 364, 368, 369, 372, 375, 376, 378, 379, 385, 386, 441, 450, 451, 460, 488, 547, 561, 602, 605, 606, 609, 630, 654, 655, 658, 722, 725, 726, 729, 738, 741, 762, 765, 783, 793, 805, 806, 807, 849, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 892, 893, 894, 895, 896, 897, 898, 899, 901], "expos": [179, 382, 386, 783, 799], "almost": [179, 363, 376, 383, 385], "ident": [179, 181, 184, 185, 372, 374, 376, 384, 385, 399, 497, 531, 1055, 1068, 1153], "uniqu": [179, 372, 376, 399, 497, 506, 507, 1051, 1052, 1053, 1054, 1055, 1061, 1095, 1096, 1097, 1098, 1099], "syntax": [179, 180], "There": [179, 362, 363, 369, 372, 375, 376, 377, 382, 385, 399], "onli": [179, 184, 185, 361, 362, 363, 367, 369, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 397, 399, 497, 537, 547, 703, 706, 707, 710, 905, 927, 930, 947, 949, 991, 1009, 1012, 1055, 1056, 1057, 1065, 1066, 1090, 1091, 1092, 1111, 1120, 1123, 1153, 1190, 1191, 1192, 1193, 1194, 1195], "wai": [179, 180, 362, 373, 379, 384, 385, 386, 387, 399], "unsurprisingli": [179, 369], "fundament": [179, 376, 382], "consist": [179, 184, 185, 375, 379, 497, 529, 905, 918, 920, 1111, 1112, 1115, 1139, 1186, 1187], "each": [179, 180, 181, 184, 185, 186, 187, 188, 189, 363, 364, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 379, 380, 381, 382, 384, 385, 387, 398, 399, 410, 419, 423, 426, 431, 433, 441, 452, 460, 467, 497, 506, 507, 518, 519, 520, 521, 522, 523, 524, 528, 541, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782, 783, 784, 787, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 892, 893, 894, 895, 896, 897, 898, 899, 900, 905, 906, 908, 909, 911, 912, 918, 920, 926, 927, 930, 935, 937, 938, 940, 944, 946, 951, 953, 954, 991, 1001, 1004, 1017, 1020, 1025, 1028, 1030, 1035, 1038, 1043, 1046, 1047, 1050, 1055, 1061, 1068, 1078, 1079, 1090, 1093, 1095, 1096, 1097, 1111, 1112, 1115, 1139, 1153, 1159, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1185, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197], "veri": [179, 180, 362, 363, 367, 369, 371, 372, 376, 378, 379, 380, 383, 385, 386, 387, 399, 1153], "similar": [179, 367, 376, 377, 378, 385, 399, 547, 738, 741, 892, 903, 1174, 1185], "convent": [179, 398, 905, 927, 930, 1111, 1112, 1115, 1139], "those": [179, 184, 185, 362, 363, 364, 376, 382, 387, 441, 442, 857, 890, 905, 947, 949, 954, 991, 992, 995], "introduc": [179, 376, 385, 991, 1025, 1028, 1095, 1096], "2006": 179, "therefor": [179, 363, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 379, 380, 382, 384, 386, 399, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 469, 472, 547, 548, 551, 561, 566, 569, 610, 613, 643, 726, 729, 758, 761, 762, 765, 771, 783, 811, 892, 895, 904, 991, 1025, 1028, 1073, 1074, 1077, 1111, 1116, 1119, 1144, 1145, 1148], "present": [179, 184, 185, 363, 370, 376, 377, 378, 379, 380, 382], "itself": [179, 362, 363, 376, 379, 380, 386, 398, 399, 783, 789, 1055, 1067], "cut": 179, "cloth": 179, "adher": [179, 180, 368, 370, 382, 387], "semant": [179, 382, 387, 547, 738, 741], "up": [179, 180, 181, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 398, 399], "hopefulli": [179, 180, 181, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 398], "paint": [179, 382], "pictur": [179, 382], "how": [179, 181, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 398, 399, 1153, 1159, 1174, 1185, 1186, 1187], "pleas": [179, 180, 181, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 398, 1153], "discuss": [179, 180, 181, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 398, 399, 1153], "faq": [179, 180, 181, 382, 384, 385, 386, 387, 398], "reach": [179, 180, 181, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 398, 497, 521, 525, 529, 1055, 1067], "discord": [179, 180, 181, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 398, 1153], "you": [179, 180, 181, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 398, 399, 1153, 1159], "question": [179, 180, 181, 362, 363, 369, 371, 382, 384, 385, 386, 387, 398, 399, 1153], "central": 180, "goal": [180, 364], "being": [180, 181, 184, 185, 362, 363, 369, 371, 374, 375, 376, 377, 378, 379, 380, 382, 385, 398, 399, 441, 442, 783, 838, 843, 1095, 1098, 1153], "would": [180, 362, 363, 365, 366, 368, 369, 371, 373, 374, 375, 376, 379, 380, 381, 382, 384, 386, 387, 399, 410, 427, 430, 497, 542, 1153], "entir": [180, 181, 184, 185, 363, 369, 370, 371, 375, 376, 379, 384, 385, 386, 387, 399, 497, 541, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1174, 1183], "forgiven": 180, "rais": [180, 184, 185, 363, 379, 382, 384, 460, 468, 547, 635, 734, 737, 783, 793, 818, 827, 841, 848, 854, 905, 927, 930, 934, 966, 968, 991, 1031, 1034, 1035, 1038, 1090, 1093, 1111, 1116, 1119, 1124, 1127, 1144, 1145, 1148, 1149, 1152, 1186, 1187, 1190, 1194], "eyebrow": 180, "somehow": 180, "pytorch": [180, 181, 364, 372, 377, 378, 379, 380, 382, 384, 387, 399, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 1153, 1190, 1191, 1192, 1193, 1194, 1195], "other": [180, 184, 185, 186, 187, 189, 362, 363, 367, 368, 369, 371, 372, 375, 376, 379, 382, 384, 386, 387, 397, 398, 399, 438, 439, 441, 442, 547, 639, 642, 783, 784, 787, 789, 857, 868, 1078, 1084, 1086, 1095, 1098, 1111, 1132, 1135, 1140, 1143, 1153], "strong": [180, 399], "industri": 180, "back": [180, 375, 381, 382, 384, 399, 1153, 1159, 1186, 1187, 1190, 1194], "momentum": 180, "won": [180, 181, 363, 387], "ad": [180, 189, 196, 359, 360, 362, 363, 364, 367, 368, 369, 371, 372, 374, 375, 376, 377, 379, 380, 382, 386, 399, 783, 847, 848, 905, 918, 920, 991, 1005, 1008, 1196, 1197], "just": [180, 181, 362, 363, 368, 369, 371, 372, 379, 382, 384, 385, 399, 1111, 1112, 1115, 1139, 1174, 1183], "make": [180, 181, 362, 363, 364, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 379, 380, 382, 384, 385, 387, 497], "problem": [180, 363, 375, 384], "even": [180, 181, 362, 363, 368, 372, 377, 378, 380, 384, 385, 386, 387, 399, 547, 734, 737, 742, 745], "wors": 180, "rather": [180, 184, 185, 367, 368, 371, 376, 387, 399, 441, 442, 497, 541, 783, 829, 830, 832, 857, 873], "funni": 180, "comic": 180, "strip": 180, "easi": [180, 362, 363, 372, 376], "feasibl": 180, "space": [180, 441, 442, 450, 451, 783, 810], "unlik": [180, 369, 376, 497], "charger": 180, "charact": 180, "encod": [180, 385, 783, 810], "instant": [180, 1153], "messag": [180, 363, 382, 384, 1199, 1200], "much": [180, 363, 367, 375, 376, 379, 382, 384, 385], "doe": [180, 184, 185, 363, 365, 366, 367, 368, 369, 371, 372, 373, 377, 379, 380, 382, 384, 385, 399, 547, 606, 609, 783, 827, 991, 1030], "mandat": [180, 371, 379], "adopt": [180, 363, 375], "continu": [180, 181, 370, 371, 399], "own": [180, 181, 362, 368, 382, 399], "signatur": [180, 367, 368, 369, 376, 377, 378, 379, 380, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 456, 457, 458, 459, 460, 469, 472, 547, 548, 551, 566, 569, 606, 609, 610, 613, 618, 643, 726, 729, 758, 761, 762, 765, 991, 1005, 1008, 1025, 1028, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119], "replac": [180, 184, 185, 363, 365, 369, 371, 374, 376, 377, 378, 382, 384, 387, 399, 783, 839, 840, 991, 992, 995, 1078, 1079], "your": [180, 181, 361, 362, 364, 365, 367, 368, 385, 386, 399, 1153], "10": [180, 182, 183, 184, 185, 186, 187, 188, 189, 242, 301, 305, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 362, 365, 369, 376, 382, 384, 385, 441, 448, 451, 497, 547, 586, 589, 590, 593, 618, 630, 654, 655, 658, 683, 686, 758, 761, 783, 801, 811, 838, 843, 857, 874, 875, 876, 877, 892, 898, 905, 912, 915, 917, 941, 943, 960, 962, 991, 1009, 1012, 1017, 1020, 1030, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1082, 1090, 1093, 1095, 1096, 1111, 1112, 1115, 1116, 1119, 1139, 1190, 1192], "100": [180, 181, 189, 305, 347, 348, 385, 386, 387, 399, 547, 758, 761, 1080, 1082, 1153], "despit": [180, 376, 378], "distinct": [180, 368, 376, 379, 381, 1095, 1096, 1097, 1099, 1153], "still": [180, 184, 185, 368, 371, 377, 384, 386, 399, 1153], "believ": [180, 363], "share": [180, 184, 185, 369, 371, 372, 373, 376, 382, 460, 492], "bring": [180, 382, 383], "benefit": [180, 181, 362, 363, 375, 376, 379, 384, 385, 399], "unrel": [180, 363], "what": [180, 181, 363, 366, 368, 369, 374, 376, 380, 381, 382, 384, 385, 386, 387, 398, 399, 1153], "again": [180, 181, 363, 367, 369, 376, 379, 385, 387, 399], "contrari": 180, "bumpi": 180, "road": 180, "allud": [180, 385], "most": [180, 184, 185, 362, 363, 367, 371, 372, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 399, 905, 918, 920], "technolog": 180, "sector": [180, 547, 556, 557, 560, 570, 573, 577, 582, 585, 617, 621, 775, 778], "full": [180, 181, 186, 187, 363, 368, 377, 380, 382, 399, 441, 460, 480, 547, 630, 654, 655, 658, 892, 898, 905, 947, 949, 951, 953, 954, 1073, 1074, 1077], "success": 180, "reason": [180, 363, 367, 369, 372, 375, 376, 377, 379, 382, 384, 547, 738, 741], "build": [180, 361, 362, 372, 381, 383, 386, 387, 399, 1095, 1096, 1097, 1099, 1153, 1174, 1185, 1186, 1187], "custom": [180, 386], "comput": [180, 181, 184, 185, 362, 372, 376, 382, 385, 399, 497, 541, 547, 561, 586, 589, 598, 601, 606, 609, 627, 630, 631, 634, 651, 654, 655, 658, 671, 674, 675, 678, 699, 702, 703, 706, 707, 710, 711, 714, 717, 720, 722, 725, 726, 729, 783, 795, 796, 798, 801, 802, 857, 859, 862, 864, 866, 868, 869, 871, 874, 876, 878, 880, 882, 884, 887, 889, 892, 893, 894, 895, 896, 897, 898, 899, 901, 903, 905, 906, 908, 909, 911, 914, 918, 920, 921, 923, 924, 927, 930, 931, 933, 947, 949, 950, 951, 953, 954, 966, 968, 969, 971, 975, 976, 979, 981, 984, 986, 989, 1055, 1061, 1095, 1096, 1097, 1099, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1143], "thank": [180, 385], "interoper": 180, "compon": [180, 382], "bio": [180, 362], "hardwar": [180, 362], "initi": [180, 184, 185, 186, 187, 188, 363, 373, 377, 378, 497, 892, 902, 1167, 1168, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1190, 1194], "pcie": 180, "interfac": [180, 387, 399], "motherboard": 180, "raid": 180, "storag": [180, 385], "virtual": [180, 363, 365], "bluetooth": 180, "wireless": 180, "exchang": 180, "btx": 180, "factor": [180, 497, 506, 539, 540, 541, 857, 859, 862, 864, 866, 874, 876, 878, 880, 892, 893, 894, 895, 896, 897, 898, 899, 905, 906, 908, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1190, 1191, 1192, 1193], "sata": 180, "connect": [180, 362, 386, 387, 1174, 1184, 1185], "host": [180, 399], "bu": 180, "adapt": [180, 857, 878, 880, 1190, 1193], "html": [180, 365, 368, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 456, 457, 458, 459, 460, 469, 472, 547, 548, 551, 566, 569, 606, 609, 610, 613, 618, 643, 726, 729, 758, 761, 762, 765, 991, 1005, 1008, 1025, 1028, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119], "enabl": [180, 184, 185, 186, 187, 188, 362, 363, 371, 372, 375, 376, 379, 381, 382, 383, 385, 387, 399], "anyon": [180, 361, 399], "websit": 180, "tcp": 180, "ip": 180, "node": [180, 184, 185, 376, 1055, 1056, 1065, 1066], "commun": [180, 361, 363, 364, 399, 1153, 1159], "network": [180, 372, 376, 382, 386, 398, 892, 901, 1153, 1160, 1174, 1186, 1187], "smtp": 180, "possibl": [180, 361, 362, 363, 364, 368, 369, 371, 376, 377, 379, 382, 385, 398, 399, 783, 833, 851, 1111, 1116, 1119, 1124, 1127], "send": 180, "gmail": 180, "outlook": 180, "pop": 180, "email": 180, "ieee": [180, 440, 460, 480, 547, 561, 639, 642, 717, 720, 738, 741, 758, 761], "754": [180, 440, 460, 480, 547, 561, 639, 642, 717, 720, 738, 741, 758, 761], "allow": [180, 382, 399, 441, 450, 451, 783, 833, 1186, 1187], "calcul": [180, 184, 185, 186, 187, 188, 368, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 578, 581, 614, 617, 618, 621, 622, 635, 638, 639, 642, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 717, 720, 734, 737, 750, 753, 754, 757, 758, 761, 766, 770, 771, 776, 975, 976, 979, 981, 984, 986, 989, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143], "live": [180, 181], "depend": [180, 362, 363, 368, 374, 376, 377, 382, 399, 460, 466, 547, 548, 551, 553, 556, 557, 560, 566, 569, 570, 573, 574, 578, 581, 614, 617, 618, 621, 635, 639, 642, 679, 682, 683, 686, 687, 690, 691, 694, 734, 737, 750, 753, 754, 757, 771, 776, 905, 918, 920, 947, 949, 951, 953, 954, 1090, 1094, 1100, 1101, 1104, 1106, 1109], "did": [180, 364, 387], "aris": [180, 399], "until": [180, 363, 399, 1153], "substanti": [180, 363, 371, 375], "innov": 180, "growth": 180, "usag": [180, 382, 497, 541], "relev": [180, 362, 364, 369, 376, 377, 385, 1190, 1191, 1192, 1193, 1194, 1195], "area": [180, 379, 397, 547, 556, 557, 560, 570, 573, 577, 582, 585, 617, 621, 775, 778, 1153], "necess": 180, "parti": [180, 399], "could": [180, 181, 362, 363, 369, 371, 376, 377, 379, 382, 384, 385, 386, 1095, 1096, 1097, 1099], "easili": [180, 363, 385, 386, 387, 399, 1153], "engag": [180, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380], "regard": [180, 376, 497], "effect": [180, 368, 375, 376, 380, 399, 441, 452, 857, 882, 884, 1111, 1132, 1135, 1140, 1143], "2015": 180, "sinc": [180, 362, 363, 399], "alongsid": 180, "machin": [180, 362, 372, 398, 460, 480, 483, 547, 651, 905, 926, 935, 937, 944, 946], "given": [180, 181, 184, 185, 362, 363, 364, 365, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382, 384, 386, 387, 398, 441, 442, 444, 450, 451, 497, 530, 536, 538, 539, 540, 541, 543, 546, 783, 801, 802, 812, 815, 839, 840, 855, 857, 859, 862, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 892, 893, 894, 895, 896, 897, 898, 899, 905, 972, 974, 975, 976, 979, 981, 984, 986, 989, 991, 992, 995, 1005, 1008, 1009, 1012, 1017, 1020, 1025, 1028, 1030, 1043, 1046, 1055, 1062, 1063, 1078, 1080, 1081, 1083, 1084, 1086, 1089, 1100, 1106, 1109, 1163, 1164], "frame": [180, 398], "matur": [180, 399], "state": [180, 368, 380, 381, 382, 383, 385, 398, 547, 717, 720, 892, 902, 1153, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197], "than": [180, 184, 185, 363, 367, 369, 371, 376, 379, 382, 385, 386, 387, 399, 441, 442, 460, 480, 497, 541, 547, 553, 556, 557, 560, 566, 569, 578, 581, 594, 597, 602, 605, 610, 613, 617, 621, 625, 643, 646, 647, 650, 679, 682, 683, 686, 691, 694, 715, 734, 737, 738, 741, 746, 749, 758, 761, 779, 782, 783, 829, 830, 832, 857, 873, 905, 909, 911, 926, 927, 930, 935, 937, 944, 946, 969, 971, 991, 992, 995, 1009, 1012, 1031, 1034, 1078, 1084, 1086, 1095, 1096, 1097, 1099, 1111, 1128, 1131, 1132, 1135, 1136, 1140, 1143], "preced": [180, 386], "mention": [180, 362, 363, 369, 372, 379, 380], "aros": 180, "70": [180, 905, 941, 943, 1111, 1112, 1115, 1139], "80": [180, 905, 941, 943, 1111, 1112, 1115, 1139], "90": [180, 189, 305, 347, 348, 547, 606, 609, 742, 745, 905, 941, 943, 1080, 1082, 1111, 1112, 1115, 1139], "effort": [180, 361, 399], "stage": [180, 361, 363, 365, 366, 1153], "complet": [180, 184, 185, 363, 364, 375, 376, 384, 385, 905, 947, 949], "natur": [180, 369, 375, 376, 398, 547, 635, 679, 682, 687, 690, 905, 914, 950], "like": [180, 362, 363, 365, 366, 367, 368, 369, 371, 378, 379, 380, 381, 382, 384, 385, 386, 387, 398, 399, 857, 873, 1078, 1084, 1086, 1153], "certainli": 180, "mission": [180, 1153], "creat": [180, 184, 185, 361, 362, 363, 365, 377, 378, 379, 382, 383, 386, 397, 398, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 458, 459, 497, 506, 507, 783, 811, 812, 815, 836, 839, 840, 851, 857, 889, 1078, 1079, 1080, 1081, 1084, 1086, 1153, 1159, 1163, 1164, 1165, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197], "At": [180, 364], "process": [180, 181, 361, 362, 363, 365, 372, 376, 382, 387, 497, 506, 507, 536, 546], "ourselv": 180, "lead": [180, 181, 184, 185, 186, 187, 188, 399, 905, 947, 949, 954], "quansight": 180, "compani": 180, "made": [180, 363, 364, 376, 379, 382, 384], "organ": [180, 367, 372, 375, 376], "panda": 180, "scipi": 180, "conda": [180, 362, 365], "dask": [180, 1095, 1096, 1097, 1099], "apach": 180, "onnx": 180, "scikit": 180, "jupyt": 180, "aw": 180, "cupi": 180, "net": [180, 181, 382, 387], "sympi": 180, "rai": [180, 547, 578, 581], "modin": 180, "spyder": 180, "includ": [180, 184, 185, 363, 364, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 398, 399, 441, 442, 443, 453, 783, 822, 856, 905, 969, 971, 1055, 1056, 1078, 1084, 1086, 1090, 1092, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1156, 1158, 1174, 1184, 1185, 1188, 1189], "member": [180, 363], "googl": [180, 1153], "octoml": 180, "einop": [180, 184, 185, 783, 805, 806, 807], "further": [180, 181, 363, 365, 369, 375, 381, 385, 386, 1153], "sponsor": 180, "lg": 180, "electron": 180, "microsoft": 180, "d": [180, 181, 189, 305, 347, 348, 361, 362, 366, 376, 385, 783, 792, 800, 892, 893, 894, 895, 896, 897, 898, 899, 905, 915, 917, 941, 943, 1080, 1082, 1153, 1159], "shaw": 180, "intel": 180, "togeth": [180, 184, 185, 375, 376, 386, 387, 399, 1196, 1197], "major": [180, 377, 378, 399, 1090, 1093], "involv": [180, 361, 365, 366, 377, 387, 460, 488, 547, 561, 717, 720, 1153, 1159], "anoth": [180, 184, 185, 362, 363, 372, 376, 377, 384, 387, 441, 447, 460, 467, 469, 472], "promis": 180, "pursuit": 180, "unif": [180, 361, 384, 1153, 1159], "clearli": [180, 364, 369], "lot": [180, 181, 374, 384, 399], "thought": [180, 362, 363, 380], "care": [180, 363, 387], "attent": [180, 363, 375, 376, 892, 903, 904, 1174, 1185], "gone": [180, 381], "simplifi": [180, 382, 383, 384, 386], "compat": [180, 380, 399, 460, 468, 547, 561, 564, 578, 581, 586, 589, 594, 597, 598, 601, 602, 605, 606, 609, 622, 625, 627, 630, 638, 646, 647, 650, 654, 655, 658, 671, 674, 675, 678, 695, 698, 699, 702, 707, 710, 711, 714, 717, 720, 726, 729, 734, 737, 738, 741, 766, 770, 905, 926, 935, 937, 944, 946, 951, 953, 960, 962, 966, 968, 969, 971, 991, 1021, 1024, 1090, 1092, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1153], "excit": [180, 361, 366, 1153], "complianc": 180, "hope": [180, 399], "due": [180, 362, 376, 379, 547, 717, 720], "suit": [180, 362, 366, 370, 371, 385, 398], "some": [180, 181, 184, 185, 362, 363, 364, 367, 368, 369, 372, 375, 376, 377, 378, 379, 380, 383, 384, 385, 386, 398, 399, 547, 639, 642, 857, 859, 862, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 890, 892, 900, 1153, 1174, 1182], "motiv": [180, 384], "great": [180, 181, 371, 382, 384], "convinc": 180, "celebr": 180, "encourag": [180, 398, 399, 1153, 1159], "foundat": 180, "point": [181, 363, 368, 369, 375, 379, 380, 382, 384, 385, 398, 440, 441, 442, 444, 446, 448, 454, 458, 460, 466, 480, 485, 488, 547, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 606, 609, 610, 613, 614, 617, 618, 621, 622, 635, 638, 639, 642, 643, 679, 682, 683, 686, 691, 694, 695, 698, 717, 720, 734, 737, 738, 741, 742, 745, 750, 753, 754, 757, 758, 761, 771, 775, 776, 778, 779, 782, 905, 906, 908, 912, 918, 920, 921, 923, 924, 926, 935, 937, 944, 946, 947, 949, 951, 953, 954, 969, 971, 1095, 1096, 1097, 1099, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143], "mai": [181, 362, 363, 376, 384, 386, 441, 442, 447, 497, 542, 547, 627, 630, 654, 655, 658, 675, 678, 703, 706, 707, 710, 783, 804, 1095, 1096, 1097, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1116, 1119, 1120, 1123, 1124, 1127], "ask": [181, 382, 384, 399, 1153], "perfectli": 181, "happi": [181, 362, 399], "abund": 181, "better": [181, 366, 381, 384, 385, 386], "ll": [181, 361, 363, 369, 376, 379, 385], "give": [181, 362, 363, 366, 368, 369, 373, 380, 384, 991, 1021, 1024], "two": [181, 186, 187, 189, 368, 369, 371, 375, 376, 381, 385, 387, 441, 442, 446, 452, 456, 457, 460, 487, 492, 547, 602, 605, 742, 745, 783, 791, 905, 906, 908, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 930, 931, 933, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 950, 951, 953, 954, 956, 957, 959, 963, 965, 966, 968, 991, 1039, 1042, 1095, 1096, 1097, 1098, 1099, 1153], "streamlin": 181, "workflow": [181, 363, 385, 397, 1153], "save": [181, 184, 185, 399, 783, 844, 1186, 1187], "week": [181, 363, 364, 1153], "let": [181, 368, 369, 376, 377, 378, 382, 384, 385, 386, 387, 1111, 1120, 1123, 1132, 1135, 1136, 1140, 1143, 1153], "sai": [181, 362, 374, 384], "deepmind": 181, "releas": [181, 362, 364, 1153], "awesom": 181, "paper": 181, "love": 181, "choic": [181, 362, 379, 385, 1111, 1132, 1135, 1140, 1143], "perceiverio": 181, "happen": [181, 362, 363, 385], "slew": 181, "rush": 181, "f": [181, 365, 366, 376, 382, 385, 387, 547, 651, 783, 824, 828], "g": [181, 366, 376, 399, 460, 465, 488, 497, 513, 1078, 1083, 1084, 1086, 1095, 1096, 1097, 1099, 1111, 1116, 1119, 1124, 1127, 1128, 1131, 1136], "inevit": 181, "deviat": [181, 1073, 1074, 1077, 1078, 1083, 1111, 1132, 1135, 1188, 1189], "origin": [181, 184, 185, 186, 187, 188, 373, 374, 377, 382, 384, 547, 578, 581, 905, 931, 933, 991, 1021, 1024, 1025, 1028], "often": [181, 372, 399], "erron": 181, "train": [181, 372, 376, 378, 385, 386, 387, 397, 398, 399, 857, 859, 862, 864, 866, 874, 876, 1153], "poor": 181, "converg": 181, "perform": [181, 184, 185, 367, 369, 371, 372, 373, 375, 376, 378, 379, 380, 382, 385, 399, 410, 427, 430, 441, 450, 451, 497, 783, 801, 805, 806, 807, 825, 826, 827, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 892, 900, 902, 905, 954, 1051, 1052, 1053, 1054, 1055, 1062, 1063, 1144, 1145, 1148, 1149, 1152], "issu": [181, 361, 364, 382, 384, 386, 399], "publish": [181, 399], "manag": [181, 361, 379, 399, 497], "get": [181, 184, 185, 361, 362, 364, 366, 372, 377, 378, 379, 382, 383, 384, 385, 386, 460, 478, 479, 480, 483, 497, 506, 507, 516, 517, 530, 531, 536, 540, 543, 546, 783, 790, 817, 818, 819, 838, 1153, 1159, 1174, 1183], "work": [181, 362, 363, 364, 366, 371, 376, 377, 378, 381, 382, 383, 384, 386, 387, 1153, 1159], "repositori": [181, 362, 363, 365, 370], "pull": [181, 361, 362, 365, 367, 399], "request": [181, 361, 367, 497, 533], "confus": [181, 379], "do": [181, 184, 185, 362, 363, 364, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 399, 547, 738, 741, 783, 827, 857, 873, 890, 1055, 1056, 1065, 1066, 1067], "expect": [181, 399, 783, 790, 1153], "codebas": [181, 361, 366, 367, 379, 381, 497, 539, 540, 1153], "total": [181, 184, 185, 186, 187, 188, 361, 363, 369, 371, 378, 385, 386, 399, 497, 543, 1090, 1093, 1111, 1132, 1135, 1140, 1143], "hour": 181, "spent": 181, "spin": 181, "off": [181, 381, 905, 915, 917, 963, 965], "test": [181, 362, 364, 366, 369, 399, 460, 485, 486, 547, 659, 662, 663, 666, 667, 670, 1144, 1145, 1148, 1149, 1152], "error": [181, 184, 185, 362, 371, 375, 378, 380, 384, 399, 410, 411, 414, 497, 547, 631, 634, 1111, 1116, 1119, 1124, 1127, 1186, 1187, 1190, 1194], "address": [181, 363, 364, 375, 382], "sake": 181, "singl": [181, 184, 185, 363, 367, 369, 371, 372, 374, 376, 379, 380, 382, 385, 386, 387, 399, 497, 506, 507, 526, 527, 528, 529, 783, 853, 856, 1078, 1083, 1084, 1086, 1095, 1096], "multipl": [181, 184, 185, 189, 198, 291, 292, 296, 299, 305, 307, 329, 330, 331, 332, 343, 344, 347, 348, 363, 369, 372, 376, 399, 547, 565, 695, 717, 720, 783, 784, 786, 787, 788, 812, 816, 833, 905, 924, 991, 992, 995, 996, 1025, 1028, 1029, 1030, 1073, 1074, 1077, 1080, 1082, 1090, 1091, 1092, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1174, 1184], "line": [181, 362, 369, 375, 383, 384, 385, 386, 397, 1153, 1159], "directli": [181, 363, 367, 368, 372, 375, 376, 377, 378, 379, 380, 382, 384, 386, 387, 398, 399, 1055, 1067], "graph": [181, 372, 376, 383, 399, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 1095, 1096, 1097, 1099, 1186, 1187], "guarante": [181, 375, 399, 1095, 1096], "turn": [181, 369, 376], "take": [181, 361, 362, 363, 368, 369, 371, 376, 377, 378, 382, 384, 386, 387, 399, 547, 606, 609, 1153, 1159], "few": [181, 363, 364, 372, 376, 377, 378, 379, 383, 384, 385, 386, 397, 1153, 1159], "second": [181, 362, 369, 379, 384, 460, 487, 492, 497, 528, 547, 561, 564, 586, 589, 594, 597, 598, 601, 602, 605, 606, 609, 625, 627, 630, 638, 646, 647, 650, 654, 655, 658, 671, 674, 675, 678, 695, 698, 699, 702, 707, 710, 711, 714, 717, 720, 726, 729, 734, 737, 766, 770, 783, 791, 838, 843, 857, 859, 862, 864, 866, 874, 876, 905, 909, 911, 915, 917, 918, 920, 927, 930, 941, 943, 947, 949, 954, 960, 962, 966, 968, 991, 1035, 1038, 1039, 1042, 1051, 1053, 1095, 1096, 1097, 1190, 1191, 1192], "automat": [181, 362, 363, 372, 376, 380, 381, 382, 383, 386, 387, 1153], "everyon": [181, 361, 363, 399], "regardless": [181, 184, 185, 361, 384, 387, 438, 439], "wouldn": 181, "nice": [181, 371], "write": [181, 184, 185, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 379, 382, 384, 387, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 466, 468, 497, 542, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782, 783, 795, 796, 798, 801, 802, 805, 806, 807, 809, 811, 812, 815, 823, 836, 839, 840, 857, 887, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 921, 923, 924, 926, 927, 930, 931, 933, 935, 937, 938, 940, 941, 943, 944, 946, 950, 951, 953, 954, 956, 957, 959, 960, 962, 963, 965, 966, 968, 969, 971, 972, 974, 975, 976, 979, 981, 984, 986, 989, 991, 992, 995, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1028, 1031, 1034, 1035, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1089, 1090, 1094, 1095, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1145, 1148, 1149, 1152], "onc": [181, 362, 363, 376, 377, 378, 382, 385, 399, 497, 541, 905, 924, 954, 1078, 1079], "know": [181, 363, 1095, 1096, 1097, 1099], "among": [181, 184, 185, 371], "frantic": 181, "port": 181, "lucid": 181, "honk": 181, "improv": [181, 363, 372, 382], "understand": [181, 362, 363, 364, 365, 366, 368, 369, 370, 380, 381], "pattern": [181, 184, 185, 368, 377, 783, 805, 806, 807], "hasn": 181, "now": [181, 184, 185, 362, 365, 367, 374, 376, 377, 380, 384, 385, 387, 398, 399, 1174, 1185, 1186, 1187], "spend": 181, "torchvis": 181, "probabl": [181, 892, 900, 1078, 1079, 1174, 1182], "sonnet": 181, "about": [181, 362, 363, 370, 381, 382, 386, 387, 399, 460, 480, 483], "next": [181, 362, 363, 364, 365, 368, 369, 373, 374, 384, 385, 460, 480, 1153, 1186, 1187, 1190, 1191, 1192, 1193, 1194, 1195], "everyth": [181, 363, 364, 383, 399], "zero": [181, 184, 185, 186, 187, 369, 375, 376, 377, 378, 380, 382, 385, 386, 410, 415, 418, 419, 422, 441, 444, 446, 452, 456, 457, 459, 460, 466, 547, 561, 566, 569, 594, 597, 618, 639, 642, 643, 703, 706, 707, 710, 715, 716, 717, 720, 722, 725, 726, 729, 734, 737, 738, 741, 742, 745, 758, 761, 762, 765, 771, 776, 783, 801, 836, 839, 840, 857, 859, 862, 864, 866, 874, 876, 878, 880, 892, 900, 905, 912, 926, 927, 930, 935, 937, 944, 946, 966, 968, 969, 971, 991, 1005, 1008, 1009, 1012, 1017, 1020, 1025, 1028, 1047, 1050, 1073, 1074, 1077, 1078, 1080, 1081, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1099, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1153, 1165, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1184, 1190, 1191, 1192, 1193], "need": [181, 362, 363, 364, 365, 367, 368, 369, 370, 372, 375, 376, 379, 382, 384, 385, 398, 399, 783, 795, 796, 798, 991, 992, 995, 1005, 1008], "said": 181, "high": [181, 184, 185, 189, 269, 305, 306, 347, 348, 364, 385, 1078, 1080, 1081, 1082, 1084, 1085, 1086, 1087], "level": [181, 361, 364, 372, 381, 382, 385, 386, 387, 399], "optim": [181, 379, 383, 385, 387, 398, 497, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 1051, 1052, 1053, 1054, 1153, 1191, 1192, 1193, 1195], "trainer": [181, 397, 399, 1153], "statu": 181, "quo": 181, "kera": 181, "dopamin": 181, "ignit": 181, "catalyst": 181, "lightn": 181, "fastai": 181, "haiku": [181, 387], "flax": [181, 387, 399], "trax": [181, 387], "objax": [181, 387], "idea": [181, 398], "fulli": [181, 375, 376, 380, 382, 383, 384, 385, 386, 387, 399, 1174, 1184, 1185], "offer": [181, 386], "containerwithactiv": [182, 186, 187], "dict_in": [182, 183, 184, 185, 186, 187, 188, 189, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358], "queue": [182, 183, 184, 185, 186, 187, 188, 189, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 385, 497, 506, 507, 783, 838, 843], "queue_load_s": [182, 183, 184, 185, 186, 187, 188, 189, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358], "container_combine_method": [182, 183, 184, 185, 186, 187, 188, 189, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358], "list_join": [182, 183, 184, 185, 186, 187, 188, 189, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358], "queue_timeout": [182, 183, 184, 185, 186, 187, 188, 189, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 783], "print_limit": [182, 183, 184, 185, 186, 187, 188, 189, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358], "key_length_limit": [182, 183, 184, 185, 186, 187, 188, 189, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358], "print_ind": [182, 183, 184, 185, 186, 187, 188, 189, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358], "print_line_spac": [182, 183, 184, 185, 186, 187, 188, 189, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358], "ivyh": [182, 183, 184, 185, 186, 187, 188, 189, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358], "default_key_color": [182, 183, 184, 185, 186, 187, 188, 189, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358], "green": [182, 183, 184, 185, 186, 187, 188, 189, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 362, 363, 1199, 1200], "keyword_color_dict": [182, 183, 184, 185, 186, 187, 188, 189, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358], "rebuild_child_contain": [182, 183, 184, 185, 186, 187, 188, 189, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358], "types_to_iteratively_nest": [182, 183, 184, 185, 186, 187, 188, 189, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358], "alphabetical_kei": [182, 183, 184, 185, 186, 187, 188, 189, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358], "containerbas": [182, 183, 184, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 376], "key_chain": [182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 329, 330, 331, 332, 333, 334, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 353, 354, 355, 356, 357, 358, 411, 413, 415, 417, 421, 422, 423, 425, 427, 429, 431, 432, 434, 436, 469, 471, 473, 548, 550, 552, 555, 556, 557, 559, 563, 564, 565, 566, 568, 570, 572, 576, 577, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 616, 617, 620, 621, 624, 625, 626, 629, 630, 631, 633, 637, 638, 639, 641, 645, 646, 647, 649, 653, 654, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 717, 719, 721, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 767, 769, 772, 774, 775, 777, 778, 779, 781, 784, 786, 788, 796, 797, 812, 814, 816, 864, 865, 867, 869, 870, 872, 874, 875, 877, 878, 879, 881, 882, 883, 885, 927, 929, 976, 978, 980, 981, 983, 985, 986, 988, 990, 992, 994, 996, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1055, 1068, 1074, 1076, 1080, 1082, 1084, 1085, 1087, 1101, 1103, 1105, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1138, 1139, 1140, 1142, 1145, 1147, 1149, 1151], "to_appli": [182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 329, 330, 331, 332, 333, 334, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 353, 354, 355, 356, 357, 358, 411, 413, 415, 417, 421, 422, 423, 425, 427, 429, 431, 432, 434, 436, 469, 471, 473, 548, 550, 552, 555, 556, 557, 559, 563, 564, 565, 566, 568, 570, 572, 576, 577, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 616, 617, 620, 621, 624, 625, 626, 629, 630, 631, 633, 637, 638, 639, 641, 645, 646, 647, 649, 653, 654, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 717, 719, 721, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 767, 769, 772, 774, 775, 777, 778, 779, 781, 784, 786, 788, 796, 797, 812, 814, 816, 864, 865, 867, 869, 870, 872, 874, 875, 877, 878, 879, 881, 882, 883, 885, 927, 929, 976, 978, 980, 981, 983, 985, 986, 988, 990, 992, 994, 996, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1055, 1068, 1074, 1076, 1084, 1085, 1087, 1101, 1103, 1105, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1138, 1139, 1140, 1142, 1145, 1147, 1149, 1151], "prune_unappli": [182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 329, 330, 331, 332, 333, 334, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 353, 354, 355, 356, 357, 358, 411, 413, 415, 417, 421, 422, 423, 425, 427, 429, 431, 432, 434, 436, 469, 471, 473, 548, 550, 552, 555, 556, 557, 559, 563, 564, 565, 566, 568, 570, 572, 576, 577, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 616, 617, 620, 621, 624, 625, 626, 629, 630, 631, 633, 637, 638, 639, 641, 645, 646, 647, 649, 653, 654, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 717, 719, 721, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 767, 769, 772, 774, 775, 777, 778, 779, 781, 784, 786, 788, 796, 797, 812, 814, 816, 864, 865, 867, 869, 870, 872, 874, 875, 877, 878, 879, 881, 882, 883, 885, 927, 929, 976, 978, 980, 981, 983, 985, 986, 988, 990, 992, 994, 996, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1055, 1068, 1074, 1076, 1084, 1085, 1087, 1101, 1103, 1105, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1138, 1139, 1140, 1142, 1145, 1147, 1149, 1151], "map_sequ": [182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 205, 207, 208, 210, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 254, 258, 259, 260, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 329, 330, 331, 332, 333, 334, 341, 342, 343, 344, 345, 346, 347, 348, 353, 354, 355, 356, 357, 358, 411, 413, 415, 417, 421, 422, 423, 425, 427, 429, 431, 432, 434, 436, 469, 471, 473, 548, 550, 552, 555, 556, 557, 559, 563, 564, 565, 566, 568, 570, 572, 576, 577, 582, 584, 590, 592, 610, 612, 616, 617, 620, 621, 624, 626, 631, 633, 637, 639, 641, 645, 646, 647, 659, 661, 663, 665, 667, 669, 679, 681, 683, 685, 687, 689, 691, 693, 695, 703, 705, 717, 719, 721, 722, 724, 730, 732, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 767, 769, 772, 774, 775, 777, 778, 779, 781, 784, 786, 788, 796, 797, 812, 814, 816, 864, 865, 867, 869, 870, 872, 874, 875, 877, 878, 879, 881, 882, 883, 885, 976, 978, 980, 981, 983, 985, 986, 988, 990, 992, 994, 996, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 1039, 1041, 1043, 1045, 1047, 1049, 1074, 1076, 1084, 1085, 1087, 1101, 1103, 1105, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1138, 1139, 1140, 1142, 1145, 1147, 1149, 1151], "softplu": [182, 183, 189, 410, 1153], "__getitem__": [184, 185, 376], "queri": [184, 185, 376, 377, 384, 497, 530, 540, 892, 903, 904, 1174, 1185], "slice": [184, 185, 783, 811, 812, 815, 1055, 1064], "chain": [184, 185, 375, 376, 386, 387, 399, 1051, 1052, 1053, 1055, 1068, 1196, 1197], "element": [184, 185, 368, 382, 387, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 441, 442, 448, 449, 456, 457, 497, 520, 524, 528, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782, 783, 791, 792, 795, 796, 798, 801, 802, 809, 823, 852, 853, 892, 900, 905, 909, 911, 918, 920, 927, 930, 947, 949, 954, 991, 992, 995, 1009, 1012, 1017, 1020, 1025, 1028, 1030, 1031, 1034, 1078, 1079, 1090, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1106, 1109, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1174, 1182], "represent": [184, 185, 186, 187, 188, 398, 440, 460, 464, 465, 480, 483, 497, 513, 514, 547, 548, 551, 561, 586, 589, 598, 601, 606, 609, 711, 714, 717, 720, 783, 789, 846, 851], "dictionari": [184, 185, 186, 187, 188, 385, 399, 497, 540], "around": [184, 185, 186, 187, 188, 363, 372, 375, 380, 384, 399], "sequenc": [184, 185, 186, 187, 188, 369, 377, 398, 497, 506, 507, 783, 792, 833, 991, 1030, 1035, 1038, 1078, 1080, 1081, 1111, 1116, 1119, 1174, 1183, 1188, 1189, 1196, 1197], "multiprocess": [184, 185, 186, 187, 188, 385, 399, 497, 506, 783], "asynchron": [184, 185, 186, 187, 188], "wait": [184, 185, 186, 187, 188, 363], "size": [184, 185, 186, 187, 188, 384, 385, 441, 450, 451, 497, 539, 540, 541, 783, 839, 845, 892, 904, 905, 915, 917, 931, 933, 941, 943, 947, 949, 954, 966, 968, 991, 1005, 1008, 1025, 1028, 1030, 1031, 1034, 1078, 1079, 1083, 1084, 1086, 1090, 1091, 1093, 1144, 1145, 1148, 1149, 1152, 1174, 1175, 1176], "dimens": [184, 185, 186, 187, 188, 369, 382, 385, 410, 427, 430, 441, 456, 457, 497, 528, 783, 805, 806, 807, 810, 820, 836, 855, 892, 893, 894, 895, 896, 897, 898, 899, 902, 905, 906, 908, 909, 911, 912, 915, 917, 918, 920, 921, 923, 924, 926, 927, 930, 931, 933, 935, 937, 938, 940, 944, 946, 947, 949, 951, 953, 954, 956, 957, 959, 963, 965, 966, 968, 969, 971, 975, 981, 984, 986, 989, 991, 997, 1000, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1028, 1030, 1031, 1034, 1035, 1038, 1051, 1052, 1053, 1054, 1078, 1089, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1099, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1184, 1185], "combin": [184, 185, 186, 187, 188, 363, 369, 371, 372, 375, 376, 387, 905, 909, 911], "arriv": [184, 185, 186, 187, 188], "timeout": [184, 185, 186, 187, 188, 497, 506, 507, 783, 838, 843], "limit": [184, 185, 186, 187, 188, 363, 369, 371, 382, 385, 387, 399, 460, 480, 483, 783, 795, 796, 798, 991, 992, 995], "maximum": [184, 185, 186, 187, 188, 369, 382, 385, 387, 497, 521, 525, 529, 541, 547, 783, 795, 796, 798, 810, 857, 874, 876, 991, 992, 995, 1055, 1067, 1090, 1091, 1111, 1116, 1119, 1124, 1127, 1153], "length": [184, 185, 186, 187, 188, 385, 441, 442, 452, 905, 954, 956, 957, 959, 991, 1021, 1024], "whitespac": [184, 185, 186, 187, 188], "indent": [184, 185, 186, 187, 188, 385], "extra": [184, 185, 186, 187, 188, 369, 374, 375, 382, 857, 868], "newlin": [184, 185, 186, 187, 188, 368], "handl": [184, 185, 186, 187, 188, 366, 371, 372, 374, 376, 377, 378, 379, 380, 386, 399, 438, 439, 497, 513, 514, 515, 516, 517, 531, 535, 536, 543, 546, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 1190, 1191, 1192, 1193, 1194, 1195], "result": [184, 185, 186, 187, 188, 367, 368, 369, 371, 375, 376, 377, 379, 380, 385, 399, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 466, 468, 488, 497, 506, 542, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782, 783, 795, 796, 798, 801, 802, 805, 806, 807, 809, 811, 812, 815, 823, 836, 839, 840, 857, 887, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 921, 923, 924, 926, 927, 930, 931, 933, 935, 937, 938, 940, 941, 943, 944, 946, 950, 951, 953, 954, 956, 957, 959, 960, 962, 963, 965, 966, 968, 969, 971, 972, 974, 975, 976, 979, 981, 984, 986, 989, 991, 992, 995, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1028, 1031, 1034, 1035, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1055, 1068, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1099, 1100, 1101, 1104, 1106, 1109, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1153], "color": [184, 185, 186, 187, 188, 1199, 1200], "termin": [184, 185, 186, 187, 188, 362, 363, 365, 376, 382, 385], "map": [184, 185, 186, 187, 188, 371, 372, 376, 380, 385, 398, 399, 497, 506, 1055, 1062, 1063, 1067, 1068, 1174, 1185], "termcolor": [184, 185, 186, 187, 188], "rebuild": [184, 185, 186, 187, 188], "found": [184, 185, 186, 187, 188, 362, 363, 368, 375, 376, 497, 531], "constructor": [184, 185, 186, 187, 188, 377, 378, 384, 783, 790, 1196, 1197], "param": [184, 185, 186, 187, 188, 189, 299, 331, 332, 382, 387, 783, 789, 811, 812, 815, 816], "kept": [184, 185, 186, 187, 188, 363, 379, 1051, 1052, 1053], "structur": [184, 185, 186, 187, 188, 365, 367, 372, 375, 376, 385, 386, 783, 799, 1055, 1068], "alphabet": [184, 185, 186, 187, 188], "preserv": [184, 185, 186, 187, 188, 387, 399, 857, 887, 991, 1009, 1012], "__setitem__": [184, 185, 375, 376, 384], "val": [184, 185, 379, 384, 783, 825, 826, 827, 841, 842], "after": [184, 185, 369, 376, 377, 381, 460, 492, 547, 758, 761, 857, 864, 866, 868, 869, 871, 874, 876, 878, 880, 882, 884, 1073, 1074, 1077, 1190, 1191, 1192, 1193, 1194, 1195], "updat": [184, 185, 362, 363, 364, 365, 366, 369, 370, 374, 375, 376, 377, 380, 382, 384, 385, 387, 399, 497, 506, 783, 827, 839, 840, 857, 859, 862, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 892, 902, 1051, 1052, 1053, 1055, 1062, 1063, 1071, 1072, 1163, 1164, 1190, 1191, 1192, 1193, 1194, 1195], "all_fals": [184, 185], "assert_is_bool": [184, 185], "entri": [184, 185, 441, 450, 451, 991, 1030, 1055, 1068], "boolean": [184, 185, 376, 441, 448, 460, 466, 484, 496, 497, 532, 544, 547, 586, 589, 590, 593, 598, 601, 606, 609, 699, 702, 703, 706, 707, 710, 711, 714, 783, 784, 787, 791, 792, 822, 823, 824, 828, 829, 830, 831, 832, 849, 856, 857, 873, 1051, 1052, 1053, 1055, 1065, 1111, 1124, 1127], "evalu": [184, 185, 376, 547, 635, 639, 642, 679, 682, 683, 686, 687, 690, 691, 694, 722, 725, 746, 749, 762, 765, 1055, 1056, 1065, 1066, 1144, 1145, 1148, 1149, 1152], "assert": [184, 185, 384, 385, 783, 793], "skip": [184, 185, 365, 371, 1055, 1068], "prune": [184, 185, 1055, 1068, 1069, 1070], "all_key_chain": [184, 185], "include_empti": [184, 185], "all_tru": [184, 185, 376, 385], "arrays_as_list": [184, 185], "intermedi": [184, 185], "as_arrai": [184, 185, 783, 820, 845], "as_bool": [184, 185], "as_on": [184, 185], "ones": [184, 185, 186, 187, 371, 382, 384, 385, 441, 446, 455, 547, 610, 613, 783, 836, 1153], "sub": [184, 185, 363, 364, 366, 371, 376, 384, 385, 386, 497, 522, 523, 526, 527, 528, 529, 905, 915, 917, 991, 1030, 1051, 1052, 1053, 1054, 1153], "fill": [184, 185, 441, 444, 448, 449, 454, 455, 458, 459, 1078, 1080, 1081], "as_random_uniform": [184, 185], "low": [184, 185, 189, 269, 305, 306, 347, 348, 382, 1078, 1080, 1081, 1082, 1084, 1085, 1086, 1087], "uniform": [184, 185, 386, 1078, 1079, 1080, 1081, 1084, 1086, 1165, 1167, 1168, 1171, 1172], "lower": [184, 185, 363, 369, 382, 399, 441, 446, 456, 547, 715, 905, 906, 908, 1078, 1084, 1086], "boundari": [184, 185, 1078, 1084, 1086], "output": [184, 185, 362, 366, 367, 368, 369, 371, 372, 375, 376, 378, 379, 380, 382, 384, 386, 387, 399, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 466, 468, 497, 506, 507, 541, 542, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782, 783, 794, 795, 796, 798, 801, 802, 805, 806, 807, 809, 811, 812, 815, 823, 836, 839, 840, 857, 868, 887, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 921, 923, 924, 926, 927, 930, 931, 933, 935, 937, 938, 940, 941, 943, 944, 946, 950, 951, 953, 954, 956, 957, 959, 960, 962, 963, 965, 966, 968, 969, 971, 972, 974, 975, 976, 979, 981, 984, 986, 989, 991, 992, 995, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1028, 1031, 1034, 1035, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1055, 1068, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1089, 1090, 1094, 1100, 1101, 1104, 1106, 1109, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1153, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185], "interv": [184, 185, 382, 387, 441, 442, 450, 451, 905, 966, 968, 991, 992, 995, 1035, 1038, 1078, 1080, 1081, 1084, 1086, 1144, 1145, 1148, 1149, 1152], "as_vari": [184, 185], "as_zero": [184, 185], "assert_contains_sub_contain": [184, 185], "sub_cont": [184, 185], "partial": [184, 185, 363, 1186, 1187], "except": [184, 185, 368, 375, 379, 384, 399, 460, 468, 783, 793, 804, 827, 854, 905, 926, 944, 946, 991, 997, 1000, 1035, 1038, 1090, 1093, 1144, 1145, 1148, 1149, 1152], "diff": [184, 185, 376, 385], "screen": [184, 185, 385], "assert_contains_sub_structur": [184, 185], "check_shap": [184, 185], "static": [184, 185, 189, 196, 288, 291, 292, 295, 296, 299, 305, 307, 311, 312, 325, 326, 329, 330, 331, 332, 333, 334, 341, 342, 343, 344, 347, 348, 353, 354, 359, 360, 364, 368, 369, 372, 399, 438, 439, 469, 473, 548, 552, 565, 577, 582, 695, 772, 777, 778, 784, 788, 812, 816, 992, 996, 1025, 1029, 1080, 1082], "assert_ident": [184, 185], "check_typ": [184, 185], "same_arrai": [184, 185, 385], "arrays_equ": [184, 185, 186, 187, 783], "datatyp": [184, 185, 441, 443, 453, 460, 474, 485, 486, 487], "exact": [184, 185, 363, 382, 1095, 1096], "assert_identical_structur": [184, 185], "at_key_chain": [184, 185], "ignore_key_error": [184, 185], "ignore_non": [184, 185], "at_kei": [184, 185], "ignor": [184, 185, 369, 399, 441, 452, 1055, 1066, 1190, 1194], "substr": [184, 185], "access": [184, 185, 363, 365, 377], "clip_min": [184, 185], "clip_max": [184, 185], "minimum": [184, 185, 382, 387, 497, 547, 548, 551, 783, 818, 819, 841, 842, 847, 848, 991, 992, 995, 1090, 1092, 1111, 1116, 1119, 1124, 1127, 1153], "config": [184, 185, 385, 1055, 1068], "right": [184, 185, 361, 362, 363, 366, 369, 385, 547, 594, 597, 602, 605, 905, 954], "duplic": [184, 185, 368, 373, 374, 384, 386], "compar": [184, 185, 371, 385, 783, 784, 787, 791, 792, 1095, 1096, 1097, 1099, 1100, 1101, 1104, 1106, 1109], "configur": [184, 185, 362, 363, 365, 377, 497, 540, 1055, 1068], "container_rightmost": [184, 185], "common_key_chain": [184, 185, 376], "across": [184, 185, 364, 369, 371, 372, 376, 377, 380, 497, 506, 507, 518, 519, 521, 522, 523, 524, 525, 529, 539, 540, 783, 791, 792, 1055, 1061, 1090, 1092], "properti": [184, 185, 369, 371, 372, 376, 384, 385, 386, 497, 509, 1186, 1187, 1190, 1191, 1192, 1193, 1195], "contains_sub_contain": [184, 185], "match": [184, 185, 376, 460, 466, 547, 738, 741, 783, 833], "contains_sub_structur": [184, 185], "copi": [184, 185, 365, 368, 373, 377, 382, 384, 385, 398, 399, 441, 443, 447, 460, 466, 497, 542, 783, 800, 852, 853, 991, 1021, 1024, 1055, 1057, 1100, 1106, 1109], "create_if_abs": [184, 185], "inplac": [184, 185, 189, 194, 236, 242, 243, 264, 290, 300, 301, 302, 304, 333, 334, 366, 369, 374, 375, 380, 384, 386, 783, 793, 824, 827, 828, 849, 857, 864, 865, 866, 867, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 1163, 1164, 1190, 1191, 1192, 1193, 1194, 1195], "correspond": [184, 185, 186, 187, 189, 363, 368, 369, 370, 372, 375, 376, 377, 380, 460, 467, 547, 578, 581, 734, 737, 905, 909, 911, 918, 920, 951, 953, 991, 997, 1000, 1025, 1028, 1078, 1079, 1090, 1091, 1092, 1095, 1096, 1097, 1099, 1111, 1128, 1131, 1132, 1135, 1136, 1140, 1143], "alreadi": [184, 185, 362, 363, 373, 376, 380, 384, 399, 497, 547, 610, 613, 643, 717, 720, 742, 745, 779, 782, 905, 941, 943, 1153], "noth": [184, 185, 363], "cutoff_at_depth": [184, 185], "depth_cutoff": [184, 185], "summari": [184, 185, 363, 460, 475, 476, 477, 489, 490, 491, 497, 510, 511, 783, 799, 803, 821, 857, 886, 891], "cutoff_at_height": [184, 185], "height_cutoff": [184, 185], "deep_copi": [184, 185, 385], "intern": [184, 185, 368, 375, 376, 378, 379, 497, 857, 890, 1055, 1056, 1065, 1066, 1165, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1196, 1197], "dev": [184, 185, 186, 188, 189, 203, 362, 372, 378, 382, 384, 386, 497, 506, 531], "belong": [184, 185, 386], "dev_clon": [184, 185, 497], "clone": [184, 185, 363, 365, 497, 518, 519, 520, 521], "dev_dist": [184, 185, 497], "distribut": [184, 185, 364, 378, 399, 497, 518, 522, 523, 524, 525, 892, 900, 975, 976, 979, 981, 984, 986, 989, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1174, 1182, 1186, 1187], "along": [184, 185, 367, 379, 441, 450, 451, 497, 522, 523, 524, 525, 526, 527, 528, 529, 541, 783, 801, 802, 811, 855, 905, 931, 933, 963, 965, 966, 968, 969, 971, 975, 981, 984, 986, 989, 991, 997, 1000, 1009, 1012, 1017, 1020, 1025, 1028, 1030, 1035, 1038, 1043, 1046, 1051, 1052, 1053, 1054, 1078, 1089, 1090, 1091, 1092, 1100, 1101, 1104, 1106, 1109, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1145, 1148, 1149, 1152], "split": [184, 185, 361, 363, 381, 382, 399, 497, 506, 522, 523, 524, 525, 539, 540, 541, 783, 833, 991, 1153], "dev_str": [184, 185], "diff_kei": [184, 185], "detect_key_diff": [184, 185], "detect_value_diff": [184, 185], "detect_shape_diff": [184, 185], "thei": [184, 185, 364, 366, 367, 369, 372, 374, 376, 377, 378, 379, 384, 385, 386, 387, 399, 460, 487, 1051, 1052, 1053, 1078, 1079, 1153, 1196, 1197], "treat": [184, 185, 383, 387, 438, 439], "detect": [184, 185, 380, 385, 386, 1055, 1056, 1066], "without": [184, 185, 363, 367, 372, 375, 376, 378, 380, 382, 384, 385, 386, 398, 399, 783, 838, 843, 991, 1021, 1024, 1055, 1057, 1095, 1096, 1097, 1099], "flag": [184, 185, 363, 379, 384, 497, 516, 857, 873], "container0": [184, 185], "einops_rearrang": [184, 185, 783], "axes_length": [184, 185, 783, 805, 806, 807], "rearrang": [184, 185, 783, 805, 807], "addit": [184, 185, 362, 363, 367, 368, 371, 376, 377, 384, 385, 387, 497, 542, 547, 561, 783, 805, 806, 807, 1073, 1074, 1077, 1174, 1184], "einops_reduc": [184, 185, 783], "reduct": [184, 185, 377, 384, 783, 806, 839, 840, 1144, 1145, 1148, 1149, 1152, 1153], "One": [184, 185, 377, 382, 384, 385, 783, 806, 991, 1021, 1024, 1078, 1080, 1081], "callabl": [184, 185, 376, 382, 400, 401, 402, 403, 404, 405, 406, 407, 408, 438, 439, 460, 481, 482, 497, 541, 783, 789, 794, 804, 806, 1051, 1052, 1053, 1054, 1055, 1061, 1065, 1066, 1067], "einops_repeat": [184, 185, 783], "find_sub_contain": [184, 185], "sub_cont_to_find": [184, 185], "exsit": [184, 185], "find_sub_structur": [184, 185], "sub_struc_to_find": [184, 185], "flatten_key_chain": [184, 185, 385, 1186, 1187], "__": [184, 185, 369, 385], "above_height": [184, 185, 385], "below_depth": [184, 185, 385], "format_key_chain": [184, 185], "format_fn": [184, 185], "format": [184, 185, 365, 368, 377, 378, 382, 384, 385, 460, 478, 497, 517, 1111, 1112, 1115, 1139, 1153], "string": [184, 185, 373, 377, 378, 382, 385, 460, 464, 465, 478, 484, 496, 497, 513, 514, 515, 516, 530, 536, 542, 543, 546, 783, 803], "from_disk_as_hdf5": [184, 185, 385], "h5_obj_or_filepath": [184, 185], "slice_obj": [184, 185], "load": [184, 185, 399], "disk": [184, 185, 385], "h5py": [184, 185], "file": [184, 185, 362, 363, 365, 367, 368, 372, 373, 375, 376, 382, 385, 783, 844, 1186, 1187], "hdf5": [184, 185, 385, 1186, 1187], "filepath": [184, 185, 363], "h5": [184, 185], "from_disk_as_json": [184, 185, 385], "json_filepath": [184, 185], "json": [184, 185, 385], "were": [184, 185, 363, 367, 371, 376], "abl": [184, 185, 362, 363, 372, 377, 379, 384, 387], "dure": [184, 185, 372, 376, 377, 378, 379, 399, 438, 439, 497, 542, 783, 854, 857, 859, 862, 864, 866, 874, 876, 905, 927, 930, 1051, 1052, 1053, 1054, 1111, 1132, 1135, 1140, 1143, 1186, 1187, 1190, 1191, 1192, 1194], "from_disk_as_pickl": [184, 185, 385], "pickle_filepath": [184, 185], "pickl": [184, 185, 376, 385], "from_flat_list": [184, 185], "flat_list": [184, 185], "hierarchi": [184, 185, 385], "flat": [184, 185, 783, 839, 991, 1017, 1020], "popul": [184, 185, 377, 378, 382, 1078, 1079, 1111, 1132, 1135, 1140, 1143], "from_numpi": [184, 185, 385], "gather": [184, 185, 783, 812, 815], "accord": [184, 185, 362, 365, 372, 377, 460, 469, 472, 480, 547, 561, 602, 605, 717, 720, 783, 811, 839, 840, 905, 966, 968, 991, 1001, 1004, 1047, 1050, 1111, 1132, 1135, 1140, 1143], "index": [184, 185, 365, 372, 376, 384, 440, 441, 446, 452, 497, 538, 783, 789, 811, 812, 815, 991, 1035, 1038, 1055, 1058, 1059, 1062, 1063, 1064, 1069, 1071, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1100, 1101, 1104, 1156, 1158], "h5_file_s": [184, 185], "content": [184, 185, 364, 365, 379, 382, 385], "batch": [184, 185, 372, 376, 385, 497, 539, 540, 783, 810, 892, 901, 905, 969, 971, 1051, 1052, 1053, 1054, 1073, 1074, 1077, 1188, 1189], "handle_inplac": [184, 185], "prime": [184, 185], "overwritten": [184, 185, 373, 375], "has_kei": [184, 185], "query_kei": [184, 185], "somewher": [184, 185], "has_key_chain": [184, 185], "has_nan": [184, 185, 783], "include_inf": [184, 185, 783, 822, 856], "leafwis": [184, 185], "nan": [184, 185, 367, 368, 440, 460, 466, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 578, 581, 610, 613, 614, 617, 618, 621, 635, 638, 639, 642, 643, 659, 662, 667, 670, 679, 682, 683, 686, 691, 694, 695, 698, 717, 720, 734, 737, 738, 741, 742, 745, 750, 753, 754, 757, 758, 761, 771, 776, 779, 782, 783, 822, 856, 892, 904, 1095, 1096, 1097, 1099, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152], "well": [184, 185, 371, 379, 386, 387, 398, 783, 822, 905, 951, 953], "inf": [184, 185, 440, 783, 822, 856, 905, 969, 971], "wise": [184, 185, 382, 387, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 547, 548, 551, 553, 561, 564, 566, 569, 574, 578, 581, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 622, 625, 627, 630, 631, 634, 638, 646, 647, 650, 651, 654, 655, 658, 671, 674, 675, 678, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 726, 729, 734, 737, 738, 741, 766, 770, 783, 809, 991, 992, 995], "identical_array_shap": [184, 185], "exclus": [184, 185, 372, 376, 387, 441, 442, 783, 801, 829, 830, 832, 857, 873, 1078, 1080, 1081], "identical_config": [184, 185], "identical_structur": [184, 185], "if_exist": [184, 185], "inplace_upd": [184, 185, 379, 783, 1163, 1164], "key_chains_contain": [184, 185], "sub_str": [184, 185], "join": [184, 185, 991, 997, 1000, 1035, 1038, 1153], "list_stack": [184, 185, 385], "dim": [184, 185, 377, 783, 836, 1174, 1185], "func": [184, 185, 376, 438, 439, 497, 541, 783, 794, 857, 868, 1055, 1068], "map_cont": [184, 185], "include_self": [184, 185], "possibi": [184, 185], "place": [184, 185, 363, 366, 367, 368, 369, 371, 372, 376, 378, 380, 387, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 469, 472, 497, 542, 547, 548, 551, 561, 566, 569, 586, 589, 606, 609, 610, 613, 618, 643, 726, 729, 742, 745, 758, 761, 762, 765, 771, 776, 783, 811, 825, 826, 827, 892, 895, 904, 905, 912, 991, 1005, 1008, 1009, 1012, 1025, 1028, 1073, 1074, 1077, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119, 1144, 1145, 1148, 1190, 1191, 1192, 1193, 1194, 1195], "matrix": [184, 185, 441, 452, 456, 457, 783, 784, 787, 795, 892, 901, 905, 906, 908, 912, 915, 917, 918, 920, 921, 923, 924, 926, 927, 930, 931, 933, 934, 935, 937, 938, 940, 944, 946, 947, 949, 951, 953, 954, 956, 957, 959, 963, 965, 972, 974, 1174, 1184], "p": [184, 185, 189, 218, 331, 332, 362, 363, 441, 452, 783, 795, 796, 797, 798, 892, 900, 905, 931, 933, 969, 971, 1174, 1182], "integ": [184, 185, 376, 377, 384, 441, 442, 448, 460, 483, 486, 488, 547, 548, 551, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 625, 643, 646, 647, 650, 711, 714, 734, 737, 738, 741, 742, 745, 779, 782, 905, 934, 966, 968, 969, 971, 991, 1030, 1078, 1080, 1081, 1088, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152], "flatten": [184, 185, 783, 810, 905, 941, 943, 969, 971, 991, 1017, 1020, 1025, 1028, 1090, 1091, 1092, 1095, 1096, 1097, 1099], "left": [184, 185, 362, 363, 369, 377, 547, 594, 597, 905, 918, 920, 931, 933, 954, 1090, 1091, 1153], "broadcast": [184, 185, 367, 368, 369, 376, 377, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 466, 467, 468, 497, 542, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782, 783, 795, 796, 798, 801, 805, 806, 807, 809, 812, 815, 823, 836, 839, 840, 857, 887, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 921, 923, 924, 926, 927, 930, 931, 933, 935, 937, 938, 940, 941, 943, 944, 946, 950, 951, 953, 954, 956, 957, 959, 960, 962, 963, 965, 966, 968, 969, 971, 972, 974, 975, 976, 979, 981, 984, 986, 989, 991, 992, 995, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1028, 1031, 1034, 1035, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1089, 1090, 1091, 1092, 1094, 1095, 1099, 1100, 1106, 1109, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152], "correctli": [184, 185, 362, 371, 376, 377, 380, 386, 399, 905, 931, 933, 1090, 1091], "max_depth": [184, 185, 497, 501, 504, 511, 521, 525, 529, 783, 821, 1055, 1067], "multi_map": [184, 185, 376], "map_nest": [184, 185, 189, 206, 209, 211, 212, 213, 214, 219, 226, 233, 237, 238, 246, 247, 252, 253, 255, 256, 257, 263, 267, 271, 287, 329, 330, 339, 340, 343, 344, 564, 578, 580, 586, 588, 594, 596, 598, 600, 602, 604, 606, 608, 625, 629, 630, 638, 646, 647, 649, 653, 654, 655, 657, 671, 673, 675, 677, 695, 697, 699, 701, 707, 709, 711, 713, 726, 728, 734, 736, 738, 740, 927, 929, 997, 999, 1035, 1037], "leftmost": [184, 185, 1055, 1068], "multi_map_in_static_method": [184, 185, 376], "fn_name": [184, 185], "num_arrai": [184, 185], "overwrite_at_key_chain": [184, 185], "overwrit": [184, 185, 379, 382, 497, 541], "target_dict": [184, 185], "return_dict": [184, 185], "prune_empti": [184, 185], "keep_non": [184, 185], "empti": [184, 185, 186, 187, 375, 377, 378, 441, 442, 1111, 1132, 1135, 1136, 1144, 1145, 1148, 1149, 1152], "prune_key_chain": [184, 185], "key1": [184, 185, 386], "key2": [184, 185], "key3": [184, 185], "prune_key_from_key_chain": [184, 185], "absolut": [184, 185, 361, 547, 548, 551, 905, 914, 950], "certain": [184, 185, 362, 399, 441, 442, 450, 451], "decid": [184, 185, 362, 1055, 1066], "remov": [184, 185, 363, 364, 365, 368, 371, 372, 377, 379, 387, 905, 915, 917, 927, 930, 963, 965, 991, 1031, 1034, 1051, 1052, 1053], "prune_kei": [184, 185], "prune_keys_from_key_chain": [184, 185], "remove_key_length_limit": [184, 185], "remove_print_limit": [184, 185], "reshape_lik": [184, 185], "leading_shap": [184, 185], "return_cont": [184, 185], "restructur": [184, 185], "keep_orig": [184, 185], "transpos": [184, 185, 384, 387, 497, 528, 892, 894, 896, 898, 905, 926, 938, 940, 944, 946, 1153, 1174, 1176, 1178, 1180], "old": [184, 185, 362, 379], "keep": [184, 185, 362, 363, 370, 376, 383, 385, 387, 783, 855], "start": [184, 185, 361, 362, 363, 364, 365, 366, 368, 369, 377, 381, 382, 384, 385, 386, 398, 399, 441, 442, 450, 451, 497, 512], "restructure_key_chain": [184, 185], "keychain_map": [184, 185], "set_at_key_chain": [184, 185], "set_at_kei": [184, 185], "set_framework": [184, 185, 382, 384, 385, 387], "set_ivy_backend": [184, 185], "ivy_backend": [184, 185], "attribut": [184, 185, 368, 376, 377, 383, 384, 385, 386, 460, 480, 481, 482, 483, 497, 537], "show": [184, 185, 362, 363, 369, 379, 398, 399, 1153], "show_sub_contain": [184, 185], "sub_cont_or_keychain": [184, 185], "shuffl": [184, 185, 1078, 1153], "seed_valu": [184, 185, 1078, 1088], "align": [184, 185, 362, 382, 384, 1153, 1159], "seed": [184, 185, 186, 187, 1078, 1153], "shuffle_h5_fil": [184, 185], "dataset": [184, 185, 385, 397, 1153], "size_ordered_arrai": [184, 185], "keychain": [184, 185], "smallest": [184, 185, 460, 480, 483, 547, 610, 613], "largest": [184, 185, 398, 460, 480, 483, 905, 954], "slice_kei": [184, 185], "key_slic": [184, 185], "all_depth": [184, 185], "slice_via_kei": [184, 185], "sort_by_kei": [184, 185], "num_or_size_split": [184, 185, 382, 991, 1030], "with_remaind": [184, 185, 991, 1030], "constitu": [184, 185, 387], "dimension": [184, 185, 441, 442, 446, 452, 905, 909, 911, 912, 926, 927, 930, 935, 937, 941, 943, 944, 946, 966, 968, 969, 971, 991, 1030, 1090, 1091, 1092, 1093, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152], "evenli": [184, 185, 441, 442, 450, 451, 991, 1030], "store": [184, 185, 368, 373, 375, 376, 382, 384, 385, 386, 783, 810, 857, 890, 905, 963, 965, 991, 1030, 1186, 1187], "stop_gradi": [184, 185, 186, 187, 189, 194, 236, 242, 243, 264, 290, 300, 301, 302, 304, 333, 334, 386, 497, 541, 857, 864, 865, 866, 867, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 1051, 1052, 1053, 1054, 1153, 1190, 1191, 1192, 1193, 1194, 1195], "preserve_typ": [184, 185, 857, 887], "stop": [184, 185, 382, 399, 441, 442, 450, 451, 497, 512, 541, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 887, 1051, 1052, 1053, 1054, 1190, 1191, 1192, 1193, 1194, 1195], "alwai": [184, 185, 363, 364, 367, 368, 372, 373, 375, 376, 379, 380, 382, 384, 399, 460, 466, 547, 561, 717, 720, 783, 827, 857, 873, 887], "structural_diff": [184, 185], "to_devic": [184, 185, 497, 516], "move": [184, 185, 363, 367, 497, 542], "cuda": [184, 185, 382, 385, 399, 441, 450, 451, 497, 506, 513, 538, 783, 811, 812, 815, 836, 839, 840, 1078, 1079, 1080, 1081, 1084, 1086, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1196, 1197], "cpu": [184, 185, 363, 378, 399, 441, 450, 451, 497, 516, 517, 519, 533, 536, 538, 542, 543, 545, 546, 783, 811, 812, 815, 836, 839, 840, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1196, 1197], "target": [184, 185, 366, 381, 385, 386, 387, 497, 515, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 1153], "to_dict": [184, 185], "to_disk_as_hdf5": [184, 185, 385], "starting_index": [184, 185], "max_batch_s": [184, 185], "read": [184, 185, 365, 1153], "r": [184, 185, 362, 783, 792, 855, 905, 947, 949, 972, 974], "w": [184, 185, 189, 290, 300, 301, 302, 304, 333, 334, 382, 385, 386, 783, 792, 857, 859, 862, 864, 866, 867, 869, 871, 872, 874, 876, 877, 878, 880, 881, 882, 884, 885, 892, 893, 894, 895, 896, 897, 898, 899], "later": [184, 185, 783, 794], "append": [184, 185, 365, 371, 382, 385, 547, 594, 597, 905, 915, 917, 927, 930], "to_disk_as_json": [184, 185, 385], "to_disk_as_pickl": [184, 185, 385], "to_flat_list": [184, 185], "to_iter": [184, 185, 376], "leaf_keys_onli": [184, 185], "to_iterator_kei": [184, 185], "to_iterator_valu": [184, 185], "to_json": [184, 185], "to_list": [184, 185, 783, 1153], "to_multi_dev": [184, 185], "multidevcontain": [184, 185, 186], "distributedarrai": [184, 185], "to_numpi": [184, 185, 385, 783, 1153], "update_backend": [184, 185], "to_raw": [184, 185], "raw": [184, 185, 368], "trim_kei": [184, 185], "max_length": [184, 185], "try_kc": [184, 185], "tri": [184, 185], "arbitrari": [184, 185, 371, 372, 376, 379, 380, 386, 399, 441, 452, 460, 467, 488, 497, 526, 527, 529], "concatten": [184, 185, 497, 526, 527, 528, 529, 541], "unstack": [184, 185, 382, 385, 783, 1153], "dim_siz": [184, 185, 497], "update_config": [184, 185], "global_norm": [184, 185, 189, 218, 331, 332, 796, 797], "vector": [184, 185, 398, 441, 452, 783, 796, 798, 892, 901, 905, 909, 911, 918, 920, 927, 930, 941, 943, 954, 956, 957, 959, 966, 968, 969, 971, 972, 974, 1174, 1184], "with_default_key_color": [184, 185], "with_entries_as_list": [184, 185], "with_ivy_backend": [184, 185], "with_key_length_limit": [184, 185, 385], "with_print_ind": [184, 185, 385], "with_print_limit": [184, 185, 385], "with_print_line_spac": [184, 185], "containerwithcr": [186, 187, 323], "containerwithdatatyp": [186, 187, 325], "containerwithdevic": [186, 187, 327], "containerwithelementwis": [186, 187, 329, 376], "containerwithgener": [186, 187, 331], "containerwithgradi": [186, 187, 333], "containerwithimag": [186, 187, 335], "containerwithlay": [186, 187, 337], "containerwithlinearalgebra": [186, 187, 339], "containerwithloss": [186, 187, 341], "containerwithmanipul": [186, 187, 343, 364], "containerwithnorm": [186, 187, 345], "containerwithrandom": [186, 187, 347], "containerwithsearch": [186, 187, 349], "containerwithset": [186, 187, 351], "containerwithsort": [186, 187, 353], "containerwithstatist": [186, 187, 355], "containerwithutil": [186, 187, 357], "__add__": [186, 187, 189, 368, 369, 375, 376, 380, 384], "special": [186, 187, 189, 364, 367, 368, 369, 375, 380, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 578, 581, 606, 609, 610, 613, 614, 617, 618, 621, 635, 638, 639, 642, 643, 679, 682, 683, 686, 691, 694, 695, 698, 717, 720, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 771, 776, 779, 782, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1132, 1135, 1136, 1140, 1143], "__radd__": [186, 187, 189, 368, 369], "revers": [186, 187, 189, 364, 368, 369, 387, 399, 783, 804, 991, 1009, 1012], "arang": [186, 187, 377, 441, 450, 451, 1111, 1112, 1115, 1139, 1153], "arg_info": [186, 187, 783], "arg_nam": [186, 187, 783], "argmax": [186, 187, 1090, 1153], "argmin": [186, 187, 1090, 1153], "array_equ": [186, 187, 783], "as_ivy_dev": [186, 187, 384, 497], "as_ivy_dtyp": [186, 187, 460], "as_native_dev": [186, 187, 497], "as_native_dtyp": [186, 187, 460], "asarrai": [186, 187, 379, 441, 892, 893, 1095, 1097], "assert_supports_inplac": [186, 187, 783], "astyp": [186, 187, 377, 379, 460], "broadcast_arrai": [186, 187, 460], "broadcast_to": [186, 187, 377, 460], "cache_fn": [186, 187, 372, 783], "clear_mem_on_dev": [186, 187, 497], "clip_matrix_norm": [186, 187, 783], "closest_valid_dtyp": [186, 187, 460], "container_typ": [186, 187, 783], "conv1d": [186, 187, 892, 1174], "conv1d_transpos": [186, 187, 892], "conv2d": [186, 187, 892, 1153, 1174], "conv2d_transpos": [186, 187, 892], "conv3d": [186, 187, 892, 1174], "conv3d_transpos": [186, 187, 892], "copy_arrai": [186, 187, 783], "cumprod": [186, 187, 387, 783], "cumsum": [186, 187, 783, 1153], "current_backend_str": [186, 187, 783], "default_devic": [186, 187, 378, 382, 497, 535, 538, 545], "default_dtyp": [186, 187, 372, 377, 460], "default_float_dtyp": [186, 187, 377, 460], "default_int_dtyp": [186, 187, 377, 460], "depthwise_conv2d": [186, 187, 892, 1153], "dev_clone_arrai": [186, 187, 497], "dev_clone_it": [186, 187, 497], "dev_clone_nest": [186, 187, 497], "dev_dist_arrai": [186, 187, 497], "dev_dist_it": [186, 187, 497], "dev_dist_nest": [186, 187, 497], "dev_unifi": [186, 187, 497], "dev_unify_arrai": [186, 187, 497], "dev_unify_it": [186, 187, 497], "dev_unify_nest": [186, 187, 497], "dev_util": [186, 187, 378, 497], "dropout": [186, 187, 385, 892, 1174, 1185], "dtype_bit": [186, 187, 460], "empty_lik": [186, 187, 441], "execute_with_gradi": [186, 187, 376, 385, 386, 387, 399, 857, 1153], "ey": [186, 187, 387, 441, 892, 895, 899], "finfo": [186, 187, 460], "floormod": [186, 187, 783, 1153], "fourier_encod": [186, 187, 783], "from_dlpack": [186, 187, 441], "full_lik": [186, 187, 441], "function_supported_dtyp": [186, 187, 460], "function_unsupported_dtyp": [186, 187, 460], "get_all_arrays_in_memori": [186, 187, 783], "get_all_ivy_arrays_on_dev": [186, 187, 378, 497], "get_min_bas": [186, 187, 783], "get_min_denomin": [186, 187, 783], "get_num_dim": [186, 187, 783, 1153], "get_referrers_recurs": [186, 187, 783], "gpu_is_avail": [186, 187, 497], "handle_nest": [186, 187, 372, 376, 400], "handle_out_argu": [186, 187, 374, 377, 378, 379, 380, 400], "iinfo": [186, 187, 460], "indices_wher": [186, 187, 783, 1153], "infer_devic": [186, 187, 377, 378, 380, 400], "infer_dtyp": [186, 187, 377, 378, 380, 400], "inplace_arrays_support": [186, 187, 783], "inplace_decr": [186, 187, 783], "inplace_incr": [186, 187, 783], "inplace_variables_support": [186, 187, 783], "inputs_to_native_arrai": [186, 187, 375, 400], "invalid_dtyp": [186, 187, 460], "is_float_dtyp": [186, 187, 460], "is_int_dtyp": [186, 187, 460, 783, 853], "is_ivy_contain": [186, 187, 783], "linear": [186, 187, 368, 382, 385, 386, 387, 410, 411, 414, 415, 418, 419, 422, 783, 810, 892, 900, 951, 953, 1153, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181], "linspac": [186, 187, 382, 441, 442, 1153], "logspac": [186, 187, 382, 441], "lstm_updat": [186, 187, 382, 892], "match_kwarg": [186, 187, 783], "matrix_pow": [186, 187, 905], "meshgrid": [186, 187, 441], "multi_head_attent": [186, 187, 376, 379, 892], "multinomi": [186, 187, 1078], "nonzero": [186, 187, 547, 561, 717, 720, 1090], "num_arrays_in_memori": [186, 187, 783], "num_cpu_cor": [186, 187, 378, 497], "num_gpu": [186, 187, 371, 378, 497], "num_ivy_arrays_on_dev": [186, 187, 497], "one_hot": [186, 187, 387, 783, 1153], "ones_lik": [186, 187, 387, 441, 1153], "outputs_to_ivy_arrai": [186, 187, 375, 377, 378, 380, 400], "percent_used_mem_on_dev": [186, 187, 497], "print_all_arrays_in_memori": [186, 187, 783], "print_all_ivy_arrays_on_dev": [186, 187, 497], "promote_typ": [186, 187, 460], "randint": [186, 187, 189, 305, 347, 348, 1078, 1082, 1153], "random_norm": [186, 187, 892, 895, 898, 899, 905, 954, 1078, 1095, 1096], "result_typ": [186, 187, 377, 460], "scaled_dot_product_attent": [186, 187, 892], "scatter_flat": [186, 187, 783], "scatter_nd": [186, 187, 384, 783, 1153], "set_default_devic": [186, 187, 378, 497, 545], "set_default_dtyp": [186, 187, 372, 377, 460], "set_default_float_dtyp": [186, 187, 377, 460], "set_default_int_dtyp": [186, 187, 377, 460], "set_min_bas": [186, 187, 783], "set_min_denomin": [186, 187, 783], "set_queue_timeout": [186, 187, 783], "set_split_factor": [186, 187, 497], "set_tmp_dir": [186, 187, 783], "set_with_grad": [186, 187, 857], "shape_to_tupl": [186, 187, 377, 783], "slogdet": [186, 187, 905, 914], "split_factor": [186, 187, 497, 506], "split_func_cal": [186, 187, 497], "stable_divid": [186, 187, 372, 783], "stable_pow": [186, 187, 783], "static_aco": [186, 187], "static_acosh": [186, 187], "static_al": [186, 187], "static_ani": [186, 187], "static_arang": [186, 187], "static_arg_info": [186, 187], "static_arg_nam": [186, 187], "static_argmax": [186, 187], "static_argmin": [186, 187], "static_arrai": [186, 187], "static_array_equ": [186, 187], "static_arrays_equ": [186, 187], "static_as_ivy_dev": [186, 187], "static_as_ivy_dtyp": [186, 187], "static_as_native_dev": [186, 187], "static_as_native_dtyp": [186, 187], "static_asarrai": [186, 187], "static_asin": [186, 187], "static_asinh": [186, 187], "static_assert_supports_inplac": [186, 187], "static_astyp": [186, 187], "static_atan": [186, 187], "static_atan2": [186, 187], "static_atanh": [186, 187], "static_bitwise_and": [186, 187], "static_bitwise_invert": [186, 187], "static_bitwise_left_shift": [186, 187], "static_bitwise_or": [186, 187], "static_bitwise_right_shift": [186, 187], "static_bitwise_xor": [186, 187], "static_broadcast_arrai": [186, 187], "static_broadcast_to": [186, 187], "static_cache_fn": [186, 187], "static_ceil": [186, 187], "static_choleski": [186, 187], "static_clear_mem_on_dev": [186, 187], "static_clip_matrix_norm": [186, 187], "static_clip_vector_norm": [186, 187], "static_closest_valid_dtyp": [186, 187], "static_concat": [186, 187], "static_constant_pad": [186, 187], "static_container_typ": [186, 187], "static_conv1d": [186, 187], "static_conv1d_transpos": [186, 187], "static_conv2d": [186, 187], "static_conv2d_transpos": [186, 187], "static_conv3d": [186, 187], "static_conv3d_transpos": [186, 187], "static_copy_arrai": [186, 187], "static_co": [186, 187], "static_cosh": [186, 187], "static_cross": [186, 187], "static_cumprod": [186, 187], "static_cumsum": [186, 187], "static_current_backend": [186, 187], "static_current_backend_str": [186, 187], "static_default": [186, 187], "static_default_devic": [186, 187], "static_default_dtyp": [186, 187], "static_default_float_dtyp": [186, 187], "static_default_int_dtyp": [186, 187], "static_depthwise_conv2d": [186, 187], "static_det": [186, 187], "static_dev": [186, 187], "static_dev_clon": [186, 187], "static_dev_clone_arrai": [186, 187], "static_dev_clone_it": [186, 187], "static_dev_clone_nest": [186, 187], "static_dev_dist": [186, 187], "static_dev_dist_arrai": [186, 187], "static_dev_dist_it": [186, 187], "static_dev_dist_nest": [186, 187], "static_dev_unifi": [186, 187], "static_dev_unify_arrai": [186, 187], "static_dev_unify_it": [186, 187], "static_dev_unify_nest": [186, 187], "static_dev_util": [186, 187], "static_diagon": [186, 187], "static_dropout": [186, 187], "static_dtyp": [186, 187], "static_dtype_bit": [186, 187], "static_eigh": [186, 187], "static_eigvalsh": [186, 187], "static_einops_rearrang": [186, 187], "static_einops_reduc": [186, 187], "static_einops_repeat": [186, 187], "static_einsum": [186, 187], "static_empti": [186, 187], "static_empty_lik": [186, 187], "static_equ": [186, 187], "static_erf": [186, 187], "static_execute_with_gradi": [186, 187], "static_exist": [186, 187], "static_exp": [186, 187], "static_expand_dim": [186, 187], "static_expm1": [186, 187], "static_ey": [186, 187], "static_finfo": [186, 187], "static_flip": [186, 187], "static_floor": [186, 187], "static_floor_divid": [186, 187], "static_floormod": [186, 187], "static_fourier_encod": [186, 187], "static_from_dlpack": [186, 187], "static_ful": [186, 187], "static_full_lik": [186, 187], "static_function_supported_dtyp": [186, 187], "static_function_unsupported_dtyp": [186, 187], "static_gath": [186, 187], "static_gelu": [186, 187], "static_get_all_arrays_in_memori": [186, 187], "static_get_all_ivy_arrays_on_dev": [186, 187], "static_get_min_bas": [186, 187], "static_get_min_denomin": [186, 187], "static_get_num_dim": [186, 187], "static_get_referrers_recurs": [186, 187], "static_gpu_is_avail": [186, 187], "static_great": [186, 187], "static_greater_equ": [186, 187], "static_handle_nest": [186, 187], "static_handle_out_argu": [186, 187], "static_has_nan": [186, 187], "static_iinfo": [186, 187], "static_indices_wher": [186, 187], "static_infer_devic": [186, 187], "static_infer_dtyp": [186, 187], "static_inplace_arrays_support": [186, 187], "static_inplace_decr": [186, 187], "static_inplace_incr": [186, 187], "static_inplace_upd": [186, 187], "static_inplace_variables_support": [186, 187], "static_inputs_to_native_arrai": [186, 187], "static_inv": [186, 187], "static_invalid_dtyp": [186, 187], "static_is_arrai": [186, 187], "static_is_float_dtyp": [186, 187], "static_is_int_dtyp": [186, 187], "static_is_ivy_arrai": [186, 187], "static_is_ivy_contain": [186, 187], "static_is_native_arrai": [186, 187], "static_is_vari": [186, 187], "static_isfinit": [186, 187], "static_isinf": [186, 187], "static_isnan": [186, 187], "static_layer_norm": [186, 187], "static_leaky_relu": [186, 187], "static_less": [186, 187], "static_less_equ": [186, 187], "static_linear": [186, 187], "static_linspac": [186, 187], "static_log": [186, 187], "static_log10": [186, 187], "static_log1p": [186, 187], "static_log2": [186, 187], "static_logaddexp": [186, 187], "static_logical_and": [186, 187], "static_logical_not": [186, 187], "static_logical_or": [186, 187], "static_logical_xor": [186, 187], "static_logspac": [186, 187], "static_lstm_upd": [186, 187], "static_match_kwarg": [186, 187], "static_matmul": [186, 187], "static_matrix_norm": [186, 187], "static_matrix_pow": [186, 187], "static_matrix_rank": [186, 187], "static_matrix_transpos": [186, 187], "static_max": [186, 187], "static_maximum": [186, 187], "static_mean": [186, 187], "static_meshgrid": [186, 187], "static_min": [186, 187], "static_minimum": [186, 187], "static_multi_head_attent": [186, 187], "static_multinomi": [186, 187], "static_multiprocess": [186, 187], "static_native_arrai": [186, 187], "static_neg": [186, 187], "static_nonzero": [186, 187], "static_not_equ": [186, 187], "static_num_arrays_in_memori": [186, 187], "static_num_cpu_cor": [186, 187], "static_num_gpu": [186, 187], "static_num_ivy_arrays_on_dev": [186, 187], "static_one_hot": [186, 187], "static_on": [186, 187], "static_ones_lik": [186, 187], "static_out": [186, 187], "static_outputs_to_ivy_arrai": [186, 187], "static_percent_used_mem_on_dev": [186, 187], "static_permute_dim": [186, 187], "static_pinv": [186, 187], "static_posit": [186, 187], "static_pow": [186, 187], "static_print_all_arrays_in_memori": [186, 187], "static_print_all_ivy_arrays_on_dev": [186, 187], "static_prod": [186, 187], "static_promote_typ": [186, 187], "static_qr": [186, 187], "static_queue_timeout": [186, 187], "static_random_norm": [186, 187], "static_relu": [186, 187], "static_remaind": [186, 187], "static_repeat": [186, 187], "static_reshap": [186, 187], "static_result_typ": [186, 187], "static_round": [186, 187], "static_scaled_dot_product_attent": [186, 187], "static_scatter_flat": [186, 187], "static_scatter_nd": [186, 187], "static_se": [186, 187], "static_set_default_devic": [186, 187], "static_set_default_dtyp": [186, 187], "static_set_default_float_dtyp": [186, 187], "static_set_default_int_dtyp": [186, 187], "static_set_min_bas": [186, 187], "static_set_min_denomin": [186, 187], "static_set_queue_timeout": [186, 187], "static_set_split_factor": [186, 187], "static_set_tmp_dir": [186, 187], "static_set_with_grad": [186, 187], "static_shap": [186, 187], "static_shape_to_tupl": [186, 187], "static_shuffl": [186, 187], "static_sigmoid": [186, 187], "static_sign": [186, 187], "static_sin": [186, 187], "static_sinh": [186, 187], "static_slogdet": [186, 187], "static_softmax": [186, 187], "static_softplu": [186, 187], "static_solv": [186, 187], "static_split": [186, 187], "static_split_factor": [186, 187], "static_split_func_cal": [186, 187], "static_sqrt": [186, 187], "static_squar": [186, 187], "static_squeez": [186, 187], "static_stable_divid": [186, 187], "static_stable_pow": [186, 187], "static_stack": [186, 187], "static_std": [186, 187], "static_stop_gradi": [186, 187], "static_sum": [186, 187], "static_supports_inplac": [186, 187], "static_svd": [186, 187], "static_svdv": [186, 187], "static_swapax": [186, 187], "static_tensordot": [186, 187], "static_til": [186, 187], "static_tmp_dir": [186, 187], "static_to_devic": [186, 187], "static_to_list": [186, 187], "static_to_native_arrays_and_back": [186, 187], "static_to_numpi": [186, 187], "static_to_scalar": [186, 187], "static_total_mem_on_dev": [186, 187], "static_tpu_is_avail": [186, 187], "static_trac": [186, 187], "static_tril": [186, 187], "static_triu": [186, 187], "static_trunc": [186, 187], "static_try_else_non": [186, 187], "static_type_promote_arrai": [186, 187], "static_unique_al": [186, 187], "static_unique_count": [186, 187], "static_unique_invers": [186, 187], "static_unique_valu": [186, 187], "static_unset_default_devic": [186, 187], "static_unset_default_dtyp": [186, 187], "static_unset_default_float_dtyp": [186, 187], "static_unset_default_int_dtyp": [186, 187], "static_unset_with_grad": [186, 187], "static_unstack": [186, 187], "static_used_mem_on_dev": [186, 187], "static_valid_dtyp": [186, 187], "static_value_is_nan": [186, 187], "static_var": [186, 187], "static_vari": [186, 187], "static_variable_data": [186, 187], "static_vecdot": [186, 187], "static_vector_norm": [186, 187], "static_vector_to_skew_symmetric_matrix": [186, 187], "static_wher": [186, 187], "static_with_grad": [186, 187], "static_zero_pad": [186, 187], "static_zero": [186, 187], "static_zeros_lik": [186, 187], "supports_inplac": [186, 187, 783], "tmp_dir": [186, 187, 783], "to_native_arrays_and_back": [186, 187, 374, 380, 400], "to_scalar": [186, 187, 783], "total_mem_on_dev": [186, 187, 378, 497], "tpu_is_avail": [186, 187, 497], "tril": [186, 187, 441], "triu": [186, 187, 441], "try_else_non": [186, 187, 783], "type_promote_arrai": [186, 187, 460], "unique_al": [186, 187, 1095], "unique_count": [186, 187, 1095], "unique_invers": [186, 187, 1095], "unique_valu": [186, 187, 1095], "unset_default_devic": [186, 187, 497], "unset_default_dtyp": [186, 187, 460], "unset_default_float_dtyp": [186, 187, 460], "unset_default_int_dtyp": [186, 187, 460], "unset_with_grad": [186, 187, 857], "used_mem_on_dev": [186, 187, 497], "valid_dtyp": [186, 187, 460], "value_is_nan": [186, 187, 783], "variable_data": [186, 187, 857], "with_grad": [186, 187, 857, 886], "zeros_lik": [186, 187, 441, 991, 992, 995, 1153], "at_dev": [186, 188, 189, 497, 510, 511], "container_method": [189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 411, 413, 415, 417, 421, 422, 423, 425, 427, 429, 431, 432, 434, 436, 469, 471, 473, 548, 550, 552, 555, 556, 557, 559, 563, 564, 565, 566, 568, 570, 572, 576, 577, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 616, 617, 620, 621, 624, 625, 626, 629, 630, 631, 633, 637, 638, 639, 641, 645, 646, 647, 649, 653, 654, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 717, 719, 721, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 767, 769, 772, 774, 775, 777, 778, 779, 781, 784, 786, 788, 796, 797, 812, 814, 816, 859, 861, 863, 864, 865, 867, 869, 870, 872, 874, 875, 877, 878, 879, 881, 882, 883, 885, 927, 929, 976, 978, 980, 981, 983, 985, 986, 988, 990, 992, 994, 996, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1074, 1076, 1080, 1082, 1084, 1085, 1087, 1101, 1103, 1105, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1138, 1139, 1140, 1142, 1145, 1147, 1149, 1151], "adam_upd": [189, 333, 334, 386, 857], "lr": [189, 194, 236, 242, 243, 264, 290, 300, 301, 302, 304, 333, 334, 385, 386, 857, 864, 865, 866, 867, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 1190, 1191, 1192, 1193, 1194, 1195], "mw_tm1": [189, 194, 242, 290, 301, 333, 334, 857, 864, 865, 866, 867, 874, 875, 876, 877], "vw_tm1": [189, 194, 242, 290, 301, 333, 334, 857, 864, 865, 866, 867, 874, 875, 876, 877], "add_ivy_container_instance_method": [189, 359], "containerexampl": [189, 196, 359, 360], "static_all_equ": [189, 198, 331, 332, 784, 786], "int32": [189, 215, 295, 325, 326, 377, 460, 469, 471, 472, 473, 481, 783, 852, 991, 1005, 1008, 1111, 1128, 1131, 1136], "int64": [189, 215, 295, 325, 326, 377, 460, 469, 471, 472, 473, 481, 547, 602, 605, 1090, 1091, 1092, 1111, 1128, 1131, 1136], "clip_vector_norm": [189, 331, 332, 783], "max_norm": [189, 218, 331, 332, 783, 795, 796, 797, 798], "gradient_descent_upd": [189, 333, 334, 857, 1051, 1052, 1053, 1054, 1153], "lamb_upd": [189, 333, 334, 857], "max_trust_ratio": [189, 242, 301, 333, 334, 857, 874, 875, 876, 877, 1190, 1192], "decay_lambda": [189, 242, 243, 301, 302, 333, 334, 857, 874, 875, 876, 877, 878, 879, 880, 881, 1190, 1192, 1193], "lars_upd": [189, 333, 334, 857], "optimizer_upd": [189, 333, 334, 857], "effective_grad": [189, 264, 304, 333, 334, 857, 882, 883, 884, 885], "random_uniform": [189, 347, 348, 378, 386, 1078, 1153], "static_ab": [189, 329, 330, 548], "static_adam_step": [189, 333, 334, 859], "87": [189, 289, 305, 333, 334, 347, 348, 857, 859, 862, 863, 1080, 1082], "976": [189, 289, 333, 334, 547, 776, 857, 859, 862, 863], "static_adam_upd": [189, 333, 334, 864], "static_add": [189, 329, 330, 368, 369, 376, 695], "static_argsort": [189, 353, 354, 1101], "static_binary_cross_entropi": [189, 341, 342, 976], "static_can_cast": [189, 325, 326, 469], "from_": [189, 295, 325, 326, 460, 469, 472, 473], "static_clip": [189, 343, 344, 992], "static_rol": [189, 296, 343, 344, 369, 376, 992, 996, 1025], "static_cross_entropi": [189, 341, 342, 981], "static_divid": [189, 329, 330, 376, 646, 647], "static_gather_nd": [189, 331, 332, 812], "static_gradient_descent_upd": [189, 333, 334, 869], "static_lamb_upd": [189, 333, 334, 874], "static_lars_upd": [189, 333, 334, 878], "static_multipli": [189, 329, 330, 376, 717], "static_optimizer_upd": [189, 333, 334, 882], "static_randint": [189, 347, 348, 1080], "20": [189, 305, 347, 348, 384, 547, 606, 609, 635, 742, 745, 758, 761, 905, 915, 917, 941, 943, 960, 962, 1078, 1080, 1081, 1082, 1090, 1093, 1094, 1111, 1112, 1115, 1139], "15": [189, 305, 347, 348, 362, 369, 547, 586, 589, 742, 745, 892, 895, 905, 915, 917, 941, 943, 960, 962, 991, 1025, 1028, 1073, 1074, 1077, 1078, 1080, 1081, 1082, 1090, 1093, 1095, 1096, 1111, 1112, 1115, 1139], "16": [189, 305, 311, 317, 329, 330, 347, 348, 363, 369, 385, 547, 577, 582, 771, 772, 774, 778, 892, 898, 905, 915, 917, 941, 943, 1080, 1082, 1090, 1094, 1111, 1112, 1115, 1139], "12": [189, 305, 347, 348, 362, 369, 376, 547, 586, 589, 606, 609, 618, 742, 745, 783, 801, 819, 857, 859, 862, 905, 915, 917, 941, 943, 960, 962, 991, 1009, 1012, 1017, 1020, 1025, 1028, 1073, 1074, 1077, 1078, 1080, 1081, 1082, 1090, 1094, 1095, 1096, 1111, 1112, 1115, 1139], "40": [189, 305, 347, 348, 547, 618, 758, 761, 905, 941, 943, 1080, 1082, 1111, 1112, 1115, 1139], "gpu": [189, 305, 347, 348, 363, 378, 384, 399, 497, 516, 519, 532, 534, 538, 540, 545, 1080, 1082], "62": [189, 305, 347, 348, 1080, 1082], "52": [189, 305, 347, 348, 857, 859, 862, 905, 941, 943, 1080, 1082, 1095, 1096, 1111, 1112, 1115, 1139], "95": [189, 305, 347, 348, 857, 859, 862, 1080, 1082], "37": [189, 305, 347, 348, 547, 771, 1073, 1074, 1077, 1080, 1082], "42": [189, 305, 347, 348, 387, 410, 431, 433, 857, 859, 862, 905, 941, 943, 1078, 1080, 1082, 1088, 1111, 1112, 1115, 1139], "14": [189, 305, 347, 348, 365, 369, 376, 547, 606, 609, 857, 859, 862, 892, 904, 905, 915, 917, 941, 943, 1080, 1082, 1095, 1096, 1111, 1112, 1115, 1139], "13": [189, 305, 347, 348, 369, 376, 547, 586, 589, 606, 609, 618, 758, 761, 783, 801, 857, 859, 862, 892, 904, 905, 915, 917, 941, 943, 1073, 1074, 1077, 1080, 1082, 1090, 1094, 1095, 1096, 1111, 1112, 1115, 1139], "static_random_uniform": [189, 347, 348, 1084], "static_sort": [189, 353, 354, 1106], "static_sparse_cross_entropi": [189, 341, 342, 986], "static_subtract": [189, 329, 330, 376, 766], "static_tan": [189, 329, 330, 369, 376, 577, 582, 778], "143": [189, 311, 317, 329, 330, 369, 547, 577, 582, 771, 772, 774, 778], "38": [189, 311, 317, 329, 330, 369, 547, 577, 582, 771, 772, 774, 778], "static_tanh": [189, 329, 330, 582], "76": [189, 312, 329, 330, 547, 582, 618, 777, 857, 859, 862, 905, 960, 962, 1111, 1112, 1115, 1139], "96": [189, 312, 329, 330, 547, 582, 771, 777, 857, 859, 862, 905, 941, 943, 1111, 1112, 1115, 1139], "995": [189, 312, 318, 329, 330, 434, 436, 547, 582, 776, 777], "9999": [189, 312, 329, 330, 582, 777], "strongli": [361, 362, 1153, 1159], "welcom": [361, 362, 363, 1153, 1159], "skill": 361, "vetern": 361, "beginn": 361, "aspect": [361, 385, 1153], "guid": [361, 362, 363, 371, 1153], "through": [361, 363, 364, 366, 369, 372, 373, 376, 381, 382, 384, 385, 386, 387, 398, 547, 578, 581], "journei": [361, 1153, 1159], "inclusvi": 361, "big": [361, 399], "team": [361, 362, 363], "board": 361, "contributor": [361, 362, 363, 381, 1153], "section": [361, 363, 364, 366, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 1095, 1096, 1097, 1099], "below": [361, 362, 364, 365, 366, 367, 369, 372, 376, 377, 378, 379, 382, 383, 384, 385, 386, 387, 398, 441, 456, 457, 547, 586, 589, 606, 609, 618, 742, 745, 776, 905, 912, 915, 917, 963, 965, 991, 1005, 1008, 1009, 1012, 1095, 1096, 1097, 1100, 1101, 1104, 1153], "best": [361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 783, 833], "go": [361, 362, 363, 364, 366, 367, 369, 376, 381, 385, 399, 1055, 1066], "finish": [361, 362, 366, 1153], "dive": [361, 363, 364, 381, 384, 385, 399, 1153], "environ": [361, 363, 365, 398], "basic": [361, 364, 365], "fork": [361, 362, 783, 834], "doc": [361, 364, 368, 380, 382, 385, 386, 1153], "document": [361, 363, 383, 385, 387], "local": [361, 362, 365, 372], "task": [361, 363, 398, 1051, 1052, 1053, 1054, 1153], "help": [361, 362, 369, 373, 375, 376, 384, 385, 386, 397, 783, 789, 1111, 1136, 1153], "video": [361, 363, 368, 369, 380], "realli": [362, 376, 399], "contribut": [362, 363, 364, 382, 1159], "toward": [362, 382, 991, 1025, 1028, 1153, 1159], "page": [362, 363, 383, 387, 397, 1153, 1159], "explain": [362, 363, 364, 367, 368, 369, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 1153, 1159], "main": [362, 365, 374, 376, 441, 446, 456, 457, 905, 915, 917, 963, 965], "prefer": [362, 376], "git": [362, 363], "submodul": [362, 363, 364, 365, 370, 371, 372, 378, 381, 382, 386, 1153, 1188, 1189, 1196, 1197], "com": 362, "unifyai": [362, 365], "http": [362, 368, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 456, 457, 458, 459, 460, 469, 472, 547, 548, 551, 566, 569, 606, 609, 610, 613, 618, 643, 726, 729, 758, 761, 762, 765, 857, 859, 862, 864, 866, 991, 1005, 1008, 1025, 1028, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119], "gh": 362, "your_fold": 362, "id": [362, 375, 376, 497, 516, 1186, 1187], "cours": [362, 363, 369, 385, 399], "whatev": [362, 399], "integr": [362, 371, 460, 466], "familiar": [362, 364], "sure": [362, 364, 370], "elig": 362, "free": [362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 398, 1153], "student": 362, "licenc": 362, "peopl": [362, 363, 366], "seem": [362, 386, 399], "miss": [362, 369, 371, 375, 376, 1190, 1194], "explicit": [362, 365, 376, 377, 379, 382, 399], "remind": 362, "channel": [362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 783, 810, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184], "pace": 362, "suggest": [362, 363, 367], "latest": [362, 364, 365, 368, 399, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 456, 457, 458, 459, 460, 469, 472, 547, 548, 551, 566, 569, 606, 609, 610, 613, 618, 643, 726, 729, 758, 761, 762, 765, 991, 1005, 1008, 1025, 1028, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119, 1174, 1183], "packag": [362, 365, 399], "ensur": [362, 363, 371, 375, 377, 380, 783, 827], "pypi": [362, 364, 399], "person": [362, 363], "experi": [362, 383, 385, 399], "avoid": [362, 363, 371, 373, 374, 376, 384, 497, 547, 639, 642], "pip": [362, 398, 1153], "instal": [362, 365, 398, 1153], "abil": [362, 383, 399], "perhap": [362, 384, 385, 386, 399], "track": [362, 363, 497, 1055, 1067, 1186, 1187], "run": [362, 365, 370, 371, 373, 380, 382, 383, 384, 385, 386, 387, 398, 399, 497, 506, 857, 859, 862, 864, 866, 874, 876, 1051, 1052, 1053, 1054, 1174, 1185, 1186, 1187], "command": [362, 365, 1153], "ivy_dev": [362, 363, 365], "name": [362, 363, 365, 368, 371, 382, 384, 385, 387, 438, 439, 783, 789, 905, 918, 920, 947, 949, 954, 1095, 1096, 1097], "setup": 362, "click": [362, 363, 368, 1153], "icon": [362, 363], "side": [362, 363], "choos": [362, 363, 387, 497, 542, 547, 703, 706, 707, 710, 1090, 1094, 1095, 1096, 1097, 1099, 1111, 1116, 1119, 1120, 1123, 1124, 1127], "panel": 362, "select": [362, 363, 371, 382, 384, 387, 399], "drop": [362, 399], "down": [362, 384], "path": [362, 365], "manual": [362, 363, 371, 386, 1055, 1056, 1065, 1066], "builtin": [362, 365, 384, 386], "requir": [362, 365, 367, 368, 369, 371, 374, 375, 377, 378, 380, 384, 399, 438, 439, 547, 758, 761, 905, 918, 920, 991, 1035, 1038, 1163, 1164], "cmd": [362, 365], "directori": [362, 363, 365, 783, 844], "folder": [362, 363, 365, 367, 370, 371, 372], "abov": [362, 363, 365, 368, 369, 372, 373, 375, 376, 379, 380, 384, 385, 386, 387, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 469, 472, 547, 548, 551, 561, 566, 569, 586, 589, 606, 609, 610, 613, 618, 643, 717, 720, 726, 729, 742, 745, 758, 761, 762, 765, 771, 776, 783, 811, 892, 895, 904, 905, 912, 915, 917, 918, 920, 963, 965, 991, 1005, 1008, 1009, 1012, 1025, 1028, 1073, 1074, 1077, 1078, 1080, 1081, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119, 1128, 1131, 1132, 1135, 1136, 1144, 1145, 1148], "m": [362, 363, 365, 366, 382, 441, 452, 456, 457, 783, 792, 905, 906, 908, 912, 915, 917, 918, 920, 921, 923, 924, 926, 927, 930, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 951, 953, 954, 956, 957, 959, 963, 965, 1078, 1083, 1084, 1086], "python3": [362, 365], "script": [362, 363, 365, 369, 382, 399], "bat": [362, 363, 365], "OR": [362, 363, 365, 547, 598, 601, 707, 710, 1144, 1149, 1152], "bin": [362, 363, 365], "mac": [362, 363, 365], "linux": [362, 363, 365], "virtualenv": 362, "os": 362, "note": [362, 363, 367, 368, 369, 376, 547, 738, 741, 905, 918, 920, 954, 991, 1035, 1038, 1095, 1097, 1111, 1120, 1123], "tick": [362, 363], "To": [362, 369, 372, 376, 385, 386, 387, 1153], "ivy_test": [362, 363], "test_array_api": [362, 363, 370, 371], "cd": [362, 363, 365], "txt": 362, "visual": [362, 399], "jetbrain": 362, "remot": 362, "mitig": 362, "potenti": [362, 381, 547, 639, 642], "conflict": [362, 363, 385], "yet": [362, 364, 376], "particular": [362, 363, 367, 379, 547, 548, 551], "system": [362, 399, 905, 951, 953], "instruct": [362, 364], "desktop": 362, "wsl": 362, "powershel": 362, "admin": 362, "visit": 362, "link": 362, "profession": 362, "execut": [362, 365, 376, 379, 382, 384, 387, 399, 783, 854], "deploy": 362, "top": [362, 363, 371, 385, 386, 1153], "press": [362, 385, 1153], "ok": 362, "caus": [362, 363, 369, 371, 376, 379, 399], "earlier": [362, 363], "might": [362, 363, 367, 371, 374, 382, 384, 385, 783, 804], "necessari": [362, 369, 373, 376, 379], "virtualis": 362, "detail": [362, 363, 364, 367, 370, 371, 372, 373, 374, 376, 380, 385, 386, 441, 447, 1095, 1096, 1097, 1099], "sudo": 362, "apt": 362, "ca": 362, "certif": 362, "curl": 362, "gnupg": 362, "lsb": 362, "mkdir": 362, "keyr": 362, "fssl": 362, "download": [362, 371], "gpg": 362, "dearmor": 362, "o": [362, 382, 783, 792], "echo": 362, "deb": 362, "arch": 362, "dpkg": 362, "architectur": [362, 387, 399], "lsb_releas": 362, "cs": 362, "tee": 362, "null": 362, "ce": 362, "cli": 362, "containerd": 362, "io": 362, "compos": [362, 376, 399], "plugin": 362, "systemctl": 362, "permiss": 362, "relat": [362, 363, 398, 497], "post": [362, 387, 1073, 1074, 1077, 1153, 1159], "It": [362, 363, 365, 366, 367, 368, 369, 373, 375, 376, 379, 382, 384, 385, 386, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 433, 434, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 466, 468, 497, 542, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 716, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 766, 770, 771, 775, 776, 778, 779, 782, 783, 795, 796, 798, 801, 805, 806, 807, 809, 812, 815, 823, 836, 839, 840, 857, 887, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 911, 912, 914, 915, 917, 921, 923, 924, 926, 927, 930, 931, 933, 935, 937, 938, 940, 941, 943, 944, 946, 950, 951, 953, 954, 956, 957, 959, 960, 962, 963, 965, 966, 968, 969, 971, 972, 974, 975, 976, 979, 981, 984, 986, 989, 991, 992, 995, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1028, 1031, 1034, 1035, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1089, 1090, 1091, 1094, 1095, 1099, 1100, 1101, 1104, 1106, 1109, 1144, 1145, 1148, 1149, 1152], "headach": 362, "arm": [362, 363], "m1": 362, "instead": [362, 363, 364, 368, 369, 371, 372, 376, 379, 380, 382, 384, 385, 399], "featur": [362, 367, 380, 385, 1153], "vm": 362, "azur": 362, "cloud": [362, 398], "defin": [362, 364, 367, 368, 377, 380, 384, 386, 399, 547, 717, 720, 738, 741, 783, 836, 905, 909, 911, 918, 920, 951, 953, 1078, 1080, 1081, 1111, 1116, 1119, 1120, 1123, 1124, 1127], "dockerfil": [362, 365], "longer": [362, 377, 379], "worri": 362, "platform": 362, "agnost": [362, 375, 380, 382, 384, 387, 399, 1153], "usual": 362, "studio": 362, "favourit": 362, "extens": [362, 363, 368, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 469, 472, 547, 548, 551, 561, 566, 569, 586, 589, 606, 609, 610, 613, 618, 643, 726, 729, 742, 745, 758, 761, 762, 765, 771, 776, 905, 912, 991, 1005, 1008, 1009, 1012, 1025, 1028, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119, 1144, 1145, 1148], "theme": 362, "too": [362, 363, 399, 547, 561, 717, 720], "done": [362, 363, 369, 371, 385], "unsupport": [362, 377, 460, 481, 482], "slow": 362, "ipad": 362, "long": [362, 363, 369, 892, 902], "browser": 362, "cool": [362, 367], "requisit": 362, "head": [362, 376, 892, 903, 1153, 1174, 1185], "pane": [362, 363], "readi": [362, 364], "begin": [362, 1055, 1056, 1066], "outlin": [362, 363, 364, 366, 368, 371, 372, 376, 379, 384], "dropdown": 362, "tab": [362, 385, 1153], "master": [362, 363, 376], "vs": 362, "view": [362, 363, 441, 447, 892, 895, 899], "built": [362, 383, 441, 442, 497, 1174, 1185, 1186, 1187], "bottom": 362, "box": 362, "patient": 362, "upto": 362, "minut": 362, "launch": 362, "That": [362, 363, 384, 385, 386, 547, 738, 741], "refer": [362, 363, 371, 372, 377, 380, 399, 441, 446, 547, 639, 642, 687, 690, 857, 859, 862, 864, 866, 905, 966, 968, 972, 974, 1111, 1132, 1135, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1174, 1184], "approach": [362, 363, 371, 372, 376, 384, 385, 399], "colour": 362, "applic": [362, 377, 378, 386, 892, 903, 904, 1055, 1061, 1067], "good": [362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 386], "chanc": 362, "vscode": 362, "explor": [362, 383, 387, 398], "troubleshoot": 362, "sometim": [362, 363], "ever": [362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380], "64": [362, 385, 386, 547, 758, 761, 762, 765, 892, 898, 899, 905, 941, 943, 1111, 1112, 1115, 1139, 1153, 1174, 1185], "bit": [362, 369, 372, 376, 384, 460, 479, 480, 483, 547, 590, 593, 594, 597, 602, 605, 1111, 1128, 1131, 1136], "usr": 362, "more": [362, 363, 364, 366, 367, 369, 371, 372, 373, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 398, 399, 441, 442, 460, 467, 547, 639, 642, 905, 927, 930, 991, 1009, 1012, 1095, 1096, 1097, 1099, 1153], "nutshel": [362, 380], "hook": 362, "lint": 362, "fix": [362, 363], "fail": [362, 364, 370, 371, 382, 384], "attempt": [362, 399], "succe": 362, "problemat": 362, "proce": [362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380], "modifi": [362, 363, 368, 372, 377, 378, 382], "properli": [362, 366], "enter": [362, 363, 375, 377, 378, 380, 497], "unsur": [362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380], "feel": [362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 1153], "server": [363, 1153], "context": [363, 369, 376, 377, 378, 497, 783, 834, 892, 903, 1174, 1185], "suitabl": [363, 367, 376], "quick": [363, 366, 386], "tendenc": 363, "land": 363, "end": [363, 376, 379, 381, 398, 399, 441, 442, 547, 578, 581, 1153, 1159], "world": 363, "come": [363, 364, 386, 397, 1153, 1159], "fly": 363, "hard": [363, 384], "receiv": [363, 371, 377, 378, 497, 506, 507, 783, 790, 833, 1174, 1184], "respons": [363, 365], "internship": 363, "comment": 363, "trigger": 363, "unansw": 363, "label": [363, 382, 383, 387, 975, 976, 979, 981, 984, 986, 989], "respond": 363, "someon": [363, 399], "els": [363, 364, 367, 372, 373, 379, 382, 384, 386, 387, 399, 783, 793, 804, 808, 1055, 1065], "strive": [363, 399], "repli": 363, "newli": [363, 379, 438, 439, 460, 466, 783, 794], "bug": [363, 371], "serv": [363, 371, 372, 375, 376, 380, 381, 1153], "suspect": 363, "behaviour": [363, 368, 371, 375, 376, 379, 380, 384], "observ": 363, "confid": 363, "wrong": 363, "someth": [363, 367, 385, 386, 399], "bet": 363, "act": [363, 369, 399], "placehold": [363, 375, 380, 1055, 1067], "mark": [363, 371], "ii": [363, 1111, 1112, 1115, 1139], "iii": 363, "titl": [363, 1153], "issue_numb": 363, "delet": [363, 365], "No": [363, 382], "progress": [363, 376, 383, 387], "pr": 363, "soon": [363, 376, 397, 399, 1153, 1159], "solut": [363, 371, 376, 905, 951, 953], "review": [363, 367], "merg": 363, "everi": [363, 364, 365, 369, 370, 371, 372, 373, 374, 376, 379, 380, 382, 384, 386, 441, 448, 449, 783, 784, 787], "dai": 363, "close": [363, 368, 547, 639, 642, 742, 745, 905, 954], "likewis": [363, 368, 372, 376, 377, 380, 385], "freed": 363, "purpos": [363, 365, 369, 371, 372, 374, 375, 376, 380, 381, 384, 547, 639, 642, 1153], "remain": [363, 369, 399, 547, 561, 717, 720, 738, 741, 991, 1021, 1024, 1055, 1061], "short": [363, 386, 892, 902], "basi": [363, 370, 385], "situat": [363, 387], "alloc": [363, 399, 441, 456, 457, 460, 466, 497], "upon": [363, 369, 371, 379, 399], "period": 363, "prevent": [363, 379, 384, 857, 859, 862, 864, 866, 874, 876, 1111, 1136, 1190, 1191, 1192], "unabl": 363, "obvious": 363, "never": [363, 376], "reflect": [363, 375], "qualiti": 363, "hypothet": 363, "frustrat": 363, "delai": 363, "busi": 363, "fine": [363, 384, 387], "becaus": [363, 368, 371, 372, 373, 375, 377, 378, 379, 380, 382, 386, 387, 399], "inact": 363, "me": 363, "unfairli": 363, "definit": [363, 372, 377, 384, 905, 906, 908, 909, 911], "investig": 363, "Then": [363, 365, 384, 399], "practic": [363, 371], "separ": [363, 371, 375, 382, 384, 385], "branch": [363, 376, 399, 438, 439, 547, 578, 581], "role": [363, 383], "date": 363, "upstream": [363, 370], "complic": [363, 382], "root": [363, 365, 385, 547, 758, 761, 1078, 1079, 1083], "merge_with_upstream": 363, "sh": 363, "name_of_your_branch": 363, "resolv": [363, 1111, 1128, 1131, 1136], "push": [363, 370], "both": [363, 368, 369, 372, 376, 378, 379, 380, 382, 384, 385, 386, 387, 398, 399, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 469, 472, 487, 547, 548, 551, 561, 566, 569, 610, 613, 643, 726, 729, 734, 737, 758, 761, 762, 765, 771, 783, 811, 857, 859, 862, 892, 895, 904, 905, 909, 911, 927, 930, 966, 968, 991, 1025, 1028, 1073, 1074, 1077, 1111, 1116, 1119, 1144, 1145, 1148], "abort": 363, "tediou": 363, "resolut": 363, "stash": 363, "reinstat": 363, "fetch": 363, "uncommit": 363, "unstag": 363, "untrack": 363, "comprehens": 363, "explan": [363, 368, 376, 380, 384], "atlassian": 363, "tutori": 363, "wrote": 363, "piec": [363, 372, 374, 375, 382], "inform": [363, 460, 480, 483, 783, 789, 857, 887], "tag": 363, "usu": 363, "describ": [363, 383, 387, 1111, 1112, 1115, 1128, 1131, 1132, 1135, 1136, 1139], "navig": [363, 366], "blame": 363, "revis": 363, "author": [363, 1153], "eg": 363, "past": 363, "l": [363, 366, 905, 906, 908, 918, 920, 927, 930, 963, 965], "grep": 363, "v": [363, 382, 385, 386, 387, 892, 904, 1153, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1194, 1196, 1197], "commit_id": 363, "handi": 363, "histori": 363, "toggl": 363, "vertic": 363, "highlight": [363, 369], "previou": [363, 371, 380, 387, 399, 857, 864, 866, 874, 876], "whenev": [363, 384, 385], "think": [363, 369], "interact": [363, 1153], "gain": [363, 381, 386, 1165], "quit": [363, 364, 368, 372, 374, 375], "yourself": [363, 364, 398], "simpler": [363, 384], "cannot": [363, 373, 377, 387], "least": [363, 369, 372, 375, 905, 927, 930], "final": [363, 368, 369, 372, 375, 377, 379, 382, 384, 385, 441, 450, 451, 783, 810, 1174, 1185], "tickbox": 363, "corner": 363, "span": 363, "intent": [363, 379], "larg": [363, 385, 547, 561, 717, 720], "discourag": 363, "philosophi": 363, "increment": [363, 783, 826], "frequent": [363, 364], "valuabl": 363, "infrequ": 363, "earli": [363, 1153], "wast": 363, "spot": [363, 372], "mistak": 363, "propos": 363, "mountain": 363, "advoc": [363, 399], "individu": [363, 364, 372], "per": [363, 385, 497, 892, 893, 894, 895, 896, 897, 898, 899, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181], "style": [363, 1090, 1093], "ve": [363, 381, 384, 1078, 1079, 1153], "actual": [363, 366, 372, 379, 381, 384, 386, 399], "aim": [363, 381], "part": [363, 367, 370, 371, 372, 382, 383, 387, 398, 399, 441, 456, 457, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 1186, 1187], "subsect": 363, "session": [363, 1153], "block": [363, 372, 381, 383, 387, 399, 497, 1153], "smaller": [363, 382, 387, 991, 992, 995, 1025, 1028, 1111, 1128, 1131, 1136], "edit": 363, "beauti": 363, "particularli": [363, 385, 399], "concern": [363, 366, 369, 376, 379, 381], "effici": [363, 371, 372, 376, 379, 380, 382, 385, 399], "difficult": [363, 371, 399, 1095, 1096, 1097, 1099], "undo": 363, "stress": 363, "frequenc": [363, 783, 810], "pycharm": 363, "pytest": [363, 371], "button": 363, "declar": 363, "insid": [363, 365, 367, 377], "exec": 363, "rm": 363, "rf": 363, "cp": 363, "ivy_contain": 363, "bash": [363, 365], "test_ivi": [363, 371], "test_funct": 363, "test_cor": 363, "test_imag": 363, "test_random_crop": 363, "header": 363, "q": [363, 399, 892, 904, 905, 918, 920, 947, 949], "array_api_test": 363, "test_creation_funct": 363, "test_arang": 363, "window": [363, 365, 892, 893, 894, 895, 896, 897, 898, 899, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181], "variou": [363, 368, 374, 380, 398], "wherebi": [364, 376, 1055, 1067], "broad": 364, "todo": [364, 371], "commit": [364, 371], "NOT": [364, 547, 703, 706], "resourc": 364, "hypothesi": 364, "cover": [364, 368, 369, 372, 374, 381], "lambda": [364, 382, 385, 1190, 1193, 1195], "direct": [364, 386, 387, 398, 1100, 1106, 1109], "bind": [364, 376], "aforement": 364, "categori": [364, 367, 375, 376, 377, 381, 1153], "parent": [364, 384], "hint": [364, 367, 368, 372, 375, 379, 380, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 469, 472, 547, 548, 551, 561, 566, 569, 586, 589, 606, 609, 610, 613, 618, 643, 726, 729, 742, 745, 758, 761, 762, 765, 771, 776, 783, 811, 892, 895, 904, 905, 912, 991, 1005, 1008, 1009, 1012, 1025, 1028, 1073, 1074, 1077, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119, 1144, 1145, 1148], "its": [364, 365, 368, 460, 467, 497, 541, 905, 927, 930, 991, 1005, 1008, 1021, 1024, 1025, 1028, 1039, 1042], "thorough": [364, 368, 371, 380], "transpil": [364, 381, 383, 1153, 1159], "builder": [365, 397, 399, 1153], "maco": 365, "ubuntu": 365, "uid": 365, "make_docs_without_dock": 365, "rel": [365, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 905, 915, 917, 926, 935, 937, 944, 946, 963, 965, 991, 1009, 1012, 1025, 1028, 1100, 1101, 1104, 1106, 1109, 1153], "synchron": 365, "rest": [365, 383, 387], "remove_doc": 365, "_": [365, 368, 376, 379, 384, 385, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 456, 457, 458, 459, 460, 469, 472, 547, 548, 551, 566, 569, 606, 609, 610, 613, 618, 643, 726, 729, 758, 761, 762, 765, 857, 859, 862, 864, 866, 905, 972, 974, 991, 1005, 1008, 1025, 1028, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119], "privat": [365, 1190, 1194], "fulfil": [365, 381, 1153], "autogenerated_sourc": 365, "png": [365, 385], "_imag": 365, "lastli": 365, "rst": 365, "partial_sourc": 365, "conf": 365, "create_rst_fil": 365, "filter": [365, 892, 893, 894, 895, 896, 897, 898, 899, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181], "repres": [365, 384, 441, 452, 460, 479, 547, 556, 557, 560, 561, 570, 573, 577, 582, 585, 617, 618, 621, 717, 720, 754, 757, 775, 776, 778, 892, 901, 905, 914, 950, 951, 953], "overal": [365, 368, 376, 377, 378, 387], "markup": 365, "extract": [365, 367], "get_functions_and_class": 365, "doctr": 365, "readm": [365, 399], "module_nam": 365, "copy_readme_to_rst": 365, "tabl": 365, "toc": 365, "tree": 365, "append_toctree_to_rst": 365, "create_index_rst": 365, "\u03c0": [365, 547, 553, 566, 569, 574, 578, 581], "namespac": [365, 367, 377, 382, 387], "who": [366, 381, 399], "mainli": [366, 383, 385], "under": [366, 368, 369, 370, 371, 372, 376, 381, 382, 385, 387], "hood": [366, 369, 371, 372, 376, 381, 382, 385, 387], "weed": [366, 381], "behind": [366, 381, 383, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884], "tour": 366, "primari": [366, 371, 373, 379, 399], "composit": [366, 371, 373, 375, 376, 379, 382, 386, 387, 399], "nestabl": [366, 368, 369, 371, 379, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 469, 472, 547, 548, 551, 561, 566, 569, 610, 613, 643, 726, 729, 758, 761, 762, 765, 771, 783, 811, 892, 895, 904, 991, 1025, 1028, 1073, 1074, 1077, 1111, 1116, 1119, 1144, 1145, 1148], "dynam": [366, 377, 378, 379, 382, 438, 439], "runtim": [366, 371, 497], "h": [366, 376, 892, 895, 896, 897, 898, 899], "j": [366, 783, 791, 792, 905, 963, 965, 1111, 1112, 1115, 1139], "k": [366, 382, 441, 446, 456, 457, 783, 791, 892, 904, 905, 927, 930, 947, 949, 951, 953, 954, 956, 957, 959, 963, 965, 1078, 1083, 1084, 1086, 1090, 1093], "borrow": 366, "n": [366, 441, 452, 456, 457, 783, 792, 892, 900, 905, 915, 917, 926, 927, 930, 934, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 954, 956, 957, 959, 963, 965, 966, 968, 969, 971, 972, 974, 991, 1001, 1004, 1005, 1008, 1013, 1016, 1035, 1038, 1047, 1050, 1078, 1083, 1084, 1086, 1090, 1093, 1111, 1120, 1123, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152], "taken": [367, 387, 905, 915, 917], "constant": [367, 372, 386, 387, 399, 497, 506, 507, 991, 1001, 1004, 1055, 1061, 1073, 1074, 1077, 1165, 1166, 1170, 1173, 1186, 1187, 1188, 1189], "compil": [367, 376, 381, 383, 399, 1153, 1186, 1187, 1190, 1191, 1192, 1193, 1194, 1195], "meta": [367, 375, 1052, 1053, 1054], "overlap": 367, "sever": [367, 399, 905, 924], "judgement": 367, "locat": [367, 371, 373, 378, 1078, 1079], "some_namespac": 367, "some_backend": 367, "another_backend": 367, "break": [367, 380, 384, 399, 1153], "anyth": [367, 1153], "refactor": 367, "ongo": 367, "subfold": [367, 371], "via": [367, 376, 377, 378, 379, 382, 384, 385, 398, 1055, 1056, 1065, 1066], "file_nam": 367, "my_func": [367, 369], "int": [367, 369, 372, 376, 377, 378, 379, 380, 387, 410, 427, 430, 438, 439, 441, 444, 446, 448, 449, 450, 451, 454, 456, 457, 458, 460, 468, 477, 479, 480, 483, 486, 497, 519, 522, 523, 524, 525, 533, 534, 535, 541, 542, 547, 586, 589, 590, 593, 594, 597, 598, 601, 602, 605, 606, 609, 783, 789, 801, 802, 805, 806, 807, 810, 811, 820, 836, 839, 840, 845, 846, 855, 857, 859, 862, 864, 866, 874, 876, 892, 893, 895, 897, 898, 899, 905, 909, 911, 915, 917, 960, 962, 963, 965, 966, 968, 969, 971, 975, 981, 984, 986, 989, 991, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1020, 1021, 1024, 1025, 1028, 1030, 1031, 1034, 1035, 1038, 1039, 1042, 1043, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1067, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1088, 1090, 1091, 1092, 1100, 1101, 1104, 1106, 1109, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152], "nativedtyp": [367, 377, 378, 380, 441, 442, 443, 444, 445, 446, 448, 449, 453, 454, 455, 458, 459, 460, 465, 466, 476, 477, 478, 487, 1111, 1136], "nativedevic": [367, 377, 378, 380, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 458, 459, 497, 514, 515, 516, 530, 536, 538, 540, 542, 543, 546, 783, 836, 1078, 1079, 1080, 1081, 1083, 1084, 1086], "my": 367, "numer": [367, 386, 441, 452, 460, 466, 547, 548, 551, 561, 610, 613, 622, 625, 639, 642, 643, 646, 647, 650, 659, 662, 663, 666, 667, 670, 671, 674, 703, 706, 707, 710, 717, 720, 722, 725, 726, 729, 734, 737, 738, 741, 746, 749, 762, 765, 766, 770, 779, 782, 783, 818, 819, 841, 842, 847, 848, 905, 909, 911, 927, 930, 941, 943, 954, 960, 962, 963, 965, 966, 968, 1078, 1089, 1090, 1091, 1092, 1111, 1116, 1119, 1128, 1131, 1136, 1165], "cooler": 367, "produc": [367, 497, 506, 507, 892, 904], "something_cool": 367, "category_nam": [368, 372, 377, 378, 380], "contrast": [368, 380], "backend_nam": [368, 372, 373, 374, 377, 378, 380], "account": 368, "instanti": 368, "firstli": [368, 369, 372, 375, 377, 379, 385], "templat": [368, 1153], "spec": [368, 369], "api_specif": [368, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 456, 457, 458, 459, 460, 469, 472, 547, 548, 551, 566, 569, 606, 609, 610, 613, 618, 643, 726, 729, 758, 761, 762, 765, 991, 1005, 1008, 1025, 1028, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119], "array_api": 368, "preview": 368, "render": 368, "incorrectli": 368, "onlin": [368, 1153], "tangent": [368, 410, 434, 437, 547, 574, 577, 578, 581, 582, 585, 771, 775, 776, 778], "domain": [368, 547, 553, 556, 557, 560, 566, 569, 570, 573, 574, 578, 581, 614, 617, 618, 621, 635, 639, 642, 679, 682, 683, 686, 691, 694, 750, 753, 754, 757, 758, 761, 771, 776], "infin": [368, 440, 460, 466, 547, 548, 551, 556, 557, 560, 561, 564, 570, 573, 574, 578, 581, 610, 613, 614, 617, 618, 621, 625, 635, 638, 639, 642, 643, 646, 647, 650, 659, 662, 663, 666, 679, 682, 683, 686, 691, 694, 695, 698, 717, 720, 734, 737, 738, 741, 742, 745, 750, 753, 754, 757, 758, 761, 771, 776, 779, 782, 905, 969, 971, 1111, 1116, 1119, 1124, 1127, 1144, 1145, 1148, 1149, 1152], "codomain": [368, 547, 553, 556, 557, 560, 566, 569, 570, 573, 574, 578, 581, 614, 617, 618, 621, 635, 639, 642, 679, 682, 683, 686, 691, 694, 750, 753, 754, 757, 758, 761, 771, 776], "x_i": [368, 547, 548, 551, 553, 556, 557, 560, 566, 569, 570, 573, 574, 590, 593, 610, 613, 614, 617, 618, 621, 635, 639, 642, 643, 659, 662, 663, 666, 667, 670, 679, 682, 683, 686, 691, 694, 703, 706, 722, 725, 742, 745, 746, 749, 750, 753, 754, 757, 758, 761, 762, 765, 771, 776, 779, 782, 1095, 1096, 1097, 1099, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1132, 1135, 1136, 1140, 1143], "assum": [368, 373, 377, 384, 385, 399, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 469, 472, 547, 548, 551, 561, 566, 569, 586, 589, 606, 609, 610, 613, 614, 618, 643, 726, 729, 742, 745, 750, 753, 758, 761, 762, 765, 771, 776, 783, 811, 892, 895, 904, 905, 912, 991, 1005, 1008, 1009, 1012, 1025, 1028, 1073, 1074, 1077, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119, 1144, 1145, 1148], "express": [368, 382, 387, 547, 553, 566, 569, 574, 578, 581, 614, 750, 753, 771], "radian": [368, 547, 553, 566, 569, 574, 578, 581, 614, 750, 753, 771], "float": [368, 372, 376, 377, 379, 380, 384, 386, 410, 415, 418, 422, 440, 441, 442, 444, 446, 448, 449, 450, 451, 454, 458, 460, 466, 476, 480, 485, 488, 497, 530, 536, 540, 543, 546, 547, 548, 551, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 627, 630, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 671, 674, 675, 678, 679, 682, 683, 686, 691, 694, 695, 698, 717, 720, 722, 725, 726, 729, 730, 733, 734, 737, 738, 741, 742, 745, 750, 753, 754, 757, 758, 761, 766, 770, 771, 775, 776, 778, 779, 782, 783, 795, 796, 798, 810, 818, 819, 841, 842, 847, 848, 857, 859, 862, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 892, 895, 899, 904, 905, 906, 908, 912, 918, 920, 921, 923, 924, 926, 935, 937, 944, 946, 947, 949, 951, 953, 954, 969, 971, 975, 976, 979, 981, 984, 986, 989, 1051, 1052, 1053, 1054, 1073, 1074, 1077, 1078, 1083, 1084, 1086, 1095, 1096, 1097, 1099, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143], "operand": [368, 547, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 578, 581, 606, 609, 610, 613, 614, 617, 618, 621, 635, 638, 639, 642, 643, 679, 682, 683, 686, 691, 694, 695, 698, 717, 720, 734, 737, 738, 741, 742, 745, 750, 753, 754, 757, 758, 761, 771, 776, 779, 782, 1111, 1112, 1115, 1116, 1119, 1124, 1127, 1136, 1139], "whose": [368, 441, 456, 457, 547, 556, 557, 560, 570, 573, 577, 582, 585, 614, 617, 618, 621, 734, 737, 750, 753, 754, 757, 771, 775, 776, 778, 783, 794, 905, 906, 908, 912, 915, 917, 918, 920, 921, 923, 924, 926, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 951, 953, 954, 956, 957, 959, 963, 965, 991, 1009, 1012, 1025, 1028, 1095, 1096, 1097, 1111, 1112, 1115, 1139], "ref": [368, 547, 602, 605, 671, 674, 717, 720, 726, 729, 738, 741, 766, 770, 991, 1035, 1038], "promot": [368, 372, 377, 460, 466, 469, 472, 487, 488, 492, 547, 553, 556, 557, 560, 561, 564, 566, 569, 570, 573, 574, 577, 582, 585, 586, 589, 594, 597, 598, 601, 602, 605, 606, 609, 614, 617, 618, 621, 622, 635, 638, 639, 642, 679, 682, 683, 686, 691, 694, 695, 698, 711, 714, 717, 720, 734, 737, 738, 741, 750, 753, 754, 757, 758, 761, 771, 775, 776, 778, 905, 906, 908, 909, 911, 924, 926, 927, 930, 935, 937, 941, 943, 944, 946, 951, 953, 966, 968, 969, 971, 991, 1035, 1038, 1111, 1120, 1123], "But": [368, 376, 387], "needless": 368, "info": [368, 1153], "subset": [368, 371, 380, 382], "extend": [368, 371, 373, 380], "renam": 368, "conform": [368, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 469, 472, 547, 548, 551, 561, 566, 569, 586, 589, 606, 609, 610, 613, 618, 639, 642, 643, 726, 729, 742, 745, 758, 761, 762, 765, 771, 776, 905, 912, 991, 1005, 1008, 1009, 1012, 1025, 1028, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119, 1144, 1145, 1148], "org": [368, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 456, 457, 458, 459, 460, 469, 472, 547, 548, 551, 566, 569, 606, 609, 610, 613, 618, 643, 726, 729, 758, 761, 762, 765, 857, 859, 862, 864, 866, 991, 1005, 1008, 1025, 1028, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119], "elementwise_funct": [368, 547, 548, 551, 566, 569, 606, 609, 610, 613, 618, 643, 726, 729, 758, 761, 762, 765, 991, 1025, 1028, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119], "descript": [368, 376, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 469, 472, 547, 548, 551, 561, 566, 569, 586, 589, 606, 609, 610, 613, 618, 643, 726, 729, 742, 745, 758, 761, 762, 765, 771, 776, 783, 811, 892, 895, 904, 905, 912, 969, 971, 991, 1005, 1008, 1009, 1012, 1025, 1028, 1073, 1074, 1077, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119, 1144, 1145, 1148], "simplic": [368, 386, 398, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 469, 472, 547, 548, 551, 561, 566, 569, 586, 589, 606, 609, 610, 613, 618, 643, 726, 729, 742, 745, 758, 761, 762, 765, 771, 776, 783, 811, 892, 895, 904, 905, 912, 991, 1005, 1008, 1009, 1012, 1025, 1028, 1073, 1074, 1077, 1095, 1096, 1097, 1100, 1101, 1104, 1111, 1116, 1119], "judgment": 368, "beyond": [368, 991, 1025, 1028], "text": 368, "func_nam": [368, 369, 372], "pure": [368, 384, 387, 399], "themselv": [368, 372, 376, 377, 378, 386, 1055, 1056], "operator_nam": 368, "succinct": 368, "contstructor": 368, "though": [368, 372, 377, 385, 399], "forward": [368, 387, 398, 399, 1186, 1187, 1190, 1194], "_forward": [368, 382, 385, 386, 1153], "former": 368, "trainabl": [368, 383, 385, 386, 857, 873, 1163, 1164, 1186, 1187, 1196], "explicitli": [368, 372, 373, 375, 376, 379, 382, 399, 905, 918, 920, 1174, 1183, 1185, 1186, 1187], "latter": [368, 373], "implicit": [368, 376, 382], "docst": 368, "eight": 369, "static_": 369, "op_nam": 369, "__r": 369, "four": [369, 372, 377, 380, 385], "__sub__": [369, 375, 376, 380, 384], "__mul__": [369, 375, 376, 380, 384], "__truediv__": [369, 375, 376], "respect": [369, 375, 376, 377, 380, 441, 452, 547, 548, 551, 561, 564, 578, 581, 586, 589, 594, 597, 598, 601, 602, 605, 606, 609, 622, 625, 627, 630, 638, 646, 647, 650, 651, 654, 655, 658, 671, 674, 675, 678, 695, 698, 699, 702, 707, 710, 711, 714, 717, 720, 726, 729, 738, 741, 766, 770, 857, 859, 862, 864, 866, 868, 869, 871, 874, 876, 878, 880, 882, 884, 905, 947, 949, 1051, 1052, 1053, 1054], "recap": [369, 376, 386], "independ": [369, 370, 374, 376, 382, 387, 905, 909, 911, 951, 953, 1078, 1079], "combinatorili": 369, "variat": [369, 371], "grid": [369, 371, 398, 441, 452], "vari": [369, 371, 376, 384, 1095, 1096, 1097, 1099], "simplest": 369, "small": [369, 372, 382, 386, 399, 547, 717, 720, 905, 926, 935, 937, 944, 946, 1073, 1074, 1077, 1188, 1189], "unus": [369, 379, 438, 439], "18": [369, 376, 547, 606, 609, 905, 915, 917, 941, 943, 1111, 1112, 1115, 1139], "excess": [369, 373, 384], "showcas": [369, 398], "demonstr": [369, 384], "replic": [369, 377], "meant": 369, "imaginari": 369, "some_flag": 369, "another_flag": 369, "54": [369, 547, 614, 618, 758, 761, 892, 904, 905, 941, 943, 1078, 1083, 1111, 1112, 1115, 1139], "jointli": 369, "three": [369, 376, 381, 441, 452, 1153], "x0": [369, 783, 791], "procedur": 369, "sens": [369, 376, 384], "5574077": 369, "1850398": 369, "5463025": 369, "8422884": 369, "91601413": 369, "9647598": 369, "3738229": 369, "1597457": 369, "0963247": 369, "9955841": 369, "3278579": 369, "multi": [369, 376, 381, 399, 892, 903, 905, 909, 911, 1153, 1159, 1174, 1185], "seper": [369, 783, 810], "pars": [369, 399], "satisfi": [369, 905, 972, 974], "far": [369, 378, 383, 384, 1055, 1056, 1066], "asid": [369, 398], "irrelev": [369, 377], "increasingli": 369, "complex": [369, 385, 386, 387, 399, 905, 918, 920, 954], "rule": [369, 371, 372, 375, 376, 377, 460, 466, 469, 472, 488, 547, 577, 582, 585, 602, 605, 622, 717, 720, 738, 741, 775, 778, 905, 906, 908, 909, 911, 941, 943, 951, 953], "count": [369, 385, 497, 535, 905, 966, 968, 991, 1009, 1012, 1095, 1096, 1097, 1144, 1145, 1148, 1149, 1152], "14254655": 369, "1578213": 369, "380515": 369, "17": [369, 376, 410, 415, 418, 422, 905, 915, 917, 1078, 1083], "trivial": 369, "By": [369, 372, 376, 379, 386, 387, 783, 801, 802, 905, 966, 968, 991, 1017, 1020, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152], "non": [369, 376, 377, 382, 438, 439, 460, 466, 484, 547, 703, 706, 707, 710, 892, 895, 905, 912, 935, 937, 954, 960, 962, 966, 968, 969, 971, 1090, 1091, 1092, 1093, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1140, 1143, 1144, 1145, 1148, 1149, 1152, 1186, 1187, 1190, 1194], "dictat": [369, 375, 379, 380], "exlud": 369, "unit": [370, 371, 399, 410, 411, 414, 415, 418, 419, 422, 497], "thoroughli": [370, 371], "ci": [370, 371, 399], "failur": 370, "On": [371, 383, 387], "fixtur": 371, "consum": [371, 376, 380, 497], "300": [371, 547, 742, 745], "hit": [371, 382], "permit": [371, 375, 380], "action": 371, "eleg": 371, "intellig": 371, "sampl": [371, 892, 900, 1078, 1079, 1083, 1084, 1086, 1111, 1132, 1135, 1140, 1143, 1174, 1182], "rang": [371, 385, 386, 387, 441, 442, 450, 451, 1095, 1096, 1111, 1128, 1131, 1136, 1153], "cach": [371, 372, 497, 515, 783, 794], "unexplor": 371, "known": 371, "repeatedli": [371, 376, 1055, 1064], "upload": 371, "artifact": 371, "parametr": 371, "strategi": 371, "statement": [371, 399], "plai": [371, 387], "helper": [371, 385], "verifi": [371, 377, 378, 384, 1153, 1159], "truth": [371, 547, 627, 630, 651, 654, 655, 658, 671, 674, 675, 678, 726, 729], "opt": [371, 373, 379, 384], "defer": [371, 372, 375, 376, 377, 378, 379], "suffic": [371, 374], "catch": [371, 783, 804], "systemat": 371, "safeguard": 371, "inabl": 371, "fact": [371, 385], "categor": [372, 378], "mutual": [372, 376], "constitut": [372, 382, 1111, 1132, 1135, 1140, 1143], "venn": 372, "diagram": 372, "light": [372, 399], "wherea": [372, 375, 377, 378, 380, 387], "hand": [372, 399], "log_pr": [372, 376, 379], "array_arg": 372, "typic": 372, "whatsoev": [372, 376], "commonli": [372, 1111, 1132, 1135, 1140, 1143], "outsid": [372, 378, 382, 384, 387, 991, 992, 995, 1035, 1038], "denomin": [372, 399, 783, 809, 819, 842, 847, 848, 1073, 1074, 1077, 1188, 1189], "divis": [372, 547, 602, 605, 622, 625, 646, 647, 650, 738, 741, 783, 809, 819, 842, 847, 848, 857, 859, 862, 864, 866, 874, 876, 1190, 1191, 1192], "deal": [372, 399], "concurr": [372, 376], "weight": [372, 376, 386, 387, 857, 859, 862, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 892, 901, 902, 904, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1186, 1187, 1190, 1192, 1193], "modif": 372, "decor": [372, 374, 376, 377, 378, 379], "group": [372, 376], "briefli": [372, 385], "cast": [372, 377, 460, 466, 469, 472, 991, 997, 1000, 1111, 1128, 1131, 1136, 1153], "get_all_arrays_on_dev": 372, "nested_map": [372, 1055], "index_nest": [372, 1055], "implicit_backend": 373, "unless": [373, 378, 379, 399, 547, 717, 720, 783, 836], "__dict__": [373, 382, 384], "ivy_original_dict": [373, 382], "unmodifi": [373, 377], "moment": [373, 399, 857, 859, 862, 864, 866, 874, 876, 1190, 1191, 1192], "fallback": 373, "freedom": [373, 1111, 1132, 1135, 1140, 1143], "recommend": [373, 547, 703, 706, 707, 710, 738, 741, 1111, 1120, 1123], "achiev": [374, 385, 387], "wrapper": [374, 375, 376, 377, 379, 380, 384], "logic": [374, 375, 377, 378, 384, 497, 533, 547, 699, 702, 703, 706, 707, 710, 1144, 1145, 1148, 1149, 1152, 1153], "topic": [374, 384], "tf": [375, 377, 378, 379, 380, 382, 387, 399, 1153], "_data": [375, 384], "organiz": [375, 376], "inherit": [375, 376, 384], "bear": [375, 376, 377], "mind": [375, 376], "necessarili": [375, 376], "although": [375, 376], "underpin": [375, 376, 382], "programmat": [375, 376], "backup": [375, 376], "accident": [375, 376], "readabl": [375, 376, 380, 384, 385], "absent": [375, 376], "perk": [375, 376], "auto": [375, 376, 385], "throw": [375, 384], "imposs": 375, "coupl": [375, 376, 384, 386], "anywai": 375, "secondli": [375, 377], "easier": 375, "five": [376, 385], "decis": [376, 382, 384], "displai": [376, 385], "arbitrarili": [376, 385], "__repr__": 376, "control": [376, 377, 379, 384, 385, 398], "__getattr__": 376, "underli": [376, 547, 586, 589, 598, 601, 606, 609, 711, 714], "__setattr__": 376, "__contains__": 376, "__getstate__": 376, "__setstate__": 376, "unpickl": 376, "expand": [376, 783, 810, 991, 1005, 1008], "children": 376, "shallowest": 376, "deepest": 376, "67": [376, 547, 606, 609, 618], "22": [376, 547, 606, 609, 905, 915, 917, 941, 943, 1090, 1094, 1111, 1112, 1115, 1139], "25": [376, 547, 758, 761, 762, 765, 905, 915, 917, 924, 975, 981, 984, 1073, 1074, 1077, 1111, 1112, 1115, 1139], "retain_grad": [376, 857, 868], "dy": [376, 857, 868], "dx": [376, 857, 868], "technic": [376, 379, 380, 399], "autograd": [376, 399], "grad": [376, 385, 386, 387, 1153, 1190, 1194], "redund": 376, "num_head": [376, 892, 903, 1174, 1185], "mask": [376, 892, 903, 904], "to_q_fn": [376, 892, 903], "to_kv_fn": [376, 892, 903], "to_out_fn": [376, 379, 892, 903], "to_q_v": [376, 892, 903], "to_kv_v": [376, 892, 903], "to_out_v": [376, 892, 903], "measur": [376, 892, 903, 1174, 1185], "dot": [376, 892, 903, 904, 905, 960, 962, 966, 968, 1174, 1185], "product": [376, 547, 717, 720, 783, 801, 892, 903, 904, 905, 909, 911, 927, 930, 941, 943, 960, 962, 966, 968, 1111, 1112, 1115, 1128, 1131, 1139, 1174, 1185], "implicitli": 376, "intuit": [376, 385, 386], "debug": [376, 385], "chronolog": 376, "had": [376, 379], "sequenti": [376, 386], "flow": [376, 398], "implic": 376, "slightli": [376, 382, 386], "eager": [376, 399], "int8": [377, 460, 481], "int16": [377, 460, 469, 472, 481, 1111, 1128, 1131, 1136], "uint8": [377, 460, 469, 472, 481], "uint16": [377, 460, 482, 1111, 1128, 1131, 1136], "uint32": [377, 460, 482, 1111, 1128, 1131, 1136], "uint64": [377, 460, 482, 1111, 1128, 1131, 1136], "bfloat16": [377, 460, 481], "float16": [377, 460, 482], "all_dtyp": 377, "all_numeric_dtyp": 377, "all_int_dtyp": 377, "all_float_dtyp": 377, "fall": [377, 381, 1153, 1186, 1187, 1190, 1194], "valid": [377, 382, 460, 474, 892, 893, 894, 895, 896, 897, 898, 899, 991, 1035, 1038, 1144, 1145, 1148, 1149, 1152, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181], "invalid": [377, 905, 966, 968, 1144, 1145, 1148, 1149, 1152], "thirdli": 377, "native_float32": 377, "importantli": [377, 384, 387, 398], "varieti": [377, 378], "conveni": [377, 378, 380, 383, 385, 386], "arguabl": [377, 378], "compound": 377, "overflow": [377, 547, 561, 1111, 1136], "arr": [377, 378, 1073, 1074, 1077], "scalar": [377, 382, 387, 399, 441, 449, 783, 836, 853, 856, 905, 969, 971], "settabl": [377, 378], "jnp": [377, 378, 379, 380, 387, 1153], "jaxarrai": [377, 378, 379, 380], "mx": [377, 378, 379, 1153], "nd": [377, 378, 379, 382, 387, 1153], "deleg": 377, "fill_valu": [377, 441, 448, 449, 547, 630, 654, 655, 658], "as_n": [377, 460, 475, 476, 477, 478, 497, 516, 517, 538], "idx": [378, 384, 783, 789], "tpu": [378, 497, 519, 544], "aliv": [378, 497, 531, 535, 537, 783, 817, 835, 837], "amount": [378, 497, 543, 975, 976, 979, 981, 984, 986, 989], "memori": [378, 379, 397, 399, 497, 515, 536, 541, 543, 546, 892, 902, 1153], "dual": 378, "thrown": [378, 399, 783, 827], "rare": [378, 399], "program": 379, "strictli": 379, "ration": 379, "speak": 379, "subtli": 379, "ensure_in_backend": [379, 783, 827], "x_nativ": 379, "val_n": 379, "is_ivy_arrai": [379, 384, 783], "is_vari": [379, 857], "assign": [379, 384], "elif": 379, "irrespect": [379, 384, 460, 466], "inclus": [379, 441, 442, 1078, 1080, 1081], "omit": [379, 380, 1095, 1096, 1097, 1099], "unspecifi": [379, 547, 734, 737, 738, 741, 905, 918, 920, 991, 1035, 1038], "predominantli": [379, 398], "math": [379, 387, 1153], "presenc": 379, "altern": [379, 385], "_wrap_fn": 379, "maxim": [379, 382], "inner": [379, 384, 905, 918, 920, 927, 930, 1051, 1052, 1053, 1054], "third": [379, 399, 905, 954, 1095, 1096], "addition": [379, 380], "leverag": 379, "equival": [379, 385, 387, 441, 442, 547, 602, 605, 703, 706, 707, 710, 738, 741, 905, 926, 935, 937, 944, 946, 951, 953, 969, 971], "input_arrai": 379, "adress": 380, "revisit": [380, 387], "dedic": [380, 384, 386, 857, 890, 1163, 1164], "__div__": 380, "dicat": 380, "futher": 380, "absenc": 380, "pep": 380, "484": 380, "annot": 380, "brittl": 380, "intend": [380, 1111, 1136], "freeli": 380, "inde": [380, 399], "flexibl": 380, "original_typ": 380, "cumbersom": 380, "sound": 381, "higher": [381, 382, 387, 399, 857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884], "overview": [381, 398], "handler": [381, 383, 387, 1153], "fledg": [382, 383], "syntact": [382, 387], "clip_by_valu": [382, 387], "clamp": [382, 387], "behavior": [382, 399, 547, 734, 737, 738, 741, 1095, 1096, 1097, 1099], "fit": [382, 991, 1017, 1020], "construct": [382, 383, 386, 387, 991, 1043, 1046, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197], "num": [382, 441, 450, 451], "power_seq": 382, "okai": 382, "bound": 382, "resid": [382, 386], "edg": [382, 387, 991, 992, 995, 1001, 1004, 1047, 1050, 1153], "larger": [382, 387, 460, 480, 991, 992, 995, 1025, 1028, 1111, 1132, 1135, 1140, 1143], "ml_framework": [382, 387, 441, 442], "current_framework": [382, 387], "furthermor": 382, "concaten": [382, 385, 497, 526, 783, 810, 991, 997, 1000, 1153], "framework_handl": 382, "face": 382, "verbos": [382, 1153, 1200], "cprint": [382, 1199], "framework_stack": 382, "_determine_framework_from_arg": 382, "valueerror": [382, 991, 1031, 1034], "get_framework": 382, "neither": [382, 547, 561, 717, 720], "illustr": [382, 398], "un": [382, 460, 484], "nn": [382, 387, 441, 452, 1153], "init_h": [382, 892, 902], "init_c": [382, 892, 902], "kernel": [382, 399, 892, 902], "recurrent_kernel": [382, 892, 902], "bia": [382, 386, 892, 901, 902, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1184], "recurrent_bia": [382, 892, 902], "x_shape": 382, "batch_shap": [382, 384, 387, 783, 836, 892, 902, 903, 904, 905, 972, 974, 1078, 1079, 1174, 1183], "timestep": [382, 892, 902, 1174, 1183], "input_channel": [382, 386, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1183, 1184], "x_flat": 382, "wi": 382, "wi_x": 382, "wii_x": 382, "wif_x": 382, "wig_x": 382, "wio_x": 382, "recurr": [382, 892, 902], "wh": 382, "lstm": [382, 892, 902, 1174], "ht": 382, "ct": 382, "hts_list": 382, "unrol": [382, 385, 892, 902], "wii_xt": 382, "wif_xt": 382, "wig_xt": 382, "wio_xt": 382, "zip": 382, "htm1": 382, "ctm1": 382, "wh_htm1": 382, "whi_htm1": 382, "whf_htm1": 382, "whg_htm1": 382, "who_htm1": 382, "ft": 382, "gt": 382, "ot": 382, "offici": 382, "reliabl": 382, "sacrific": 382, "hear": 382, "virtu": 382, "pure_ivi": 382, "reduce_mean": [382, 385, 386, 387, 1153], "reduce_sum": [382, 1153], "reduce_var": 382, "compile_graph": [382, 387], "pure_torch": 382, "cat": [382, 387], "backbon": [382, 385], "_layer": 382, "super": [382, 385, 386, 387], "clean": [382, 383, 385], "random_unifrom": 382, "unclean": 382, "wx": 382, "temp": 382, "torchscript": 382, "fn": [382, 384, 400, 401, 402, 403, 404, 405, 406, 407, 408, 460, 481, 482, 497, 506, 507, 783, 789, 854, 1055, 1056, 1061, 1062, 1063, 1065, 1066, 1067, 1156, 1158], "example_input": [382, 438, 439], "static_argnum": [382, 438, 439], "static_argnam": [382, 438, 439], "jit": [382, 399], "frontend": 383, "primit": [383, 399], "hierarch": [383, 385, 386], "straight": [384, 1153], "arraywithlinalg": 384, "arraywithlog": 384, "arraywithmath": 384, "arraywithmeta": 384, "arraywithreduct": 384, "is_native_arrai": [384, 783], "_shape": 384, "_size": 384, "functool": 384, "mul": 384, "len": [384, 387, 441, 452], "_dtype": 384, "_devic": 384, "_dev_str": 384, "_pre_repr": 384, "_post_repr": 384, "ndim": [384, 905, 947, 949, 954], "mt": 384, "answer": [384, 399], "consol": 384, "typeerror": 384, "immut": 384, "behav": 384, "claim": 384, "truli": 384, "_native_wrapp": 384, "attributeerror": 384, "genuin": 384, "some_method": 384, "similarli": [384, 441, 452], "rewritten": 384, "__pow__": 384, "strang": 384, "power": [384, 385, 386, 547, 602, 605, 635, 734, 737, 783, 818, 841, 848, 905, 934, 1165], "enforc": 384, "notic": 384, "appear": [384, 991, 1005, 1008], "invers": [384, 398, 547, 553, 556, 557, 560, 566, 569, 570, 573, 574, 577, 578, 581, 582, 585, 617, 621, 775, 778, 905, 924, 926, 944, 946], "_wrap_method": 384, "func_wrapp": [384, 400, 401, 402, 403, 404, 405, 406, 407, 408], "__name__": 384, "non_wrapped_method": 384, "_method_wrap": 384, "native_arg": 384, "native_kwarg": 384, "inner_fn": 384, "whist": 384, "unwrap": 384, "transit": 384, "needlessli": 384, "randn": 384, "_unwrap_method": 384, "method_wrap": 384, "compartment": 384, "public": [384, 783, 799], "newshap": 384, "new_shap": 384, "tidi": 384, "shorter": 384, "crystal": 384, "41": [384, 547, 606, 609, 758, 761, 905, 906, 908, 1111, 1136], "enough": [384, 385, 386], "ton": 385, "ado": [385, 386], "incred": [385, 399], "hash": 385, "soup": 385, "walk": [385, 386], "dct": 385, "cnt": 385, "combo": [385, 1153, 1159], "hold": [385, 783, 839, 840], "1000": [385, 547, 758, 761], "uda": 385, "3333": 385, "6667": 385, "178": 385, "new_weight": 385, "0600": 385, "3100": 385, "2400": 385, "6900": 385, "delimit": 385, "autocomplet": 385, "midwai": 385, "agent": 385, "total_spe": 385, "total_height": 385, "total_width": 385, "ag": 385, "tot": 385, "total_": 385, "total_h": 385, "batch_siz": [385, 892, 893, 894, 895, 896, 897, 898, 899, 1078, 1079], "dir": 385, "adam": [385, 386, 387, 857, 859, 862, 864, 866, 874, 876, 1153, 1190, 1192], "cnt0": 385, "cnt1": 385, "diff_0": 385, "diff_1": 385, "config0": 385, "config1": 385, "Not": [385, 386, 399, 440], "decod": 385, "l0": 385, "l1": [385, 905, 969, 971], "depth": [385, 386, 387, 398, 497, 521, 525, 529, 783, 821, 836, 1055, 1067, 1186, 1187], "clearer": 385, "truncat": 385, "decoder__l0": 385, "decoder__l1": 385, "encoder__l0": 385, "encoder__l1": 385, "height": 385, "l0__b": 385, "l0__w": 385, "l1__b": 385, "l1__w": 385, "printabl": 385, "obviou": 385, "foresight": 385, "untidili": 385, "update_ag": 385, "normalize_img": 385, "img": 385, "img_max": 385, "reduce_max": [385, 1153], "img_min": 385, "reduce_min": [385, 1153], "img_rang": 385, "agent_posit": 385, "agent_veloc": 385, "agent_cam_front_rgb": 385, "agent_cam_front_depth": 385, "agent_cam_rear_rgb": 385, "agent_cam_rear_depth": 385, "agent_cam_lidar": 385, "normal": [385, 991, 1035, 1038, 1073, 1074, 1077, 1078, 1083, 1188, 1189], "cleaner": 385, "camera": 385, "front_rgb": 385, "front_depth": 385, "rear_rgb": 385, "rear_depth": 385, "lidar": 385, "rgb": 385, "rear": 385, "veloc": 385, "cam": 385, "cam_max": 385, "cam_min": 385, "cam_rang": 385, "Of": 385, "ideal": 385, "perman": 385, "afterward": 385, "thread": 385, "incorpor": 385, "pretti": 385, "straightforward": 385, "dataload": [385, 397, 1153], "_cnt": 385, "img_": 385, "_dataset_s": 385, "_batch_siz": 385, "_count": [385, 386], "__next__": 385, "filenam": 385, "img_fnam": 385, "fname": 385, "loaded_img": 385, "cv2": 385, "imread": 385, "loader": [385, 399], "batch_slic": 385, "model": [385, 386, 1153], "mymodel": [385, 1153], "linear0": [385, 386, 1153], "linear1": [385, 386, 1153], "x_in": [385, 386, 387, 1153], "001": [385, 386, 857, 859, 862, 1073, 1074, 1077], "loss_fn": [385, 386, 387, 1153], "0145": 385, "grad_fn": 385, "addbackward0": 385, "_create_vari": 386, "output_channel": [386, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1183, 1184], "with_bia": [386, 1174, 1184], "_input_channel": 386, "_output_channel": 386, "_w_shape": 386, "_b_shape": 386, "_with_bia": 386, "8979": 386, "3198": 386, "0196": 386, "3126": 386, "3717": 386, "9687": 386, "6958": 386, "5122": 386, "3902": 386, "8800": 386, "5613": 386, "1982": 386, "nightmar": 386, "overcom": 386, "fc": 386, "9563": 386, "impact": 386, "v0": 386, "v1": 386, "6440": 386, "key0": 386, "1823": 386, "8075": 386, "linear3": 386, "v2": 386, "2346": 386, "counter": 386, "hidden": [386, 892, 902, 1174, 1183], "fed": [386, 497, 541], "1300": 386, "decoupl": 386, "scheme": 386, "weight_initi": [386, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184], "glorotuniform": [386, 1165, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184], "bias_initi": [386, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1184], "_w_init": 386, "_b_init": 386, "create_vari": [386, 1165], "var_shap": [386, 1165], "fan_out": [386, 1165], "fan_in": [386, 1165], "fan_mod": [386, 1165], "fan_sum": 386, "slight": 386, "misnom": 386, "saw": 386, "vanilla": [386, 1051, 1053], "descent": [386, 857, 869, 871, 1190, 1195], "lar": [386, 857, 874, 876, 878, 880, 1190], "lamb": [386, 857, 874, 876, 1190], "compile_on_next_step": [386, 1186, 1187, 1190, 1191, 1192, 1193, 1194, 1195], "_beta1": 386, "_beta2": 386, "_epsilon": 386, "_mw": 386, "_vw": 386, "_first_pass": 386, "_should_compil": 386, "_step": [386, 1190, 1194], "new_v": 386, "_lr": 386, "isinst": [386, 387, 783, 851], "_inplac": 386, "_stop_gradi": 386, "set_stat": [386, 1190, 1191, 1192, 1193, 1194, 1195], "pre": [387, 399, 497], "captur": 387, "sparse_funct": 387, "num_class": [387, 1078, 1079], "num_dim": 387, "new_axi": 387, "_linear": 387, "to_backend": 387, "jax_graph": 387, "learnabl": [387, 1073, 1074, 1077, 1188, 1189], "to_ivy_modul": [387, 1163], "thinli": 387, "whilst": 387, "to_haiku_modul": 387, "hk": 387, "loss_fn_t": 387, "transform": [387, 398, 892, 900, 901], "without_apply_rng": 387, "rng": 387, "prngkei": 387, "init": 387, "update_rul": 387, "01": [387, 547, 742, 745], "tree_multimap": 387, "mechan": [397, 399, 1153], "vision": [397, 1153], "robot": [397, 1153], "focus": 398, "field": [398, 905, 918, 920, 947, 949, 954, 1095, 1096, 1097], "perfect": 398, "3d": [398, 1174, 1179, 1180], "differenti": 398, "demo": [398, 1153], "orient": 398, "pose": 398, "euler": [398, 440], "quaternion": 398, "rotat": 398, "matric": [398, 441, 452, 456, 457, 892, 901, 905, 906, 908, 912, 915, 917, 918, 920, 921, 923, 924, 926, 934, 935, 937, 938, 940, 944, 946, 947, 949, 951, 953, 954, 956, 957, 959, 963, 965], "angl": [398, 547, 578, 581, 618, 754, 757, 776], "ivy_mech": 398, "target_facing_rotation_matrix": 398, "polar_to_cartesian_coord": 398, "ordin": [398, 905, 951, 953], "warp": 398, "optic": 398, "voxel": 398, "ivy_vis": 398, "coords_to_voxel_grid": 398, "render_pixel_coord": 398, "neural": [398, 892, 1153, 1160, 1174], "radianc": 398, "nerf": 398, "trajectori": 398, "motion": 398, "plan": [398, 1153], "mobil": 398, "ivy_robot": 398, "sample_spline_path": 398, "rigidmobil": 398, "sample_bodi": 398, "drone": 398, "sample_link": 398, "openai": 398, "swimmer": 398, "cumul": [398, 783, 801, 802], "reward": 398, "supervis": 398, "reinforc": 398, "door": [398, 399], "intersect": 398, "cartpol": 398, "mountain_car": 398, "pendulum": 398, "reacher": 398, "polici": 398, "condit": [398, 438, 439, 1055, 1065, 1066, 1090, 1094], "learnt": 398, "ture": 398, "ntm": 398, "egospher": 398, "spatial": 398, "esm": 398, "ivy_memori": 398, "egocentr": 398, "room": 398, "inspir": 398, "doubt": 399, "grate": 399, "put": 399, "probe": 399, "undergo": 399, "remark": 399, "surpris": 399, "backward": [399, 547, 738, 741, 905, 966, 968, 1144, 1145, 1148, 1149, 1152], "lock": 399, "contunu": 399, "minor": 399, "xla": 399, "buffer": 399, "kind": [399, 460, 480, 483, 547, 734, 737, 1111, 1128, 1131, 1136], "gold": 399, "dex": 399, "phase": 399, "lax": 399, "scan": 399, "tricki": 399, "predictor": 399, "tight": 399, "driver": 399, "schedul": 399, "algorithm": [399, 892, 893, 894, 895, 896, 897, 898, 899, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181], "dispatch": 399, "Will": 399, "ast": 399, "dynamic": 399, "cond": 399, "jacobian": 399, "checkpoint": 399, "autodiff": 399, "shine": 399, "merci": 399, "superset": 399, "cluster": 399, "compet": 399, "paradigm": 399, "parallelis": [399, 497, 506, 507], "spmd": 399, "mixtur": [399, 857, 859, 862], "expert": 399, "sophist": 399, "depart": 399, "routin": 399, "hundr": 399, "thousand": 399, "deepli": [399, 1055, 1057], "broadli": 399, "heavili": 399, "supplementari": 399, "Is": 399, "reusabl": 399, "fanci": 399, "fusion": 399, "lose": 399, "vmap": 399, "pmap": 399, "overhead": 399, "ineffici": 399, "eventu": 399, "supplement": 399, "backdoor": 399, "callback": 399, "record": 399, "metric": 399, "somewhat": 399, "outsourc": 399, "inputs_to_ivy_arrai": 400, "gaussian": [410, 411, 414], "leaki": [410, 411, 414, 415, 418, 422], "rectifi": [410, 415, 418, 419, 422], "slope": [410, 415, 418, 422], "39": [410, 415, 418, 422, 547, 635, 857, 859, 862, 905, 941, 943, 1111, 1112, 1115, 1139], "85": [410, 415, 418, 422, 547, 606, 609], "48": [410, 415, 418, 422, 547, 758, 761, 857, 859, 862, 905, 941, 943, 1111, 1112, 1115, 1139], "88": [410, 415, 418, 422, 547, 606, 609, 905, 941, 943, 1111, 1112, 1115, 1139], "269": [410, 423, 426], "731": [410, 423, 426], "881": [410, 423, 426], "214": [410, 423, 426], "978": [410, 423, 426], "891": [410, 423, 426], "422": [410, 427, 430], "155": [410, 427, 430], "0768": [410, 427, 430], "231": [410, 427, 430], "693": [410, 427, 430, 975, 986, 989], "49": [410, 427, 430, 547, 758, 761, 1111, 1112, 1115, 1139], "147": [410, 427, 430], "363": [410, 427, 430], "3461": [410, 431, 433], "6491": [410, 431, 433], "535": [410, 431, 433], "hyperbol": [410, 434, 437, 547, 556, 557, 560, 570, 573, 577, 582, 585, 617, 618, 621, 754, 757, 775, 776, 778], "55": [410, 434, 437, 892, 898, 905, 941, 943, 1111, 1112, 1115, 1139], "501": [410, 434, 437], "faster": [438, 439], "invoc": [438, 439], "718281828459045": 440, "newaxi": 440, "alia": 440, "pi": 440, "141592653589793": 440, "mathemat": [440, 547, 561, 578, 581, 639, 642, 717, 720, 905, 969, 971], "half": [441, 442, 1078, 1080, 1081, 1084, 1086], "chosen": [441, 442, 547, 578, 581, 1090, 1094], "distanc": [441, 442], "adjac": [441, 442], "creation_funct": [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 456, 457, 458, 459], "interpret": [441, 443, 453], "uniniti": [441, 444, 445], "n_row": [441, 446], "n_col": [441, 446], "elsewher": [441, 446, 1090, 1094], "row": [441, 446, 905, 951, 953, 954, 1078, 1079, 1090, 1093], "column": [441, 446, 905, 918, 920, 947, 949, 951, 953, 954], "__dlpack__": [441, 447, 497, 542], "interchang": [441, 447, 991, 1039, 1042], "endpoint": [441, 450], "xy": [441, 452], "coordin": [441, 452, 547, 578, 581], "cartesian": [441, 452], "ij": [441, 452, 1111, 1112, 1115, 1139], "rank": [441, 452, 783, 855, 905, 909, 911, 935, 937, 947, 949, 951, 953, 963, 965, 966, 968, 969, 971, 991, 1001, 1004, 1005, 1008, 1035, 1038, 1047, 1050, 1090, 1093, 1144, 1145, 1148, 1149, 1152], "ni": [441, 452], "xi": [441, 452], "n1": [441, 452], "n2": [441, 452], "n3": [441, 452], "accordingli": [441, 452, 547, 639, 642, 905, 969, 971, 1090, 1092, 1095, 1096, 1097, 1099, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152], "xv": [441, 452], "yv": [441, 452], "triangular": [441, 456, 457, 905, 906, 908, 947, 949], "innermost": [441, 456, 457, 905, 906, 908, 912, 915, 917, 918, 920, 921, 923, 924, 926, 935, 937, 938, 940, 944, 946, 947, 949, 951, 953, 954, 956, 957, 959, 963, 965], "mxn": [441, 456, 457, 905, 915, 917, 926, 935, 937, 938, 940, 944, 946, 947, 949, 956, 957, 959, 963, 965], "defaultdtyp": [460, 461], "defaultfloatdtyp": [460, 462], "float_dtyp": [460, 476, 490], "defaultintdtyp": [460, 463], "dtype_in": [460, 464, 465, 479, 484, 485, 486, 496], "incompat": [460, 468], "occur": [460, 469, 472, 1090, 1091, 1092, 1095, 1096, 1097, 1099], "data_type_funct": [460, 469, 472], "closest": [460, 474, 547, 610, 613, 625, 643, 646, 647, 650, 742, 745, 779, 782], "floatdtyp": [460, 476], "int_dtyp": [460, 477, 491], "intdtyp": [460, 477], "followng": [460, 480], "occupi": [460, 480, 483, 783, 839, 840], "ep": [460, 480, 905, 926, 935, 937, 944, 946], "smallest_norm": [460, 480], "precis": [460, 480, 547, 717, 720, 758, 761], "encapsul": [460, 483], "type1": [460, 487], "type2": [460, 487], "arrays_and_dtyp": [460, 488], "ret1": [460, 492], "ret2": [460, 492], "noinspect": [461, 462, 463, 498, 858], "pyshadowingnam": [461, 462, 463, 498, 858], "defaultdevic": [497, 498], "__enter__": 497, "_dev": 497, "initialis": 497, "devcloneditem": [497, 519], "multidevitem": [497, 499, 502], "devclonedit": 497, "multidevit": [497, 500, 503, 506, 507, 511], "devclonednest": 497, "multidevnest": [497, 501, 504], "devdistitem": 497, "devdistit": 497, "devdistnest": 497, "devmanag": [497, 505], "dev_mapp": 497, "da_dim_s": 497, "safety_factor": 497, "min_dev_dim_s": 497, "max_dev_dim_step_ratio": 497, "min_unit_dev_tune_step": 497, "min_sf_tune_step": 497, "starting_split_factor": 497, "max_split_factor_step_s": 497, "tune_dev_alloc": 497, "tune_dev_split": 497, "mapper": [497, 506, 507], "receivess": 497, "ratio": [497, 857, 874, 876, 1190, 1192], "safe": [497, 506], "oom": 497, "tune": 497, "da_tune_step": 497, "ds_tune_step": 497, "to_clon": 497, "to_distribut": 497, "multidevic": [497, 506], "parallel": [497, 506, 507], "mutlidevic": [497, 506], "repeated_config_check": 497, "tune_step": 497, "devmapp": [497, 507], "ret_fn": [497, 506, 507], "queue_class": [497, 506, 507], "worker_class": [497, 506, 507], "worker": [497, 506, 507], "used_dev": [497, 506], "sf": [497, 506], "devmappermultiproc": 497, "multidev": [497, 508, 509, 510, 529], "profil": 497, "save_dir": [497, 512], "deviceic": [497, 518], "spread": [497, 529], "139740789224448": [497, 531], "physic": [497, 533], "x3": [497, 535], "x4": [497, 535], "process_specif": [497, 536, 546], "percentag": [497, 536], "ram": [497, 536, 543, 546], "alon": [497, 536, 546], "attr_onli": [497, 537], "chunk": [497, 539, 540, 541], "max_chunk_s": [497, 541], "chunk_siz": [497, 541], "input_ax": [497, 541], "output_ax": [497, 541], "feed": [497, 541], "fist": [497, 541], "stream": [497, 542], "caveat": [497, 542], "portabl": [497, 542, 1153], "gb": [497, 543, 546], "reset": [497, 545], "magnitud": [547, 548, 551, 561, 717, 720, 905, 954, 956, 957, 959], "princip": [547, 553, 566, 569, 574], "cosin": [547, 553, 556, 557, 560, 614, 617, 618, 621], "x1_i": [547, 561, 564, 578, 581, 586, 589, 594, 597, 598, 601, 602, 605, 606, 609, 622, 625, 627, 630, 638, 646, 647, 650, 651, 654, 655, 658, 671, 674, 675, 678, 695, 698, 699, 702, 707, 710, 711, 714, 717, 720, 726, 729, 734, 737, 738, 741, 766, 770], "x2_i": [547, 561, 564, 578, 581, 586, 589, 594, 597, 598, 601, 602, 605, 606, 609, 622, 625, 627, 630, 638, 646, 647, 650, 651, 654, 655, 658, 671, 674, 675, 678, 695, 698, 699, 702, 707, 710, 711, 714, 717, 720, 726, 729, 734, 737, 738, 741, 766, 770], "finit": [547, 561, 578, 581, 659, 662, 717, 720, 734, 737, 738, 741], "nor": [547, 561, 717, 720], "nearest": [547, 561, 717, 720, 742, 745], "2019": [547, 561, 639, 642, 717, 720], "commut": [547, 561], "sine": [547, 566, 569, 570, 573, 750, 753, 754, 757], "57": [547, 566, 569, 606, 609, 618], "524": [547, 566, 569], "644": [547, 566, 569], "201": [547, 566, 569, 742, 745], "305": [547, 566, 569], "412": [547, 566, 569], "quotient": [547, 578, 581], "notat": [547, 578, 581, 1111, 1112, 1115, 1139], "denot": [547, 578, 581], "pair": [547, 578, 581, 892, 904, 905, 909, 911], "quadrant": [547, 578, 581], "3\u03c0": [547, 578, 581], "549": [547, 577, 582, 585, 775, 778], "bitwis": [547, 586, 589, 598, 601, 606, 609, 711, 714], "AND": [547, 586, 589, 699, 702, 1144, 1145, 1148], "binari": [547, 586, 589, 598, 601, 606, 609, 711, 714, 975, 976, 979], "invert": [547, 590, 593], "arithmet": [547, 602, 605, 1111, 1120, 1123], "propag": [547, 602, 605, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1132, 1135, 1136, 1140, 1143], "thu": [547, 602, 605, 734, 737, 738, 741, 905, 918, 920], "lh": [547, 602, 605], "rh": [547, 602, 605], "xor": [547, 606, 609, 711, 714], "78": [547, 606, 609, 905, 941, 943, 1111, 1112, 1115, 1139], "91": [547, 606, 609, 905, 941, 943, 1111, 1112, 1115, 1139], "23": [547, 606, 609, 892, 898, 905, 915, 917, 1090, 1094], "66": [547, 606, 609, 905, 941, 943, 1111, 1112, 1115, 1139], "77": [547, 606, 609, 905, 941, 943, 1111, 1112, 1115, 1139], "79": [547, 606, 609], "89": [547, 606, 609, 905, 960, 962, 1111, 1136], "98": [547, 606, 609, 905, 941, 943, 1090, 1094, 1111, 1112, 1115, 1139], "26": [547, 606, 609, 857, 859, 862, 892, 899, 905, 915, 917, 941, 943, 960, 962, 1111, 1112, 1115, 1139], "21": [547, 606, 609, 783, 801, 905, 915, 917, 941, 943, 975, 986, 989, 1111, 1112, 1115, 1139], "34": [547, 606, 609, 758, 761], "24": [547, 606, 609, 758, 761, 783, 801, 857, 859, 862, 905, 915, 917, 941, 943, 1111, 1112, 1115, 1139], "51": [547, 606, 609], "27": [547, 606, 609, 618, 758, 761, 892, 904, 905, 941, 943, 1111, 1112, 1115, 1139], "74": [547, 606, 609], "59": [547, 606, 609], "416": [547, 614], "122": [547, 618], "368": [547, 618], "670": [547, 618], "202": [547, 618, 742, 745], "548": [547, 618], "1490": [547, 618], "dividend": [547, 622, 738, 741], "divisor": [547, 622, 738, 741, 857, 859, 862, 864, 866, 874, 876, 1111, 1132, 1135, 1140, 1143, 1190, 1191, 1192], "gauss": [547, 631, 634], "exponenti": [547, 564, 631, 634, 635, 638, 695, 698, 734, 737], "logarithm": [547, 564, 635, 638, 679, 682, 683, 686, 687, 690, 691, 694, 695, 698, 905, 914, 950], "72": [547, 635, 857, 859, 862, 905, 941, 943, 1111, 1112, 1115, 1139], "accur": [547, 639, 642], "fdlibm": [547, 639, 642], "compliant": [547, 639, 642, 703, 706, 707, 710, 1111, 1116, 1119, 1120, 1123, 1124, 1127], "greatest": [547, 625, 643, 646, 647, 650], "out_i": [547, 659, 662, 663, 666, 667, 670], "threshold": [547, 715, 716], "exce": [547, 716], "y_i": [547, 722, 725], "expon": [547, 734, 737, 783, 848], "versu": [547, 734, 737], "odd": [547, 734, 737], "modulu": [547, 738, 741], "primarili": [547, 738, 741], "5654": [547, 742, 745], "034": [547, 742, 745], "433": [547, 742, 745], "343": [547, 742, 745], "44": [547, 742, 745, 758, 761, 762, 765, 905, 941, 943, 1090, 1094, 1111, 1112, 1115, 1139], "30": [547, 742, 745, 905, 941, 943, 1111, 1112, 1115, 1139, 1165, 1171], "81": [547, 742, 745, 762, 765, 1111, 1112, 1115, 1139], "527": [547, 742, 745], "301": [547, 742, 745], "indistinguish": [547, 758, 761], "infinit": [547, 758, 761], "83": [547, 758, 761], "32455532": [547, 758, 761], "89897949": [547, 758, 761], "50": [547, 758, 761, 905, 941, 943, 1090, 1093, 1111, 1112, 1115, 1139], "31": [547, 758, 761], "169": [547, 758, 761], "47": [547, 758, 761], "73": [547, 758, 761, 905, 906, 908, 1073, 1074, 1077], "93": [547, 758, 761], "35": [547, 758, 761, 892, 904, 905, 909, 911, 1090, 1094, 1111, 1112, 1115, 1139], "09": [547, 762, 765, 892, 904], "61": [547, 762, 765, 975, 976, 979], "546": [547, 771], "842": [547, 771], "916": [547, 771, 975, 976, 979], "996": [547, 771], "328": [547, 771], "real": [547, 776], "462": [547, 776], "604": [547, 776], "984": [547, 776], "997": [547, 776, 1073, 1074, 1077], "decim": [547, 779, 782], "inspect": [783, 789, 1157, 1158], "downscal": [783, 795, 796, 798], "60": [783, 801, 905, 941, 943, 1111, 1112, 1115, 1139], "default_v": [783, 804], "catch_except": [783, 804], "rev": [783, 804], "with_cal": [783, 804], "arrang": [783, 805], "123": [783, 808], "mod": [783, 809], "max_freq": [783, 810], "num_band": [783, 810], "pad": [783, 810, 892, 893, 894, 895, 896, 897, 898, 899, 991, 1001, 1004, 1047, 1050, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181], "fourier": [783, 810], "band": [783, 810], "linearli": [783, 810, 905, 951, 953], "oppos": [783, 810], "geometr": [783, 810], "seen_set": [783, 821], "local_set": [783, 821], "decrement": [783, 825], "is_arrai": 783, "allow_dupl": [783, 833], "forkserv": [783, 834], "spawn": [783, 834], "hot": [783, 836], "scatter": [783, 836, 839, 840], "overrid": [783, 836], "tmp_dr": [783, 844], "temporari": [783, 844], "min_denomin": [783, 847], "stabil": [783, 847, 848, 1100, 1101, 1104, 1106, 1109], "_min_denomin": [783, 847], "min_bas": [783, 848], "_min_bas": [783, 848, 1073, 1074, 1077, 1188, 1189], "100000023841858": [783, 851], "200000047683716": [783, 851], "299999952316284": [783, 851], "400000095367432": [783, 851], "599999904632568": [783, 851], "101": [783, 852], "unpack": [783, 855], "gradienttrack": [857, 858], "delta": [857, 859, 862], "cost": [857, 859, 862, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 1051, 1052, 1053, 1054], "ws": [857, 859, 862, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884], "en": [857, 859, 862, 864, 866], "wikipedia": [857, 859, 862, 864, 866], "wiki": [857, 859, 862, 864, 866], "stochastic_gradient_desc": [857, 859, 862, 864, 866], "dc": [857, 859, 862, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884], "dw": [857, 859, 862, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884], "averag": [857, 859, 862, 864, 866, 874, 876, 1051, 1052, 1053], "forget": [857, 859, 862, 864, 866, 874, 876, 1190, 1191, 1192], "004": [857, 859, 862], "009": [857, 859, 862], "86": [857, 859, 862], "28": [857, 859, 862, 892, 895, 898, 899, 905, 941, 943, 1111, 1112, 1115, 1139], "45": [857, 859, 862, 905, 941, 943, 991, 1030, 1073, 1074, 1077, 1111, 1112, 1115, 1139], "0125": [857, 859, 862], "601": [857, 859, 862], "581": [857, 859, 862], "025": [857, 859, 862], "992": [857, 859, 862], "209": [857, 859, 862, 1095, 1096], "271": [857, 859, 862], "0717": [857, 859, 862], "142": [857, 859, 862], "182": [857, 859, 862], "624": [857, 859, 862, 1078, 1084, 1086], "06": [857, 859, 862], "02": [857, 859, 862], "744": [857, 859, 862], "626": [857, 859, 862], "65": [857, 859, 862, 905, 941, 943, 1111, 1112, 1115, 1139], "024": [857, 859, 862], "096": [857, 859, 862], "216": [857, 859, 862], "384": [857, 859, 862], "rate": [857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884, 1051, 1052, 1053, 1054, 1174, 1185, 1190, 1191, 1192, 1193, 1194, 1195], "ws_new": [857, 864, 866, 869, 871, 874, 876, 878, 880, 882, 884], "retain": [857, 868], "trust": [857, 874, 876, 1190, 1192], "decai": [857, 874, 876, 878, 880, 1190, 1192, 1193], "layerwis": [857, 878, 880, 1190, 1193], "stride": [892, 893, 894, 895, 896, 897, 898, 899, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181], "data_format": [892, 893, 894, 895, 896, 897, 898, 899, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181], "nwc": [892, 893, 894, 1174, 1175, 1176], "dilat": [892, 893, 894, 895, 896, 897, 898, 899, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181], "convolut": [892, 893, 894, 895, 896, 897, 898, 899, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181], "d_in": [892, 893, 894, 895, 896, 897, 898], "fw": [892, 893, 894, 895, 896, 897, 898, 899], "d_out": [892, 893, 894, 895, 896, 897, 898], "slide": [892, 893, 894, 895, 896, 897, 898, 899, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181], "ncw": [892, 893, 894, 1174, 1175, 1176], "wio": [892, 893], "output_shap": [892, 894, 896, 898, 1174, 1176, 1178, 1180], "nhwc": [892, 895, 896, 899, 1174, 1177, 1178, 1181], "fh": [892, 895, 896, 897, 898, 899], "nchw": [892, 895, 896, 899, 1174, 1177, 1178, 1181], "hwio": [892, 895], "unequ": [892, 895], "unsqueez": [892, 895, 899], "ndhwc": [892, 897, 898, 1174, 1179, 1180], "volum": [892, 897], "fd": [892, 897, 898], "ncdhw": [892, 897, 898, 1174, 1179, 1180], "dhwio": [892, 897], "256": [892, 898], "258": [892, 898], "128": [892, 898, 905, 941, 943], "depthwis": [892, 899, 1174, 1181], "333": [892, 899], "inp": [892, 899], "prob": [892, 900, 1078, 1079, 1174, 1182], "randomli": [892, 900, 1174, 1182], "bernoulli": [892, 900], "out_featur": [892, 900, 901], "incom": [892, 901], "outer_batch_shap": [892, 901], "inner_batch_shap": [892, 901], "in_featur": [892, 901], "cell": [892, 902, 1174, 1183], "num_queri": [892, 903, 904], "x_feat_dim": [892, 903], "num_kei": [892, 903, 904], "cont_feat_dim": [892, 903], "numhead": [892, 903], "feat_dim": [892, 903, 904], "out_feat_dim": [892, 903], "score": [892, 904], "04": [892, 904], "03": [892, 904, 1073, 1074, 1077], "08": [892, 904], "decomposit": [905, 906, 908, 947, 949, 954], "symmetr": [905, 906, 908, 918, 920, 921, 923, 972, 974], "u": [905, 906, 908, 954], "577": [905, 906, 908], "707": [905, 906, 908], "vif": [905, 909, 911], "92": [905, 912], "293": [905, 912], "46997": [905, 912], "eigendecomposit": [905, 918, 920], "qlq\u1d40": [905, 918, 920], "orthogon": [905, 918, 920], "eig": [905, 918, 920], "eigenvalu": [905, 918, 920, 921, 923], "eigenvector": [905, 918, 920], "75": [905, 924, 941, 943], "prepend": [905, 927, 930], "singular": [905, 926, 935, 937, 944, 946, 954, 956, 957, 959], "toler": [905, 926, 935, 937, 944, 946], "largest_singular_valu": [905, 926, 935, 937, 944, 946], "array_lik": [905, 941, 943], "33": [905, 941, 943, 1073, 1074, 1077, 1111, 1112, 1115, 1139], "36": [905, 941, 943, 1111, 1112, 1115, 1139], "84": [905, 941, 943, 1111, 1112, 1115, 1139], "105": [905, 941, 943, 975, 976, 979], "112": [905, 941, 943, 1111, 1112, 1115, 1139], "104": [905, 941, 943, 1111, 1112, 1115, 1139], "120": [905, 941, 943], "moor": [905, 926, 944, 946], "penros": [905, 926, 944, 946], "pseudo": [905, 926, 944, 946], "orthonorm": [905, 947, 949, 954], "2d": [905, 914, 950, 1174, 1177, 1178, 1181], "logdet": [905, 914, 950], "coeffici": [905, 951, 953], "usvh": [905, 954], "vh": [905, 954], "hermitian": [905, 954], "et": [905, 954], "cetera": [905, 954], "adjoint": [905, 954], "reconstruct": [905, 954, 1095, 1096, 1098], "reconstructed_x": [905, 954], "contract": [905, 960, 962, 1111, 1112, 1115, 1139], "doubl": [905, 960, 962], "singleton": [905, 969, 971, 991, 1031, 1034, 1090, 1092, 1111, 1116, 1119, 1120, 1123, 1124, 1127, 1128, 1131, 1132, 1135, 1136, 1140, 1143, 1144, 1145, 1148, 1149, 1152], "liter": [905, 969, 971], "manhattan": [905, 969, 971], "l2": [905, 969, 971], "euclidean": [905, 969, 971], "mathbf": [905, 972, 974], "mathbb": [905, 972, 974], "skew": [905, 972, 974], "entropi": [975, 976, 979, 981, 984, 986, 989], "predict": [975, 976, 979, 981, 984, 986, 989], "smooth": [975, 976, 979, 981, 984, 986, 989], "223": [975, 976, 979], "357": [975, 976, 979, 986, 989], "511": [975, 976, 979], "discret": [975, 981, 984], "3862944": [975, 981, 984], "35667497": [975, 981, 984], "spars": [975, 986, 989], "logit": [975, 986, 989], "793291": [975, 986, 989], "512926": [975, 986, 989], "before_1": [991, 1001, 1004, 1047, 1050], "after_1": [991, 1001, 1004, 1047, 1050], "before_n": [991, 1001, 1004, 1047, 1050], "after_n": [991, 1001, 1004, 1047, 1050], "insert": [991, 1005, 1008, 1055, 1060, 1090, 1091], "manipulation_funct": [991, 1005, 1008], "reorder": [991, 1009, 1012], "permut": [991, 1013, 1016, 1039, 1042], "repetit": [991, 1017, 1020, 1043, 1046], "restor": [991, 1025, 1028], "classivi": [991, 1030], "famili": [991, 1035, 1038], "intxx": [991, 1035, 1038], "floatxx": [991, 1035, 1038], "fomaml_step": 1051, "inner_cost_fn": [1051, 1052, 1053], "outer_cost_fn": [1051, 1052, 1053], "inner_grad_step": [1051, 1052, 1053, 1054], "inner_learning_r": [1051, 1052, 1053, 1054], "inner_optimization_step": [1051, 1052, 1053, 1054], "inner_batch_fn": [1051, 1052, 1053], "outer_batch_fn": [1051, 1052, 1053], "average_across_step": [1051, 1052, 1053], "inner_v": [1051, 1052, 1053], "keep_inner_v": [1051, 1052, 1053], "outer_v": [1051, 1052, 1053], "keep_outer_v": [1051, 1052, 1053], "return_inner_v": [1051, 1052, 1053, 1054], "num_task": [1051, 1052, 1053, 1054], "maml": [1051, 1052, 1053], "recev": [1051, 1052, 1053], "0x7f7d35608040": [1051, 1052, 1053, 1054], "maml_step": 1051, "rece": [1051, 1053], "reptile_step": 1051, "cost_fn": [1051, 1054], "reptil": [1051, 1054], "receivng": [1051, 1054], "all_nested_indic": 1055, "include_nest": [1055, 1056], "_index": [1055, 1056, 1066], "_base": [1055, 1056, 1065, 1066], "copy_nest": 1055, "to_mut": [1055, 1057, 1067], "mutabl": [1055, 1057, 1067], "insert_into_nest_at_index": 1055, "insert_into_nest_at_indic": 1055, "map_nest_at_index": 1055, "map_nest_at_indic": 1055, "multi_index_nest": 1055, "nested_ani": 1055, "check_nest": [1055, 1065, 1066], "conditon": [1055, 1065, 1066], "nested_indices_wher": 1055, "stop_after_n_found": [1055, 1066], "_depth": [1055, 1067], "_tuple_check_fn": [1055, 1067], "_list_check_fn": [1055, 1067], "_dict_check_fn": [1055, 1067], "nested_multi_map": 1055, "nest0": [1055, 1068], "ivy_arrai": [1055, 1068], "funciton": [1055, 1068], "prune_nest_at_index": 1055, "prune_nest_at_indic": 1055, "set_nest_at_index": 1055, "set_nest_at_indic": 1055, "mini": [1073, 1074, 1077, 1188, 1189], "gamma": [1073, 1074, 1077], "beta": [1073, 1074, 1077], "0976": [1073, 1074, 1077], "3452": [1073, 1074, 1077], "2740": [1073, 1074, 1077], "1047": [1073, 1074, 1077], "5886": [1073, 1074, 1077], "2732": [1073, 1074, 1077], "7696": [1073, 1074, 1077], "7024": [1073, 1074, 1077], "2518": [1073, 1074, 1077], "58": [1073, 1074, 1077, 1095, 1096], "283": [1073, 1074, 1077], "585": [1073, 1074, 1077], "909": [1073, 1074, 1077], "628": [1073, 1074, 1077], "225": [1073, 1074, 1077], "425": [1073, 1074, 1077], "norm_idx": [1073, 1074, 1077], "228": [1073, 1074, 1077], "0285": [1073, 1074, 1077], "199": [1073, 1074, 1077], "204": [1073, 1074, 1077], "population_s": [1078, 1079], "num_sampl": [1078, 1079], "draw": [1078, 1079, 1083, 1084, 1086], "unnorm": [1078, 1079], "drawn": [1078, 1079, 1080, 1081, 1083, 1084, 1086], "home": [1078, 1079, 1083], "uniformli": [1078, 1080, 1081, 1084, 1086], "highest": [1078, 1080, 1081], "parameter": [1078, 1083, 1084, 1086], "6444774682897879": [1078, 1083], "811": [1078, 1083], "508": [1078, 1083], "564": [1078, 1083], "7268672": [1078, 1083], "968": [1078, 1083], "175": [1078, 1083, 1095, 1096], "064": [1078, 1083], "40935726": [1078, 1083], "556": [1078, 1083], "26431865": [1078, 1084, 1086], "475": [1078, 1084, 1086], "878": [1078, 1084, 1086], "861": [1078, 1084, 1086], "89150229": [1078, 1084, 1086], "89629126": [1078, 1084, 1086], "94198485": [1078, 1084, 1086], "91405606": [1078, 1084, 1086], "72848724": [1078, 1084, 1086], "7550739": [1078, 1084, 1086], "00109": [1078, 1084, 1086], "occurr": [1090, 1091, 1092, 1095, 1096], "yield": [1090, 1094], "43": [1090, 1094], "x_j": [1095, 1096, 1097, 1099], "impli": [1095, 1096, 1097, 1099], "inverse_indic": [1095, 1096, 1098], "aggreg": [1095, 1096], "fourth": [1095, 1096], "607": [1095, 1096], "735": [1095, 1096], "667": [1095, 1096], "381": [1095, 1096], "857": [1095, 1096], "0396": [1095, 1096], "166": [1095, 1096], "828": [1095, 1096], "144": [1095, 1096], "40501155": [1095, 1096], "77361575": [1095, 1096], "97776199": [1095, 1096], "36831157": [1095, 1096], "89148434": [1095, 1096], "9512272": [1095, 1096], "67542176": [1095, 1096], "41985657": [1095, 1096], "23478023": [1095, 1096], "1141": [1095, 1096], "8101": [1095, 1096], "9298": [1095, 1096], "8460": [1095, 1096], "2119": [1095, 1096], "3519": [1095, 1096], "6252": [1095, 1096], "4033": [1095, 1096], "7443": [1095, 1096], "2577": [1095, 1096], "3707": [1095, 1096], "0545": [1095, 1096], "3238": [1095, 1096], "5944": [1095, 1096], "0775": [1095, 1096], "4327": [1095, 1096], "176": [1095, 1096], "889": [1095, 1096], "763": [1095, 1096], "071": [1095, 1096], "262": [1095, 1096], "456": [1095, 1096], "114": [1095, 1096], "349": [1095, 1096], "615": [1095, 1096], "594": [1095, 1096], "335": [1095, 1096], "212": [1095, 1096], "457": [1095, 1096], "827": [1095, 1096], "ascend": [1100, 1101, 1104], "einstein": [1111, 1112, 1115, 1139], "summat": [1111, 1112, 1115, 1139], "seq": [1111, 1112, 1115, 1139], "jk": [1111, 1112, 1115, 1139], "ik": [1111, 1112, 1115, 1139], "126": [1111, 1112, 1115, 1139], "510": [1111, 1112, 1115, 1139], "99": [1111, 1112, 1115, 1139], "108": [1111, 1112, 1115, 1139], "117": [1111, 1112, 1115, 1139], "sentinel": [1111, 1116, 1119, 1124, 1127], "unsign": [1111, 1128, 1131, 1136], "degre": [1111, 1132, 1135, 1140, 1143], "bessel": [1111, 1132, 1135, 1140, 1143], "8164966": [1111, 1132, 1135], "varianc": [1111, 1140, 1143], "unbias": [1111, 1140, 1143], "simplicit": [1144, 1145, 1148], "autom": 1153, "grow": 1153, "ai": 1153, "got": 1153, "colab": 1153, "sharp": 1153, "weekli": 1153, "event": 1153, "immedi": 1153, "favorit": 1153, "jax_concat": 1153, "tf_concat": 1153, "np_concat": 1153, "mx_concat": 1153, "torch_concat": 1153, "prompt": 1153, "get_devic": 1153, "reduce_prod": 1153, "gradient_imag": 1153, "linalg": 1153, "bilinear_resampl": 1153, "stack_imag": 1153, "neural_net": 1153, "ecosystem": [1153, 1159], "popular": [1153, 1159], "acceler": 1153, "articl": 1153, "lenton2021ivi": 1153, "inter": 1153, "lenton": 1153, "daniel": 1153, "pardo": 1153, "fabio": 1153, "falck": 1153, "fabian": 1153, "jame": 1153, "stephen": 1153, "clark": 1153, "ronald": 1153, "journal": 1153, "arxiv": 1153, "preprint": 1153, "2102": 1153, "02886": 1153, "2021": 1153, "add_array_spec": 1156, "fn_array_spec": 1156, "geglu": 1160, "native_modul": [1163, 1164], "native_module_class": [1163, 1164], "firstlayersiren": 1165, "kaimingnorm": [1165, 1169], "negative_slop": 1165, "Ones": 1165, "siren": 1165, "w0": [1165, 1171], "filter_s": [1174, 1175, 1176], "1d": [1174, 1175, 1176], "conv1dtranspos": 1174, "filter_shap": [1174, 1177, 1178, 1179, 1180, 1181], "conv2dtranspos": 1174, "conv3dtranspos": 1174, "depthwiseconv2d": 1174, "num_channel": [1174, 1181], "bernoul": [1174, 1182], "num_lay": [1174, 1183], "return_sequ": [1174, 1183], "return_st": [1174, 1183], "get_initial_st": [1174, 1183], "dens": [1174, 1184], "multiheadattent": 1174, "query_dim": [1174, 1185], "head_dim": [1174, 1185], "dropout_r": [1174, 1185], "context_dim": [1174, 1185], "with_to_q_fn": [1174, 1185], "with_to_kv_fn": [1174, 1185], "with_to_out_fn": [1174, 1185], "build_mod": [1174, 1185, 1186, 1187], "on_init": [1174, 1185, 1186, 1187], "__call__": [1174, 1185, 1186, 1187], "store_var": [1186, 1187], "arg_stateful_idx": [1186, 1187], "kwarg_stateful_idx": [1186, 1187], "fallback_to_non_compil": [1186, 1187, 1190, 1194], "with_partial_v": [1186, 1187], "initialz": [1186, 1187], "from_cal": [1186, 1187], "check_submod_ret": [1186, 1187], "get_mod_kei": [1186, 1187], "top_mod": [1186, 1187], "mod_depth": [1186, 1187], "mod_height": [1186, 1187], "mod_with_top_mod_key_chain": [1186, 1187], "save_weight": [1186, 1187], "weights_path": [1186, 1187], "show_mod_in_top_mod": [1186, 1187], "upper_depth": [1186, 1187], "lower_depth": [1186, 1187], "show_structur": [1186, 1187], "show_v_in_top_v": [1186, 1187], "sub_mod": [1186, 1187], "show_v": [1186, 1187], "track_submod_call_ord": [1186, 1187], "track_submod_ret": [1186, 1187], "v_with_top_v_key_chain": [1186, 1187], "layernorm": 1188, "normalized_shap": [1188, 1189], "elementwise_affin": [1188, 1189], "trail": [1188, 1189], "affin": [1188, 1189], "0001": [1190, 1191, 1192], "init_on_first_step": [1190, 1194], "ignore_miss": [1190, 1194], "overriden": [1190, 1194], "sgd": 1190, "stochast": [1190, 1195], "sub_modul": [1196, 1197]}, "objects": {"ivy.array": [[0, 0, 0, "-", "activations"], [2, 0, 0, "-", "array_methods"], [122, 0, 0, "-", "conversions"], [127, 0, 0, "-", "creation"], [129, 0, 0, "-", "data_type"], [131, 0, 0, "-", "device"], [133, 0, 0, "-", "elementwise"], [135, 0, 0, "-", "general"], [137, 0, 0, "-", "gradients"], [139, 0, 0, "-", "image"], [141, 0, 0, "-", "layers"], [143, 0, 0, "-", "linear_algebra"], [145, 0, 0, "-", "losses"], [147, 0, 0, "-", "manipulation"], [149, 0, 0, "-", "norms"], [151, 0, 0, "-", "random"], [153, 0, 0, "-", "searching"], [155, 0, 0, "-", "set"], [157, 0, 0, "-", "sorting"], [159, 0, 0, "-", "statistical"], [161, 0, 0, "-", "utility"], [163, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[1, 1, 1, "", "ArrayWithActivations"]], "ivy.array.activations.ArrayWithActivations": [[1, 2, 1, "", "gelu"], [1, 2, 1, "", "leaky_relu"], [1, 2, 1, "", "relu"], [1, 2, 1, "", "sigmoid"], [1, 2, 1, "", "softmax"], [1, 2, 1, "", "tanh"]], "ivy.array.array_methods": [[549, 3, 1, "", "abs"], [557, 3, 1, "", "acos"], [558, 3, 1, "", "acosh"], [860, 3, 1, "", "adam_step"], [695, 3, 1, "", "add"], [8, 3, 1, "", "add_ivy_array_instance_methods"], [1146, 3, 1, "", "all"], [785, 3, 1, "", "all_equal"], [1150, 3, 1, "", "any"], [1102, 3, 1, "", "argsort"], [567, 3, 1, "", "asin"], [571, 3, 1, "", "asinh"], [582, 3, 1, "", "atan"], [579, 3, 1, "", "atan2"], [583, 3, 1, "", "atanh"], [977, 3, 1, "", "binary_cross_entropy"], [587, 3, 1, "", "bitwise_and"], [591, 3, 1, "", "bitwise_invert"], [595, 3, 1, "", "bitwise_left_shift"], [599, 3, 1, "", "bitwise_or"], [603, 3, 1, "", "bitwise_right_shift"], [607, 3, 1, "", "bitwise_xor"], [470, 3, 1, "", "can_cast"], [611, 3, 1, "", "ceil"], [907, 3, 1, "", "cholesky"], [993, 3, 1, "", "clip"], [998, 3, 1, "", "concat"], [1002, 3, 1, "", "constant_pad"], [615, 3, 1, "", "cos"], [619, 3, 1, "", "cosh"], [910, 3, 1, "", "cross"], [982, 3, 1, "", "cross_entropy"], [950, 3, 1, "", "det"], [916, 3, 1, "", "diagonal"], [647, 3, 1, "", "divide"], [919, 3, 1, "", "eigh"], [922, 3, 1, "", "eigvalsh"], [1113, 3, 1, "", "einsum"], [655, 3, 1, "", "equal"], [632, 3, 1, "", "erf"], [695, 3, 1, "", "exp"], [1006, 3, 1, "", "expand_dims"], [640, 3, 1, "", "expm1"], [1010, 3, 1, "", "flip"], [647, 3, 1, "", "floor"], [648, 3, 1, "", "floor_divide"], [813, 3, 1, "", "gather_nd"], [412, 3, 1, "", "gelu"], [655, 3, 1, "", "greater"], [656, 3, 1, "", "greater_equal"], [944, 3, 1, "", "inv"], [660, 3, 1, "", "isfinite"], [664, 3, 1, "", "isinf"], [668, 3, 1, "", "isnan"], [1075, 3, 1, "", "layer_norm"], [416, 3, 1, "", "leaky_relu"], [672, 3, 1, "", "less"], [676, 3, 1, "", "less_equal"], [680, 3, 1, "", "log"], [684, 3, 1, "", "log10"], [688, 3, 1, "", "log1p"], [692, 3, 1, "", "log2"], [696, 3, 1, "", "logaddexp"], [700, 3, 1, "", "logical_and"], [704, 3, 1, "", "logical_not"], [708, 3, 1, "", "logical_or"], [712, 3, 1, "", "logical_xor"], [928, 3, 1, "", "matmul"], [932, 3, 1, "", "matrix_norm"], [936, 3, 1, "", "matrix_rank"], [939, 3, 1, "", "matrix_transpose"], [1117, 3, 1, "", "max"], [1121, 3, 1, "", "mean"], [1125, 3, 1, "", "min"], [718, 3, 1, "", "multiply"], [723, 3, 1, "", "negative"], [727, 3, 1, "", "not_equal"], [942, 3, 1, "", "outer"], [1014, 3, 1, "", "permute_dims"], [945, 3, 1, "", "pinv"], [731, 3, 1, "", "positive"], [735, 3, 1, "", "pow"], [1129, 3, 1, "", "prod"], [948, 3, 1, "", "qr"], [420, 3, 1, "", "relu"], [739, 3, 1, "", "remainder"], [1018, 3, 1, "", "repeat"], [1022, 3, 1, "", "reshape"], [1026, 3, 1, "", "roll"], [743, 3, 1, "", "round"], [424, 3, 1, "", "sigmoid"], [747, 3, 1, "", "sign"], [751, 3, 1, "", "sin"], [755, 3, 1, "", "sinh"], [428, 3, 1, "", "softmax"], [952, 3, 1, "", "solve"], [1107, 3, 1, "", "sort"], [987, 3, 1, "", "sparse_cross_entropy"], [759, 3, 1, "", "sqrt"], [763, 3, 1, "", "square"], [1032, 3, 1, "", "squeeze"], [1036, 3, 1, "", "stack"], [1133, 3, 1, "", "std"], [768, 3, 1, "", "subtract"], [1137, 3, 1, "", "sum"], [957, 3, 1, "", "svd"], [958, 3, 1, "", "svdvals"], [1040, 3, 1, "", "swapaxes"], [773, 3, 1, "", "tan"], [435, 3, 1, "", "tanh"], [961, 3, 1, "", "tensordot"], [1044, 3, 1, "", "tile"], [964, 3, 1, "", "trace"], [780, 3, 1, "", "trunc"], [1141, 3, 1, "", "var"], [967, 3, 1, "", "vecdot"], [970, 3, 1, "", "vector_norm"], [973, 3, 1, "", "vector_to_skew_symmetric_matrix"], [1048, 3, 1, "", "zero_pad"]], "ivy.array.conversions": [[123, 3, 1, "", "args_to_ivy"], [124, 3, 1, "", "args_to_native"], [125, 3, 1, "", "to_ivy"], [126, 3, 1, "", "to_native"]], "ivy.array.creation": [[128, 1, 1, "", "ArrayWithCreation"]], "ivy.array.data_type": [[130, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[130, 2, 1, "", "can_cast"]], "ivy.array.device": [[132, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[134, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[134, 2, 1, "", "abs"], [134, 2, 1, "", "acos"], [134, 2, 1, "", "acosh"], [134, 2, 1, "", "add"], [134, 2, 1, "", "asin"], [134, 2, 1, "", "asinh"], [134, 2, 1, "", "atan"], [134, 2, 1, "", "atan2"], [134, 2, 1, "", "atanh"], [134, 2, 1, "", "bitwise_and"], [134, 2, 1, "", "bitwise_invert"], [134, 2, 1, "", "bitwise_left_shift"], [134, 2, 1, "", "bitwise_or"], [134, 2, 1, "", "bitwise_right_shift"], [134, 2, 1, "", "bitwise_xor"], [134, 2, 1, "", "ceil"], [134, 2, 1, "", "cos"], [134, 2, 1, "", "cosh"], [134, 2, 1, "", "divide"], [134, 2, 1, "", "equal"], [134, 2, 1, "", "erf"], [134, 2, 1, "", "exp"], [134, 2, 1, "", "expm1"], [134, 2, 1, "", "floor"], [134, 2, 1, "", "floor_divide"], [134, 2, 1, "", "greater"], [134, 2, 1, "", "greater_equal"], [134, 2, 1, "", "isfinite"], [134, 2, 1, "", "isinf"], [134, 2, 1, "", "isnan"], [134, 2, 1, "", "less"], [134, 2, 1, "", "less_equal"], [134, 2, 1, "", "log"], [134, 2, 1, "", "log10"], [134, 2, 1, "", "log1p"], [134, 2, 1, "", "log2"], [134, 2, 1, "", "logaddexp"], [134, 2, 1, "", "logical_and"], [134, 2, 1, "", "logical_not"], [134, 2, 1, "", "logical_or"], [134, 2, 1, "", "logical_xor"], [134, 2, 1, "", "multiply"], [134, 2, 1, "", "negative"], [134, 2, 1, "", "not_equal"], [134, 2, 1, "", "positive"], [134, 2, 1, "", "pow"], [134, 2, 1, "", "remainder"], [134, 2, 1, "", "round"], [134, 2, 1, "", "sign"], [134, 2, 1, "", "sin"], [134, 2, 1, "", "sinh"], [134, 2, 1, "", "sqrt"], [134, 2, 1, "", "square"], [134, 2, 1, "", "subtract"], [134, 2, 1, "", "tan"], [134, 2, 1, "", "tanh"], [134, 2, 1, "", "trunc"]], "ivy.array.general": [[136, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[136, 2, 1, "", "all_equal"], [136, 2, 1, "", "gather_nd"]], "ivy.array.gradients": [[138, 1, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[138, 2, 1, "", "adam_step"]], "ivy.array.image": [[140, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[142, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[144, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[144, 2, 1, "", "cholesky"], [144, 2, 1, "", "cross"], [144, 2, 1, "", "det"], [144, 2, 1, "", "diagonal"], [144, 2, 1, "", "eigh"], [144, 2, 1, "", "eigvalsh"], [144, 2, 1, "", "inv"], [144, 2, 1, "", "matmul"], [144, 2, 1, "", "matrix_norm"], [144, 2, 1, "", "matrix_rank"], [144, 2, 1, "", "matrix_transpose"], [144, 2, 1, "", "outer"], [144, 2, 1, "", "pinv"], [144, 2, 1, "", "qr"], [144, 2, 1, "", "solve"], [144, 2, 1, "", "svd"], [144, 2, 1, "", "svdvals"], [144, 2, 1, "", "tensordot"], [144, 2, 1, "", "trace"], [144, 2, 1, "", "vecdot"], [144, 2, 1, "", "vector_norm"], [144, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[146, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[146, 2, 1, "", "binary_cross_entropy"], [146, 2, 1, "", "cross_entropy"], [146, 2, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[148, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[148, 2, 1, "", "clip"], [148, 2, 1, "", "concat"], [148, 2, 1, "", "constant_pad"], [148, 2, 1, "", "expand_dims"], [148, 2, 1, "", "flip"], [148, 2, 1, "", "permute_dims"], [148, 2, 1, "", "repeat"], [148, 2, 1, "", "reshape"], [148, 2, 1, "", "roll"], [148, 2, 1, "", "squeeze"], [148, 2, 1, "", "stack"], [148, 2, 1, "", "swapaxes"], [148, 2, 1, "", "tile"], [148, 2, 1, "", "zero_pad"]], "ivy.array.norms": [[150, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[150, 2, 1, "", "layer_norm"]], "ivy.array.random": [[152, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[154, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[156, 1, 1, "", "ArrayWithSet"]], "ivy.array.sorting": [[158, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[158, 2, 1, "", "argsort"], [158, 2, 1, "", "sort"]], "ivy.array.statistical": [[160, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[160, 2, 1, "", "einsum"], [160, 2, 1, "", "max"], [160, 2, 1, "", "mean"], [160, 2, 1, "", "min"], [160, 2, 1, "", "prod"], [160, 2, 1, "", "std"], [160, 2, 1, "", "sum"], [160, 2, 1, "", "var"]], "ivy.array.utility": [[162, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[162, 2, 1, "", "all"], [162, 2, 1, "", "any"]], "ivy.array.wrapping": [[164, 3, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[165, 0, 0, "-", "backend_handler"], [400, 0, 0, "-", "func_wrapper"], [1156, 0, 0, "-", "inspection"], [1199, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[165, 1, 1, "", "ContextManager"], [167, 3, 1, "", "choose_random_backend"], [168, 3, 1, "", "clear_backend_stack"], [169, 3, 1, "", "current_backend"], [170, 3, 1, "", "get_backend"], [171, 3, 1, "", "set_backend"], [172, 3, 1, "", "try_import_ivy_jax"], [173, 3, 1, "", "try_import_ivy_mxnet"], [174, 3, 1, "", "try_import_ivy_numpy"], [175, 3, 1, "", "try_import_ivy_tf"], [176, 3, 1, "", "try_import_ivy_torch"], [177, 3, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[165, 2, 1, "", "__init__"]], "ivy.container": [[182, 0, 0, "-", "activations"], [184, 0, 0, "-", "base"], [186, 0, 0, "-", "container"], [189, 0, 0, "-", "container_methods"], [323, 0, 0, "-", "creation"], [325, 0, 0, "-", "data_type"], [327, 0, 0, "-", "device"], [329, 0, 0, "-", "elementwise"], [331, 0, 0, "-", "general"], [333, 0, 0, "-", "gradients"], [335, 0, 0, "-", "image"], [337, 0, 0, "-", "layers"], [339, 0, 0, "-", "linear_algebra"], [341, 0, 0, "-", "losses"], [343, 0, 0, "-", "manipulation"], [345, 0, 0, "-", "norms"], [347, 0, 0, "-", "random"], [349, 0, 0, "-", "searching"], [351, 0, 0, "-", "set"], [353, 0, 0, "-", "sorting"], [355, 0, 0, "-", "statistical"], [357, 0, 0, "-", "utility"], [359, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[183, 1, 1, "", "ContainerWithActivations"]], "ivy.container.activations.ContainerWithActivations": [[183, 2, 1, "", "gelu"], [183, 2, 1, "", "leaky_relu"], [183, 2, 1, "", "relu"], [183, 2, 1, "", "sigmoid"], [183, 2, 1, "", "softmax"], [183, 2, 1, "", "softplus"], [183, 2, 1, "", "tanh"]], "ivy.container.base": [[185, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[185, 2, 1, "", "__getitem__"], [185, 2, 1, "", "__init__"], [185, 2, 1, "", "__setitem__"], [185, 2, 1, "", "all_false"], [185, 2, 1, "", "all_key_chains"], [185, 2, 1, "", "all_true"], [185, 2, 1, "", "arrays_as_lists"], [185, 2, 1, "", "as_arrays"], [185, 2, 1, "", "as_bools"], [185, 2, 1, "", "as_ones"], [185, 2, 1, "", "as_random_uniform"], [185, 2, 1, "", "as_variables"], [185, 2, 1, "", "as_zeros"], [185, 2, 1, "", "assert_contains_sub_container"], [185, 2, 1, "", "assert_contains_sub_structure"], [185, 2, 1, "", "assert_identical"], [185, 2, 1, "", "assert_identical_structure"], [185, 2, 1, "", "at_key_chain"], [185, 2, 1, "", "at_key_chains"], [185, 2, 1, "", "at_keys"], [185, 2, 1, "", "clip"], [185, 2, 1, "", "combine"], [185, 2, 1, "", "common_key_chains"], [185, 4, 1, "", "config"], [185, 2, 1, "", "contains_sub_container"], [185, 2, 1, "", "contains_sub_structure"], [185, 2, 1, "", "copy"], [185, 2, 1, "", "create_if_absent"], [185, 2, 1, "", "cutoff_at_depth"], [185, 2, 1, "", "cutoff_at_height"], [185, 2, 1, "", "deep_copy"], [185, 4, 1, "", "dev"], [185, 2, 1, "", "dev_clone"], [185, 2, 1, "", "dev_dist"], [185, 4, 1, "", "dev_str"], [185, 2, 1, "", "diff"], [185, 2, 1, "", "dtype"], [185, 2, 1, "", "einops_rearrange"], [185, 2, 1, "", "einops_reduce"], [185, 2, 1, "", "einops_repeat"], [185, 2, 1, "", "find_sub_container"], [185, 2, 1, "", "find_sub_structure"], [185, 2, 1, "", "flatten_key_chain"], [185, 2, 1, "", "flatten_key_chains"], [185, 2, 1, "", "format_key_chains"], [185, 2, 1, "", "from_disk_as_hdf5"], [185, 2, 1, "", "from_disk_as_json"], [185, 2, 1, "", "from_disk_as_pickled"], [185, 2, 1, "", "from_flat_list"], [185, 2, 1, "", "from_numpy"], [185, 2, 1, "", "gather"], [185, 2, 1, "", "gather_nd"], [185, 2, 1, "", "h5_file_size"], [185, 2, 1, "", "handle_inplace"], [185, 2, 1, "", "has_key"], [185, 2, 1, "", "has_key_chain"], [185, 2, 1, "", "has_nans"], [185, 2, 1, "", "identical"], [185, 2, 1, "", "identical_array_shapes"], [185, 2, 1, "", "identical_configs"], [185, 2, 1, "", "identical_structure"], [185, 2, 1, "", "if_exists"], [185, 2, 1, "", "inplace_update"], [185, 4, 1, "", "ivy"], [185, 2, 1, "", "key_chains_containing"], [185, 2, 1, "", "list_join"], [185, 2, 1, "", "list_stack"], [185, 2, 1, "", "map"], [185, 2, 1, "", "map_conts"], [185, 2, 1, "", "matrix_norm"], [185, 4, 1, "", "max_depth"], [185, 2, 1, "", "maximum"], [185, 2, 1, "", "minimum"], [185, 2, 1, "", "multi_map"], [185, 2, 1, "", "multi_map_in_static_method"], [185, 2, 1, "", "num_arrays"], [185, 2, 1, "", "overwrite_at_key_chain"], [185, 2, 1, "", "overwrite_at_key_chains"], [185, 2, 1, "", "prune_empty"], [185, 2, 1, "", "prune_key_chain"], [185, 2, 1, "", "prune_key_chains"], [185, 2, 1, "", "prune_key_from_key_chains"], [185, 2, 1, "", "prune_keys"], [185, 2, 1, "", "prune_keys_from_key_chains"], [185, 2, 1, "", "reduce"], [185, 2, 1, "", "remove_key_length_limit"], [185, 2, 1, "", "remove_print_limit"], [185, 2, 1, "", "reshape_like"], [185, 2, 1, "", "restructure"], [185, 2, 1, "", "restructure_key_chains"], [185, 2, 1, "", "set_at_key_chain"], [185, 2, 1, "", "set_at_key_chains"], [185, 2, 1, "", "set_at_keys"], [185, 2, 1, "", "set_framework"], [185, 2, 1, "", "set_ivy_backend"], [185, 4, 1, "", "shape"], [185, 4, 1, "", "shapes"], [185, 2, 1, "", "show"], [185, 2, 1, "", "show_sub_container"], [185, 2, 1, "", "shuffle"], [185, 2, 1, "", "shuffle_h5_file"], [185, 2, 1, "", "size_ordered_arrays"], [185, 2, 1, "", "slice_keys"], [185, 2, 1, "", "slice_via_key"], [185, 2, 1, "", "sort_by_key"], [185, 2, 1, "", "split"], [185, 2, 1, "", "stop_gradients"], [185, 2, 1, "", "structural_diff"], [185, 2, 1, "", "to_device"], [185, 2, 1, "", "to_dict"], [185, 2, 1, "", "to_disk_as_hdf5"], [185, 2, 1, "", "to_disk_as_json"], [185, 2, 1, "", "to_disk_as_pickled"], [185, 2, 1, "", "to_flat_list"], [185, 2, 1, "", "to_iterator"], [185, 2, 1, "", "to_iterator_keys"], [185, 2, 1, "", "to_iterator_values"], [185, 2, 1, "", "to_ivy"], [185, 2, 1, "", "to_jsonable"], [185, 2, 1, "", "to_list"], [185, 2, 1, "", "to_multi_dev"], [185, 2, 1, "", "to_native"], [185, 2, 1, "", "to_numpy"], [185, 2, 1, "", "to_raw"], [185, 2, 1, "", "trim_key"], [185, 2, 1, "", "try_kc"], [185, 2, 1, "", "unify"], [185, 2, 1, "", "unstack"], [185, 2, 1, "", "update_config"], [185, 2, 1, "", "vector_norm"], [185, 2, 1, "", "with_default_key_color"], [185, 2, 1, "", "with_entries_as_lists"], [185, 2, 1, "", "with_ivy_backend"], [185, 2, 1, "", "with_key_length_limit"], [185, 2, 1, "", "with_print_indent"], [185, 2, 1, "", "with_print_limit"], [185, 2, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[187, 1, 1, "", "Container"], [188, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[187, 2, 1, "", "__add__"], [187, 2, 1, "", "__init__"], [187, 2, 1, "", "__radd__"], [187, 2, 1, "", "arange"], [187, 2, 1, "", "arg_info"], [187, 2, 1, "", "arg_names"], [187, 2, 1, "", "argmax"], [187, 2, 1, "", "argmin"], [187, 2, 1, "", "array"], [187, 2, 1, "", "array_equal"], [187, 2, 1, "", "arrays_equal"], [187, 2, 1, "", "as_ivy_dev"], [187, 2, 1, "", "as_ivy_dtype"], [187, 2, 1, "", "as_native_dev"], [187, 2, 1, "", "as_native_dtype"], [187, 2, 1, "", "asarray"], [187, 2, 1, "", "assert_supports_inplace"], [187, 2, 1, "", "astype"], [187, 2, 1, "", "broadcast_arrays"], [187, 2, 1, "", "broadcast_to"], [187, 2, 1, "", "cache_fn"], [187, 2, 1, "", "cholesky"], [187, 2, 1, "", "clear_mem_on_dev"], [187, 2, 1, "", "clip_matrix_norm"], [187, 2, 1, "", "closest_valid_dtype"], [187, 2, 1, "", "container_types"], [187, 2, 1, "", "conv1d"], [187, 2, 1, "", "conv1d_transpose"], [187, 2, 1, "", "conv2d"], [187, 2, 1, "", "conv2d_transpose"], [187, 2, 1, "", "conv3d"], [187, 2, 1, "", "conv3d_transpose"], [187, 2, 1, "", "copy_array"], [187, 2, 1, "", "cross"], [187, 2, 1, "", "cumprod"], [187, 2, 1, "", "cumsum"], [187, 2, 1, "", "current_backend"], [187, 2, 1, "", "current_backend_str"], [187, 2, 1, "", "default"], [187, 2, 1, "", "default_device"], [187, 2, 1, "", "default_dtype"], [187, 2, 1, "", "default_float_dtype"], [187, 2, 1, "", "default_int_dtype"], [187, 2, 1, "", "depthwise_conv2d"], [187, 2, 1, "", "det"], [187, 2, 1, "", "dev_clone_array"], [187, 2, 1, "", "dev_clone_iter"], [187, 2, 1, "", "dev_clone_nest"], [187, 2, 1, "", "dev_dist_array"], [187, 2, 1, "", "dev_dist_iter"], [187, 2, 1, "", "dev_dist_nest"], [187, 2, 1, "", "dev_unify"], [187, 2, 1, "", "dev_unify_array"], [187, 2, 1, "", "dev_unify_iter"], [187, 2, 1, "", "dev_unify_nest"], [187, 2, 1, "", "dev_util"], [187, 2, 1, "", "diagonal"], [187, 2, 1, "", "dropout"], [187, 2, 1, "", "dtype_bits"], [187, 2, 1, "", "eigh"], [187, 2, 1, "", "eigvalsh"], [187, 2, 1, "", "empty"], [187, 2, 1, "", "empty_like"], [187, 2, 1, "", "execute_with_gradients"], [187, 2, 1, "", "exists"], [187, 2, 1, "", "eye"], [187, 2, 1, "", "finfo"], [187, 2, 1, "", "floormod"], [187, 2, 1, "", "fourier_encode"], [187, 2, 1, "", "from_dlpack"], [187, 2, 1, "", "full"], [187, 2, 1, "", "full_like"], [187, 2, 1, "", "function_supported_dtypes"], [187, 2, 1, "", "function_unsupported_dtypes"], [187, 2, 1, "", "get_all_arrays_in_memory"], [187, 2, 1, "", "get_all_ivy_arrays_on_dev"], [187, 2, 1, "", "get_min_base"], [187, 2, 1, "", "get_min_denominator"], [187, 2, 1, "", "get_num_dims"], [187, 2, 1, "", "get_referrers_recursive"], [187, 2, 1, "", "gpu_is_available"], [187, 2, 1, "", "handle_nestable"], [187, 2, 1, "", "handle_out_argument"], [187, 2, 1, "", "iinfo"], [187, 2, 1, "", "indices_where"], [187, 2, 1, "", "infer_device"], [187, 2, 1, "", "infer_dtype"], [187, 2, 1, "", "inplace_arrays_supported"], [187, 2, 1, "", "inplace_decrement"], [187, 2, 1, "", "inplace_increment"], [187, 2, 1, "", "inplace_variables_supported"], [187, 2, 1, "", "inputs_to_native_arrays"], [187, 2, 1, "", "inv"], [187, 2, 1, "", "invalid_dtype"], [187, 2, 1, "", "is_float_dtype"], [187, 2, 1, "", "is_int_dtype"], [187, 2, 1, "", "is_ivy_container"], [187, 2, 1, "", "linear"], [187, 2, 1, "", "linspace"], [187, 2, 1, "", "logspace"], [187, 2, 1, "", "lstm_update"], [187, 2, 1, "", "match_kwargs"], [187, 2, 1, "", "matrix_power"], [187, 2, 1, "", "matrix_rank"], [187, 2, 1, "", "matrix_transpose"], [187, 2, 1, "", "meshgrid"], [187, 2, 1, "", "multi_head_attention"], [187, 2, 1, "", "multinomial"], [187, 2, 1, "", "multiprocessing"], [187, 2, 1, "", "native_array"], [187, 2, 1, "", "nonzero"], [187, 2, 1, "", "num_arrays_in_memory"], [187, 2, 1, "", "num_cpu_cores"], [187, 2, 1, "", "num_gpus"], [187, 2, 1, "", "num_ivy_arrays_on_dev"], [187, 2, 1, "", "one_hot"], [187, 2, 1, "", "ones"], [187, 2, 1, "", "ones_like"], [187, 2, 1, "", "outer"], [187, 2, 1, "", "outputs_to_ivy_arrays"], [187, 2, 1, "", "percent_used_mem_on_dev"], [187, 2, 1, "", "pinv"], [187, 2, 1, "", "print_all_arrays_in_memory"], [187, 2, 1, "", "print_all_ivy_arrays_on_dev"], [187, 2, 1, "", "promote_types"], [187, 2, 1, "", "qr"], [187, 2, 1, "", "queue_timeout"], [187, 2, 1, "", "randint"], [187, 2, 1, "", "random_normal"], [187, 2, 1, "", "result_type"], [187, 2, 1, "", "scaled_dot_product_attention"], [187, 2, 1, "", "scatter_flat"], [187, 2, 1, "", "scatter_nd"], [187, 2, 1, "", "seed"], [187, 2, 1, "", "set_default_device"], [187, 2, 1, "", "set_default_dtype"], [187, 2, 1, "", "set_default_float_dtype"], [187, 2, 1, "", "set_default_int_dtype"], [187, 2, 1, "", "set_min_base"], [187, 2, 1, "", "set_min_denominator"], [187, 2, 1, "", "set_queue_timeout"], [187, 2, 1, "", "set_split_factor"], [187, 2, 1, "", "set_tmp_dir"], [187, 2, 1, "", "set_with_grads"], [187, 2, 1, "", "shape_to_tuple"], [187, 2, 1, "", "slogdet"], [187, 2, 1, "", "solve"], [187, 2, 1, "", "split_factor"], [187, 2, 1, "", "split_func_call"], [187, 2, 1, "", "stable_divide"], [187, 2, 1, "", "stable_pow"], [187, 2, 1, "", "static_acos"], [187, 2, 1, "", "static_acosh"], [187, 2, 1, "", "static_all"], [187, 2, 1, "", "static_any"], [187, 2, 1, "", "static_arange"], [187, 2, 1, "", "static_arg_info"], [187, 2, 1, "", "static_arg_names"], [187, 2, 1, "", "static_argmax"], [187, 2, 1, "", "static_argmin"], [187, 2, 1, "", "static_array"], [187, 2, 1, "", "static_array_equal"], [187, 2, 1, "", "static_arrays_equal"], [187, 2, 1, "", "static_as_ivy_dev"], [187, 2, 1, "", "static_as_ivy_dtype"], [187, 2, 1, "", "static_as_native_dev"], [187, 2, 1, "", "static_as_native_dtype"], [187, 2, 1, "", "static_asarray"], [187, 2, 1, "", "static_asin"], [187, 2, 1, "", "static_asinh"], [187, 2, 1, "", "static_assert_supports_inplace"], [187, 2, 1, "", "static_astype"], [187, 2, 1, "", "static_atan"], [187, 2, 1, "", "static_atan2"], [187, 2, 1, "", "static_atanh"], [187, 2, 1, "", "static_bitwise_and"], [187, 2, 1, "", "static_bitwise_invert"], [187, 2, 1, "", "static_bitwise_left_shift"], [187, 2, 1, "", "static_bitwise_or"], [187, 2, 1, "", "static_bitwise_right_shift"], [187, 2, 1, "", "static_bitwise_xor"], [187, 2, 1, "", "static_broadcast_arrays"], [187, 2, 1, "", "static_broadcast_to"], [187, 2, 1, "", "static_cache_fn"], [187, 2, 1, "", "static_ceil"], [187, 2, 1, "", "static_cholesky"], [187, 2, 1, "", "static_clear_mem_on_dev"], [187, 2, 1, "", "static_clip_matrix_norm"], [187, 2, 1, "", "static_clip_vector_norm"], [187, 2, 1, "", "static_closest_valid_dtype"], [187, 2, 1, "", "static_concat"], [187, 2, 1, "", "static_constant_pad"], [187, 2, 1, "", "static_container_types"], [187, 2, 1, "", "static_conv1d"], [187, 2, 1, "", "static_conv1d_transpose"], [187, 2, 1, "", "static_conv2d"], [187, 2, 1, "", "static_conv2d_transpose"], [187, 2, 1, "", "static_conv3d"], [187, 2, 1, "", "static_conv3d_transpose"], [187, 2, 1, "", "static_copy_array"], [187, 2, 1, "", "static_cos"], [187, 2, 1, "", "static_cosh"], [187, 2, 1, "", "static_cross"], [187, 2, 1, "", "static_cumprod"], [187, 2, 1, "", "static_cumsum"], [187, 2, 1, "", "static_current_backend"], [187, 2, 1, "", "static_current_backend_str"], [187, 2, 1, "", "static_default"], [187, 2, 1, "", "static_default_device"], [187, 2, 1, "", "static_default_dtype"], [187, 2, 1, "", "static_default_float_dtype"], [187, 2, 1, "", "static_default_int_dtype"], [187, 2, 1, "", "static_depthwise_conv2d"], [187, 2, 1, "", "static_det"], [187, 2, 1, "", "static_dev"], [187, 2, 1, "", "static_dev_clone"], [187, 2, 1, "", "static_dev_clone_array"], [187, 2, 1, "", "static_dev_clone_iter"], [187, 2, 1, "", "static_dev_clone_nest"], [187, 2, 1, "", "static_dev_dist"], [187, 2, 1, "", "static_dev_dist_array"], [187, 2, 1, "", "static_dev_dist_iter"], [187, 2, 1, "", "static_dev_dist_nest"], [187, 2, 1, "", "static_dev_unify"], [187, 2, 1, "", "static_dev_unify_array"], [187, 2, 1, "", "static_dev_unify_iter"], [187, 2, 1, "", "static_dev_unify_nest"], [187, 2, 1, "", "static_dev_util"], [187, 2, 1, "", "static_diagonal"], [187, 2, 1, "", "static_dropout"], [187, 2, 1, "", "static_dtype"], [187, 2, 1, "", "static_dtype_bits"], [187, 2, 1, "", "static_eigh"], [187, 2, 1, "", "static_eigvalsh"], [187, 2, 1, "", "static_einops_rearrange"], [187, 2, 1, "", "static_einops_reduce"], [187, 2, 1, "", "static_einops_repeat"], [187, 2, 1, "", "static_einsum"], [187, 2, 1, "", "static_empty"], [187, 2, 1, "", "static_empty_like"], [187, 2, 1, "", "static_equal"], [187, 2, 1, "", "static_erf"], [187, 2, 1, "", "static_execute_with_gradients"], [187, 2, 1, "", "static_exists"], [187, 2, 1, "", "static_exp"], [187, 2, 1, "", "static_expand_dims"], [187, 2, 1, "", "static_expm1"], [187, 2, 1, "", "static_eye"], [187, 2, 1, "", "static_finfo"], [187, 2, 1, "", "static_flip"], [187, 2, 1, "", "static_floor"], [187, 2, 1, "", "static_floor_divide"], [187, 2, 1, "", "static_floormod"], [187, 2, 1, "", "static_fourier_encode"], [187, 2, 1, "", "static_from_dlpack"], [187, 2, 1, "", "static_full"], [187, 2, 1, "", "static_full_like"], [187, 2, 1, "", "static_function_supported_dtypes"], [187, 2, 1, "", "static_function_unsupported_dtypes"], [187, 2, 1, "", "static_gather"], [187, 2, 1, "", "static_gelu"], [187, 2, 1, "", "static_get_all_arrays_in_memory"], [187, 2, 1, "", "static_get_all_ivy_arrays_on_dev"], [187, 2, 1, "", "static_get_min_base"], [187, 2, 1, "", "static_get_min_denominator"], [187, 2, 1, "", "static_get_num_dims"], [187, 2, 1, "", "static_get_referrers_recursive"], [187, 2, 1, "", "static_gpu_is_available"], [187, 2, 1, "", "static_greater"], [187, 2, 1, "", "static_greater_equal"], [187, 2, 1, "", "static_handle_nestable"], [187, 2, 1, "", "static_handle_out_argument"], [187, 2, 1, "", "static_has_nans"], [187, 2, 1, "", "static_iinfo"], [187, 2, 1, "", "static_indices_where"], [187, 2, 1, "", "static_infer_device"], [187, 2, 1, "", "static_infer_dtype"], [187, 2, 1, "", "static_inplace_arrays_supported"], [187, 2, 1, "", "static_inplace_decrement"], [187, 2, 1, "", "static_inplace_increment"], [187, 2, 1, "", "static_inplace_update"], [187, 2, 1, "", "static_inplace_variables_supported"], [187, 2, 1, "", "static_inputs_to_native_arrays"], [187, 2, 1, "", "static_inv"], [187, 2, 1, "", "static_invalid_dtype"], [187, 2, 1, "", "static_is_array"], [187, 2, 1, "", "static_is_float_dtype"], [187, 2, 1, "", "static_is_int_dtype"], [187, 2, 1, "", "static_is_ivy_array"], [187, 2, 1, "", "static_is_ivy_container"], [187, 2, 1, "", "static_is_native_array"], [187, 2, 1, "", "static_is_variable"], [187, 2, 1, "", "static_isfinite"], [187, 2, 1, "", "static_isinf"], [187, 2, 1, "", "static_isnan"], [187, 2, 1, "", "static_layer_norm"], [187, 2, 1, "", "static_leaky_relu"], [187, 2, 1, "", "static_less"], [187, 2, 1, "", "static_less_equal"], [187, 2, 1, "", "static_linear"], [187, 2, 1, "", "static_linspace"], [187, 2, 1, "", "static_log"], [187, 2, 1, "", "static_log10"], [187, 2, 1, "", "static_log1p"], [187, 2, 1, "", "static_log2"], [187, 2, 1, "", "static_logaddexp"], [187, 2, 1, "", "static_logical_and"], [187, 2, 1, "", "static_logical_not"], [187, 2, 1, "", "static_logical_or"], [187, 2, 1, "", "static_logical_xor"], [187, 2, 1, "", "static_logspace"], [187, 2, 1, "", "static_lstm_update"], [187, 2, 1, "", "static_match_kwargs"], [187, 2, 1, "", "static_matmul"], [187, 2, 1, "", "static_matrix_norm"], [187, 2, 1, "", "static_matrix_power"], [187, 2, 1, "", "static_matrix_rank"], [187, 2, 1, "", "static_matrix_transpose"], [187, 2, 1, "", "static_max"], [187, 2, 1, "", "static_maximum"], [187, 2, 1, "", "static_mean"], [187, 2, 1, "", "static_meshgrid"], [187, 2, 1, "", "static_min"], [187, 2, 1, "", "static_minimum"], [187, 2, 1, "", "static_multi_head_attention"], [187, 2, 1, "", "static_multinomial"], [187, 2, 1, "", "static_multiprocessing"], [187, 2, 1, "", "static_native_array"], [187, 2, 1, "", "static_negative"], [187, 2, 1, "", "static_nonzero"], [187, 2, 1, "", "static_not_equal"], [187, 2, 1, "", "static_num_arrays_in_memory"], [187, 2, 1, "", "static_num_cpu_cores"], [187, 2, 1, "", "static_num_gpus"], [187, 2, 1, "", "static_num_ivy_arrays_on_dev"], [187, 2, 1, "", "static_one_hot"], [187, 2, 1, "", "static_ones"], [187, 2, 1, "", "static_ones_like"], [187, 2, 1, "", "static_outer"], [187, 2, 1, "", "static_outputs_to_ivy_arrays"], [187, 2, 1, "", "static_percent_used_mem_on_dev"], [187, 2, 1, "", "static_permute_dims"], [187, 2, 1, "", "static_pinv"], [187, 2, 1, "", "static_positive"], [187, 2, 1, "", "static_pow"], [187, 2, 1, "", "static_print_all_arrays_in_memory"], [187, 2, 1, "", "static_print_all_ivy_arrays_on_dev"], [187, 2, 1, "", "static_prod"], [187, 2, 1, "", "static_promote_types"], [187, 2, 1, "", "static_qr"], [187, 2, 1, "", "static_queue_timeout"], [187, 2, 1, "", "static_random_normal"], [187, 2, 1, "", "static_relu"], [187, 2, 1, "", "static_remainder"], [187, 2, 1, "", "static_repeat"], [187, 2, 1, "", "static_reshape"], [187, 2, 1, "", "static_result_type"], [187, 2, 1, "", "static_round"], [187, 2, 1, "", "static_scaled_dot_product_attention"], [187, 2, 1, "", "static_scatter_flat"], [187, 2, 1, "", "static_scatter_nd"], [187, 2, 1, "", "static_seed"], [187, 2, 1, "", "static_set_default_device"], [187, 2, 1, "", "static_set_default_dtype"], [187, 2, 1, "", "static_set_default_float_dtype"], [187, 2, 1, "", "static_set_default_int_dtype"], [187, 2, 1, "", "static_set_min_base"], [187, 2, 1, "", "static_set_min_denominator"], [187, 2, 1, "", "static_set_queue_timeout"], [187, 2, 1, "", "static_set_split_factor"], [187, 2, 1, "", "static_set_tmp_dir"], [187, 2, 1, "", "static_set_with_grads"], [187, 2, 1, "", "static_shape"], [187, 2, 1, "", "static_shape_to_tuple"], [187, 2, 1, "", "static_shuffle"], [187, 2, 1, "", "static_sigmoid"], [187, 2, 1, "", "static_sign"], [187, 2, 1, "", "static_sin"], [187, 2, 1, "", "static_sinh"], [187, 2, 1, "", "static_slogdet"], [187, 2, 1, "", "static_softmax"], [187, 2, 1, "", "static_softplus"], [187, 2, 1, "", "static_solve"], [187, 2, 1, "", "static_split"], [187, 2, 1, "", "static_split_factor"], [187, 2, 1, "", "static_split_func_call"], [187, 2, 1, "", "static_sqrt"], [187, 2, 1, "", "static_square"], [187, 2, 1, "", "static_squeeze"], [187, 2, 1, "", "static_stable_divide"], [187, 2, 1, "", "static_stable_pow"], [187, 2, 1, "", "static_stack"], [187, 2, 1, "", "static_std"], [187, 2, 1, "", "static_stop_gradient"], [187, 2, 1, "", "static_sum"], [187, 2, 1, "", "static_supports_inplace"], [187, 2, 1, "", "static_svd"], [187, 2, 1, "", "static_svdvals"], [187, 2, 1, "", "static_swapaxes"], [187, 2, 1, "", "static_tensordot"], [187, 2, 1, "", "static_tile"], [187, 2, 1, "", "static_tmp_dir"], [187, 2, 1, "", "static_to_device"], [187, 2, 1, "", "static_to_list"], [187, 2, 1, "", "static_to_native_arrays_and_back"], [187, 2, 1, "", "static_to_numpy"], [187, 2, 1, "", "static_to_scalar"], [187, 2, 1, "", "static_total_mem_on_dev"], [187, 2, 1, "", "static_tpu_is_available"], [187, 2, 1, "", "static_trace"], [187, 2, 1, "", "static_tril"], [187, 2, 1, "", "static_triu"], [187, 2, 1, "", "static_trunc"], [187, 2, 1, "", "static_try_else_none"], [187, 2, 1, "", "static_type_promote_arrays"], [187, 2, 1, "", "static_unique_all"], [187, 2, 1, "", "static_unique_counts"], [187, 2, 1, "", "static_unique_inverse"], [187, 2, 1, "", "static_unique_values"], [187, 2, 1, "", "static_unset_default_device"], [187, 2, 1, "", "static_unset_default_dtype"], [187, 2, 1, "", "static_unset_default_float_dtype"], [187, 2, 1, "", "static_unset_default_int_dtype"], [187, 2, 1, "", "static_unset_with_grads"], [187, 2, 1, "", "static_unstack"], [187, 2, 1, "", "static_used_mem_on_dev"], [187, 2, 1, "", "static_valid_dtype"], [187, 2, 1, "", "static_value_is_nan"], [187, 2, 1, "", "static_var"], [187, 2, 1, "", "static_variable"], [187, 2, 1, "", "static_variable_data"], [187, 2, 1, "", "static_vecdot"], [187, 2, 1, "", "static_vector_norm"], [187, 2, 1, "", "static_vector_to_skew_symmetric_matrix"], [187, 2, 1, "", "static_where"], [187, 2, 1, "", "static_with_grads"], [187, 2, 1, "", "static_zero_pad"], [187, 2, 1, "", "static_zeros"], [187, 2, 1, "", "static_zeros_like"], [187, 2, 1, "", "stop_gradient"], [187, 2, 1, "", "supports_inplace"], [187, 2, 1, "", "svd"], [187, 2, 1, "", "svdvals"], [187, 2, 1, "", "tensordot"], [187, 2, 1, "", "tmp_dir"], [187, 2, 1, "", "to_native_arrays_and_back"], [187, 2, 1, "", "to_scalar"], [187, 2, 1, "", "total_mem_on_dev"], [187, 2, 1, "", "tpu_is_available"], [187, 2, 1, "", "trace"], [187, 2, 1, "", "tril"], [187, 2, 1, "", "triu"], [187, 2, 1, "", "try_else_none"], [187, 2, 1, "", "type_promote_arrays"], [187, 2, 1, "", "unique_all"], [187, 2, 1, "", "unique_counts"], [187, 2, 1, "", "unique_inverse"], [187, 2, 1, "", "unique_values"], [187, 2, 1, "", "unset_default_device"], [187, 2, 1, "", "unset_default_dtype"], [187, 2, 1, "", "unset_default_float_dtype"], [187, 2, 1, "", "unset_default_int_dtype"], [187, 2, 1, "", "unset_with_grads"], [187, 2, 1, "", "used_mem_on_dev"], [187, 2, 1, "", "valid_dtype"], [187, 2, 1, "", "value_is_nan"], [187, 2, 1, "", "variable"], [187, 2, 1, "", "variable_data"], [187, 2, 1, "", "vecdot"], [187, 2, 1, "", "vector_to_skew_symmetric_matrix"], [187, 2, 1, "", "where"], [187, 2, 1, "", "with_grads"], [187, 2, 1, "", "zeros"], [187, 2, 1, "", "zeros_like"]], "ivy.container.container.MultiDevContainer": [[188, 2, 1, "", "__init__"], [188, 2, 1, "", "at_dev"], [188, 2, 1, "", "at_devs"]], "ivy.container.container_methods": [[189, 3, 1, "", "__add__"], [189, 3, 1, "", "__init__"], [189, 3, 1, "", "__radd__"], [550, 3, 1, "", "abs"], [557, 3, 1, "", "acos"], [621, 3, 1, "", "acosh"], [861, 3, 1, "", "adam_step"], [865, 3, 1, "", "adam_update"], [695, 3, 1, "", "add"], [196, 3, 1, "", "add_ivy_container_instance_methods"], [1147, 3, 1, "", "all"], [786, 3, 1, "", "all_equal"], [1151, 3, 1, "", "any"], [1103, 3, 1, "", "argsort"], [568, 3, 1, "", "asin"], [572, 3, 1, "", "asinh"], [203, 3, 1, "", "at_dev"], [204, 3, 1, "", "at_devs"], [778, 3, 1, "", "atan"], [580, 3, 1, "", "atan2"], [778, 3, 1, "", "atanh"], [978, 3, 1, "", "binary_cross_entropy"], [588, 3, 1, "", "bitwise_and"], [592, 3, 1, "", "bitwise_invert"], [596, 3, 1, "", "bitwise_left_shift"], [600, 3, 1, "", "bitwise_or"], [604, 3, 1, "", "bitwise_right_shift"], [608, 3, 1, "", "bitwise_xor"], [471, 3, 1, "", "can_cast"], [612, 3, 1, "", "ceil"], [994, 3, 1, "", "clip"], [797, 3, 1, "", "clip_vector_norm"], [999, 3, 1, "", "concat"], [1003, 3, 1, "", "constant_pad"], [621, 3, 1, "", "cos"], [620, 3, 1, "", "cosh"], [983, 3, 1, "", "cross_entropy"], [647, 3, 1, "", "divide"], [1139, 3, 1, "", "einsum"], [655, 3, 1, "", "equal"], [633, 3, 1, "", "erf"], [695, 3, 1, "", "exp"], [1007, 3, 1, "", "expand_dims"], [641, 3, 1, "", "expm1"], [1011, 3, 1, "", "flip"], [647, 3, 1, "", "floor"], [649, 3, 1, "", "floor_divide"], [814, 3, 1, "", "gather_nd"], [413, 3, 1, "", "gelu"], [870, 3, 1, "", "gradient_descent_update"], [655, 3, 1, "", "greater"], [657, 3, 1, "", "greater_equal"], [661, 3, 1, "", "isfinite"], [665, 3, 1, "", "isinf"], [669, 3, 1, "", "isnan"], [875, 3, 1, "", "lamb_update"], [879, 3, 1, "", "lars_update"], [1076, 3, 1, "", "layer_norm"], [422, 3, 1, "", "leaky_relu"], [673, 3, 1, "", "less"], [677, 3, 1, "", "less_equal"], [681, 3, 1, "", "log"], [685, 3, 1, "", "log10"], [689, 3, 1, "", "log1p"], [693, 3, 1, "", "log2"], [697, 3, 1, "", "logaddexp"], [701, 3, 1, "", "logical_and"], [705, 3, 1, "", "logical_not"], [709, 3, 1, "", "logical_or"], [713, 3, 1, "", "logical_xor"], [929, 3, 1, "", "matmul"], [1118, 3, 1, "", "max"], [1122, 3, 1, "", "mean"], [1126, 3, 1, "", "min"], [719, 3, 1, "", "multiply"], [724, 3, 1, "", "negative"], [728, 3, 1, "", "not_equal"], [883, 3, 1, "", "optimizer_update"], [1015, 3, 1, "", "permute_dims"], [732, 3, 1, "", "positive"], [736, 3, 1, "", "pow"], [1130, 3, 1, "", "prod"], [1085, 3, 1, "", "random_uniform"], [421, 3, 1, "", "relu"], [740, 3, 1, "", "remainder"], [1019, 3, 1, "", "repeat"], [1023, 3, 1, "", "reshape"], [1027, 3, 1, "", "roll"], [744, 3, 1, "", "round"], [425, 3, 1, "", "sigmoid"], [748, 3, 1, "", "sign"], [752, 3, 1, "", "sin"], [756, 3, 1, "", "sinh"], [429, 3, 1, "", "softmax"], [432, 3, 1, "", "softplus"], [1108, 3, 1, "", "sort"], [988, 3, 1, "", "sparse_cross_entropy"], [760, 3, 1, "", "sqrt"], [764, 3, 1, "", "square"], [1033, 3, 1, "", "squeeze"], [1037, 3, 1, "", "stack"], [552, 3, 1, "", "static_abs"], [863, 3, 1, "", "static_adam_step"], [867, 3, 1, "", "static_adam_update"], [695, 3, 1, "", "static_add"], [788, 3, 1, "", "static_all_equal"], [1105, 3, 1, "", "static_argsort"], [980, 3, 1, "", "static_binary_cross_entropy"], [473, 3, 1, "", "static_can_cast"], [996, 3, 1, "", "static_clip"], [985, 3, 1, "", "static_cross_entropy"], [647, 3, 1, "", "static_divide"], [816, 3, 1, "", "static_gather_nd"], [872, 3, 1, "", "static_gradient_descent_update"], [877, 3, 1, "", "static_lamb_update"], [881, 3, 1, "", "static_lars_update"], [721, 3, 1, "", "static_multiply"], [885, 3, 1, "", "static_optimizer_update"], [1082, 3, 1, "", "static_randint"], [1087, 3, 1, "", "static_random_uniform"], [1029, 3, 1, "", "static_roll"], [1110, 3, 1, "", "static_sort"], [990, 3, 1, "", "static_sparse_cross_entropy"], [767, 3, 1, "", "static_subtract"], [778, 3, 1, "", "static_tan"], [777, 3, 1, "", "static_tanh"], [1134, 3, 1, "", "std"], [769, 3, 1, "", "subtract"], [1138, 3, 1, "", "sum"], [1041, 3, 1, "", "swapaxes"], [778, 3, 1, "", "tan"], [436, 3, 1, "", "tanh"], [1045, 3, 1, "", "tile"], [781, 3, 1, "", "trunc"], [1142, 3, 1, "", "var"], [1049, 3, 1, "", "zero_pad"]], "ivy.container.creation": [[324, 1, 1, "", "ContainerWithCreation"]], "ivy.container.data_type": [[326, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[326, 2, 1, "", "can_cast"], [326, 2, 1, "", "static_can_cast"]], "ivy.container.device": [[328, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[330, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[330, 2, 1, "", "abs"], [330, 2, 1, "", "acos"], [330, 2, 1, "", "acosh"], [330, 2, 1, "", "add"], [330, 2, 1, "", "asin"], [330, 2, 1, "", "asinh"], [330, 2, 1, "", "atan"], [330, 2, 1, "", "atan2"], [330, 2, 1, "", "atanh"], [330, 2, 1, "", "bitwise_and"], [330, 2, 1, "", "bitwise_invert"], [330, 2, 1, "", "bitwise_left_shift"], [330, 2, 1, "", "bitwise_or"], [330, 2, 1, "", "bitwise_right_shift"], [330, 2, 1, "", "bitwise_xor"], [330, 2, 1, "", "ceil"], [330, 2, 1, "", "cos"], [330, 2, 1, "", "cosh"], [330, 2, 1, "", "divide"], [330, 2, 1, "", "equal"], [330, 2, 1, "", "erf"], [330, 2, 1, "", "exp"], [330, 2, 1, "", "expm1"], [330, 2, 1, "", "floor"], [330, 2, 1, "", "floor_divide"], [330, 2, 1, "", "greater"], [330, 2, 1, "", "greater_equal"], [330, 2, 1, "", "isfinite"], [330, 2, 1, "", "isinf"], [330, 2, 1, "", "isnan"], [330, 2, 1, "", "less"], [330, 2, 1, "", "less_equal"], [330, 2, 1, "", "log"], [330, 2, 1, "", "log10"], [330, 2, 1, "", "log1p"], [330, 2, 1, "", "log2"], [330, 2, 1, "", "logaddexp"], [330, 2, 1, "", "logical_and"], [330, 2, 1, "", "logical_not"], [330, 2, 1, "", "logical_or"], [330, 2, 1, "", "logical_xor"], [330, 2, 1, "", "multiply"], [330, 2, 1, "", "negative"], [330, 2, 1, "", "not_equal"], [330, 2, 1, "", "positive"], [330, 2, 1, "", "pow"], [330, 2, 1, "", "remainder"], [330, 2, 1, "", "round"], [330, 2, 1, "", "sign"], [330, 2, 1, "", "sin"], [330, 2, 1, "", "sinh"], [330, 2, 1, "", "sqrt"], [330, 2, 1, "", "square"], [330, 2, 1, "", "static_abs"], [330, 2, 1, "", "static_add"], [330, 2, 1, "", "static_divide"], [330, 2, 1, "", "static_multiply"], [330, 2, 1, "", "static_subtract"], [330, 2, 1, "", "static_tan"], [330, 2, 1, "", "static_tanh"], [330, 2, 1, "", "subtract"], [330, 2, 1, "", "tan"], [330, 2, 1, "", "tanh"], [330, 2, 1, "", "trunc"]], "ivy.container.general": [[332, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[332, 2, 1, "", "all_equal"], [332, 2, 1, "", "clip_vector_norm"], [332, 2, 1, "", "gather_nd"], [332, 2, 1, "", "static_all_equal"], [332, 2, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[334, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[334, 2, 1, "", "adam_step"], [334, 2, 1, "", "adam_update"], [334, 2, 1, "", "gradient_descent_update"], [334, 2, 1, "", "lamb_update"], [334, 2, 1, "", "lars_update"], [334, 2, 1, "", "optimizer_update"], [334, 2, 1, "", "static_adam_step"], [334, 2, 1, "", "static_adam_update"], [334, 2, 1, "", "static_gradient_descent_update"], [334, 2, 1, "", "static_lamb_update"], [334, 2, 1, "", "static_lars_update"], [334, 2, 1, "", "static_optimizer_update"]], "ivy.container.image": [[336, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[338, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[340, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[340, 2, 1, "", "matmul"]], "ivy.container.losses": [[342, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[342, 2, 1, "", "binary_cross_entropy"], [342, 2, 1, "", "cross_entropy"], [342, 2, 1, "", "sparse_cross_entropy"], [342, 2, 1, "", "static_binary_cross_entropy"], [342, 2, 1, "", "static_cross_entropy"], [342, 2, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[344, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[344, 2, 1, "", "clip"], [344, 2, 1, "", "concat"], [344, 2, 1, "", "constant_pad"], [344, 2, 1, "", "expand_dims"], [344, 2, 1, "", "flip"], [344, 2, 1, "", "permute_dims"], [344, 2, 1, "", "repeat"], [344, 2, 1, "", "reshape"], [344, 2, 1, "", "roll"], [344, 2, 1, "", "squeeze"], [344, 2, 1, "", "stack"], [344, 2, 1, "", "static_clip"], [344, 2, 1, "", "static_roll"], [344, 2, 1, "", "swapaxes"], [344, 2, 1, "", "tile"], [344, 2, 1, "", "zero_pad"]], "ivy.container.norms": [[346, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[346, 2, 1, "", "layer_norm"]], "ivy.container.random": [[348, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[348, 2, 1, "", "random_uniform"], [348, 2, 1, "", "static_randint"], [348, 2, 1, "", "static_random_uniform"]], "ivy.container.searching": [[350, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[352, 1, 1, "", "ContainerWithSet"]], "ivy.container.sorting": [[354, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[354, 2, 1, "", "argsort"], [354, 2, 1, "", "sort"], [354, 2, 1, "", "static_argsort"], [354, 2, 1, "", "static_sort"]], "ivy.container.statistical": [[356, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[356, 2, 1, "", "einsum"], [356, 2, 1, "", "max"], [356, 2, 1, "", "mean"], [356, 2, 1, "", "min"], [356, 2, 1, "", "prod"], [356, 2, 1, "", "std"], [356, 2, 1, "", "sum"], [356, 2, 1, "", "var"]], "ivy.container.utility": [[358, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[358, 2, 1, "", "all"], [358, 2, 1, "", "any"]], "ivy.container.wrapping": [[360, 3, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[401, 3, 1, "", "handle_nestable"], [402, 3, 1, "", "handle_out_argument"], [403, 3, 1, "", "infer_device"], [404, 3, 1, "", "infer_dtype"], [405, 3, 1, "", "inputs_to_ivy_arrays"], [406, 3, 1, "", "inputs_to_native_arrays"], [407, 3, 1, "", "outputs_to_ivy_arrays"], [408, 3, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[410, 0, 0, "-", "activations"], [438, 0, 0, "-", "compilation"], [440, 0, 0, "-", "constants"], [441, 0, 0, "-", "creation"], [460, 0, 0, "-", "data_type"], [497, 0, 0, "-", "device"], [547, 0, 0, "-", "elementwise"], [783, 0, 0, "-", "general"], [857, 0, 0, "-", "gradients"], [892, 0, 0, "-", "layers"], [905, 0, 0, "-", "linear_algebra"], [975, 0, 0, "-", "losses"], [991, 0, 0, "-", "manipulation"], [1051, 0, 0, "-", "meta"], [1055, 0, 0, "-", "nest"], [1073, 0, 0, "-", "norms"], [1078, 0, 0, "-", "random"], [1090, 0, 0, "-", "searching"], [1095, 0, 0, "-", "set"], [1100, 0, 0, "-", "sorting"], [1111, 0, 0, "-", "statistical"], [1144, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[414, 3, 1, "", "gelu"], [422, 3, 1, "", "leaky_relu"], [419, 3, 1, "", "relu"], [426, 3, 1, "", "sigmoid"], [430, 3, 1, "", "softmax"], [433, 3, 1, "", "softplus"], [437, 3, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[439, 3, 1, "", "compile"]], "ivy.functional.ivy.constants": [[440, 5, 1, "", "e"], [440, 5, 1, "", "inf"], [440, 5, 1, "", "nan"], [440, 5, 1, "", "newaxis"], [440, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[442, 3, 1, "", "arange"], [441, 3, 1, "", "array"], [443, 3, 1, "", "asarray"], [444, 3, 1, "", "empty"], [445, 3, 1, "", "empty_like"], [446, 3, 1, "", "eye"], [447, 3, 1, "", "from_dlpack"], [448, 3, 1, "", "full"], [449, 3, 1, "", "full_like"], [450, 3, 1, "", "linspace"], [451, 3, 1, "", "logspace"], [452, 3, 1, "", "meshgrid"], [453, 3, 1, "", "native_array"], [454, 3, 1, "", "ones"], [455, 3, 1, "", "ones_like"], [456, 3, 1, "", "tril"], [457, 3, 1, "", "triu"], [458, 3, 1, "", "zeros"], [459, 3, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[460, 1, 1, "", "DefaultDtype"], [460, 1, 1, "", "DefaultFloatDtype"], [460, 1, 1, "", "DefaultIntDtype"], [464, 3, 1, "", "as_ivy_dtype"], [465, 3, 1, "", "as_native_dtype"], [466, 3, 1, "", "astype"], [467, 3, 1, "", "broadcast_arrays"], [468, 3, 1, "", "broadcast_to"], [472, 3, 1, "", "can_cast"], [474, 3, 1, "", "closest_valid_dtype"], [475, 3, 1, "", "default_dtype"], [476, 3, 1, "", "default_float_dtype"], [477, 3, 1, "", "default_int_dtype"], [478, 3, 1, "", "dtype"], [479, 3, 1, "", "dtype_bits"], [480, 3, 1, "", "finfo"], [481, 3, 1, "", "function_supported_dtypes"], [482, 3, 1, "", "function_unsupported_dtypes"], [483, 3, 1, "", "iinfo"], [484, 3, 1, "", "invalid_dtype"], [485, 3, 1, "", "is_float_dtype"], [486, 3, 1, "", "is_int_dtype"], [487, 3, 1, "", "promote_types"], [488, 3, 1, "", "result_type"], [489, 3, 1, "", "set_default_dtype"], [490, 3, 1, "", "set_default_float_dtype"], [491, 3, 1, "", "set_default_int_dtype"], [492, 3, 1, "", "type_promote_arrays"], [493, 3, 1, "", "unset_default_dtype"], [494, 3, 1, "", "unset_default_float_dtype"], [495, 3, 1, "", "unset_default_int_dtype"], [496, 3, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[460, 2, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[460, 2, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[460, 2, 1, "", "__init__"]], "ivy.functional.ivy.device": [[497, 1, 1, "", "DefaultDevice"], [499, 1, 1, "", "DevClonedItem"], [500, 1, 1, "", "DevClonedIter"], [501, 1, 1, "", "DevClonedNest"], [502, 1, 1, "", "DevDistItem"], [503, 1, 1, "", "DevDistIter"], [504, 1, 1, "", "DevDistNest"], [497, 1, 1, "", "DevManager"], [506, 1, 1, "", "DevMapper"], [507, 1, 1, "", "DevMapperMultiProc"], [497, 1, 1, "", "MultiDev"], [509, 1, 1, "", "MultiDevItem"], [510, 1, 1, "", "MultiDevIter"], [511, 1, 1, "", "MultiDevNest"], [512, 1, 1, "", "Profiler"], [513, 3, 1, "", "as_ivy_dev"], [514, 3, 1, "", "as_native_dev"], [515, 3, 1, "", "clear_mem_on_dev"], [516, 3, 1, "", "default_device"], [517, 3, 1, "", "dev"], [518, 3, 1, "", "dev_clone"], [519, 3, 1, "", "dev_clone_array"], [520, 3, 1, "", "dev_clone_iter"], [521, 3, 1, "", "dev_clone_nest"], [522, 3, 1, "", "dev_dist"], [523, 3, 1, "", "dev_dist_array"], [524, 3, 1, "", "dev_dist_iter"], [525, 3, 1, "", "dev_dist_nest"], [526, 3, 1, "", "dev_unify"], [527, 3, 1, "", "dev_unify_array"], [528, 3, 1, "", "dev_unify_iter"], [529, 3, 1, "", "dev_unify_nest"], [530, 3, 1, "", "dev_util"], [531, 3, 1, "", "get_all_ivy_arrays_on_dev"], [532, 3, 1, "", "gpu_is_available"], [533, 3, 1, "", "num_cpu_cores"], [534, 3, 1, "", "num_gpus"], [535, 3, 1, "", "num_ivy_arrays_on_dev"], [536, 3, 1, "", "percent_used_mem_on_dev"], [537, 3, 1, "", "print_all_ivy_arrays_on_dev"], [538, 3, 1, "", "set_default_device"], [539, 3, 1, "", "set_split_factor"], [540, 3, 1, "", "split_factor"], [541, 3, 1, "", "split_func_call"], [542, 3, 1, "", "to_device"], [543, 3, 1, "", "total_mem_on_dev"], [544, 3, 1, "", "tpu_is_available"], [545, 3, 1, "", "unset_default_device"], [546, 3, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[497, 2, 1, "", "__enter__"], [497, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[497, 2, 1, "", "__init__"], [497, 2, 1, "", "da_tune_step"], [497, 4, 1, "", "dim_size"], [497, 2, 1, "", "ds_tune_step"], [497, 2, 1, "", "map"], [497, 2, 1, "", "repeated_config_check"], [497, 4, 1, "", "tune_step"], [497, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[506, 2, 1, "", "__init__"], [506, 2, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[507, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[497, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[509, 2, 1, "", "__init__"], [509, 2, 1, "", "items"], [509, 2, 1, "", "keys"], [509, 4, 1, "", "shape"], [509, 2, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[510, 2, 1, "", "__init__"], [510, 2, 1, "", "at_dev"], [510, 2, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[511, 2, 1, "", "__init__"], [511, 2, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[512, 2, 1, "", "__init__"], [512, 2, 1, "", "start"], [512, 2, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[551, 3, 1, "", "abs"], [553, 3, 1, "", "acos"], [621, 3, 1, "", "acosh"], [561, 3, 1, "", "add"], [569, 3, 1, "", "asin"], [573, 3, 1, "", "asinh"], [574, 3, 1, "", "atan"], [581, 3, 1, "", "atan2"], [778, 3, 1, "", "atanh"], [589, 3, 1, "", "bitwise_and"], [593, 3, 1, "", "bitwise_invert"], [597, 3, 1, "", "bitwise_left_shift"], [601, 3, 1, "", "bitwise_or"], [605, 3, 1, "", "bitwise_right_shift"], [609, 3, 1, "", "bitwise_xor"], [613, 3, 1, "", "ceil"], [614, 3, 1, "", "cos"], [618, 3, 1, "", "cosh"], [622, 3, 1, "", "divide"], [627, 3, 1, "", "equal"], [634, 3, 1, "", "erf"], [635, 3, 1, "", "exp"], [642, 3, 1, "", "expm1"], [643, 3, 1, "", "floor"], [650, 3, 1, "", "floor_divide"], [651, 3, 1, "", "greater"], [658, 3, 1, "", "greater_equal"], [662, 3, 1, "", "isfinite"], [666, 3, 1, "", "isinf"], [670, 3, 1, "", "isnan"], [674, 3, 1, "", "less"], [678, 3, 1, "", "less_equal"], [682, 3, 1, "", "log"], [686, 3, 1, "", "log10"], [690, 3, 1, "", "log1p"], [694, 3, 1, "", "log2"], [698, 3, 1, "", "logaddexp"], [702, 3, 1, "", "logical_and"], [706, 3, 1, "", "logical_not"], [710, 3, 1, "", "logical_or"], [714, 3, 1, "", "logical_xor"], [715, 3, 1, "", "maximum"], [716, 3, 1, "", "minimum"], [720, 3, 1, "", "multiply"], [725, 3, 1, "", "negative"], [729, 3, 1, "", "not_equal"], [733, 3, 1, "", "positive"], [737, 3, 1, "", "pow"], [741, 3, 1, "", "remainder"], [745, 3, 1, "", "round"], [749, 3, 1, "", "sign"], [753, 3, 1, "", "sin"], [757, 3, 1, "", "sinh"], [761, 3, 1, "", "sqrt"], [765, 3, 1, "", "square"], [770, 3, 1, "", "subtract"], [771, 3, 1, "", "tan"], [776, 3, 1, "", "tanh"], [782, 3, 1, "", "trunc"]], "ivy.functional.ivy.general": [[787, 3, 1, "", "all_equal"], [789, 3, 1, "", "arg_info"], [790, 3, 1, "", "arg_names"], [791, 3, 1, "", "array_equal"], [792, 3, 1, "", "arrays_equal"], [793, 3, 1, "", "assert_supports_inplace"], [794, 3, 1, "", "cache_fn"], [795, 3, 1, "", "clip_matrix_norm"], [798, 3, 1, "", "clip_vector_norm"], [799, 3, 1, "", "container_types"], [800, 3, 1, "", "copy_array"], [801, 3, 1, "", "cumprod"], [802, 3, 1, "", "cumsum"], [803, 3, 1, "", "current_backend_str"], [804, 3, 1, "", "default"], [805, 3, 1, "", "einops_rearrange"], [806, 3, 1, "", "einops_reduce"], [807, 3, 1, "", "einops_repeat"], [808, 3, 1, "", "exists"], [809, 3, 1, "", "floormod"], [810, 3, 1, "", "fourier_encode"], [811, 3, 1, "", "gather"], [815, 3, 1, "", "gather_nd"], [817, 3, 1, "", "get_all_arrays_in_memory"], [818, 3, 1, "", "get_min_base"], [819, 3, 1, "", "get_min_denominator"], [820, 3, 1, "", "get_num_dims"], [821, 3, 1, "", "get_referrers_recursive"], [822, 3, 1, "", "has_nans"], [823, 3, 1, "", "indices_where"], [824, 3, 1, "", "inplace_arrays_supported"], [825, 3, 1, "", "inplace_decrement"], [826, 3, 1, "", "inplace_increment"], [827, 3, 1, "", "inplace_update"], [828, 3, 1, "", "inplace_variables_supported"], [829, 3, 1, "", "is_array"], [830, 3, 1, "", "is_ivy_array"], [831, 3, 1, "", "is_ivy_container"], [832, 3, 1, "", "is_native_array"], [833, 3, 1, "", "match_kwargs"], [834, 3, 1, "", "multiprocessing"], [835, 3, 1, "", "num_arrays_in_memory"], [836, 3, 1, "", "one_hot"], [837, 3, 1, "", "print_all_arrays_in_memory"], [838, 3, 1, "", "queue_timeout"], [839, 3, 1, "", "scatter_flat"], [840, 3, 1, "", "scatter_nd"], [841, 3, 1, "", "set_min_base"], [842, 3, 1, "", "set_min_denominator"], [843, 3, 1, "", "set_queue_timeout"], [844, 3, 1, "", "set_tmp_dir"], [845, 3, 1, "", "shape"], [846, 3, 1, "", "shape_to_tuple"], [847, 3, 1, "", "stable_divide"], [848, 3, 1, "", "stable_pow"], [849, 3, 1, "", "supports_inplace"], [850, 3, 1, "", "tmp_dir"], [851, 3, 1, "", "to_list"], [852, 3, 1, "", "to_numpy"], [853, 3, 1, "", "to_scalar"], [854, 3, 1, "", "try_else_none"], [855, 3, 1, "", "unstack"], [856, 3, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[857, 1, 1, "", "GradientTracking"], [862, 3, 1, "", "adam_step"], [866, 3, 1, "", "adam_update"], [868, 3, 1, "", "execute_with_gradients"], [871, 3, 1, "", "gradient_descent_update"], [873, 3, 1, "", "is_variable"], [876, 3, 1, "", "lamb_update"], [880, 3, 1, "", "lars_update"], [884, 3, 1, "", "optimizer_update"], [886, 3, 1, "", "set_with_grads"], [887, 3, 1, "", "stop_gradient"], [888, 3, 1, "", "unset_with_grads"], [889, 3, 1, "", "variable"], [890, 3, 1, "", "variable_data"], [891, 3, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[857, 2, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[893, 3, 1, "", "conv1d"], [894, 3, 1, "", "conv1d_transpose"], [895, 3, 1, "", "conv2d"], [896, 3, 1, "", "conv2d_transpose"], [897, 3, 1, "", "conv3d"], [898, 3, 1, "", "conv3d_transpose"], [899, 3, 1, "", "depthwise_conv2d"], [900, 3, 1, "", "dropout"], [901, 3, 1, "", "linear"], [902, 3, 1, "", "lstm_update"], [903, 3, 1, "", "multi_head_attention"], [904, 3, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[908, 3, 1, "", "cholesky"], [911, 3, 1, "", "cross"], [912, 3, 1, "", "det"], [917, 3, 1, "", "diagonal"], [920, 3, 1, "", "eigh"], [923, 3, 1, "", "eigvalsh"], [924, 3, 1, "", "inv"], [930, 3, 1, "", "matmul"], [933, 3, 1, "", "matrix_norm"], [934, 3, 1, "", "matrix_power"], [937, 3, 1, "", "matrix_rank"], [940, 3, 1, "", "matrix_transpose"], [943, 3, 1, "", "outer"], [946, 3, 1, "", "pinv"], [949, 3, 1, "", "qr"], [950, 3, 1, "", "slogdet"], [953, 3, 1, "", "solve"], [954, 3, 1, "", "svd"], [959, 3, 1, "", "svdvals"], [962, 3, 1, "", "tensordot"], [965, 3, 1, "", "trace"], [968, 3, 1, "", "vecdot"], [971, 3, 1, "", "vector_norm"], [974, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[979, 3, 1, "", "binary_cross_entropy"], [984, 3, 1, "", "cross_entropy"], [989, 3, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[995, 3, 1, "", "clip"], [1000, 3, 1, "", "concat"], [1004, 3, 1, "", "constant_pad"], [1008, 3, 1, "", "expand_dims"], [1012, 3, 1, "", "flip"], [1016, 3, 1, "", "permute_dims"], [1020, 3, 1, "", "repeat"], [1024, 3, 1, "", "reshape"], [1028, 3, 1, "", "roll"], [1030, 3, 1, "", "split"], [1034, 3, 1, "", "squeeze"], [1038, 3, 1, "", "stack"], [1042, 3, 1, "", "swapaxes"], [1046, 3, 1, "", "tile"], [1050, 3, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[1052, 3, 1, "", "fomaml_step"], [1053, 3, 1, "", "maml_step"], [1054, 3, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[1056, 3, 1, "", "all_nested_indices"], [1057, 3, 1, "", "copy_nest"], [1058, 3, 1, "", "index_nest"], [1059, 3, 1, "", "insert_into_nest_at_index"], [1060, 3, 1, "", "insert_into_nest_at_indices"], [1061, 3, 1, "", "map"], [1062, 3, 1, "", "map_nest_at_index"], [1063, 3, 1, "", "map_nest_at_indices"], [1064, 3, 1, "", "multi_index_nest"], [1065, 3, 1, "", "nested_any"], [1066, 3, 1, "", "nested_indices_where"], [1067, 3, 1, "", "nested_map"], [1068, 3, 1, "", "nested_multi_map"], [1069, 3, 1, "", "prune_nest_at_index"], [1070, 3, 1, "", "prune_nest_at_indices"], [1071, 3, 1, "", "set_nest_at_index"], [1072, 3, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[1077, 3, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[1079, 3, 1, "", "multinomial"], [1081, 3, 1, "", "randint"], [1083, 3, 1, "", "random_normal"], [1086, 3, 1, "", "random_uniform"], [1088, 3, 1, "", "seed"], [1089, 3, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[1091, 3, 1, "", "argmax"], [1092, 3, 1, "", "argmin"], [1093, 3, 1, "", "nonzero"], [1094, 3, 1, "", "where"]], "ivy.functional.ivy.set": [[1096, 3, 1, "", "unique_all"], [1097, 3, 1, "", "unique_counts"], [1098, 3, 1, "", "unique_inverse"], [1099, 3, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[1104, 3, 1, "", "argsort"], [1109, 3, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[1139, 3, 1, "", "einsum"], [1119, 3, 1, "", "max"], [1123, 3, 1, "", "mean"], [1127, 3, 1, "", "min"], [1131, 3, 1, "", "prod"], [1135, 3, 1, "", "std"], [1136, 3, 1, "", "sum"], [1143, 3, 1, "", "var"]], "ivy.functional.ivy.utility": [[1148, 3, 1, "", "all"], [1152, 3, 1, "", "any"]], "ivy.inspection": [[1157, 3, 1, "", "add_array_specs"], [1158, 3, 1, "", "fn_array_spec"]], "ivy.stateful": [[1160, 0, 0, "-", "activations"], [1163, 0, 0, "-", "converters"], [1165, 0, 0, "-", "initializers"], [1174, 0, 0, "-", "layers"], [1186, 0, 0, "-", "module"], [1188, 0, 0, "-", "norms"], [1190, 0, 0, "-", "optimizers"], [1196, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[1161, 1, 1, "", "GEGLU"], [1162, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[1161, 2, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[1162, 2, 1, "", "__init__"]], "ivy.stateful.converters": [[1164, 3, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[1165, 1, 1, "", "Constant"], [1167, 1, 1, "", "FirstLayerSiren"], [1168, 1, 1, "", "GlorotUniform"], [1165, 1, 1, "", "KaimingNormal"], [1170, 1, 1, "", "Ones"], [1171, 1, 1, "", "Siren"], [1165, 1, 1, "", "Uniform"], [1173, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[1165, 2, 1, "", "__init__"], [1165, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[1167, 2, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[1168, 2, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[1165, 2, 1, "", "__init__"], [1165, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[1170, 2, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[1171, 2, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[1165, 2, 1, "", "__init__"], [1165, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[1173, 2, 1, "", "__init__"]], "ivy.stateful.layers": [[1175, 1, 1, "", "Conv1D"], [1176, 1, 1, "", "Conv1DTranspose"], [1177, 1, 1, "", "Conv2D"], [1178, 1, 1, "", "Conv2DTranspose"], [1179, 1, 1, "", "Conv3D"], [1180, 1, 1, "", "Conv3DTranspose"], [1181, 1, 1, "", "DepthwiseConv2D"], [1182, 1, 1, "", "Dropout"], [1183, 1, 1, "", "LSTM"], [1184, 1, 1, "", "Linear"], [1185, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[1175, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[1176, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[1177, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[1178, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[1179, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[1180, 2, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[1181, 2, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[1182, 2, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[1183, 2, 1, "", "__init__"], [1183, 2, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[1184, 2, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[1185, 2, 1, "", "__init__"]], "ivy.stateful.module": [[1187, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[1187, 2, 1, "", "__init__"], [1187, 2, 1, "", "build"], [1187, 4, 1, "", "build_mode"], [1187, 4, 1, "", "built"], [1187, 2, 1, "", "check_submod_rets"], [1187, 2, 1, "", "get_mod_key"], [1187, 2, 1, "", "mod_depth"], [1187, 2, 1, "", "mod_height"], [1187, 2, 1, "", "mod_with_top_mod_key_chain"], [1187, 2, 1, "", "save_weights"], [1187, 2, 1, "", "show_mod_in_top_mod"], [1187, 2, 1, "", "show_structure"], [1187, 2, 1, "", "show_v_in_top_v"], [1187, 2, 1, "", "sub_mods"], [1187, 2, 1, "", "track_submod_call_order"], [1187, 2, 1, "", "track_submod_rets"], [1187, 2, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[1189, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[1189, 2, 1, "", "__init__"]], "ivy.stateful.optimizers": [[1191, 1, 1, "", "Adam"], [1192, 1, 1, "", "LAMB"], [1193, 1, 1, "", "LARS"], [1194, 1, 1, "", "Optimizer"], [1195, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[1191, 2, 1, "", "__init__"], [1191, 2, 1, "", "set_state"], [1191, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[1192, 2, 1, "", "__init__"], [1192, 2, 1, "", "set_state"], [1192, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[1193, 2, 1, "", "__init__"], [1193, 2, 1, "", "set_state"], [1193, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[1194, 2, 1, "", "__init__"], [1194, 2, 1, "", "set_state"], [1194, 2, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[1195, 2, 1, "", "__init__"], [1195, 2, 1, "", "set_state"], [1195, 4, 1, "", "state"]], "ivy.stateful.sequential": [[1197, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[1197, 2, 1, "", "__init__"]], "ivy.verbosity": [[1200, 3, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"activ": [0, 182, 410, 1160], "arraywithactiv": 1, "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 180, 370, 375, 380, 384, 412, 416, 420, 424, 428, 435, 470, 549, 554, 558, 562, 567, 571, 575, 579, 583, 587, 591, 595, 599, 603, 607, 611, 615, 619, 623, 628, 632, 636, 640, 644, 648, 652, 656, 660, 664, 668, 672, 676, 680, 684, 688, 692, 696, 700, 704, 708, 712, 718, 723, 727, 731, 735, 739, 743, 747, 751, 755, 759, 763, 768, 773, 780, 785, 813, 860, 907, 910, 913, 916, 919, 922, 925, 928, 932, 936, 939, 942, 945, 948, 952, 955, 958, 961, 964, 967, 970, 973, 977, 982, 987, 993, 998, 1002, 1006, 1010, 1014, 1018, 1022, 1026, 1032, 1036, 1040, 1044, 1048, 1075, 1102, 1107, 1113, 1117, 1121, 1125, 1129, 1133, 1137, 1141, 1146, 1150], "method": [2, 189, 376, 384, 385], "ab": [3, 190, 548, 549, 550, 551], "aco": [4, 191, 553, 554, 555, 556], "acosh": [5, 192, 557, 558, 559, 560], "adam_step": [6, 193, 859, 860, 861, 862], "add": [7, 195, 369, 561, 562, 563, 564], "add_ivy_array_instance_method": [8, 164], "all": [9, 197, 1145, 1146, 1147, 1148], "all_equ": [10, 198, 784, 785, 786, 787], "ani": [11, 199, 1149, 1150, 1151, 1152], "argsort": [12, 200, 1101, 1102, 1103, 1104], "asin": [13, 201, 566, 567, 568, 569], "asinh": [14, 202, 570, 571, 572, 573], "atan": [15, 205, 574, 575, 576, 577], "atan2": [16, 206, 578, 579, 580, 581], "atanh": [17, 207, 582, 583, 584, 585], "binary_cross_entropi": [18, 208, 976, 977, 978, 979], "bitwise_and": [19, 209, 586, 587, 588, 589], "bitwise_invert": [20, 210, 590, 591, 592, 593], "bitwise_left_shift": [21, 211, 594, 595, 596, 597], "bitwise_or": [22, 212, 598, 599, 600, 601], "bitwise_right_shift": [23, 213, 602, 603, 604, 605], "bitwise_xor": [24, 214, 606, 607, 608, 609], "can_cast": [25, 215, 469, 470, 471, 472], "ceil": [26, 216, 610, 611, 612, 613], "choleski": [27, 906, 907, 908], "clip": [28, 217, 992, 993, 994, 995], "concat": [29, 219, 997, 998, 999, 1000], "constant_pad": [30, 220, 1001, 1002, 1003, 1004], "co": [31, 221, 614, 615, 616, 617], "cosh": [32, 222, 618, 619, 620, 621], "cross": [33, 909, 910, 911], "cross_entropi": [34, 223, 981, 982, 983, 984], "det": [35, 912, 913, 914], "diagon": [36, 915, 916, 917], "divid": [37, 224, 622, 623, 624, 625], "eigh": [38, 918, 919, 920], "eigvalsh": [39, 921, 922, 923], "einsum": [40, 225, 1112, 1113, 1114, 1115], "equal": [41, 226, 627, 628, 629, 630], "erf": [42, 227, 631, 632, 633, 634], "exp": [43, 228, 635, 636, 637, 638], "expand_dim": [44, 229, 1005, 1006, 1007, 1008], "expm1": [45, 230, 639, 640, 641, 642], "flip": [46, 231, 1009, 1010, 1011, 1012], "floor": [47, 232, 643, 644, 645, 646], "floor_divid": [48, 233, 647, 648, 649, 650], "gather_nd": [49, 234, 812, 813, 814, 815], "gelu": [50, 235, 411, 412, 413, 414, 1162], "greater": [51, 237, 651, 652, 653, 654], "greater_equ": [52, 238, 655, 656, 657, 658], "inv": [53, 924, 925, 926], "isfinit": [54, 239, 659, 660, 661, 662], "isinf": [55, 240, 663, 664, 665, 666], "isnan": [56, 241, 667, 668, 669, 670], "layer_norm": [57, 244, 1074, 1075, 1076, 1077], "leaky_relu": [58, 245, 415, 416, 417, 418], "less": [59, 246, 671, 672, 673, 674], "less_equ": [60, 247, 675, 676, 677, 678], "log": [61, 248, 679, 680, 681, 682], "log10": [62, 249, 683, 684, 685, 686], "log1p": [63, 250, 687, 688, 689, 690], "log2": [64, 251, 691, 692, 693, 694], "logaddexp": [65, 252, 695, 696, 697, 698], "logical_and": [66, 253, 699, 700, 701, 702], "logical_not": [67, 254, 703, 704, 705, 706], "logical_or": [68, 255, 707, 708, 709, 710], "logical_xor": [69, 256, 711, 712, 713, 714], "matmul": [70, 257, 927, 928, 929, 930], "matrix_norm": [71, 931, 932, 933], "matrix_rank": [72, 935, 936, 937], "matrix_transpos": [73, 938, 939, 940], "max": [74, 258, 1116, 1117, 1118, 1119], "mean": [75, 259, 1120, 1121, 1122, 1123], "min": [76, 260, 1124, 1125, 1126, 1127], "multipli": [77, 261, 717, 718, 719, 720], "neg": [78, 262, 722, 723, 724, 725], "not_equ": [79, 263, 726, 727, 728, 729], "outer": [80, 941, 942, 943], "permute_dim": [81, 265, 1013, 1014, 1015, 1016], "pinv": [82, 944, 945, 946], "posit": [83, 266, 730, 731, 732, 733], "pow": [84, 267, 734, 735, 736, 737], "prod": [85, 268, 1128, 1129, 1130, 1131], "qr": [86, 947, 948, 949], "relu": [87, 270, 419, 420, 421, 422], "remaind": [88, 271, 738, 739, 740, 741], "repeat": [89, 272, 1017, 1018, 1019, 1020], "reshap": [90, 273, 1021, 1022, 1023, 1024], "roll": [91, 274, 369, 1025, 1026, 1027, 1028], "round": [92, 275, 742, 743, 744, 745], "sigmoid": [93, 276, 423, 424, 425, 426], "sign": [94, 277, 746, 747, 748, 749], "sin": [95, 278, 750, 751, 752, 753], "sinh": [96, 279, 754, 755, 756, 757], "softmax": [97, 280, 427, 428, 429, 430], "solv": [98, 951, 952, 953], "sort": [99, 157, 282, 353, 1100, 1106, 1107, 1108, 1109], "sparse_cross_entropi": [100, 283, 986, 987, 988, 989], "sqrt": [101, 284, 758, 759, 760, 761], "squar": [102, 285, 762, 763, 764, 765], "squeez": [103, 286, 1031, 1032, 1033, 1034], "stack": [104, 287, 1035, 1036, 1037, 1038], "std": [105, 313, 1132, 1133, 1134, 1135], "subtract": [106, 314, 766, 768, 769, 770], "sum": [107, 315, 1136, 1137, 1138, 1139], "svd": [108, 954, 955, 956], "svdval": [109, 957, 958, 959], "swapax": [110, 316, 1039, 1040, 1041, 1042], "tan": [111, 317, 369, 771, 773, 774, 775], "tanh": [112, 318, 434, 435, 436, 437, 776, 778], "tensordot": [113, 960, 961, 962], "tile": [114, 319, 1043, 1044, 1045, 1046], "trace": [115, 963, 964, 965], "trunc": [116, 320, 779, 780, 781, 782], "var": [117, 321, 1140, 1141, 1142, 1143], "vecdot": [118, 966, 967, 968], "vector_norm": [119, 969, 970, 971], "vector_to_skew_symmetric_matrix": [120, 972, 973, 974], "zero_pad": [121, 322, 1047, 1048, 1049, 1050], "convers": 122, "args_to_ivi": 123, "args_to_n": 124, "to_ivi": 125, "to_n": 126, "creation": [127, 323, 441], "arraywithcr": 128, "data": [129, 325, 371, 377, 385, 399, 460, 1095, 1096, 1097, 1099], "type": [129, 325, 372, 377, 399, 460], "arraywithdatatyp": 130, "devic": [131, 327, 378, 380, 497], "arraywithdevic": 132, "elementwis": [133, 329, 547], "arraywithelementwis": 134, "gener": [135, 331, 371, 783], "arraywithgener": 136, "gradient": [137, 333, 857], "arraywithgradi": 138, "imag": [139, 335], "arraywithimag": 140, "layer": [141, 337, 892, 1174], "arraywithlay": 142, "linear": [143, 339, 901, 905, 1184], "algebra": [143, 339, 905], "arraywithlinearalgebra": 144, "loss": [145, 341, 975], "arraywithloss": 146, "manipul": [147, 343, 991], "arraywithmanipul": 148, "norm": [149, 345, 1073, 1188], "arraywithnorm": 150, "random": [151, 347, 1078], "arraywithrandom": 152, "search": [153, 349, 1090], "arraywithsearch": 154, "set": [155, 351, 362, 373, 1095], "arraywithset": 156, "arraywithsort": 158, "statist": [159, 355, 1111], "arraywithstatist": 160, "util": [161, 357, 1144], "arraywithutil": 162, "wrap": [163, 359, 374], "backend": [165, 367, 373, 382, 399], "handler": [165, 382], "choose_random_backend": 167, "clear_backend_stack": 168, "current_backend": 169, "get_backend": 170, "set_backend": 171, "try_import_ivy_jax": 172, "try_import_ivy_mxnet": 173, "try_import_ivy_numpi": 174, "try_import_ivy_tf": 175, "try_import_ivy_torch": 176, "unset_backend": 177, "background": [178, 1153], "ml": 179, "explos": 179, "standard": 180, "skeptic": 180, "complimentari": 180, "vs": [180, 399], "competit": 180, "do": 180, "work": [180, 365], "The": [180, 363, 384, 399], "api": [180, 364, 367, 370, 376, 382, 384, 386, 387], "why": 181, "unifi": [181, 384], "No": [181, 362], "more": 181, "re": 181, "implement": 181, "infinit": 181, "shelf": 181, "life": 181, "containerwithactiv": 183, "base": 184, "containerbas": 185, "contain": [186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 376, 385, 413, 417, 421, 425, 429, 432, 436, 471, 473, 550, 552, 555, 559, 563, 565, 568, 572, 576, 580, 584, 588, 592, 596, 600, 604, 608, 612, 616, 620, 624, 626, 629, 633, 637, 641, 645, 649, 653, 657, 661, 665, 669, 673, 677, 681, 685, 689, 693, 697, 701, 705, 709, 713, 719, 721, 724, 728, 732, 736, 740, 744, 748, 752, 756, 760, 764, 767, 769, 772, 774, 777, 781, 786, 788, 797, 814, 816, 861, 863, 865, 867, 870, 872, 875, 877, 879, 881, 883, 885, 929, 978, 980, 983, 985, 988, 990, 994, 996, 999, 1003, 1007, 1011, 1015, 1019, 1023, 1027, 1029, 1033, 1037, 1041, 1045, 1049, 1076, 1082, 1085, 1087, 1103, 1105, 1108, 1110, 1114, 1118, 1122, 1126, 1130, 1134, 1138, 1142, 1147, 1151], "multidevcontain": 188, "adam_upd": [194, 864, 865, 866], "add_ivy_container_instance_method": [196, 360], "at_dev": [203, 204], "clip_vector_norm": [218, 796, 797, 798], "gradient_descent_upd": [236, 869, 870, 871], "lamb_upd": [242, 874, 875, 876], "lars_upd": [243, 878, 879, 880], "optimizer_upd": [264, 882, 883, 884], "random_uniform": [269, 1084, 1085, 1086], "softplu": [281, 431, 432, 433], "static_ab": [288, 552], "static_adam_step": [289, 863], "static_adam_upd": [290, 867], "static_add": [291, 565], "static_all_equ": [292, 788], "static_argsort": [293, 1105], "static_binary_cross_entropi": [294, 980], "static_can_cast": [295, 473], "static_clip": [296, 996], "static_cross_entropi": [297, 985], "static_divid": [298, 626], "static_gather_nd": [299, 816], "static_gradient_descent_upd": [300, 872], "static_lamb_upd": [301, 877], "static_lars_upd": [302, 881], "static_multipli": [303, 721], "static_optimizer_upd": [304, 885], "static_randint": [305, 1082], "static_random_uniform": [306, 1087], "static_rol": [307, 1029], "static_sort": [308, 1110], "static_sparse_cross_entropi": [309, 990], "static_subtract": [310, 767], "static_tan": [311, 772], "static_tanh": [312, 777], "containerwithcr": 324, "containerwithdatatyp": 326, "containerwithdevic": 328, "containerwithelementwis": 330, "containerwithgener": 332, "containerwithgradi": 334, "containerwithimag": 336, "containerwithlay": 338, "containerwithlinearalgebra": 340, "containerwithloss": 342, "containerwithmanipul": 344, "containerwithnorm": 346, "containerwithrandom": 348, "containerwithsearch": 350, "containerwithset": 352, "containerwithsort": 354, "containerwithstatist": 356, "containerwithutil": 358, "contribut": [361, 1153], "up": 362, "clone": 362, "ivi": [362, 367, 369, 371, 375, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 412, 413, 414, 416, 417, 418, 420, 421, 422, 424, 425, 426, 428, 429, 430, 432, 433, 435, 436, 437, 470, 471, 472, 473, 549, 550, 551, 552, 554, 555, 556, 558, 559, 560, 562, 563, 564, 565, 567, 568, 569, 571, 572, 573, 575, 576, 577, 579, 580, 581, 583, 584, 585, 587, 588, 589, 591, 592, 593, 595, 596, 597, 599, 600, 601, 603, 604, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 619, 620, 621, 623, 624, 625, 626, 628, 629, 630, 632, 633, 634, 636, 637, 638, 640, 641, 642, 644, 645, 646, 648, 649, 650, 652, 653, 654, 656, 657, 658, 660, 661, 662, 664, 665, 666, 668, 669, 670, 672, 673, 674, 676, 677, 678, 680, 681, 682, 684, 685, 686, 688, 689, 690, 692, 693, 694, 696, 697, 698, 700, 701, 702, 704, 705, 706, 708, 709, 710, 712, 713, 714, 718, 719, 720, 721, 723, 724, 725, 727, 728, 729, 731, 732, 733, 735, 736, 737, 739, 740, 741, 743, 744, 745, 747, 748, 749, 751, 752, 753, 755, 756, 757, 759, 760, 761, 763, 764, 765, 767, 768, 769, 770, 772, 773, 774, 775, 777, 778, 780, 781, 782, 785, 786, 787, 788, 797, 798, 813, 814, 815, 816, 860, 861, 862, 863, 865, 866, 867, 870, 871, 872, 875, 876, 877, 879, 880, 881, 883, 884, 885, 907, 908, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 930, 932, 933, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 952, 953, 955, 956, 958, 959, 961, 962, 964, 965, 967, 968, 970, 971, 973, 974, 977, 978, 979, 980, 982, 983, 984, 985, 987, 988, 989, 990, 993, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1032, 1033, 1034, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1075, 1076, 1077, 1081, 1082, 1085, 1086, 1087, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1113, 1114, 1115, 1117, 1118, 1119, 1121, 1122, 1123, 1125, 1126, 1127, 1129, 1130, 1131, 1133, 1134, 1135, 1137, 1138, 1139, 1141, 1142, 1143, 1146, 1147, 1148, 1150, 1151, 1152], "pycharm": 362, "virtual": 362, "environ": 362, "docker": [362, 363, 365], "us": [362, 365, 385], "miniconda": [362, 365], "venv": [362, 365], "interpret": 362, "window": 362, "maco": 362, "ubuntu": 362, "github": 362, "codespac": 362, "pre": 362, "commit": [362, 363], "basic": 363, "get": 363, "help": 363, "todo": 363, "list": 363, "issu": 363, "manag": 363, "your": 363, "fork": 363, "who": 363, "To": 363, "ask": 363, "With": 363, "command": 363, "line": 363, "browser": 363, "pull": 363, "request": 363, "small": 363, "often": 363, "run": 363, "test": [363, 370, 371], "local": 363, "open": 364, "task": 364, "function": [364, 372, 374, 376, 377, 378, 380, 382, 387, 399], "format": 364, "frontend": [364, 387], "build": [365, 382], "doc": 365, "dockerless": 365, "document": 365, "pipelin": [365, 399], "make_doc": 365, "sh": 365, "entrypoint": 365, "_make_doc": 365, "generate_src_rst_fil": 365, "py": 365, "sphinx": 365, "correct_built_html_fil": 365, "remove_fil": 365, "deep": 366, "dive": 366, "navig": 367, "code": 367, "categor": 367, "submodul": 367, "design": [367, 381, 1153], "docstr": [368, 369], "exampl": [369, 380], "hypothesi": 371, "self": 371, "consist": 371, "explicit": 371, "test_array_funct": 371, "primari": 372, "composit": 372, "mix": 372, "standalon": 372, "nestabl": [372, 376, 380], "conveni": 372, "nativ": 375, "handl": 375, "instanc": [376, 384], "static": 376, "special": 376, "modul": [377, 378, 386, 1186, 1187], "argument": [377, 378, 379, 380], "other": [377, 378], "inplac": 379, "updat": 379, "out": [379, 380], "copi": 379, "dtype": [380, 478], "number": 380, "oper": [380, 384, 399], "integ": 380, "sequenc": 380, "block": 382, "framework": [382, 383], "graph": [382, 387], "compil": [382, 387, 438, 439], "class": 384, "monkei": 384, "patch": 384, "construct": 385, "represent": 385, "recurs": 385, "built": 385, "ins": 385, "access": 385, "save": 385, "load": 385, "comparison": 385, "custom": [385, 399], "case": 385, "compartment": 385, "configur": 385, "network": [385, 387], "weight": 385, "state": [386, 399], "initi": [386, 1165], "optim": [386, 1190, 1194], "transpil": 387, "role": 387, "convert": [387, 1163], "model": [387, 394, 399], "builder": 389, "ecosystem": 390, "gym": [391, 398], "mech": 392, "memori": [393, 398], "robot": [395, 398], "vision": [396, 398], "extens": [397, 1153], "appli": 398, "librari": 398, "mechan": 398, "faq": 399, "maintain": 399, "version": 399, "dynam": 399, "size": 399, "shape": [399, 845, 1095, 1096, 1097, 1099], "check": 399, "control": 399, "flow": 399, "auto": 399, "differenti": 399, "replica": 399, "parallel": 399, "support": 399, "altern": 399, "structur": 399, "func": 400, "wrapper": 400, "handle_nest": 401, "handle_out_argu": 402, "infer_devic": 403, "infer_dtyp": 404, "inputs_to_ivy_arrai": 405, "inputs_to_native_arrai": 406, "outputs_to_ivy_arrai": 407, "to_native_arrays_and_back": 408, "constant": 440, "note": [441, 447], "arang": 442, "asarrai": 443, "empti": 444, "empty_lik": 445, "ey": 446, "from_dlpack": 447, "full": 448, "full_lik": 449, "linspac": 450, "logspac": 451, "meshgrid": 452, "native_arrai": 453, "ones": 454, "ones_lik": 455, "tril": 456, "triu": 457, "zero": [458, 1173], "zeros_lik": 459, "as_ivy_dtyp": 464, "as_native_dtyp": 465, "astyp": 466, "broadcast_arrai": 467, "broadcast_to": 468, "closest_valid_dtyp": 474, "default_dtyp": 475, "default_float_dtyp": 476, "default_int_dtyp": 477, "dtype_bit": 479, "finfo": 480, "function_supported_dtyp": 481, "function_unsupported_dtyp": 482, "iinfo": 483, "invalid_dtyp": 484, "is_float_dtyp": 485, "is_int_dtyp": 486, "promote_typ": 487, "result_typ": 488, "set_default_dtyp": 489, "set_default_float_dtyp": 490, "set_default_int_dtyp": 491, "type_promote_arrai": 492, "unset_default_dtyp": 493, "unset_default_float_dtyp": 494, "unset_default_int_dtyp": 495, "valid_dtyp": 496, "devcloneditem": 499, "devclonedit": 500, "devclonednest": 501, "devdistitem": 502, "devdistit": 503, "devdistnest": 504, "devmapp": 506, "devmappermultiproc": 507, "multidevitem": 509, "multidevit": 510, "multidevnest": 511, "profil": 512, "as_ivy_dev": 513, "as_native_dev": 514, "clear_mem_on_dev": 515, "default_devic": 516, "dev": 517, "dev_clon": 518, "dev_clone_arrai": 519, "dev_clone_it": 520, "dev_clone_nest": 521, "dev_dist": 522, "dev_dist_arrai": 523, "dev_dist_it": 524, "dev_dist_nest": 525, "dev_unifi": 526, "dev_unify_arrai": 527, "dev_unify_it": 528, "dev_unify_nest": 529, "dev_util": 530, "get_all_ivy_arrays_on_dev": 531, "gpu_is_avail": 532, "num_cpu_cor": 533, "num_gpu": 534, "num_ivy_arrays_on_dev": 535, "percent_used_mem_on_dev": 536, "print_all_ivy_arrays_on_dev": 537, "set_default_devic": 538, "set_split_factor": 539, "split_factor": 540, "split_func_cal": 541, "to_devic": 542, "total_mem_on_dev": 543, "tpu_is_avail": 544, "unset_default_devic": 545, "used_mem_on_dev": 546, "maximum": 715, "minimum": 716, "arg_info": 789, "arg_nam": 790, "array_equ": 791, "arrays_equ": 792, "assert_supports_inplac": 793, "cache_fn": 794, "clip_matrix_norm": 795, "container_typ": 799, "copy_arrai": 800, "cumprod": 801, "cumsum": 802, "current_backend_str": 803, "default": 804, "einops_rearrang": 805, "einops_reduc": 806, "einops_repeat": 807, "exist": 808, "floormod": 809, "fourier_encod": 810, "gather": 811, "get_all_arrays_in_memori": 817, "get_min_bas": 818, "get_min_denomin": 819, "get_num_dim": 820, "get_referrers_recurs": 821, "has_nan": 822, "indices_wher": 823, "inplace_arrays_support": 824, "inplace_decr": 825, "inplace_incr": 826, "inplace_upd": 827, "inplace_variables_support": 828, "is_arrai": 829, "is_ivy_arrai": 830, "is_ivy_contain": 831, "is_native_arrai": 832, "match_kwarg": 833, "multiprocess": 834, "num_arrays_in_memori": 835, "one_hot": 836, "print_all_arrays_in_memori": 837, "queue_timeout": 838, "scatter_flat": 839, "scatter_nd": 840, "set_min_bas": 841, "set_min_denomin": 842, "set_queue_timeout": 843, "set_tmp_dir": 844, "shape_to_tupl": 846, "stable_divid": 847, "stable_pow": 848, "supports_inplac": 849, "tmp_dir": 850, "to_list": 851, "to_numpi": 852, "to_scalar": 853, "try_else_non": 854, "unstack": 855, "value_is_nan": 856, "execute_with_gradi": 868, "is_vari": 873, "set_with_grad": 886, "stop_gradi": 887, "unset_with_grad": 888, "variabl": 889, "variable_data": 890, "with_grad": 891, "conv1d": [893, 1175], "conv1d_transpos": 894, "conv2d": [895, 1177], "conv2d_transpos": 896, "conv3d": [897, 1179], "conv3d_transpos": 898, "depthwise_conv2d": 899, "dropout": [900, 1182], "lstm_updat": 902, "multi_head_attent": 903, "scaled_dot_product_attent": 904, "matrix_pow": 934, "slogdet": 950, "split": 1030, "meta": 1051, "fomaml_step": 1052, "maml_step": 1053, "reptile_step": 1054, "nest": 1055, "all_nested_indic": 1056, "copy_nest": 1057, "index_nest": 1058, "insert_into_nest_at_index": 1059, "insert_into_nest_at_indic": 1060, "map": 1061, "map_nest_at_index": 1062, "map_nest_at_indic": 1063, "multi_index_nest": 1064, "nested_ani": 1065, "nested_indices_wher": 1066, "nested_map": 1067, "nested_multi_map": 1068, "prune_nest_at_index": 1069, "prune_nest_at_indic": 1070, "set_nest_at_index": 1071, "set_nest_at_indic": 1072, "multinomi": 1079, "randint": [1080, 1081], "random_norm": 1083, "seed": 1088, "shuffl": 1089, "argmax": 1091, "argmin": 1092, "nonzero": 1093, "where": 1094, "depend": [1095, 1096, 1097, 1099], "output": [1095, 1096, 1097, 1099], "unique_al": 1096, "unique_count": 1097, "unique_invers": 1098, "unique_valu": 1099, "content": 1153, "overview": 1153, "quick": 1153, "start": 1153, "roadmap": [1153, 1159], "citat": 1153, "inspect": 1156, "add_array_spec": 1157, "fn_array_spec": 1158, "geglu": 1161, "to_ivy_modul": 1164, "firstlayersiren": 1167, "glorotuniform": 1168, "Ones": 1170, "siren": 1171, "conv1dtranspos": 1176, "conv2dtranspos": 1178, "conv3dtranspos": 1180, "depthwiseconv2d": 1181, "lstm": 1183, "multiheadattent": 1185, "layernorm": 1189, "adam": 1191, "lamb": 1192, "lar": 1193, "sgd": 1195, "sequenti": [1196, 1197], "verbos": 1199, "cprint": 1200}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})