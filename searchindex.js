Search.setIndex({"docnames": ["backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "data_classes/array/activations", "data_classes/array/activations/ArrayWithActivations", "data_classes/array/conversions", "data_classes/array/conversions/args_to_ivy", "data_classes/array/conversions/args_to_native", "data_classes/array/conversions/to_ivy", "data_classes/array/conversions/to_native", "data_classes/array/creation", "data_classes/array/creation/ArrayWithCreation", "data_classes/array/data_type", "data_classes/array/data_type/ArrayWithDataTypes", "data_classes/array/device", "data_classes/array/device/ArrayWithDevice", "data_classes/array/elementwise", "data_classes/array/elementwise/ArrayWithElementwise", "data_classes/array/general", "data_classes/array/general/ArrayWithGeneral", "data_classes/array/gradients", "data_classes/array/gradients/ArrayWithGradients", "data_classes/array/image", "data_classes/array/image/ArrayWithImage", "data_classes/array/layers", "data_classes/array/layers/ArrayWithLayers", "data_classes/array/linear_algebra", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra", "data_classes/array/losses", "data_classes/array/losses/ArrayWithLosses", "data_classes/array/manipulation", "data_classes/array/manipulation/ArrayWithManipulation", "data_classes/array/norms", "data_classes/array/norms/ArrayWithNorms", "data_classes/array/random", "data_classes/array/random/ArrayWithRandom", "data_classes/array/searching", "data_classes/array/searching/ArrayWithSearching", "data_classes/array/set", "data_classes/array/set/ArrayWithSet", "data_classes/array/sorting", "data_classes/array/sorting/ArrayWithSorting", "data_classes/array/statistical", "data_classes/array/statistical/ArrayWithStatistical", "data_classes/array/utility", "data_classes/array/utility/ArrayWithUtility", "data_classes/array/wrapping", "data_classes/array/wrapping/add_ivy_array_instance_methods", "data_classes/container/activations", "data_classes/container/activations/ContainerWithActivations", "data_classes/container/base", "data_classes/container/base/ContainerBase", "data_classes/container/container", "data_classes/container/container/Container", "data_classes/container/container/MultiDevContainer", "data_classes/container/creation", "data_classes/container/creation/ContainerWithCreation", "data_classes/container/data_type", "data_classes/container/data_type/ContainerWithDataTypes", "data_classes/container/device", "data_classes/container/device/ContainerWithDevice", "data_classes/container/elementwise", "data_classes/container/elementwise/ContainerWithElementwise", "data_classes/container/general", "data_classes/container/general/ContainerWithGeneral", "data_classes/container/gradients", "data_classes/container/gradients/ContainerWithGradients", "data_classes/container/image", "data_classes/container/image/ContainerWithImage", "data_classes/container/layers", "data_classes/container/layers/ContainerWithLayers", "data_classes/container/linear_algebra", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra", "data_classes/container/losses", "data_classes/container/losses/ContainerWithLosses", "data_classes/container/manipulation", "data_classes/container/manipulation/ContainerWithManipulation", "data_classes/container/norms", "data_classes/container/norms/ContainerWithNorms", "data_classes/container/random", "data_classes/container/random/ContainerWithRandom", "data_classes/container/searching", "data_classes/container/searching/ContainerWithSearching", "data_classes/container/set", "data_classes/container/set/ContainerWithSet", "data_classes/container/sorting", "data_classes/container/sorting/ContainerWithSorting", "data_classes/container/statistical", "data_classes/container/statistical/ContainerWithStatistical", "data_classes/container/utility", "data_classes/container/utility/ContainerWithUtility", "data_classes/container/wrapping", "data_classes/container/wrapping/add_ivy_container_instance_methods", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/gelu/gelu_array", "functional/ivy/activations/gelu/gelu_container", "functional/ivy/activations/gelu/gelu_functional", "functional/ivy/activations/gelu/static_gelu_container", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/leaky_relu/leaky_relu_array", "functional/ivy/activations/leaky_relu/leaky_relu_container", "functional/ivy/activations/leaky_relu/leaky_relu_functional", "functional/ivy/activations/leaky_relu/static_leaky_relu_container", "functional/ivy/activations/relu", "functional/ivy/activations/relu/relu_array", "functional/ivy/activations/relu/relu_container", "functional/ivy/activations/relu/relu_functional", "functional/ivy/activations/relu/static_relu_container", "functional/ivy/activations/sigmoid", "functional/ivy/activations/sigmoid/sigmoid_array", "functional/ivy/activations/sigmoid/sigmoid_container", "functional/ivy/activations/sigmoid/sigmoid_functional", "functional/ivy/activations/sigmoid/static_sigmoid_container", "functional/ivy/activations/softmax", "functional/ivy/activations/softmax/softmax_array", "functional/ivy/activations/softmax/softmax_container", "functional/ivy/activations/softmax/softmax_functional", "functional/ivy/activations/softmax/static_softmax_container", "functional/ivy/activations/softplus", "functional/ivy/activations/softplus/softplus_array", "functional/ivy/activations/softplus/softplus_container", "functional/ivy/activations/softplus/softplus_functional", "functional/ivy/activations/softplus/static_softplus_container", "functional/ivy/activations/tanh", "functional/ivy/activations/tanh/static_tanh_container", "functional/ivy/activations/tanh/tanh_array", "functional/ivy/activations/tanh/tanh_container", "functional/ivy/activations/tanh/tanh_functional", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/arange/arange_functional", "functional/ivy/creation/arange/static_arange_container", "functional/ivy/creation/asarray", "functional/ivy/creation/asarray/asarray_array", "functional/ivy/creation/asarray/asarray_container", "functional/ivy/creation/asarray/asarray_functional", "functional/ivy/creation/asarray/static_asarray_container", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/empty_like/empty_like_array", "functional/ivy/creation/empty_like/empty_like_container", "functional/ivy/creation/empty_like/empty_like_functional", "functional/ivy/creation/empty_like/static_empty_like_container", "functional/ivy/creation/eye", "functional/ivy/creation/eye/eye_functional", "functional/ivy/creation/eye/static_eye_container", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/from_dlpack/from_dlpack_array", "functional/ivy/creation/from_dlpack/from_dlpack_container", "functional/ivy/creation/from_dlpack/from_dlpack_functional", "functional/ivy/creation/from_dlpack/static_from_dlpack_container", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/full_like/full_like_array", "functional/ivy/creation/full_like/full_like_container", "functional/ivy/creation/full_like/full_like_functional", "functional/ivy/creation/full_like/static_full_like_container", "functional/ivy/creation/linspace", "functional/ivy/creation/linspace/linspace_functional", "functional/ivy/creation/linspace/static_linspace_container", "functional/ivy/creation/logspace", "functional/ivy/creation/logspace/logspace_functional", "functional/ivy/creation/logspace/static_logspace_container", "functional/ivy/creation/meshgrid", "functional/ivy/creation/meshgrid/meshgrid_array", "functional/ivy/creation/meshgrid/meshgrid_container", "functional/ivy/creation/meshgrid/meshgrid_functional", "functional/ivy/creation/meshgrid/static_meshgrid_container", "functional/ivy/creation/native_array", "functional/ivy/creation/native_array/native_array_array", "functional/ivy/creation/native_array/native_array_container", "functional/ivy/creation/native_array/native_array_functional", "functional/ivy/creation/native_array/static_native_array_container", "functional/ivy/creation/ones", "functional/ivy/creation/ones/ones_functional", "functional/ivy/creation/ones/static_ones_container", "functional/ivy/creation/ones_like", "functional/ivy/creation/ones_like/ones_like_array", "functional/ivy/creation/ones_like/ones_like_container", "functional/ivy/creation/ones_like/ones_like_functional", "functional/ivy/creation/ones_like/static_ones_like_container", "functional/ivy/creation/tril", "functional/ivy/creation/tril/static_tril_container", "functional/ivy/creation/tril/tril_array", "functional/ivy/creation/tril/tril_container", "functional/ivy/creation/tril/tril_functional", "functional/ivy/creation/triu", "functional/ivy/creation/triu/static_triu_container", "functional/ivy/creation/triu/triu_array", "functional/ivy/creation/triu/triu_container", "functional/ivy/creation/triu/triu_functional", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros/static_zeros_container", "functional/ivy/creation/zeros/zeros_functional", "functional/ivy/creation/zeros_like", "functional/ivy/creation/zeros_like/static_zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_array", "functional/ivy/creation/zeros_like/zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_functional", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/abs/static_abs_container", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_step/static_adam_step_container", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/is_variable/is_variable_container", "functional/ivy/gradients/is_variable/is_variable_functional", "functional/ivy/gradients/is_variable/static_is_variable_container", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_container", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cholesky/static_cholesky_container", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_counts/static_unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_array", "functional/ivy/set/unique_counts/unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_functional", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/all/static_all_container", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "functional/ivy/utility/any/static_any_container", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "data_classes/array/activations.rst", "data_classes/array/activations/ArrayWithActivations.rst", "data_classes/array/conversions.rst", "data_classes/array/conversions/args_to_ivy.rst", "data_classes/array/conversions/args_to_native.rst", "data_classes/array/conversions/to_ivy.rst", "data_classes/array/conversions/to_native.rst", "data_classes/array/creation.rst", "data_classes/array/creation/ArrayWithCreation.rst", "data_classes/array/data_type.rst", "data_classes/array/data_type/ArrayWithDataTypes.rst", "data_classes/array/device.rst", "data_classes/array/device/ArrayWithDevice.rst", "data_classes/array/elementwise.rst", "data_classes/array/elementwise/ArrayWithElementwise.rst", "data_classes/array/general.rst", "data_classes/array/general/ArrayWithGeneral.rst", "data_classes/array/gradients.rst", "data_classes/array/gradients/ArrayWithGradients.rst", "data_classes/array/image.rst", "data_classes/array/image/ArrayWithImage.rst", "data_classes/array/layers.rst", "data_classes/array/layers/ArrayWithLayers.rst", "data_classes/array/linear_algebra.rst", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra.rst", "data_classes/array/losses.rst", "data_classes/array/losses/ArrayWithLosses.rst", "data_classes/array/manipulation.rst", "data_classes/array/manipulation/ArrayWithManipulation.rst", "data_classes/array/norms.rst", "data_classes/array/norms/ArrayWithNorms.rst", "data_classes/array/random.rst", "data_classes/array/random/ArrayWithRandom.rst", "data_classes/array/searching.rst", "data_classes/array/searching/ArrayWithSearching.rst", "data_classes/array/set.rst", "data_classes/array/set/ArrayWithSet.rst", "data_classes/array/sorting.rst", "data_classes/array/sorting/ArrayWithSorting.rst", "data_classes/array/statistical.rst", "data_classes/array/statistical/ArrayWithStatistical.rst", "data_classes/array/utility.rst", "data_classes/array/utility/ArrayWithUtility.rst", "data_classes/array/wrapping.rst", "data_classes/array/wrapping/add_ivy_array_instance_methods.rst", "data_classes/container/activations.rst", "data_classes/container/activations/ContainerWithActivations.rst", "data_classes/container/base.rst", "data_classes/container/base/ContainerBase.rst", "data_classes/container/container.rst", "data_classes/container/container/Container.rst", "data_classes/container/container/MultiDevContainer.rst", "data_classes/container/creation.rst", "data_classes/container/creation/ContainerWithCreation.rst", "data_classes/container/data_type.rst", "data_classes/container/data_type/ContainerWithDataTypes.rst", "data_classes/container/device.rst", "data_classes/container/device/ContainerWithDevice.rst", "data_classes/container/elementwise.rst", "data_classes/container/elementwise/ContainerWithElementwise.rst", "data_classes/container/general.rst", "data_classes/container/general/ContainerWithGeneral.rst", "data_classes/container/gradients.rst", "data_classes/container/gradients/ContainerWithGradients.rst", "data_classes/container/image.rst", "data_classes/container/image/ContainerWithImage.rst", "data_classes/container/layers.rst", "data_classes/container/layers/ContainerWithLayers.rst", "data_classes/container/linear_algebra.rst", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra.rst", "data_classes/container/losses.rst", "data_classes/container/losses/ContainerWithLosses.rst", "data_classes/container/manipulation.rst", "data_classes/container/manipulation/ContainerWithManipulation.rst", "data_classes/container/norms.rst", "data_classes/container/norms/ContainerWithNorms.rst", "data_classes/container/random.rst", "data_classes/container/random/ContainerWithRandom.rst", "data_classes/container/searching.rst", "data_classes/container/searching/ContainerWithSearching.rst", "data_classes/container/set.rst", "data_classes/container/set/ContainerWithSet.rst", "data_classes/container/sorting.rst", "data_classes/container/sorting/ContainerWithSorting.rst", "data_classes/container/statistical.rst", "data_classes/container/statistical/ContainerWithStatistical.rst", "data_classes/container/utility.rst", "data_classes/container/utility/ContainerWithUtility.rst", "data_classes/container/wrapping.rst", "data_classes/container/wrapping/add_ivy_container_instance_methods.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/gelu/gelu_array.rst", "functional/ivy/activations/gelu/gelu_container.rst", "functional/ivy/activations/gelu/gelu_functional.rst", "functional/ivy/activations/gelu/static_gelu_container.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/leaky_relu/leaky_relu_array.rst", "functional/ivy/activations/leaky_relu/leaky_relu_container.rst", "functional/ivy/activations/leaky_relu/leaky_relu_functional.rst", "functional/ivy/activations/leaky_relu/static_leaky_relu_container.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/relu/relu_array.rst", "functional/ivy/activations/relu/relu_container.rst", "functional/ivy/activations/relu/relu_functional.rst", "functional/ivy/activations/relu/static_relu_container.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/sigmoid/sigmoid_array.rst", "functional/ivy/activations/sigmoid/sigmoid_container.rst", "functional/ivy/activations/sigmoid/sigmoid_functional.rst", "functional/ivy/activations/sigmoid/static_sigmoid_container.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softmax/softmax_array.rst", "functional/ivy/activations/softmax/softmax_container.rst", "functional/ivy/activations/softmax/softmax_functional.rst", "functional/ivy/activations/softmax/static_softmax_container.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/softplus/softplus_array.rst", "functional/ivy/activations/softplus/softplus_container.rst", "functional/ivy/activations/softplus/softplus_functional.rst", "functional/ivy/activations/softplus/static_softplus_container.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/activations/tanh/static_tanh_container.rst", "functional/ivy/activations/tanh/tanh_array.rst", "functional/ivy/activations/tanh/tanh_container.rst", "functional/ivy/activations/tanh/tanh_functional.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/arange/arange_functional.rst", "functional/ivy/creation/arange/static_arange_container.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/asarray/asarray_array.rst", "functional/ivy/creation/asarray/asarray_container.rst", "functional/ivy/creation/asarray/asarray_functional.rst", "functional/ivy/creation/asarray/static_asarray_container.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/empty_like/empty_like_array.rst", "functional/ivy/creation/empty_like/empty_like_container.rst", "functional/ivy/creation/empty_like/empty_like_functional.rst", "functional/ivy/creation/empty_like/static_empty_like_container.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/eye/eye_functional.rst", "functional/ivy/creation/eye/static_eye_container.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/from_dlpack/from_dlpack_array.rst", "functional/ivy/creation/from_dlpack/from_dlpack_container.rst", "functional/ivy/creation/from_dlpack/from_dlpack_functional.rst", "functional/ivy/creation/from_dlpack/static_from_dlpack_container.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/full_like/full_like_array.rst", "functional/ivy/creation/full_like/full_like_container.rst", "functional/ivy/creation/full_like/full_like_functional.rst", "functional/ivy/creation/full_like/static_full_like_container.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/linspace/linspace_functional.rst", "functional/ivy/creation/linspace/static_linspace_container.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/logspace/logspace_functional.rst", "functional/ivy/creation/logspace/static_logspace_container.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/meshgrid/meshgrid_array.rst", "functional/ivy/creation/meshgrid/meshgrid_container.rst", "functional/ivy/creation/meshgrid/meshgrid_functional.rst", "functional/ivy/creation/meshgrid/static_meshgrid_container.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/native_array/native_array_array.rst", "functional/ivy/creation/native_array/native_array_container.rst", "functional/ivy/creation/native_array/native_array_functional.rst", "functional/ivy/creation/native_array/static_native_array_container.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones/ones_functional.rst", "functional/ivy/creation/ones/static_ones_container.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/ones_like/ones_like_array.rst", "functional/ivy/creation/ones_like/ones_like_container.rst", "functional/ivy/creation/ones_like/ones_like_functional.rst", "functional/ivy/creation/ones_like/static_ones_like_container.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/tril/static_tril_container.rst", "functional/ivy/creation/tril/tril_array.rst", "functional/ivy/creation/tril/tril_container.rst", "functional/ivy/creation/tril/tril_functional.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/triu/static_triu_container.rst", "functional/ivy/creation/triu/triu_array.rst", "functional/ivy/creation/triu/triu_container.rst", "functional/ivy/creation/triu/triu_functional.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros/static_zeros_container.rst", "functional/ivy/creation/zeros/zeros_functional.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/creation/zeros_like/static_zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_array.rst", "functional/ivy/creation/zeros_like/zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_functional.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/abs/static_abs_container.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_step/static_adam_step_container.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/is_variable/is_variable_container.rst", "functional/ivy/gradients/is_variable/is_variable_functional.rst", "functional/ivy/gradients/is_variable/static_is_variable_container.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_container.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cholesky/static_cholesky_container.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_counts/static_unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_array.rst", "functional/ivy/set/unique_counts/unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_functional.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/all/static_all_container.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "functional/ivy/utility/any/static_any_container.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Activations", "ArrayWithActivations", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "ivy.Array.gelu", "ivy.Container.gelu", "ivy.gelu", "ivy.Container.static_gelu", "leaky_relu", "ivy.Array.leaky_relu", "ivy.Container.leaky_relu", "ivy.leaky_relu", "ivy.Container.static_leaky_relu", "relu", "ivy.Array.relu", "ivy.Container.relu", "ivy.relu", "ivy.Container.static_relu", "sigmoid", "ivy.Array.sigmoid", "ivy.Container.sigmoid", "ivy.sigmoid", "ivy.Container.static_sigmoid", "softmax", "ivy.Array.softmax", "ivy.Container.softmax", "ivy.softmax", "ivy.Container.static_softmax", "softplus", "ivy.Array.softplus", "ivy.Container.softplus", "ivy.softplus", "ivy.Container.static_softplus", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "Compilation", "compile", "Constants", "Creation", "arange", "ivy.arange", "ivy.Container.static_arange", "asarray", "ivy.Array.asarray", "ivy.Container.asarray", "ivy.asarray", "ivy.Container.static_asarray", "empty", "empty_like", "ivy.Array.empty_like", "ivy.Container.empty_like", "ivy.empty_like", "ivy.Container.static_empty_like", "eye", "ivy.eye", "ivy.Container.static_eye", "from_dlpack", "ivy.Array.from_dlpack", "ivy.Container.from_dlpack", "ivy.from_dlpack", "ivy.Container.static_from_dlpack", "full", "full_like", "ivy.Array.full_like", "ivy.Container.full_like", "ivy.full_like", "ivy.Container.static_full_like", "linspace", "ivy.linspace", "ivy.Container.static_linspace", "logspace", "ivy.logspace", "ivy.Container.static_logspace", "meshgrid", "ivy.Array.meshgrid", "ivy.Container.meshgrid", "ivy.meshgrid", "ivy.Container.static_meshgrid", "native_array", "ivy.Array.native_array", "ivy.Container.native_array", "ivy.native_array", "ivy.Container.static_native_array", "ones", "ivy.ones", "ivy.Container.static_ones", "ones_like", "ivy.Array.ones_like", "ivy.Container.ones_like", "ivy.ones_like", "ivy.Container.static_ones_like", "tril", "ivy.Container.static_tril", "ivy.Array.tril", "ivy.Container.tril", "ivy.tril", "triu", "ivy.Container.static_triu", "ivy.Array.triu", "ivy.Container.triu", "ivy.triu", "zeros", "ivy.Container.static_zeros", "ivy.zeros", "zeros_like", "ivy.Container.static_zeros_like", "ivy.Array.zeros_like", "ivy.Container.zeros_like", "ivy.zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "ivy.Container.static_abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "ivy.Container.static_adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "ivy.Container.is_variable", "ivy.is_variable", "ivy.Container.static_is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.Container.cholesky", "ivy.cholesky", "ivy.Container.static_cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "ivy.Container.static_unique_counts", "ivy.Array.unique_counts", "ivy.Container.unique_counts", "ivy.unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "ivy.Container.static_all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "ivy.Container.static_any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 6, 12, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 117, 121, 122, 123, 124, 126, 128, 129, 131, 132, 133, 143, 144, 145, 266, 289, 303, 305, 306, 307, 308, 309, 310, 312, 313, 315, 316, 317, 318, 587, 594, 631, 637, 656, 661, 663, 665, 667, 697, 864, 866, 876, 899, 902, 968, 975, 976, 977, 978, 979, 980, 982, 983, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "ivi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 162, 167, 172, 177, 182, 187, 192, 193, 194, 195, 196, 199, 204, 205, 210, 213, 218, 219, 224, 227, 230, 235, 240, 243, 248, 253, 258, 261, 266, 270, 271, 272, 273, 274, 275, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 359, 363, 367, 372, 376, 380, 384, 388, 392, 396, 400, 404, 408, 412, 416, 420, 424, 428, 433, 437, 441, 445, 449, 453, 457, 461, 465, 469, 473, 477, 481, 485, 489, 493, 497, 501, 505, 509, 513, 517, 521, 522, 523, 528, 532, 536, 540, 544, 548, 552, 556, 560, 564, 568, 572, 577, 582, 583, 587, 588, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 668, 672, 673, 677, 681, 685, 689, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 718, 721, 724, 727, 730, 733, 736, 740, 743, 744, 747, 750, 753, 756, 759, 760, 763, 766, 769, 772, 775, 778, 781, 784, 785, 790, 795, 800, 801, 806, 810, 814, 818, 822, 826, 830, 834, 839, 840, 844, 848, 852, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 887, 888, 889, 892, 893, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 911, 912, 913, 914, 919, 924, 925, 929, 933, 937, 941, 945, 949, 953, 957, 958, 963, 968, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015], "backend_handl": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 968], "contextmanag": [0, 1], "modul": [0, 4, 5, 16, 18, 21, 65, 66, 69, 70, 71, 72, 73, 110, 111, 117, 118, 119, 121, 125, 128, 129, 131, 133, 144, 145, 587, 638, 887, 888, 892, 968, 975, 976, 977, 978, 979, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1004, 1011, 1012], "sourc": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 121, 122, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 971, 972, 973, 975, 976, 977, 978, 979, 980, 982, 983, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015], "base": [0, 19, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 117, 120, 122, 128, 144, 195, 227, 228, 229, 266, 303, 305, 306, 307, 308, 309, 310, 312, 313, 315, 316, 317, 318, 353, 441, 444, 485, 488, 489, 492, 493, 496, 497, 500, 540, 543, 587, 622, 645, 652, 661, 904, 905, 906, 910, 912, 924, 925, 928, 975, 976, 977, 980, 982, 983, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "object": [0, 69, 70, 71, 72, 73, 130, 133, 195, 213, 216, 266, 286, 303, 348, 661, 864, 867, 869, 871, 872, 873, 878, 879, 880, 881, 887, 898, 980, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1001, 1002], "__init__": [0, 1, 4, 5, 69, 70, 71, 72, 73, 113, 119, 123, 128, 130, 131, 132, 133, 266, 267, 268, 269, 303, 304, 311, 312, 313, 314, 315, 316, 317, 318, 661, 662, 887, 888, 892, 968, 975, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "choose_random_backend": 0, "exclud": [0, 2, 115, 128, 195, 196, 197, 887, 893, 895], "none": [0, 2, 5, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 36, 37, 38, 45, 46, 47, 48, 49, 50, 51, 52, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 115, 118, 122, 123, 124, 125, 126, 128, 130, 132, 133, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 272, 274, 275, 277, 279, 281, 282, 283, 286, 289, 303, 312, 313, 321, 322, 345, 346, 347, 348, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 592, 593, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 625, 627, 628, 632, 638, 640, 643, 644, 645, 646, 651, 652, 658, 661, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 870, 875, 876, 877, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 906, 907, 909, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 978, 979, 980, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "clear_backend_stack": 0, "current_backend": [0, 71, 72, 113, 118], "arg": [0, 4, 21, 24, 25, 26, 69, 70, 128, 130, 132, 303, 312, 327, 331, 335, 347, 587, 644, 978, 979, 1001, 1002], "kwarg": [0, 4, 24, 25, 26, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 128, 130, 132, 303, 312, 327, 331, 335, 587, 637, 978, 979, 1001, 1002], "return": [0, 4, 5, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 302, 303, 312, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 687, 688, 689, 690, 691, 692, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 870, 874, 875, 876, 877, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 971, 973, 978, 979, 989, 998, 999, 1005, 1009], "current": [0, 4, 5, 12, 16, 18, 19, 20, 21, 69, 70, 71, 72, 73, 118, 124, 128, 133, 144, 145, 266, 287, 288, 290, 302, 303, 312, 336, 337, 341, 343, 587, 621, 628, 632, 639, 641, 864, 865, 874, 875, 968], "prioriti": [0, 4, 19, 69, 70, 125], "global_backend": [0, 4], "argument": [0, 4, 5, 14, 20, 24, 25, 26, 27, 28, 69, 70, 71, 72, 73, 112, 113, 114, 115, 117, 118, 119, 121, 122, 128, 130, 131, 192, 193, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 294, 303, 312, 313, 327, 331, 335, 353, 354, 357, 367, 370, 372, 375, 416, 419, 449, 452, 532, 535, 564, 567, 568, 571, 577, 581, 587, 593, 594, 598, 608, 615, 637, 644, 699, 702, 711, 712, 713, 716, 724, 726, 800, 834, 837, 864, 870, 882, 883, 886, 904, 906, 910, 924, 929, 932, 949, 952, 957, 958, 961, 971, 973, 978, 979, 1001, 1002], "s": [0, 4, 5, 6, 12, 15, 16, 17, 18, 19, 21, 24, 27, 28, 69, 70, 112, 114, 115, 117, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 194, 195, 230, 233, 248, 252, 253, 257, 266, 287, 288, 303, 322, 346, 353, 544, 547, 587, 596, 661, 668, 670, 673, 675, 681, 683, 689, 691, 712, 763, 765, 766, 768, 864, 870, 876, 924, 945, 948, 953, 956, 968, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012], "paramet": [0, 4, 5, 24, 25, 26, 27, 28, 65, 66, 69, 70, 71, 72, 73, 110, 111, 113, 114, 117, 130, 131, 144, 156, 157, 160, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 191, 192, 193, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 235, 238, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 270, 271, 272, 273, 274, 275, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 302, 303, 312, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586, 587, 588, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 663, 666, 668, 670, 672, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 739, 740, 742, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783, 784, 785, 788, 790, 793, 795, 798, 800, 801, 804, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 837, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 886, 887, 888, 889, 890, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 910, 911, 912, 913, 914, 917, 919, 922, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 971, 973, 978, 979, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "from": [0, 4, 5, 6, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 65, 66, 69, 70, 71, 72, 73, 110, 111, 112, 113, 114, 115, 117, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 195, 196, 197, 199, 202, 205, 208, 213, 216, 218, 219, 222, 230, 233, 235, 238, 243, 246, 261, 265, 266, 275, 278, 294, 303, 312, 313, 322, 337, 341, 346, 347, 353, 457, 460, 564, 567, 587, 608, 615, 616, 619, 655, 661, 668, 670, 681, 683, 699, 707, 710, 712, 724, 726, 763, 765, 775, 777, 800, 818, 821, 830, 833, 840, 843, 860, 861, 862, 863, 864, 866, 876, 877, 887, 888, 889, 890, 892, 893, 895, 899, 903, 904, 905, 911, 924, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 968, 974, 978, 979, 989, 997, 1000, 1005, 1009], "which": [0, 4, 5, 14, 15, 16, 18, 19, 20, 21, 69, 70, 71, 72, 73, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 156, 177, 180, 192, 193, 194, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 218, 219, 222, 224, 225, 227, 228, 235, 238, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 280, 284, 286, 289, 290, 302, 303, 312, 313, 323, 328, 329, 330, 331, 332, 333, 334, 335, 337, 341, 343, 345, 346, 347, 353, 544, 547, 587, 593, 605, 606, 608, 615, 616, 619, 621, 627, 631, 639, 640, 641, 643, 644, 659, 661, 668, 670, 672, 673, 675, 681, 683, 685, 687, 689, 691, 694, 696, 697, 699, 710, 712, 718, 720, 724, 726, 740, 742, 760, 762, 763, 765, 775, 777, 778, 780, 784, 790, 793, 795, 798, 800, 806, 809, 818, 821, 826, 829, 834, 837, 839, 844, 847, 864, 869, 870, 871, 872, 877, 878, 879, 880, 881, 887, 888, 889, 890, 893, 895, 899, 900, 901, 902, 903, 904, 905, 906, 910, 912, 913, 914, 917, 919, 922, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 968, 971, 973, 978, 979, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012], "try": [0, 4, 13, 15, 16, 18, 19, 20, 21, 69, 70, 121, 122, 130, 145, 587, 658, 968], "infer": [0, 4, 112, 119, 123, 124, 128, 133, 192, 193, 195, 196, 197, 199, 202, 205, 208, 218, 219, 222, 235, 238, 243, 246, 261, 265, 353, 457, 460, 587, 624, 649, 800, 830, 833], "when": [0, 4, 14, 15, 18, 19, 20, 69, 70, 71, 72, 73, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 133, 145, 266, 272, 303, 353, 367, 370, 445, 448, 540, 543, 587, 598, 631, 652, 784, 785, 788, 790, 793, 795, 798, 864, 875, 899, 900, 901, 903, 924, 929, 932, 937, 940, 945, 948, 953, 956, 968, 1001, 1002], "global": [0, 4, 5, 6, 12, 69, 70, 71, 72, 73, 118, 119, 123, 124, 128, 266, 281, 282, 283, 303, 312, 313, 345, 346, 347, 587, 622, 623, 642, 645, 646, 647, 651, 652, 882, 883, 886, 1003, 1004], "set": [0, 4, 5, 6, 12, 14, 17, 19, 24, 27, 28, 58, 69, 70, 103, 112, 113, 118, 120, 121, 122, 123, 124, 125, 128, 130, 131, 303, 322, 332, 333, 344, 345, 346, 347, 353, 384, 387, 587, 588, 591, 645, 646, 647, 648, 661, 668, 670, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 712, 718, 720, 740, 742, 744, 746, 753, 755, 760, 762, 864, 865, 874, 875, 876, 880, 881, 887, 897, 899, 900, 905, 906, 910, 911, 912, 913, 914, 917, 919, 922, 924, 945, 948, 953, 956, 989, 998, 1005, 1006, 1007, 1008, 1009, 1010], "ret": [0, 4, 5, 12, 24, 25, 26, 27, 28, 69, 70, 113, 114, 128, 133, 156, 157, 160, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 191, 192, 193, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 235, 238, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 270, 271, 272, 273, 274, 275, 278, 280, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 302, 303, 312, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 346, 347, 348, 349, 350, 352, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586, 587, 588, 591, 593, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 643, 644, 649, 651, 652, 653, 655, 656, 657, 659, 660, 661, 663, 666, 668, 670, 672, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 739, 740, 742, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783, 784, 785, 788, 790, 793, 795, 798, 800, 801, 804, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 837, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 861, 862, 863, 864, 865, 866, 870, 874, 875, 876, 882, 883, 886, 887, 888, 889, 890, 892, 893, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 910, 911, 912, 913, 914, 917, 919, 922, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 971, 973, 978, 979, 1005, 1009], "exampl": [0, 4, 5, 6, 12, 16, 18, 19, 20, 22, 23, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 65, 66, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 156, 157, 158, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 180, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 195, 218, 219, 222, 230, 233, 240, 241, 243, 246, 258, 260, 261, 265, 266, 272, 275, 276, 277, 278, 279, 287, 288, 303, 322, 323, 325, 337, 338, 339, 340, 341, 344, 346, 348, 350, 351, 353, 354, 355, 356, 357, 358, 367, 368, 369, 370, 371, 372, 375, 388, 391, 392, 395, 396, 399, 408, 411, 412, 415, 416, 417, 418, 419, 420, 423, 424, 427, 441, 444, 449, 450, 451, 452, 457, 460, 461, 464, 477, 480, 481, 484, 521, 522, 528, 531, 532, 535, 548, 551, 564, 567, 568, 571, 577, 578, 579, 580, 581, 582, 587, 588, 589, 590, 591, 592, 595, 596, 604, 605, 612, 615, 616, 617, 618, 619, 620, 623, 634, 649, 650, 655, 656, 657, 661, 663, 664, 665, 666, 667, 699, 700, 702, 704, 705, 706, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 723, 724, 726, 733, 735, 744, 746, 750, 752, 763, 765, 769, 771, 772, 774, 784, 785, 788, 790, 793, 795, 798, 800, 801, 802, 803, 804, 805, 806, 809, 814, 817, 818, 821, 826, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 847, 848, 851, 882, 883, 886, 887, 888, 889, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 917, 924, 925, 928, 945, 948, 949, 952, 957, 958, 961, 968], "If": [0, 4, 5, 6, 14, 17, 18, 19, 20, 21, 24, 27, 28, 69, 70, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 133, 145, 195, 196, 197, 204, 205, 208, 210, 211, 218, 219, 222, 230, 233, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 272, 274, 294, 303, 322, 346, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 416, 419, 420, 423, 424, 427, 441, 444, 445, 448, 449, 452, 485, 488, 489, 492, 497, 500, 501, 504, 509, 512, 513, 516, 523, 526, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 577, 581, 582, 583, 586, 587, 631, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 712, 713, 716, 718, 720, 740, 742, 744, 746, 753, 755, 756, 758, 760, 762, 763, 765, 775, 777, 778, 780, 784, 785, 788, 790, 793, 795, 798, 800, 814, 817, 818, 821, 834, 837, 839, 840, 843, 844, 847, 860, 861, 862, 864, 876, 877, 887, 892, 893, 895, 899, 900, 901, 902, 904, 905, 906, 910, 912, 913, 914, 917, 919, 922, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 968], "import": [0, 4, 15, 20, 65, 66, 110, 111, 113, 114, 115, 119, 121, 122, 123, 124, 125, 128, 130, 131, 133, 145, 303, 344, 968, 974], "numpi": [0, 4, 5, 6, 14, 15, 19, 20, 69, 70, 117, 119, 123, 124, 125, 126, 128, 130, 133, 587, 656, 924, 925, 928, 968], "np": [0, 4, 121, 123, 124, 125, 126, 130, 131, 133, 968], "x": [0, 4, 12, 21, 22, 23, 24, 27, 28, 31, 32, 35, 36, 37, 38, 45, 46, 49, 50, 57, 58, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 104, 105, 108, 109, 113, 114, 115, 118, 119, 122, 125, 126, 128, 130, 131, 132, 133, 156, 157, 158, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 195, 199, 202, 203, 205, 208, 209, 213, 216, 217, 219, 222, 223, 230, 233, 235, 238, 239, 243, 246, 247, 248, 249, 252, 253, 254, 257, 258, 260, 261, 262, 265, 266, 272, 274, 275, 276, 277, 278, 279, 284, 303, 322, 323, 324, 325, 328, 329, 337, 341, 346, 348, 353, 354, 355, 356, 357, 358, 359, 362, 363, 366, 367, 368, 369, 370, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 412, 415, 416, 417, 418, 419, 420, 423, 424, 427, 437, 440, 441, 444, 445, 448, 449, 450, 451, 452, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 509, 512, 521, 522, 528, 531, 536, 539, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 577, 578, 579, 580, 581, 582, 583, 586, 587, 595, 596, 597, 599, 600, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 626, 627, 629, 630, 631, 633, 634, 635, 636, 640, 649, 650, 653, 655, 656, 657, 659, 660, 661, 672, 677, 679, 680, 694, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 740, 742, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 763, 765, 766, 768, 769, 771, 772, 774, 778, 780, 784, 785, 788, 790, 793, 795, 798, 800, 801, 802, 803, 804, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 851, 852, 855, 856, 859, 864, 865, 870, 874, 875, 876, 882, 883, 886, 887, 889, 890, 891, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 917, 918, 919, 922, 923, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 962, 963, 966, 967, 968, 989, 1000], "arrai": [0, 4, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 145, 146, 154, 156, 157, 160, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 188, 190, 191, 194, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 232, 233, 234, 235, 238, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 272, 273, 274, 275, 277, 278, 279, 284, 286, 289, 291, 292, 294, 298, 303, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 341, 343, 347, 348, 353, 354, 356, 357, 358, 359, 362, 363, 366, 367, 369, 370, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 418, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 440, 441, 444, 445, 448, 449, 451, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 578, 580, 581, 582, 583, 586, 587, 588, 590, 591, 592, 595, 596, 597, 599, 600, 602, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 624, 626, 627, 628, 629, 630, 631, 633, 634, 636, 639, 640, 641, 643, 644, 649, 650, 653, 655, 656, 657, 659, 660, 661, 663, 665, 666, 667, 668, 670, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 694, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 739, 740, 742, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783, 784, 785, 788, 790, 793, 795, 798, 800, 801, 803, 804, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 836, 837, 838, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 861, 862, 863, 864, 866, 876, 877, 882, 883, 886, 887, 888, 889, 890, 891, 892, 893, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 917, 919, 922, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 968, 971, 973, 989, 997, 1000], "2": [0, 4, 18, 19, 21, 22, 23, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 69, 70, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 115, 119, 122, 126, 127, 128, 130, 131, 132, 133, 145, 156, 162, 163, 165, 167, 170, 172, 173, 175, 177, 180, 187, 188, 189, 190, 191, 194, 195, 218, 219, 222, 230, 233, 240, 241, 243, 246, 261, 265, 266, 272, 275, 276, 277, 278, 279, 303, 322, 323, 325, 337, 339, 341, 348, 353, 354, 355, 356, 357, 358, 367, 368, 369, 370, 371, 372, 375, 380, 383, 384, 387, 392, 395, 396, 399, 408, 411, 412, 415, 416, 417, 418, 419, 420, 423, 424, 427, 441, 444, 449, 450, 451, 452, 457, 460, 461, 464, 477, 480, 481, 484, 497, 500, 521, 522, 528, 531, 532, 535, 548, 551, 564, 567, 568, 571, 577, 578, 579, 580, 581, 582, 587, 588, 589, 590, 591, 595, 596, 599, 600, 602, 605, 612, 615, 616, 617, 618, 619, 620, 634, 649, 650, 655, 661, 663, 664, 665, 666, 667, 699, 702, 703, 704, 705, 706, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 723, 724, 725, 726, 733, 735, 736, 739, 740, 742, 744, 746, 750, 752, 753, 755, 756, 758, 763, 765, 769, 770, 771, 772, 774, 778, 779, 780, 784, 785, 788, 795, 798, 800, 801, 802, 803, 804, 805, 806, 809, 814, 817, 818, 821, 826, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 843, 848, 851, 882, 883, 886, 887, 888, 889, 890, 891, 892, 893, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 917, 924, 925, 928, 929, 932, 957, 958, 961, 968], "0": [0, 4, 19, 22, 23, 29, 30, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 51, 52, 57, 58, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 128, 130, 131, 132, 133, 156, 157, 158, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 180, 182, 183, 185, 187, 188, 189, 190, 191, 195, 196, 197, 210, 211, 212, 224, 225, 227, 228, 229, 243, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 265, 266, 272, 275, 277, 278, 279, 286, 303, 305, 308, 312, 315, 319, 322, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 341, 344, 346, 347, 351, 353, 354, 355, 357, 358, 359, 362, 363, 366, 367, 370, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 400, 403, 408, 411, 412, 415, 416, 417, 418, 419, 420, 423, 424, 427, 441, 444, 445, 448, 449, 450, 451, 452, 461, 464, 481, 484, 485, 488, 489, 492, 497, 500, 521, 522, 523, 526, 528, 531, 532, 535, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 577, 578, 579, 580, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 595, 596, 599, 600, 602, 604, 605, 606, 612, 615, 616, 619, 620, 625, 634, 640, 643, 644, 649, 655, 656, 657, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 682, 683, 684, 685, 686, 687, 688, 699, 700, 702, 704, 705, 706, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 723, 724, 725, 726, 733, 735, 763, 765, 769, 771, 772, 773, 774, 778, 780, 784, 785, 788, 790, 793, 795, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 825, 826, 829, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 851, 856, 858, 864, 876, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 917, 924, 925, 928, 929, 932, 933, 936, 945, 946, 947, 948, 949, 952, 953, 954, 955, 956, 957, 958, 961, 968, 980, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012], "print": [0, 4, 5, 6, 12, 18, 22, 23, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 65, 66, 69, 70, 71, 72, 73, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 110, 111, 115, 122, 128, 130, 131, 132, 156, 157, 158, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 180, 182, 183, 185, 187, 188, 189, 190, 191, 195, 218, 219, 222, 230, 233, 240, 241, 243, 246, 258, 260, 261, 265, 266, 272, 275, 276, 277, 278, 279, 287, 288, 303, 323, 337, 338, 339, 340, 341, 343, 346, 350, 353, 354, 355, 356, 357, 358, 367, 368, 369, 370, 371, 372, 375, 388, 391, 392, 395, 396, 399, 408, 411, 412, 415, 416, 417, 418, 419, 420, 423, 424, 427, 441, 444, 449, 450, 451, 452, 457, 460, 461, 464, 477, 480, 481, 484, 521, 522, 528, 531, 532, 535, 548, 551, 564, 567, 568, 571, 577, 578, 579, 580, 581, 582, 587, 588, 589, 590, 591, 592, 595, 596, 604, 605, 612, 615, 616, 617, 618, 619, 620, 623, 641, 649, 650, 655, 656, 657, 661, 663, 664, 666, 667, 699, 700, 702, 704, 705, 706, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 723, 724, 726, 733, 735, 750, 752, 763, 765, 769, 771, 772, 774, 784, 785, 788, 790, 793, 795, 798, 800, 801, 802, 803, 804, 805, 814, 817, 818, 821, 826, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 843, 848, 851, 882, 883, 886, 887, 888, 889, 890, 891, 892, 893, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 917, 924, 925, 928, 929, 932, 945, 948, 949, 952, 957, 958, 961, 968], "function": [0, 4, 5, 6, 14, 19, 21, 22, 23, 24, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 65, 66, 69, 70, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 119, 121, 125, 127, 129, 130, 131, 132, 143, 144, 156, 157, 158, 160, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 180, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 202, 204, 205, 206, 208, 210, 211, 213, 214, 216, 218, 219, 220, 222, 224, 225, 227, 228, 230, 233, 235, 236, 238, 240, 241, 243, 244, 246, 248, 250, 252, 253, 255, 257, 258, 260, 261, 263, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 362, 363, 366, 367, 368, 369, 370, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 417, 418, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 440, 441, 444, 445, 448, 449, 450, 451, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 670, 672, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 739, 740, 742, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783, 784, 785, 788, 790, 793, 795, 798, 800, 801, 802, 803, 804, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 886, 887, 888, 889, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 917, 919, 922, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 968, 971, 973, 975, 976, 977, 1005, 1008, 1010], "py": [0, 4, 5, 19, 113, 114, 118, 119, 123, 124, 126, 128, 130, 132, 133, 887, 888, 892], "noqa": [0, 4, 5, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 230, 233, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 353, 354, 357, 367, 370, 392, 395, 412, 415, 416, 419, 424, 427, 481, 484, 532, 535, 548, 551, 564, 567, 568, 571, 577, 581, 582, 712, 721, 723, 724, 726, 800, 814, 817, 818, 821, 834, 837, 924, 929, 932], "The": [0, 4, 5, 13, 14, 16, 17, 18, 20, 21, 24, 25, 26, 27, 28, 69, 70, 71, 72, 73, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 144, 156, 157, 160, 162, 165, 177, 180, 187, 191, 192, 193, 195, 196, 197, 213, 216, 227, 228, 248, 252, 253, 257, 266, 270, 271, 272, 280, 285, 287, 288, 290, 293, 298, 302, 303, 312, 313, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 341, 342, 343, 344, 345, 346, 347, 349, 352, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 523, 526, 532, 535, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 577, 581, 582, 583, 586, 587, 593, 595, 598, 599, 607, 608, 614, 616, 619, 629, 630, 631, 633, 634, 635, 636, 638, 643, 644, 645, 646, 647, 650, 651, 652, 660, 661, 663, 666, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 694, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 740, 742, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 784, 785, 788, 790, 793, 795, 798, 800, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 839, 852, 855, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 886, 887, 888, 892, 899, 900, 901, 902, 904, 905, 906, 910, 912, 913, 914, 917, 919, 922, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 968, 978, 979, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009], "set_backend": [0, 4, 5, 12, 118, 119, 120, 123, 266, 287, 288, 303, 344, 587, 649, 968], "ha": [0, 4, 5, 14, 15, 16, 19, 69, 70, 114, 115, 118, 119, 120, 123, 124, 128, 130, 132, 133, 144, 145, 195, 230, 233, 303, 322, 353, 354, 357, 523, 526, 540, 543, 712, 736, 739, 759, 760, 762, 763, 765, 772, 774, 800, 814, 817, 840, 843, 904, 905, 906, 910, 912, 924, 933, 936, 941, 944, 945, 948, 949, 952, 953, 956], "over": [0, 4, 14, 16, 18, 65, 66, 69, 70, 110, 111, 114, 115, 119, 125, 130, 145, 712, 740, 742, 769, 771, 775, 777, 778, 780, 882, 883, 886, 887, 893, 895, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 1003, 1004], "ani": [0, 4, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 63, 64, 65, 66, 69, 70, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 192, 193, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 235, 238, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 303, 348, 353, 354, 357, 367, 370, 372, 375, 416, 419, 433, 436, 449, 452, 461, 464, 481, 484, 532, 535, 564, 567, 568, 571, 577, 581, 587, 588, 591, 608, 609, 610, 611, 612, 615, 626, 633, 634, 635, 636, 651, 652, 661, 672, 699, 702, 709, 711, 712, 713, 716, 724, 726, 800, 834, 837, 860, 861, 862, 863, 864, 870, 874, 882, 883, 886, 887, 893, 895, 904, 906, 910, 924, 929, 932, 957, 958, 961, 968], "pass": [0, 4, 20, 65, 66, 69, 70, 71, 72, 73, 110, 111, 114, 115, 116, 117, 118, 119, 121, 122, 125, 126, 130, 145, 266, 280, 303, 312, 347, 353, 384, 387, 587, 598, 631, 661, 697, 860, 861, 862, 978, 979, 1001, 1002, 1005, 1009, 1011, 1012], "jax": [0, 4, 5, 6, 15, 16, 19, 20, 119, 123, 124, 125, 126, 128, 130, 133, 145, 661, 677, 679, 904, 905, 906, 910, 912, 968], "get_backend": [0, 118, 119], "specifi": [0, 5, 69, 70, 112, 117, 118, 123, 124, 125, 126, 128, 131, 132, 133, 195, 196, 197, 204, 218, 224, 225, 227, 228, 240, 241, 248, 252, 253, 257, 258, 260, 266, 272, 274, 303, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 337, 341, 343, 346, 347, 348, 353, 544, 547, 587, 593, 605, 615, 616, 619, 626, 659, 712, 724, 726, 740, 742, 769, 771, 772, 774, 775, 777, 778, 780, 784, 785, 788, 790, 793, 795, 798, 800, 801, 804, 806, 809, 810, 813, 818, 821, 834, 837, 840, 843, 844, 847, 856, 859, 864, 869, 871, 872, 878, 879, 880, 881, 899, 900, 901, 904, 905, 906, 910, 912, 913, 914, 917, 924, 925, 928, 941, 944, 949, 952, 957, 958, 961, 963, 966], "isn": [0, 5, 19, 131, 145], "t": [0, 5, 15, 16, 18, 19, 20, 21, 65, 66, 110, 111, 115, 123, 128, 130, 131, 132, 133, 145, 587, 596, 699, 708, 709], "associ": [0, 5, 19, 118, 120, 145, 353, 367, 370, 523, 526, 712, 744, 746, 753, 755, 781, 783], "option": [0, 5, 18, 19, 24, 25, 26, 27, 28, 65, 66, 69, 70, 71, 72, 110, 111, 113, 114, 115, 118, 122, 123, 124, 125, 126, 128, 133, 145, 156, 157, 160, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 191, 192, 193, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 235, 238, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 272, 274, 280, 281, 282, 283, 290, 302, 303, 322, 346, 347, 348, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586, 587, 593, 599, 600, 602, 605, 606, 607, 609, 610, 611, 613, 615, 616, 619, 627, 638, 640, 643, 644, 651, 652, 661, 694, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 730, 732, 733, 735, 736, 739, 740, 742, 744, 746, 747, 749, 750, 752, 753, 755, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783, 784, 785, 788, 790, 793, 795, 798, 800, 801, 804, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 837, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 861, 862, 863, 864, 865, 870, 875, 876, 882, 883, 886, 887, 888, 889, 890, 892, 893, 895, 898, 899, 900, 901, 903, 904, 912, 913, 914, 917, 919, 922, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966], "str": [0, 5, 24, 25, 26, 69, 70, 123, 124, 192, 193, 195, 230, 233, 266, 270, 280, 281, 282, 285, 286, 289, 290, 291, 292, 295, 296, 297, 302, 303, 319, 322, 323, 325, 328, 329, 330, 331, 347, 587, 593, 607, 609, 610, 611, 638, 643, 644, 699, 700, 702, 704, 705, 706, 712, 756, 758, 860, 861, 862, 863, 864, 870, 924, 925, 928], "we": [0, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 65, 66, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145, 661, 672, 968, 974], "want": [0, 5, 15, 17, 18, 19, 65, 66, 110, 111, 117, 131, 132, 133, 145], "retriev": [0, 5, 19, 587, 593], "i": [0, 5, 19, 21, 112, 128, 131, 133, 195, 196, 197, 230, 233, 353, 354, 357, 384, 387, 400, 403, 408, 411, 416, 419, 449, 452, 453, 456, 465, 468, 521, 522, 528, 531, 540, 543, 544, 547, 587, 595, 596, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 712, 718, 720, 736, 739, 744, 746, 753, 755, 760, 762, 763, 765, 772, 774, 778, 780, 800, 844, 847, 904, 905, 906, 910, 912, 913, 914, 917, 919, 922, 924, 925, 928, 929, 932, 933, 936, 937, 940, 945, 948, 949, 952, 953, 956], "e": [0, 5, 15, 16, 17, 19, 21, 112, 122, 131, 145, 194, 195, 230, 233, 266, 271, 294, 303, 319, 353, 354, 357, 384, 387, 400, 403, 408, 411, 416, 419, 441, 444, 449, 452, 453, 456, 465, 468, 485, 488, 493, 496, 521, 522, 528, 531, 540, 543, 544, 547, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 712, 718, 720, 736, 739, 744, 746, 753, 755, 760, 762, 763, 765, 778, 780, 800, 844, 847, 887, 892, 893, 895, 904, 905, 906, 910, 912, 913, 914, 917, 919, 922, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956], "one": [0, 5, 15, 16, 18, 19, 69, 70, 80, 81, 82, 83, 90, 91, 94, 95, 98, 99, 115, 118, 121, 122, 123, 125, 126, 127, 130, 131, 133, 145, 195, 196, 197, 230, 233, 266, 273, 275, 278, 303, 332, 333, 334, 335, 347, 354, 358, 367, 371, 587, 588, 590, 591, 592, 616, 620, 637, 640, 643, 644, 712, 713, 717, 736, 739, 740, 742, 750, 752, 756, 758, 775, 777, 778, 780, 800, 801, 805, 814, 817, 818, 821, 834, 837, 838, 840, 843, 889, 891, 899, 900, 902, 904, 905, 906, 910, 911, 912, 924, 925, 928, 968], "default": [0, 5, 19, 24, 25, 26, 27, 28, 65, 66, 69, 70, 71, 72, 73, 110, 111, 114, 115, 118, 119, 122, 123, 124, 126, 132, 156, 157, 160, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 191, 192, 193, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 235, 238, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 272, 274, 281, 282, 283, 284, 303, 312, 313, 322, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 342, 344, 345, 346, 347, 348, 351, 352, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586, 587, 588, 591, 593, 599, 600, 602, 605, 606, 609, 610, 611, 613, 614, 615, 616, 619, 624, 625, 626, 627, 628, 631, 632, 633, 634, 636, 637, 638, 640, 642, 643, 644, 647, 649, 651, 652, 659, 660, 661, 663, 666, 668, 670, 672, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 694, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 730, 732, 733, 735, 736, 739, 740, 742, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783, 784, 785, 788, 790, 793, 795, 798, 800, 801, 804, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 837, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 861, 862, 863, 864, 865, 866, 870, 874, 875, 876, 877, 882, 883, 886, 887, 888, 889, 890, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 910, 912, 913, 914, 917, 919, 922, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 978, 979, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "torch": [0, 5, 12, 19, 113, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 192, 193, 266, 287, 288, 303, 344, 587, 649, 800, 814, 817, 968], "tensorflow": [0, 5, 12, 15, 16, 19, 20, 123, 124, 125, 126, 128, 133, 145, 968], "mxnet": [0, 5, 15, 20, 123, 124, 125, 128, 133, 968], "either": [0, 5, 12, 18, 19, 21, 69, 70, 114, 115, 118, 119, 122, 123, 124, 128, 130, 131, 145, 195, 213, 216, 353, 367, 370, 384, 387, 469, 472, 485, 488, 489, 492, 497, 500, 501, 504, 523, 526, 544, 547, 552, 555, 556, 559, 577, 581, 587, 608, 633, 637, 638, 712, 736, 739, 860, 861, 862, 863, 924, 941, 944, 949, 952, 989, 1000, 1001, 1002], "doesn": [0, 5, 18, 21, 115, 123, 128, 145], "matter": [0, 5, 14, 115], "been": [0, 5, 19, 114, 118, 119, 122, 123, 124, 126, 128, 144, 145, 303, 322, 587, 609, 610, 611, 887, 888], "ivy_np": [0, 5], "us": [0, 5, 12, 15, 16, 17, 19, 20, 35, 36, 65, 66, 69, 70, 71, 72, 73, 80, 81, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 144, 145, 156, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 191, 194, 266, 285, 303, 312, 313, 338, 342, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 372, 375, 392, 395, 412, 415, 424, 427, 461, 464, 481, 484, 521, 522, 528, 531, 532, 535, 548, 551, 564, 567, 587, 615, 622, 623, 637, 643, 644, 645, 646, 651, 652, 661, 663, 666, 668, 670, 681, 683, 685, 687, 699, 705, 707, 708, 710, 711, 712, 721, 723, 724, 726, 740, 742, 784, 785, 788, 800, 814, 817, 818, 821, 826, 829, 834, 837, 848, 851, 860, 861, 862, 863, 864, 865, 867, 873, 874, 875, 877, 882, 883, 886, 899, 900, 901, 902, 904, 905, 924, 925, 928, 957, 958, 961, 968, 989, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008], "ivy_jax": [0, 5], "subsequ": [0, 6, 18, 115, 117, 118, 121, 125, 126, 132], "call": [0, 6, 12, 15, 21, 71, 72, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 303, 347, 587, 642, 647, 658, 661, 672, 864, 865, 870, 874, 875, 989, 1000, 1001, 1002, 1005, 1009], "nativ": [0, 6, 24, 26, 27, 28, 69, 70, 123, 125, 130, 131, 195, 235, 238, 266, 270, 271, 280, 303, 319, 320, 321, 322, 323, 342, 349, 352, 587, 631, 633, 636, 978, 979], "native_arrai": [0, 6, 12, 29, 30, 37, 38, 74, 75, 82, 83, 156, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 191, 195, 230, 233, 266, 275, 278, 303, 325, 341, 353, 354, 357, 372, 375, 392, 395, 412, 415, 416, 419, 449, 452, 461, 464, 481, 484, 521, 522, 528, 531, 532, 535, 564, 567, 568, 571, 582, 587, 588, 589, 590, 591, 592, 596, 604, 605, 612, 615, 616, 619, 650, 655, 656, 657, 661, 663, 666, 699, 702, 705, 706, 711, 712, 718, 720, 721, 723, 724, 726, 769, 771, 784, 785, 788, 795, 798, 800, 801, 804, 814, 817, 818, 821, 826, 829, 839, 848, 851, 882, 883, 886, 887, 888, 899, 900, 901, 902, 903, 904, 905, 906, 910, 924, 925, 928, 929, 932, 957, 958, 961], "1": [0, 6, 12, 15, 16, 21, 22, 23, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 69, 70, 71, 72, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 115, 118, 122, 125, 126, 127, 128, 130, 131, 132, 133, 145, 156, 157, 158, 162, 165, 167, 168, 170, 172, 173, 175, 177, 178, 180, 187, 188, 189, 190, 191, 195, 196, 197, 198, 219, 222, 224, 225, 227, 228, 230, 233, 240, 241, 243, 246, 261, 265, 266, 272, 275, 276, 277, 278, 279, 286, 303, 307, 310, 312, 317, 322, 323, 325, 327, 331, 335, 337, 340, 341, 348, 353, 354, 355, 356, 357, 359, 362, 363, 366, 367, 368, 369, 370, 371, 372, 375, 384, 387, 392, 395, 396, 399, 408, 411, 412, 415, 416, 417, 418, 419, 420, 423, 424, 427, 441, 444, 445, 448, 449, 450, 451, 452, 457, 460, 461, 464, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 521, 522, 528, 531, 532, 535, 540, 543, 548, 551, 552, 555, 556, 559, 564, 567, 568, 571, 577, 578, 579, 580, 581, 582, 587, 588, 589, 590, 591, 592, 595, 596, 604, 605, 612, 615, 616, 617, 618, 619, 620, 634, 640, 643, 644, 649, 650, 652, 655, 656, 657, 659, 661, 663, 664, 665, 666, 667, 699, 700, 701, 702, 703, 704, 705, 706, 707, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 733, 735, 744, 746, 750, 752, 760, 762, 763, 765, 769, 771, 772, 774, 775, 776, 777, 778, 780, 784, 785, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 847, 848, 851, 864, 876, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 928, 929, 932, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 968, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012], "type": [0, 6, 12, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 302, 303, 319, 320, 321, 322, 323, 325, 335, 336, 337, 338, 339, 340, 341, 342, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 598, 599, 600, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 626, 627, 629, 630, 631, 633, 634, 635, 636, 640, 643, 644, 645, 646, 649, 651, 652, 653, 655, 656, 657, 659, 660, 661, 663, 664, 665, 666, 667, 668, 670, 671, 673, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 687, 688, 689, 690, 691, 692, 694, 696, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 870, 874, 875, 876, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000], "ndarrai": [0, 6, 121, 123, 124, 125, 126, 130, 195, 199, 202, 235, 238, 587, 656], "Or": [0, 6, 131], "jaxlib": [0, 6, 18, 123, 124, 126, 130], "xla_extens": [0, 6, 123, 124, 126, 130], "devicearrai": [0, 6, 130], "try_import_ivy_jax": 0, "warn": [0, 7, 8, 9, 10, 11], "fals": [0, 7, 8, 9, 10, 11, 24, 25, 26, 27, 28, 37, 38, 45, 46, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 122, 125, 131, 132, 133, 157, 159, 161, 162, 164, 166, 167, 169, 171, 172, 174, 176, 177, 179, 181, 182, 184, 186, 187, 188, 190, 196, 198, 199, 201, 203, 205, 207, 209, 210, 212, 213, 215, 217, 219, 221, 223, 224, 226, 227, 229, 230, 232, 234, 235, 237, 239, 240, 242, 243, 245, 247, 248, 249, 251, 253, 254, 256, 258, 259, 261, 262, 264, 266, 272, 275, 277, 278, 279, 284, 303, 322, 323, 334, 338, 339, 342, 347, 350, 352, 353, 354, 356, 358, 359, 361, 363, 365, 367, 369, 371, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 395, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 460, 461, 463, 464, 465, 467, 468, 469, 471, 472, 473, 475, 476, 477, 479, 480, 481, 483, 484, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 512, 513, 515, 516, 517, 519, 523, 525, 527, 528, 530, 532, 534, 535, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 583, 585, 587, 588, 589, 590, 591, 592, 595, 596, 600, 601, 605, 608, 612, 614, 616, 618, 620, 624, 631, 633, 634, 636, 637, 649, 659, 661, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 712, 713, 714, 715, 716, 717, 736, 738, 740, 741, 742, 763, 765, 778, 779, 780, 785, 787, 789, 790, 792, 794, 795, 797, 799, 800, 801, 803, 805, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 839, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 861, 862, 863, 864, 865, 866, 870, 874, 875, 876, 877, 883, 885, 887, 888, 893, 894, 896, 899, 900, 901, 903, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 978, 979, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010], "try_import_ivy_mxnet": 0, "try_import_ivy_numpi": 0, "try_import_ivy_tf": 0, "try_import_ivy_torch": 0, "unset_backend": [0, 119], "unset": [0, 12, 119, 128, 130], "adjust": [0, 12, 924, 945, 948, 953, 956], "dict": [0, 12, 24, 25, 26, 27, 28, 69, 70, 71, 72, 73, 122, 131, 132, 303, 312, 313, 322, 325, 328, 329, 330, 331, 587, 593, 609, 610, 611, 864, 866, 867, 870, 873, 876, 877], "previous": [0, 12, 18, 21, 117, 118, 128, 587, 598], "otherwis": [0, 12, 24, 25, 26, 27, 28, 69, 70, 121, 123, 124, 126, 128, 130, 195, 196, 197, 266, 272, 275, 278, 281, 282, 283, 303, 322, 353, 465, 468, 469, 472, 473, 476, 587, 597, 658, 661, 677, 679, 694, 712, 713, 716, 721, 723, 775, 777, 778, 780, 860, 861, 862, 864, 877, 899, 900, 901, 903, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966], "implement": [0, 12, 20, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 266, 272, 294, 303, 348, 353, 354, 357, 359, 362, 363, 366, 372, 375, 376, 379, 380, 383, 384, 387, 420, 423, 424, 427, 441, 444, 445, 448, 485, 488, 489, 492, 493, 496, 497, 500, 523, 526, 540, 543, 544, 547, 556, 559, 560, 563, 577, 581, 582, 712, 727, 729, 904, 905, 906, 910, 912, 913, 914, 917, 919, 922, 924, 929, 932, 933, 936, 937, 940, 968], "wa": [0, 12, 15, 69, 70, 115, 128, 130, 587, 658, 864, 877, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966], "last": [0, 12, 16, 19, 69, 70, 115, 119, 145, 156, 177, 180, 303, 322, 699, 709, 712, 718, 720, 724, 726, 740, 742, 772, 774, 775, 777, 784, 790, 793, 795, 798, 800, 818, 821, 834, 837, 839, 844, 847, 913, 914, 917, 919, 922, 957, 958, 961, 963, 966, 989, 999], "henc": [0, 12, 904, 905, 906, 910, 912], "here": [0, 12, 18, 19, 20, 113, 115, 122, 126, 128, 129, 130, 131, 132, 133, 144, 145], "tensor": [0, 12, 14, 69, 70, 113, 118, 119, 121, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 195, 224, 225, 227, 228, 266, 284, 353, 392, 395, 521, 522, 587, 640, 643, 644, 699, 707, 709, 712, 769, 771, 800, 814, 817, 830, 833, 839, 887, 888, 899, 902, 968, 989, 997, 999], "howev": [0, 12, 15, 18, 20, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 130, 131, 132, 133, 145], "befor": [0, 12, 18, 19, 20, 69, 70, 114, 117, 121, 123, 124, 125, 128, 131, 145, 303, 347, 353, 583, 586, 699, 710, 711, 860, 861, 862, 864, 876, 904, 905, 906, 910, 912, 924, 941, 944, 949, 952], "becom": [0, 12, 14, 16, 19, 115, 122, 128, 133, 145, 800, 801, 804], "swap": [0, 12, 800, 848, 851], "python": [0, 12, 13, 14, 15, 18, 19, 21, 128, 130, 131, 145, 195, 196, 197, 303, 342, 352, 353, 544, 547, 968, 974], "framework": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 23, 24, 25, 26, 27, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 69, 70, 72, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 112, 116, 118, 119, 120, 121, 124, 126, 127, 130, 133, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 972, 973, 974, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015], "op": [0, 12, 113, 128, 145], "eagertensor": [0, 12], "def": [1, 20, 113, 115, 118, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 267, 268, 269, 304, 311, 314, 662, 968, 981, 984, 987], "support": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 23, 25, 26, 27, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 69, 70, 72, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 133, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 972, 973, 974, 976, 977, 979, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015], "backend": [4, 5, 6, 12, 14, 19, 20, 24, 26, 28, 69, 70, 112, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 129, 130, 133, 266, 287, 288, 290, 302, 303, 338, 340, 350, 587, 628, 631, 632, 638, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 697, 968, 974, 978, 979, 1005, 1006, 1007, 1008, 1009, 1010], "ml": [13, 15, 16, 17, 127, 128, 129, 131, 132, 133, 144, 968, 974], "explos": [13, 15, 968], "A": [13, 14, 15, 16, 21, 69, 70, 71, 72, 73, 112, 117, 118, 122, 123, 124, 128, 131, 145, 195, 210, 211, 235, 238, 303, 312, 313, 347, 353, 536, 539, 587, 623, 655, 712, 750, 752, 759, 760, 762, 763, 765, 800, 839, 844, 847, 864, 865, 867, 869, 871, 872, 873, 874, 875, 878, 879, 880, 881, 924, 925, 928, 957, 958, 961, 963, 966, 968, 1011, 1012], "huge": [13, 15, 131, 968], "number": [13, 14, 18, 69, 70, 71, 72, 73, 115, 122, 124, 125, 128, 131, 133, 192, 193, 194, 195, 196, 197, 199, 202, 210, 211, 224, 225, 227, 228, 230, 233, 235, 238, 266, 273, 285, 286, 289, 291, 292, 294, 303, 339, 340, 341, 353, 367, 370, 384, 387, 416, 419, 449, 452, 453, 456, 521, 522, 523, 526, 540, 543, 544, 547, 548, 551, 552, 555, 583, 586, 587, 588, 591, 614, 623, 624, 639, 657, 660, 699, 710, 712, 724, 726, 727, 729, 744, 746, 759, 763, 765, 775, 777, 800, 801, 804, 810, 813, 822, 825, 826, 829, 834, 837, 839, 844, 847, 852, 855, 856, 859, 860, 861, 862, 863, 887, 888, 897, 899, 902, 904, 905, 906, 910, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 968, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000], "tool": [13, 16, 19, 129, 133, 144, 145, 968], "have": [13, 14, 15, 16, 18, 19, 20, 21, 69, 70, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145, 156, 157, 160, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 191, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 272, 273, 274, 286, 303, 348, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586, 587, 599, 600, 602, 605, 609, 610, 611, 613, 616, 619, 627, 640, 643, 644, 661, 677, 679, 694, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 739, 740, 742, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783, 784, 785, 788, 790, 793, 795, 798, 800, 801, 804, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 837, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 882, 883, 886, 887, 888, 889, 890, 892, 893, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 910, 912, 913, 914, 917, 919, 922, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 968], "explod": [13, 14, 968], "onto": [13, 14, 303, 332, 333, 864, 870, 876, 968], "scene": [13, 14, 112, 127, 129, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 968], "b": [13, 16, 17, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 112, 115, 118, 119, 122, 127, 128, 129, 131, 132, 133, 143, 187, 188, 190, 266, 275, 277, 278, 279, 303, 325, 353, 354, 356, 357, 358, 367, 369, 370, 371, 372, 375, 392, 395, 412, 415, 416, 418, 419, 424, 427, 449, 451, 452, 461, 464, 481, 484, 528, 531, 532, 535, 548, 551, 564, 567, 568, 571, 577, 578, 580, 581, 582, 587, 588, 590, 591, 592, 595, 596, 604, 605, 612, 615, 616, 618, 619, 620, 657, 661, 663, 665, 666, 667, 699, 702, 705, 706, 711, 712, 713, 715, 716, 717, 718, 720, 721, 723, 724, 726, 750, 752, 760, 762, 769, 771, 781, 783, 784, 785, 788, 800, 801, 803, 804, 805, 814, 817, 818, 821, 826, 829, 834, 836, 837, 838, 844, 847, 848, 851, 882, 883, 886, 887, 889, 891, 892, 893, 895, 899, 901, 902, 903, 904, 906, 907, 909, 910, 913, 914, 917, 924, 925, 928, 929, 932, 957, 958, 961, 968, 974], "why": [13, 15, 19, 122, 125, 126, 130, 968], "unifi": [13, 15, 69, 70, 121, 128, 145, 303, 332, 333, 334, 335, 347, 968], "should": [13, 15, 18, 19, 20, 21, 69, 70, 71, 72, 73, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 131, 132, 192, 193, 195, 230, 233, 248, 252, 253, 257, 266, 274, 303, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 441, 444, 445, 448, 449, 452, 465, 468, 469, 472, 473, 476, 477, 480, 485, 488, 489, 492, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 523, 526, 532, 535, 540, 543, 544, 547, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586, 587, 598, 631, 640, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 699, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 733, 735, 736, 739, 744, 746, 750, 752, 753, 755, 756, 758, 760, 762, 763, 765, 769, 771, 772, 774, 775, 777, 778, 780, 800, 830, 833, 887, 898, 899, 900, 901, 904, 905, 906, 910, 912, 924, 925, 928, 929, 932, 933, 936, 941, 944, 945, 948, 949, 952, 953, 956, 968], "them": [13, 14, 15, 16, 117, 119, 121, 122, 128, 130, 131, 132, 145, 968], "c": [13, 15, 16, 17, 98, 99, 112, 115, 118, 122, 127, 128, 129, 131, 145, 353, 532, 535, 587, 595, 596, 604, 657, 661, 663, 666, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 699, 705, 800, 844, 847, 889, 891, 899, 902, 924, 925, 928, 945, 948, 953, 956, 968, 974], "standard": [13, 112, 113, 114, 116, 117, 121, 125, 126, 145, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 230, 233, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 286, 353, 354, 357, 367, 370, 372, 375, 392, 395, 412, 415, 416, 419, 424, 427, 449, 452, 481, 484, 532, 535, 548, 551, 564, 567, 568, 571, 577, 581, 582, 712, 721, 723, 724, 726, 800, 814, 817, 818, 821, 834, 837, 882, 883, 886, 887, 892, 904, 905, 906, 910, 913, 914, 917, 924, 929, 932, 945, 948, 953, 956, 957, 958, 961, 968, 974, 1003, 1004], "re": [13, 14, 15, 17, 18, 19, 20, 21, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 133, 145, 303, 347, 587, 609, 712, 769, 771, 800, 834, 837, 899, 903, 968], "collabor": [13, 14, 15, 968], "consortium": [13, 15, 968, 974], "data": [13, 15, 69, 70, 71, 72, 73, 112, 113, 114, 118, 120, 122, 124, 125, 126, 130, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 230, 233, 235, 238, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 270, 271, 272, 274, 275, 278, 280, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 298, 302, 303, 305, 306, 307, 308, 309, 310, 315, 316, 317, 319, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 523, 526, 532, 535, 540, 543, 544, 547, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586, 587, 595, 596, 633, 634, 636, 653, 661, 677, 679, 697, 699, 708, 712, 713, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 739, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 760, 762, 763, 765, 769, 771, 772, 774, 775, 777, 778, 780, 800, 814, 817, 818, 821, 822, 825, 830, 833, 834, 837, 840, 843, 844, 847, 887, 898, 899, 900, 901, 902, 913, 914, 917, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 968, 974, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000], "api": [13, 14, 18, 19, 112, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 129, 131, 145, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 230, 233, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 353, 354, 357, 367, 370, 372, 375, 392, 395, 412, 415, 416, 419, 424, 427, 449, 452, 481, 484, 532, 535, 548, 551, 564, 567, 568, 571, 577, 581, 582, 712, 721, 723, 724, 726, 800, 814, 817, 818, 821, 834, 837, 904, 905, 906, 910, 913, 914, 917, 924, 929, 932, 957, 958, 961, 968, 974], "open": [14, 15, 16, 17, 18, 21, 114, 144, 195, 196, 197, 887, 889, 890, 893, 895, 968], "project": [14, 15, 16, 18, 19, 21, 113, 119, 130, 132, 144, 145, 887, 888, 892], "grown": 14, "consider": [14, 115, 126], "recent": [14, 15, 18, 19], "year": [14, 16, 145, 968], "especi": [14, 18], "deep": [14, 17, 19, 20, 69, 70, 127, 131, 968], "learn": [14, 15, 18, 20, 112, 118, 127, 133, 144, 353, 457, 460, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 860, 861, 862, 863, 968, 1005, 1006, 1007, 1008, 1009, 1010], "can": [14, 15, 16, 17, 18, 19, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 195, 199, 202, 235, 238, 266, 275, 278, 303, 345, 346, 347, 712, 733, 735, 800, 830, 833, 887, 889, 890, 968, 974], "seen": [14, 15, 115, 130, 131], "rapidli": 14, "increas": [14, 303, 327, 331, 335, 800, 810, 813, 856, 859, 864, 876], "github": [14, 19, 20, 114, 117], "repo": [14, 15, 16, 18, 19, 116, 128, 130, 131, 132, 133, 144, 968, 974], "contain": [14, 18, 19, 20, 21, 24, 27, 28, 37, 38, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 118, 123, 125, 126, 127, 128, 129, 132, 133, 145, 156, 157, 162, 167, 170, 172, 175, 177, 182, 185, 187, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 235, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 303, 324, 325, 328, 337, 341, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 536, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586, 587, 588, 589, 591, 593, 596, 599, 600, 602, 604, 605, 612, 615, 616, 619, 626, 635, 655, 656, 657, 661, 663, 666, 668, 673, 677, 681, 685, 689, 699, 702, 705, 706, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 739, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 784, 785, 788, 790, 793, 795, 798, 800, 801, 804, 806, 810, 814, 817, 818, 821, 822, 825, 826, 829, 830, 834, 837, 839, 840, 844, 848, 851, 852, 856, 860, 861, 862, 863, 864, 877, 882, 883, 886, 887, 888, 889, 892, 893, 895, 899, 900, 901, 902, 903, 904, 905, 906, 910, 912, 913, 914, 917, 919, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 968, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1005, 1009, 1011, 1012], "term": [14, 19, 122, 699, 709, 989, 999], "time": [14, 15, 16, 18, 19, 20, 117, 118, 122, 123, 126, 128, 131, 133, 145, 661, 668, 670, 681, 683, 699, 709, 800, 852, 855, 860, 861, 862, 863, 899, 900, 901, 904, 905, 906, 910, 989, 1000, 1001, 1002], "These": [14, 15, 16, 19, 114, 115, 117, 118, 122, 123, 125, 126, 128, 129, 131, 132, 133, 145, 712, 727, 729, 968, 974], "ar": [14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 69, 70, 71, 72, 73, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 146, 154, 195, 196, 197, 303, 312, 313, 337, 341, 343, 347, 353, 420, 423, 509, 512, 513, 516, 548, 551, 556, 559, 577, 581, 587, 588, 591, 595, 596, 597, 621, 627, 628, 632, 639, 641, 653, 699, 708, 712, 718, 720, 736, 739, 740, 742, 744, 746, 753, 755, 763, 765, 766, 768, 775, 777, 800, 801, 804, 818, 821, 834, 837, 864, 866, 870, 876, 887, 892, 893, 895, 899, 900, 901, 902, 904, 905, 968, 1011, 1012], "written": [14, 18, 113, 114, 121, 125, 126, 128, 130, 133, 145], "mani": [14, 15, 16, 18, 19, 20, 69, 70, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 145, 800, 839], "differ": [14, 15, 16, 18, 19, 69, 70, 71, 72, 73, 112, 113, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 145, 266, 286, 303, 324, 325, 328, 329, 353, 367, 370, 523, 526, 572, 576, 699, 708, 800, 844, 847, 924, 941, 944, 949, 952, 968], "while": [14, 15, 18, 19, 69, 70, 71, 72, 73, 115, 119, 125, 132, 133, 145, 353, 509, 512, 513, 516, 904, 905, 924, 933, 936], "thi": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 69, 70, 71, 72, 73, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 157, 158, 162, 163, 167, 168, 172, 173, 177, 178, 182, 183, 187, 188, 189, 190, 195, 196, 197, 199, 200, 202, 204, 205, 206, 208, 210, 211, 213, 214, 216, 218, 219, 220, 222, 224, 225, 227, 228, 230, 233, 235, 236, 238, 240, 241, 243, 244, 246, 248, 250, 252, 253, 255, 257, 258, 260, 261, 263, 265, 266, 275, 276, 277, 278, 279, 303, 327, 331, 335, 342, 347, 352, 353, 354, 355, 356, 357, 358, 367, 368, 369, 370, 371, 372, 375, 392, 395, 408, 411, 412, 415, 416, 417, 418, 419, 424, 427, 445, 448, 449, 450, 451, 452, 481, 484, 509, 512, 513, 516, 532, 535, 544, 547, 548, 551, 564, 567, 568, 571, 577, 578, 579, 580, 581, 582, 587, 588, 589, 590, 592, 614, 615, 616, 617, 618, 620, 631, 642, 647, 661, 663, 664, 665, 667, 668, 670, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 697, 699, 702, 708, 711, 712, 713, 714, 715, 716, 717, 721, 723, 724, 726, 740, 742, 759, 800, 801, 802, 803, 805, 814, 817, 818, 821, 830, 833, 834, 835, 836, 837, 838, 844, 847, 864, 870, 876, 877, 882, 883, 886, 889, 891, 899, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 917, 924, 929, 932, 933, 936, 945, 948, 953, 956, 957, 958, 961, 968, 974, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010], "wonder": [14, 16, 130], "thing": [14, 15, 16, 18, 19, 20, 119, 130, 131], "research": [14, 144], "develop": [14, 15, 16, 17, 18, 19, 20, 144, 145, 968], "also": [14, 15, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 69, 70, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 157, 158, 162, 163, 167, 168, 172, 173, 177, 178, 182, 183, 187, 188, 189, 190, 195, 196, 197, 199, 200, 202, 204, 205, 206, 208, 210, 211, 213, 214, 216, 218, 219, 220, 222, 224, 225, 227, 228, 230, 233, 235, 236, 240, 241, 243, 244, 246, 248, 250, 252, 253, 255, 257, 258, 260, 261, 263, 265, 266, 275, 276, 277, 278, 279, 353, 354, 355, 356, 357, 358, 367, 368, 369, 370, 371, 372, 375, 392, 395, 412, 415, 416, 417, 418, 419, 424, 427, 449, 450, 451, 452, 532, 535, 548, 551, 564, 567, 568, 571, 577, 578, 579, 580, 581, 582, 587, 588, 589, 590, 592, 615, 616, 617, 618, 620, 631, 661, 663, 664, 665, 667, 668, 670, 699, 702, 708, 711, 712, 713, 714, 715, 716, 717, 721, 723, 724, 726, 800, 801, 802, 803, 805, 814, 817, 818, 821, 834, 835, 836, 837, 838, 860, 861, 862, 863, 864, 865, 866, 874, 875, 876, 882, 883, 886, 889, 891, 904, 905, 906, 907, 908, 909, 910, 913, 914, 917, 924, 929, 932, 957, 958, 961, 989, 999], "consid": [14, 15, 69, 70, 113, 118, 129, 130, 131, 353, 509, 512, 513, 516, 904, 905, 906, 910, 912], "speed": 14, "evolv": 14, "sharabl": 14, "code": [14, 15, 16, 18, 19, 20, 21, 69, 70, 71, 72, 73, 84, 85, 112, 114, 115, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 143, 145, 156, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 191, 303, 325, 348, 353, 412, 415, 568, 571, 661, 663, 665, 666, 667, 699, 705, 706, 904, 905, 906, 910, 913, 914, 917, 924, 925, 928, 968, 974], "significantli": 14, "hinder": [14, 126], "librari": [14, 15, 16, 128, 133, 143, 145, 303, 348, 353, 445, 448, 509, 512, 513, 516, 712, 727, 729, 904, 905, 906, 910, 912, 924, 929, 932, 933, 936, 937, 940, 968], "outdat": 14, "month": 14, "rigor": 14, "maintain": [14, 19, 913, 914, 917, 919, 922], "against": [14, 69, 70, 117, 145, 266, 273, 712, 736, 739, 740, 742, 744, 746, 753, 755, 899, 900], "newest": 14, "version": [14, 15, 16, 18, 114, 128, 130, 712, 727, 729, 968], "For": [14, 15, 16, 18, 19, 20, 21, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 195, 196, 197, 230, 233, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 416, 419, 420, 423, 424, 427, 441, 444, 445, 448, 449, 452, 485, 488, 489, 492, 497, 500, 501, 504, 523, 526, 540, 543, 544, 547, 548, 551, 556, 559, 560, 563, 564, 567, 577, 581, 582, 583, 586, 661, 677, 679, 697, 712, 763, 765, 772, 774, 800, 801, 804, 844, 847, 904, 905, 906, 910, 912, 924, 929, 932, 937, 940, 949, 952, 978, 979], "softwar": [14, 15, 18, 19], "pipelin": [14, 121, 133], "where": [14, 15, 16, 17, 18, 19, 20, 21, 69, 70, 71, 72, 114, 118, 119, 121, 122, 123, 124, 125, 128, 131, 132, 133, 145, 195, 218, 219, 222, 230, 233, 353, 384, 387, 441, 444, 493, 496, 523, 526, 540, 543, 587, 627, 631, 640, 712, 727, 729, 744, 746, 753, 755, 756, 758, 763, 765, 766, 768, 772, 774, 775, 777, 800, 801, 804, 810, 813, 814, 817, 822, 825, 844, 847, 856, 859, 864, 865, 875, 887, 888, 899, 902, 924, 945, 948, 953, 956, 957, 958, 961, 963, 966, 968], "rapid": [14, 15, 18], "prototyp": 14, "vital": [14, 133], "signific": [14, 15, 145], "bottleneck": 14, "As": [14, 19, 65, 66, 110, 111, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 145, 904, 905, 906, 910, 912], "new": [14, 15, 16, 17, 18, 19, 20, 21, 69, 70, 112, 113, 114, 115, 117, 120, 122, 123, 125, 127, 130, 133, 144, 195, 204, 213, 216, 218, 219, 222, 240, 241, 243, 246, 258, 260, 261, 265, 266, 298, 353, 388, 391, 493, 496, 536, 539, 587, 609, 610, 611, 614, 615, 616, 619, 643, 644, 645, 646, 651, 652, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 800, 814, 817, 830, 833, 844, 847, 864, 869, 880, 881, 882, 883, 886, 968, 978, 979, 989, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "futur": [14, 16, 18, 19, 130, 145, 712, 727, 729], "avail": [14, 18, 19, 69, 70, 114, 124, 145, 303, 322, 338, 339, 340, 350, 587, 610], "specif": [14, 20, 69, 70, 118, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 144, 145, 266, 294, 303, 345, 348, 353, 509, 512, 513, 516, 587, 609, 610, 611, 638, 712, 727, 729, 769, 771, 800, 844, 847, 860, 861, 862, 863, 887, 888, 924, 929, 932, 933, 936, 937, 940, 968, 971, 973, 974, 1001, 1002], "quickli": [14, 16, 18, 19, 131, 132], "obsolet": [14, 16], "user": [14, 15, 18, 19, 21, 112, 117, 119, 122, 125, 127, 145, 989, 1000, 1001, 1002], "constantli": 14, "invent": 14, "wheel": 14, "our": [14, 15, 17, 18, 19, 65, 66, 110, 111, 115, 122, 127, 130, 131, 132, 133, 145, 968], "desir": [14, 69, 70, 266, 272, 275, 278, 303, 348, 587, 627, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000], "provid": [14, 18, 19, 69, 70, 114, 115, 118, 121, 122, 123, 124, 125, 126, 128, 132, 144, 145, 192, 193, 195, 230, 233, 266, 281, 282, 283, 290, 294, 302, 303, 322, 587, 608, 640, 644, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 712, 775, 777, 800, 818, 821, 844, 847, 899, 900, 924, 945, 948, 953, 956, 957, 958, 961, 963, 966, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1005, 1006, 1007, 1008, 1009, 1010], "simultan": [14, 16], "all": [14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 63, 64, 65, 66, 69, 70, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 146, 154, 192, 193, 195, 196, 197, 248, 252, 253, 257, 303, 312, 337, 343, 587, 588, 591, 595, 596, 621, 641, 656, 699, 709, 712, 760, 762, 769, 771, 778, 780, 800, 818, 821, 834, 837, 860, 861, 862, 863, 864, 865, 866, 875, 876, 877, 887, 888, 893, 895, 957, 968, 971, 973], "modern": [14, 15], "simpl": [14, 18, 19, 113, 114, 115, 117, 118, 121, 122, 123, 124, 125, 128, 130, 132, 133, 145, 587, 612], "scalabl": [14, 128], "manner": [14, 24, 27, 28, 69, 70, 113, 114, 124, 131, 144, 145, 864, 876], "must": [14, 16, 18, 19, 20, 69, 70, 71, 72, 73, 113, 114, 115, 118, 121, 122, 123, 124, 126, 128, 132, 133, 156, 157, 160, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 191, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 272, 273, 274, 303, 332, 333, 334, 335, 347, 348, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586, 587, 599, 600, 602, 605, 609, 610, 611, 613, 616, 619, 627, 640, 643, 644, 661, 694, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 739, 740, 742, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783, 784, 785, 788, 790, 793, 795, 798, 800, 801, 804, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 837, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 882, 883, 886, 887, 888, 889, 890, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 910, 912, 913, 914, 917, 919, 922, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 1005, 1009], "determin": [14, 69, 70, 114, 118, 122, 123, 124, 266, 275, 278, 280, 285, 290, 291, 292, 302, 303, 338, 339, 340, 350, 353, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 400, 403, 404, 407, 408, 411, 412, 415, 420, 423, 424, 427, 428, 431, 441, 444, 445, 448, 465, 468, 469, 472, 473, 476, 485, 488, 489, 492, 497, 500, 501, 504, 517, 520, 523, 526, 540, 543, 544, 547, 556, 559, 560, 563, 564, 567, 577, 581, 582, 587, 588, 591, 595, 596, 626, 628, 632, 633, 634, 635, 636, 653, 660, 661, 677, 679, 699, 710, 712, 713, 716, 718, 720, 721, 723, 724, 726, 733, 735, 736, 739, 744, 746, 750, 752, 753, 755, 759, 760, 762, 772, 774, 775, 777, 778, 780, 860, 861, 862, 863, 904, 905, 906, 910, 912, 957, 958, 961, 963, 966], "exactli": [14, 16, 115, 122, 124, 968, 974], "common": [14, 20, 69, 70, 115, 118, 120, 122, 124, 145], "ground": [14, 117], "li": 14, "between": [14, 69, 70, 71, 72, 73, 115, 117, 118, 121, 122, 126, 127, 129, 130, 131, 133, 144, 195, 196, 197, 266, 286, 353, 384, 387, 540, 543, 784, 785, 788, 790, 793, 795, 798, 800, 814, 817, 844, 847, 864, 870, 887, 889, 890, 904, 905, 906, 910, 912, 968, 1005, 1007], "find": [14, 18, 19, 69, 70, 128, 131, 904, 905, 906, 910, 912, 968], "exist": [14, 15, 18, 20, 21, 69, 70, 71, 72, 114, 115, 116, 117, 118, 119, 120, 125, 128, 145, 587, 608, 1005, 1009], "essenti": [14, 15, 20, 115, 118, 124], "order": [14, 18, 19, 21, 69, 70, 71, 72, 73, 114, 115, 119, 121, 122, 123, 124, 126, 130, 131, 133, 145, 353, 384, 387, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 712, 727, 729, 740, 742, 763, 765, 766, 768, 778, 780, 800, 818, 821, 860, 861, 862, 899, 902, 904, 905, 906, 910, 912, 913, 914, 917, 919, 922, 1011, 1012], "design": [14, 15, 112, 125, 128, 130, 145], "univers": 14, "abstract": [14, 122, 132, 145, 303, 318, 1005, 1009], "In": [14, 16, 18, 19, 113, 114, 115, 118, 119, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 303, 342, 348, 349, 352, 353, 367, 370, 523, 526, 544, 547, 587, 593, 631, 800, 830, 833, 887, 893, 895, 968], "search": [14, 18, 24, 27, 28, 56, 69, 70, 101, 113, 115, 117, 900, 901, 902, 903], "languag": [14, 16, 128], "first": [14, 15, 18, 19, 21, 115, 118, 121, 122, 126, 128, 130, 131, 133, 192, 193, 195, 224, 225, 227, 228, 266, 293, 298, 303, 322, 334, 353, 367, 370, 392, 395, 400, 403, 404, 407, 408, 411, 412, 415, 433, 436, 453, 456, 461, 464, 477, 480, 481, 484, 501, 504, 505, 508, 513, 516, 517, 520, 523, 526, 532, 535, 540, 543, 572, 576, 587, 595, 661, 672, 712, 718, 720, 724, 726, 727, 729, 736, 739, 750, 752, 756, 758, 763, 765, 769, 771, 775, 777, 800, 806, 809, 834, 837, 844, 847, 848, 851, 860, 861, 862, 863, 864, 865, 874, 875, 887, 898, 899, 900, 901, 904, 905, 906, 910, 989, 1000, 1001, 1002, 1005, 1009], "see": [14, 17, 18, 19, 20, 116, 118, 122, 124, 126, 130, 131, 144, 145, 195, 196, 197, 213, 216, 224, 225, 227, 228, 266, 274, 294, 353, 367, 370, 392, 395, 400, 403, 404, 407, 408, 411, 412, 415, 428, 431, 445, 448, 477, 480, 501, 504, 513, 516, 517, 520, 523, 526, 532, 535, 540, 543, 544, 547, 572, 576, 712, 744, 746, 753, 755, 760, 762, 775, 777, 778, 780, 899, 901, 904, 905, 906, 910, 912, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 968], "clear": [14, 15, 16, 19, 20, 115, 117, 123, 124, 128, 130, 303, 321], "front": [14, 127, 128, 131, 968, 974], "runner": 14, "look": [14, 18, 19, 21, 113, 115, 118, 119, 122, 123, 124, 126, 128, 130, 132, 133, 968], "littl": [14, 130], "deeper": [14, 19, 112, 127, 303, 327, 331, 335, 864, 875, 876], "follow": [14, 15, 18, 19, 20, 21, 69, 70, 113, 114, 115, 117, 119, 121, 122, 123, 124, 125, 127, 128, 130, 131, 132, 133, 145, 266, 289, 303, 347, 353, 544, 547, 587, 629, 630, 631, 651, 652, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 699, 710, 711, 712, 756, 758, 778, 780, 864, 870, 876, 904, 905, 906, 910, 912, 968, 989, 999, 1005, 1009], "same": [14, 16, 18, 19, 21, 24, 25, 26, 69, 70, 113, 115, 117, 118, 121, 122, 124, 125, 126, 128, 130, 132, 133, 195, 196, 197, 205, 208, 219, 222, 230, 233, 243, 246, 248, 252, 253, 257, 261, 265, 266, 272, 273, 274, 303, 312, 313, 347, 353, 354, 357, 367, 370, 396, 399, 416, 419, 449, 452, 523, 526, 544, 547, 548, 551, 552, 555, 583, 586, 587, 613, 615, 616, 619, 640, 643, 644, 661, 677, 679, 694, 699, 700, 701, 702, 703, 704, 705, 706, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 747, 749, 753, 755, 756, 758, 760, 762, 763, 765, 772, 774, 775, 777, 800, 806, 809, 818, 821, 822, 825, 834, 837, 840, 843, 844, 847, 860, 861, 862, 864, 877, 904, 905, 906, 910, 912, 913, 914, 917, 919, 922, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 949, 952, 953, 956, 968, 989, 990, 991, 992, 993, 994, 995, 996], "core": [14, 18, 20, 124, 128, 133, 303, 339, 968], "principl": 14, "oper": [14, 18, 20, 69, 70, 71, 72, 114, 115, 118, 121, 122, 124, 125, 131, 132, 195, 224, 225, 227, 228, 266, 294, 353, 367, 370, 408, 411, 412, 415, 461, 464, 528, 531, 532, 535, 544, 547, 568, 571, 587, 597, 609, 610, 611, 653, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 699, 700, 701, 702, 703, 704, 705, 706, 708], "expos": [14, 128, 132, 587, 603], "almost": [14, 19, 122, 129, 131], "ident": [14, 16, 69, 70, 118, 120, 122, 130, 131, 145, 303, 337, 864, 877, 968], "uniqu": [14, 118, 122, 145, 303, 312, 313, 860, 861, 862, 863, 864, 870, 904, 905, 906, 910, 911, 912], "syntax": [14, 15], "There": [14, 18, 19, 115, 118, 121, 122, 123, 128, 131, 145], "onli": [14, 17, 18, 19, 69, 70, 113, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 143, 145, 303, 343, 353, 509, 512, 513, 516, 712, 736, 739, 756, 758, 800, 818, 821, 864, 865, 866, 874, 875, 899, 900, 901, 924, 933, 936, 968, 1005, 1006, 1007, 1008, 1009, 1010], "so": [14, 15, 18, 19, 22, 23, 24, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 69, 70, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 113, 114, 115, 117, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 145, 146, 154, 157, 158, 162, 163, 167, 168, 172, 173, 177, 178, 182, 183, 187, 188, 189, 190, 199, 200, 205, 206, 213, 214, 219, 220, 235, 236, 243, 244, 248, 250, 253, 255, 261, 263, 275, 276, 277, 279, 354, 355, 356, 358, 367, 368, 369, 371, 416, 417, 418, 449, 450, 451, 577, 578, 579, 580, 588, 589, 590, 592, 616, 617, 618, 620, 663, 664, 665, 667, 713, 714, 715, 717, 801, 802, 803, 805, 834, 835, 836, 838, 864, 865, 875, 889, 891, 906, 907, 908, 909, 968], "wai": [14, 15, 18, 119, 125, 130, 131, 132, 133, 145], "manipul": [14, 50, 95, 113, 133, 144, 801, 804, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 837, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859], "unsurprisingli": [14, 115], "fundament": [14, 122, 128], "consist": [14, 69, 70, 121, 125, 303, 335, 712, 727, 729, 924, 925, 928, 1001, 1002], "each": [14, 15, 16, 19, 20, 69, 70, 71, 72, 73, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 133, 144, 145, 156, 167, 170, 172, 175, 182, 185, 195, 230, 233, 266, 273, 303, 312, 313, 324, 325, 326, 327, 328, 329, 330, 334, 347, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586, 587, 588, 591, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 716, 718, 720, 721, 723, 727, 729, 736, 739, 744, 746, 747, 749, 753, 755, 760, 762, 763, 765, 800, 810, 813, 826, 829, 834, 837, 839, 844, 847, 852, 855, 856, 859, 864, 870, 877, 887, 888, 899, 902, 904, 905, 906, 910, 924, 925, 928, 968, 974, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "veri": [14, 15, 18, 19, 113, 115, 117, 118, 122, 124, 125, 126, 129, 131, 132, 133, 145, 968], "similar": [14, 113, 122, 123, 124, 131, 145, 353, 544, 547, 699, 710, 989, 1000], "convent": [14, 144, 712, 736, 739, 924, 925, 928], "those": [14, 18, 19, 20, 69, 70, 122, 128, 133, 195, 196, 197, 661, 697, 712, 756, 758, 763, 765, 800, 801, 804], "introduc": [14, 122, 131, 800, 834, 837, 904, 905], "2006": 14, "layer": [14, 44, 89, 113, 114, 128, 129, 132, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 882, 883, 886, 968, 980, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012], "therefor": [14, 19, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 132, 145, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 353, 354, 357, 367, 370, 372, 375, 416, 419, 449, 452, 532, 535, 564, 567, 568, 571, 577, 581, 587, 615, 699, 702, 711, 712, 713, 716, 724, 726, 800, 834, 837, 882, 883, 886, 904, 906, 910, 924, 929, 932, 957, 958, 961], "present": [14, 19, 69, 70, 116, 122, 123, 124, 125, 126, 128], "itself": [14, 18, 19, 122, 125, 126, 132, 144, 145, 587, 593, 864, 876], "cut": 14, "cloth": 14, "adher": [14, 15, 114, 116, 128, 133], "semant": [14, 128, 133, 353, 544, 547], "round": [14, 15, 16, 18, 19, 20, 21, 35, 36, 80, 81, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 353, 367, 370, 416, 419, 449, 452, 453, 456, 523, 526, 564, 567, 583, 586, 968], "up": [14, 15, 16, 17, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145], "hopefulli": [14, 15, 16, 18, 19, 20, 21, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144], "paint": [14, 128], "pictur": [14, 128], "how": [14, 16, 17, 18, 19, 20, 21, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 144, 145, 968, 974, 989, 1000, 1001, 1002], "pleas": [14, 15, 16, 18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 968], "check": [14, 15, 16, 18, 19, 24, 25, 26, 27, 28, 69, 70, 122, 127, 128, 130, 131, 132, 133, 144, 266, 280, 287, 288, 290, 302, 303, 342, 352, 587, 597, 612, 626, 633, 634, 635, 636, 653, 660, 661, 677, 679, 712, 727, 729, 864, 865, 874, 875, 876, 968], "out": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 35, 36, 37, 38, 45, 46, 47, 48, 49, 50, 51, 52, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 74, 75, 80, 81, 82, 83, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 130, 131, 132, 133, 144, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 272, 274, 303, 348, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 599, 600, 601, 602, 604, 605, 606, 609, 610, 611, 613, 615, 616, 617, 618, 619, 620, 627, 640, 643, 644, 661, 694, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 903, 904, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 989, 997], "discuss": [14, 15, 16, 17, 18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 968], "faq": [14, 15, 16, 128, 130, 131, 132, 133, 144], "reach": [14, 15, 16, 18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 303, 327, 331, 335, 864, 876], "discord": [14, 15, 16, 18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 968], "you": [14, 15, 16, 17, 18, 19, 20, 21, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 968, 974], "question": [14, 15, 16, 18, 19, 115, 117, 128, 130, 131, 132, 133, 144, 145, 968], "With": [15, 16, 18, 37, 38, 39, 40, 57, 58, 69, 70, 71, 72, 80, 81, 82, 83, 90, 91, 94, 95, 98, 99, 102, 103, 115, 117, 128, 156, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 188, 191, 195, 230, 233, 266, 275, 278, 303, 325, 341, 353, 354, 357, 358, 367, 370, 371, 372, 375, 392, 395, 412, 415, 416, 419, 424, 427, 449, 452, 461, 464, 481, 484, 521, 522, 528, 531, 532, 535, 548, 551, 564, 567, 568, 571, 577, 578, 581, 582, 587, 588, 589, 590, 591, 592, 596, 604, 605, 612, 615, 616, 619, 620, 650, 655, 656, 657, 661, 663, 664, 666, 699, 702, 705, 706, 711, 712, 713, 716, 717, 718, 720, 721, 723, 724, 726, 740, 742, 769, 771, 784, 785, 788, 795, 798, 800, 801, 804, 805, 814, 817, 818, 821, 826, 829, 834, 837, 838, 839, 848, 851, 882, 883, 886, 887, 888, 889, 891, 892, 893, 895, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 917, 924, 925, 928, 957, 958, 961], "central": 15, "goal": [15, 20], "being": [15, 16, 18, 19, 69, 70, 115, 117, 120, 121, 122, 123, 124, 125, 126, 128, 131, 144, 145, 195, 196, 197, 587, 642, 647, 904, 911, 968], "would": [15, 18, 19, 21, 112, 114, 115, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 132, 133, 145, 156, 177, 180, 303, 348, 968], "entir": [15, 16, 19, 69, 70, 115, 116, 117, 121, 122, 125, 130, 131, 132, 133, 145, 303, 347, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 989, 998], "forgiven": 15, "rais": [15, 19, 69, 70, 125, 128, 130, 266, 274, 353, 441, 444, 540, 543, 587, 597, 622, 631, 645, 652, 658, 712, 736, 739, 743, 775, 777, 800, 840, 843, 844, 847, 899, 902, 924, 929, 932, 937, 940, 957, 958, 961, 963, 966, 1001, 1002, 1005, 1009], "an": [15, 16, 18, 19, 20, 21, 24, 27, 28, 65, 66, 69, 70, 110, 111, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 156, 167, 170, 172, 175, 182, 185, 194, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 235, 238, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 272, 273, 274, 275, 278, 286, 291, 292, 294, 303, 325, 329, 348, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586, 587, 598, 599, 600, 602, 604, 613, 614, 615, 627, 631, 633, 634, 635, 636, 656, 657, 658, 661, 677, 679, 694, 696, 697, 699, 702, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 739, 743, 744, 746, 747, 749, 753, 755, 756, 758, 759, 760, 762, 763, 765, 772, 774, 775, 777, 778, 780, 800, 801, 804, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 830, 833, 834, 837, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 864, 870, 882, 883, 886, 887, 889, 890, 898, 899, 902, 903, 904, 905, 906, 910, 911, 912, 913, 914, 917, 919, 922, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 968, 978, 979, 1001, 1002, 1005, 1006, 1007, 1009], "eyebrow": 15, "somehow": 15, "pytorch": [15, 16, 20, 118, 123, 124, 125, 126, 128, 130, 133, 145, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 968, 1005, 1006, 1007, 1008, 1009, 1010], "other": [15, 18, 19, 69, 70, 71, 72, 113, 114, 115, 117, 118, 121, 122, 125, 128, 130, 132, 133, 143, 144, 145, 192, 193, 195, 196, 197, 353, 445, 448, 587, 588, 591, 593, 661, 672, 887, 893, 895, 904, 911, 924, 945, 948, 953, 956, 968], "strong": [15, 145], "industri": 15, "back": [15, 121, 127, 128, 130, 145, 968, 974, 1001, 1002, 1005, 1009], "momentum": 15, "won": [15, 16, 19, 133], "ad": [15, 18, 19, 20, 110, 111, 113, 114, 115, 117, 118, 120, 121, 122, 123, 125, 126, 128, 132, 145, 587, 651, 652, 712, 727, 729, 800, 814, 817, 1011, 1012], "just": [15, 16, 18, 19, 114, 115, 117, 118, 125, 128, 130, 131, 145, 924, 925, 928, 989, 998], "make": [15, 16, 18, 19, 20, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 133, 303], "problem": [15, 19, 121, 130], "even": [15, 16, 18, 19, 114, 118, 123, 124, 126, 130, 131, 132, 133, 145, 353, 540, 543, 548, 551], "wors": 15, "rather": [15, 69, 70, 113, 114, 117, 122, 133, 145, 195, 196, 197, 303, 347, 587, 633, 634, 636, 661, 677, 679], "funni": 15, "comic": 15, "strip": 15, "easi": [15, 18, 19, 118, 122], "feasibl": 15, "space": [15, 195, 196, 197, 224, 225, 227, 228, 587, 614], "case": [15, 18, 19, 20, 24, 27, 28, 69, 70, 71, 72, 73, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 132, 133, 145, 195, 230, 233, 303, 342, 349, 352, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 412, 415, 416, 419, 420, 423, 424, 427, 441, 444, 445, 448, 449, 452, 485, 488, 489, 492, 497, 500, 501, 504, 523, 526, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 577, 581, 582, 583, 586, 587, 631, 643, 644, 712, 740, 742, 800, 830, 833, 864, 867, 873, 924, 929, 932, 933, 936, 937, 940, 945, 948, 949, 952, 953, 956, 989, 1000, 1001, 1002, 1005, 1009], "unlik": [15, 115, 122, 303], "charger": 15, "charact": 15, "encod": [15, 131, 587, 614], "instant": [15, 968], "messag": [15, 19, 128, 130, 1014, 1015], "much": [15, 19, 113, 121, 122, 125, 128, 130, 131], "doe": [15, 19, 21, 69, 70, 112, 113, 114, 115, 117, 118, 119, 123, 125, 126, 128, 130, 131, 145, 353, 412, 415, 587, 631, 800, 839], "mandat": [15, 117, 125], "adopt": [15, 19, 121], "continu": [15, 16, 116, 117, 145], "own": [15, 16, 18, 114, 128, 145], "signatur": [15, 113, 114, 115, 122, 123, 124, 125, 126, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 353, 354, 357, 372, 375, 412, 415, 416, 419, 424, 427, 449, 452, 532, 535, 564, 567, 568, 571, 712, 724, 726, 800, 814, 817, 834, 837, 904, 905, 906, 910, 913, 914, 917, 924, 929, 932], "replac": [15, 19, 21, 69, 70, 115, 117, 120, 122, 123, 124, 128, 130, 133, 145, 587, 643, 644, 800, 801, 804, 887, 888], "your": [15, 16, 17, 18, 20, 21, 113, 114, 131, 132, 145, 968], "10": [15, 18, 21, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 115, 122, 128, 130, 131, 195, 218, 227, 228, 229, 303, 353, 392, 395, 396, 399, 424, 427, 461, 464, 481, 484, 489, 492, 564, 567, 587, 605, 615, 642, 647, 661, 681, 682, 683, 684, 699, 705, 712, 721, 723, 724, 726, 750, 752, 769, 771, 800, 818, 821, 826, 829, 839, 882, 883, 886, 887, 888, 889, 890, 891, 899, 902, 904, 905, 924, 925, 928, 929, 932, 1005, 1007], "100": [15, 16, 98, 99, 131, 132, 133, 145, 353, 564, 567, 889, 891, 968], "despit": [15, 122, 124], "distinct": [15, 114, 122, 125, 127, 904, 905, 906, 910, 912, 968], "still": [15, 69, 70, 114, 117, 123, 130, 132, 145, 968], "believ": [15, 19], "share": [15, 69, 70, 115, 117, 118, 119, 122, 128, 266, 298], "bring": [15, 128, 129], "benefit": [15, 16, 18, 19, 121, 122, 125, 130, 131, 145], "unrel": [15, 19], "what": [15, 16, 19, 112, 114, 115, 120, 122, 126, 127, 128, 130, 131, 132, 133, 144, 145, 968], "again": [15, 16, 19, 113, 115, 122, 125, 131, 133, 145], "contrari": 15, "bumpi": 15, "road": 15, "allud": [15, 131], "most": [15, 18, 19, 69, 70, 113, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 145, 712, 727, 729], "technolog": 15, "sector": [15, 353, 363, 366, 376, 379, 388, 391], "full": [15, 16, 19, 71, 72, 114, 123, 126, 128, 145, 195, 266, 286, 353, 461, 464, 481, 484, 699, 705, 712, 756, 758, 760, 762, 763, 765, 882, 883, 886], "success": 15, "reason": [15, 19, 113, 115, 118, 121, 122, 123, 125, 128, 130, 353, 544, 547], "build": [15, 17, 18, 118, 127, 129, 132, 133, 145, 904, 905, 906, 910, 912, 968, 989, 1000, 1001, 1002], "custom": [15, 132], "comput": [15, 16, 18, 69, 70, 118, 122, 128, 131, 145, 303, 347, 353, 367, 370, 392, 395, 404, 407, 412, 415, 433, 436, 437, 440, 457, 460, 461, 464, 477, 480, 481, 484, 505, 508, 509, 512, 513, 516, 517, 520, 523, 526, 528, 531, 532, 535, 587, 599, 600, 602, 605, 606, 661, 663, 666, 668, 670, 672, 673, 675, 681, 683, 685, 687, 689, 691, 694, 696, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 712, 713, 716, 718, 720, 727, 729, 730, 732, 733, 735, 736, 739, 740, 742, 756, 758, 759, 760, 762, 763, 765, 775, 777, 778, 780, 784, 785, 788, 790, 793, 795, 798, 864, 870, 904, 905, 906, 910, 912, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956], "thank": [15, 131], "interoper": 15, "compon": [15, 128], "bio": [15, 18], "hardwar": [15, 18], "initi": [15, 19, 69, 70, 71, 72, 73, 119, 123, 124, 303, 699, 709, 982, 983, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1005, 1009], "pcie": 15, "interfac": [15, 133, 145], "motherboard": 15, "raid": 15, "storag": [15, 131], "virtual": [15, 19, 21], "bluetooth": 15, "wireless": 15, "exchang": 15, "btx": 15, "form": [15, 17, 24, 25, 26, 27, 28, 69, 70, 118, 132, 133, 195, 199, 202, 235, 238, 248, 252, 253, 257, 587, 593, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 699, 712, 713, 716, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 744, 746, 747, 749, 753, 755, 756, 758, 760, 762, 763, 765, 766, 768, 772, 774, 864, 866, 876], "factor": [15, 303, 312, 345, 346, 347, 661, 663, 666, 668, 670, 681, 683, 685, 687, 699, 700, 701, 702, 703, 704, 705, 706, 712, 713, 716, 989, 990, 991, 992, 993, 994, 995, 996, 1005, 1006, 1007, 1008], "sata": 15, "connect": [15, 18, 132, 133, 989, 999, 1000], "host": [15, 145], "bu": 15, "adapt": [15, 661, 685, 687, 1005, 1008], "devic": [15, 19, 29, 30, 34, 69, 70, 74, 75, 79, 98, 99, 112, 113, 118, 120, 123, 130, 131, 145, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 305, 306, 307, 308, 309, 310, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 587, 615, 616, 619, 640, 643, 644, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 978, 979, 980, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012], "html": [15, 21, 114, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 353, 354, 357, 372, 375, 412, 415, 416, 419, 424, 427, 449, 452, 532, 535, 564, 567, 568, 571, 712, 724, 726, 800, 814, 817, 834, 837, 904, 905, 906, 910, 913, 914, 917, 924, 929, 932], "enabl": [15, 18, 19, 69, 70, 71, 72, 73, 117, 118, 121, 122, 125, 127, 128, 129, 131, 133, 145], "anyon": [15, 17, 145], "websit": 15, "tcp": 15, "ip": 15, "node": [15, 69, 70, 122, 864, 865, 874, 875], "commun": [15, 17, 19, 20, 145, 968, 974], "network": [15, 118, 122, 128, 132, 144, 699, 708, 968, 975, 989, 1001, 1002], "smtp": 15, "possibl": [15, 17, 18, 19, 20, 114, 115, 117, 122, 123, 125, 128, 131, 144, 145, 587, 637, 655, 924, 929, 932, 937, 940], "send": 15, "gmail": 15, "outlook": 15, "pop": 15, "email": 15, "ieee": [15, 194, 266, 286, 353, 367, 370, 445, 448, 523, 526, 544, 547, 564, 567], "754": [15, 194, 266, 286, 353, 367, 370, 445, 448, 523, 526, 544, 547, 564, 567], "allow": [15, 128, 145, 195, 224, 225, 227, 228, 587, 637, 1001, 1002], "calcul": [15, 69, 70, 71, 72, 73, 114, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 420, 423, 424, 427, 428, 431, 441, 444, 445, 448, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 523, 526, 540, 543, 556, 559, 560, 563, 564, 567, 572, 576, 577, 581, 582, 784, 785, 788, 790, 793, 795, 798, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956], "live": [15, 16], "depend": [15, 18, 19, 114, 120, 122, 123, 128, 145, 266, 272, 353, 354, 357, 359, 362, 363, 366, 372, 375, 376, 379, 380, 383, 384, 387, 420, 423, 424, 427, 441, 444, 445, 448, 485, 488, 489, 492, 493, 496, 497, 500, 540, 543, 556, 559, 560, 563, 577, 581, 582, 712, 727, 729, 756, 758, 760, 762, 763, 765, 899, 903, 913, 914, 917, 919, 922], "did": [15, 20, 133], "aris": [15, 145], "until": [15, 19, 145, 968], "substanti": [15, 19, 117, 121], "innov": 15, "growth": 15, "usag": [15, 128, 303, 347], "relev": [15, 18, 20, 115, 122, 123, 131, 1005, 1006, 1007, 1008, 1009, 1010], "area": [15, 125, 143, 353, 363, 366, 376, 379, 388, 391, 968], "necess": 15, "parti": [15, 145], "could": [15, 16, 18, 19, 115, 117, 122, 123, 125, 128, 130, 131, 132, 904, 905, 906, 910, 912], "easili": [15, 19, 131, 132, 133, 145, 968], "engag": [15, 17, 18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "regard": [15, 122, 303], "effect": [15, 114, 121, 122, 126, 145, 195, 230, 233, 661, 689, 691, 924, 945, 948, 953, 956], "2015": 15, "sinc": [15, 18, 19, 145], "alongsid": 15, "machin": [15, 18, 118, 144, 266, 286, 289, 353, 457, 460, 712, 744, 746, 753, 755], "given": [15, 16, 18, 19, 20, 21, 69, 70, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 132, 133, 144, 195, 196, 197, 204, 224, 225, 227, 228, 303, 336, 342, 344, 345, 346, 347, 349, 352, 587, 605, 606, 616, 619, 643, 644, 659, 661, 663, 666, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 699, 700, 701, 702, 703, 704, 705, 706, 712, 781, 783, 784, 785, 788, 790, 793, 795, 798, 800, 801, 804, 814, 817, 818, 821, 826, 829, 834, 837, 839, 852, 855, 864, 871, 872, 887, 889, 890, 892, 893, 895, 898, 913, 919, 922, 978, 979], "frame": [15, 144], "less": [15, 19, 35, 36, 69, 70, 80, 81, 115, 122, 126, 127, 128, 353, 359, 362, 363, 366, 372, 375, 384, 387, 416, 419, 485, 488, 489, 492, 497, 500, 540, 543, 544, 547, 552, 555, 564, 567, 712, 744, 746, 753, 755, 778, 780, 887, 893, 895, 924, 953, 956], "matur": [15, 145], "state": [15, 114, 126, 127, 128, 129, 131, 144, 353, 523, 526, 699, 709, 968, 975, 976, 977, 978, 979, 980, 982, 983, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "than": [15, 19, 69, 70, 113, 115, 117, 122, 125, 128, 131, 132, 133, 145, 195, 196, 197, 266, 286, 303, 347, 353, 359, 362, 363, 366, 372, 375, 384, 387, 400, 403, 408, 411, 416, 419, 449, 452, 453, 456, 485, 488, 489, 492, 497, 500, 521, 540, 543, 544, 547, 552, 555, 564, 567, 583, 586, 587, 633, 634, 636, 661, 677, 679, 712, 718, 720, 736, 739, 744, 746, 753, 755, 778, 780, 800, 801, 804, 818, 821, 840, 843, 887, 893, 895, 904, 905, 906, 910, 912, 924, 941, 944, 945, 948, 949, 952, 953, 956], "preced": [15, 132], "mention": [15, 18, 19, 115, 118, 125, 126], "aros": 15, "70": [15, 712, 750, 752, 924, 925, 928], "80": [15, 712, 750, 752, 924, 925, 928], "90": [15, 98, 99, 353, 412, 415, 548, 551, 712, 750, 752, 889, 891, 924, 925, 928], "effort": [15, 17, 145], "stage": [15, 17, 19, 21, 112, 968], "complet": [15, 19, 20, 69, 70, 121, 122, 130, 131, 712, 756, 758], "natur": [15, 115, 121, 122, 144, 353, 441, 444, 485, 488, 493, 496, 712, 759], "like": [15, 18, 19, 21, 112, 113, 114, 115, 117, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 661, 677, 679, 887, 893, 895, 968], "certainli": 15, "mission": [15, 968], "creat": [15, 17, 18, 19, 21, 69, 70, 123, 124, 125, 128, 129, 132, 143, 144, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 218, 219, 222, 224, 225, 227, 228, 235, 238, 240, 241, 243, 246, 258, 260, 261, 265, 303, 312, 313, 587, 615, 616, 619, 640, 643, 644, 655, 661, 696, 887, 888, 889, 890, 893, 895, 968, 974, 978, 979, 980, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "At": [15, 20], "process": [15, 16, 17, 18, 19, 21, 118, 122, 128, 133, 303, 312, 313, 342, 352], "ourselv": 15, "lead": [15, 16, 69, 70, 71, 72, 73, 145, 712, 756, 758, 763, 765], "quansight": 15, "compani": 15, "made": [15, 19, 20, 122, 125, 128, 130], "organ": [15, 113, 118, 121, 122], "panda": 15, "scipi": 15, "conda": [15, 18, 21], "dask": [15, 904, 905, 906, 910, 912], "apach": 15, "onnx": 15, "scikit": 15, "jupyt": 15, "aw": 15, "cupi": 15, "net": [15, 16, 128, 133], "sympi": 15, "rai": [15, 353, 384, 387], "modin": 15, "spyder": 15, "includ": [15, 19, 20, 69, 70, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 144, 145, 195, 196, 197, 199, 202, 235, 238, 587, 626, 660, 712, 778, 780, 864, 865, 887, 893, 895, 899, 901, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 971, 973, 989, 999, 1000, 1003, 1004], "member": [15, 19], "googl": [15, 968], "octoml": 15, "einop": [15, 69, 70, 587, 609, 610, 611], "further": [15, 16, 19, 21, 115, 121, 127, 131, 132, 968], "sponsor": 15, "lg": 15, "electron": 15, "microsoft": 15, "d": [15, 16, 17, 18, 98, 99, 112, 122, 131, 587, 596, 604, 699, 700, 701, 702, 703, 704, 705, 706, 712, 724, 726, 750, 752, 889, 891, 968, 974], "shaw": 15, "co": [15, 35, 36, 80, 81, 128, 144, 353, 587, 614, 968], "intel": 15, "togeth": [15, 69, 70, 121, 122, 132, 133, 145, 1011, 1012], "major": [15, 123, 124, 145, 899, 902], "involv": [15, 17, 21, 112, 123, 133, 266, 294, 353, 367, 370, 523, 526, 968, 974], "anoth": [15, 18, 19, 69, 70, 118, 122, 123, 130, 133, 195, 213, 216, 266, 273, 275, 278], "promis": 15, "sign": [15, 18, 35, 36, 80, 81, 129, 133, 195, 196, 197, 353, 354, 357, 367, 370, 384, 387, 408, 411, 523, 526, 544, 547, 712, 759, 904, 905, 906, 910, 912, 924, 941, 944, 949, 952], "pursuit": 15, "unif": [15, 17, 130, 968, 974], "clearli": [15, 20, 115], "lot": [15, 16, 120, 130, 145], "thought": [15, 18, 19, 126], "care": [15, 19, 133], "attent": [15, 19, 121, 122, 699, 710, 711, 989, 1000], "gone": [15, 127], "simplifi": [15, 128, 129, 130, 132], "compat": [15, 126, 145, 266, 274, 353, 367, 370, 384, 387, 392, 395, 400, 403, 404, 407, 408, 411, 412, 415, 428, 431, 433, 436, 453, 456, 461, 464, 477, 480, 481, 484, 501, 504, 505, 508, 513, 516, 517, 520, 523, 526, 532, 535, 540, 543, 544, 547, 572, 576, 712, 744, 746, 753, 755, 760, 762, 769, 771, 775, 777, 778, 780, 800, 830, 833, 899, 901, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 968], "excit": [15, 17, 112, 968], "complianc": 15, "hope": [15, 145], "due": [15, 18, 122, 125, 353, 523, 526], "suit": [15, 18, 112, 116, 117, 131, 144], "some": [15, 16, 18, 19, 20, 69, 70, 113, 114, 115, 118, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 144, 145, 353, 445, 448, 661, 663, 666, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 697, 699, 707, 968, 989, 997], "motiv": [15, 130], "great": [15, 16, 117, 128, 130], "convinc": 15, "celebr": 15, "encourag": [15, 144, 145, 968, 974], "foundat": 15, "point": [16, 19, 114, 115, 121, 125, 126, 128, 130, 131, 144, 194, 195, 196, 197, 204, 210, 211, 218, 240, 241, 258, 260, 266, 272, 286, 291, 294, 353, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 441, 444, 445, 448, 449, 452, 485, 488, 489, 492, 497, 500, 501, 504, 523, 526, 540, 543, 544, 547, 548, 551, 556, 559, 560, 563, 564, 567, 577, 581, 582, 583, 586, 712, 713, 716, 721, 723, 727, 729, 730, 732, 733, 735, 744, 746, 753, 755, 756, 758, 760, 762, 763, 765, 778, 780, 904, 905, 906, 910, 912, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956], "mai": [16, 18, 19, 122, 130, 132, 195, 196, 197, 213, 216, 303, 348, 353, 433, 436, 461, 464, 481, 484, 509, 512, 513, 516, 587, 608, 904, 905, 906, 910, 912, 913, 914, 917, 919, 922, 924, 929, 932, 933, 936, 937, 940], "ask": [16, 128, 130, 145, 968], "perfectli": 16, "happi": [16, 18, 145], "abund": 16, "better": [16, 112, 127, 130, 131, 132], "ll": [16, 17, 19, 115, 122, 125, 131], "give": [16, 18, 19, 112, 114, 115, 119, 126, 130, 800, 830, 833], "two": [16, 71, 72, 114, 115, 117, 121, 122, 127, 131, 133, 195, 196, 197, 210, 211, 230, 233, 248, 252, 253, 257, 266, 293, 298, 353, 408, 411, 548, 551, 587, 595, 712, 713, 716, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 739, 740, 742, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 760, 762, 763, 765, 766, 768, 772, 774, 775, 777, 800, 848, 851, 904, 905, 906, 910, 911, 912, 968], "streamlin": 16, "workflow": [16, 19, 131, 143, 968], "save": [16, 69, 70, 145, 587, 648, 1001, 1002], "week": [16, 19, 20, 968], "let": [16, 114, 115, 122, 123, 124, 128, 130, 131, 132, 133, 924, 933, 936, 945, 948, 949, 952, 953, 956, 968], "sai": [16, 18, 120, 130], "deepmind": 16, "releas": [16, 18, 20, 968], "awesom": 16, "paper": 16, "love": 16, "choic": [16, 18, 125, 131, 924, 945, 948, 953, 956], "perceiverio": 16, "happen": [16, 18, 19, 131], "slew": 16, "rush": 16, "f": [16, 21, 112, 122, 128, 131, 133, 353, 457, 460, 587, 628, 632], "g": [16, 112, 122, 145, 266, 271, 294, 303, 319, 887, 892, 893, 895, 904, 905, 906, 910, 912, 924, 929, 932, 937, 940, 941, 944, 949, 952], "inevit": 16, "deviat": [16, 882, 883, 886, 887, 892, 924, 945, 948, 1003, 1004], "origin": [16, 69, 70, 71, 72, 73, 119, 120, 123, 128, 130, 353, 384, 387, 712, 740, 742, 800, 830, 833, 834, 837], "often": [16, 118, 145], "erron": 16, "train": [16, 118, 122, 124, 131, 132, 133, 143, 144, 145, 661, 663, 666, 668, 670, 681, 683, 968], "poor": 16, "converg": 16, "perform": [16, 69, 70, 113, 115, 117, 118, 119, 121, 122, 124, 125, 126, 128, 131, 145, 156, 177, 180, 195, 224, 225, 227, 228, 303, 587, 605, 609, 610, 611, 629, 630, 631, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 699, 707, 709, 712, 763, 765, 860, 861, 862, 863, 864, 871, 872, 957, 958, 961, 963, 966], "issu": [16, 17, 20, 128, 130, 132, 145], "etc": [16, 18, 19, 20, 65, 66, 69, 70, 110, 111, 113, 115, 117, 121, 122, 123, 126, 128, 130, 131, 145, 195, 224, 225, 227, 228, 587, 615, 616, 619, 640, 643, 644, 887, 888, 889, 890, 893, 895, 904, 905, 906, 910, 912, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012], "publish": [16, 145], "manag": [16, 17, 125, 145, 303], "get": [16, 17, 18, 20, 69, 70, 112, 118, 123, 124, 125, 128, 129, 130, 131, 132, 266, 284, 285, 286, 289, 303, 312, 313, 322, 323, 336, 337, 342, 346, 349, 352, 587, 594, 621, 622, 623, 642, 968, 974, 989, 998], "work": [16, 18, 19, 20, 112, 117, 122, 123, 124, 127, 128, 129, 130, 132, 133, 968, 974], "repositori": [16, 18, 19, 21, 116], "pull": [16, 17, 18, 21, 113, 145], "request": [16, 17, 113, 303, 339], "confus": [16, 125], "do": [16, 18, 19, 20, 69, 70, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 353, 544, 547, 587, 631, 661, 677, 679, 697, 864, 865, 874, 875, 876], "don": [16, 18, 19, 20, 65, 66, 110, 111, 123, 132, 145], "expect": [16, 145, 587, 594, 968], "codebas": [16, 17, 112, 113, 125, 127, 303, 345, 346, 968], "total": [16, 17, 19, 69, 70, 71, 72, 73, 115, 117, 124, 131, 132, 145, 303, 349, 899, 902, 924, 945, 948, 953, 956], "hour": 16, "spent": 16, "spin": 16, "off": [16, 127, 712, 724, 726, 772, 774], "test": [16, 18, 20, 112, 115, 145, 266, 291, 292, 353, 465, 468, 469, 472, 473, 476, 957, 958, 961, 963, 966], "error": [16, 18, 69, 70, 117, 121, 124, 126, 130, 145, 156, 157, 160, 303, 353, 437, 440, 924, 929, 932, 937, 940, 1001, 1002, 1005, 1009], "iter": [16, 24, 25, 26, 27, 28, 65, 66, 69, 70, 71, 72, 73, 110, 111, 122, 128, 131, 192, 193, 303, 325, 326, 328, 329, 330, 331, 334, 347, 587, 588, 591, 644, 649, 800, 810, 813, 826, 829, 839, 852, 855, 856, 859, 864, 865, 866, 870, 874, 875, 876], "address": [16, 19, 20, 121, 128], "sake": 16, "singl": [16, 19, 69, 70, 113, 115, 117, 118, 120, 122, 125, 126, 128, 131, 132, 133, 145, 303, 312, 313, 332, 333, 334, 335, 587, 657, 660, 887, 892, 893, 895, 904, 905], "multipl": [16, 19, 69, 70, 80, 81, 82, 83, 90, 91, 94, 95, 98, 99, 115, 118, 122, 145, 353, 367, 371, 523, 526, 587, 588, 590, 591, 592, 616, 620, 637, 712, 713, 716, 717, 733, 735, 800, 801, 804, 805, 834, 837, 838, 839, 882, 883, 886, 889, 891, 899, 900, 901, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 989, 999], "line": [16, 18, 115, 121, 129, 130, 131, 132, 143, 968, 974], "convert": [16, 24, 25, 26, 27, 28, 69, 70, 121, 128, 145, 146, 154, 195, 199, 202, 235, 238, 266, 270, 271, 303, 319, 320, 321, 322, 342, 349, 352, 587, 650, 656, 657, 712, 781, 783, 864, 866, 876, 877, 979], "directli": [16, 19, 113, 114, 118, 121, 122, 123, 124, 125, 126, 128, 130, 132, 133, 144, 145, 864, 876], "graph": [16, 118, 122, 129, 145, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 904, 905, 906, 910, 912, 1001, 1002], "guarante": [16, 121, 145, 904, 905], "turn": [16, 115, 122], "4": [16, 21, 35, 36, 45, 46, 49, 50, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 115, 119, 122, 128, 130, 131, 132, 133, 156, 162, 165, 167, 170, 177, 180, 187, 188, 190, 195, 219, 222, 230, 233, 243, 246, 261, 265, 266, 275, 277, 278, 279, 303, 325, 341, 353, 354, 356, 357, 358, 367, 368, 369, 370, 371, 372, 375, 384, 387, 392, 395, 412, 415, 416, 418, 419, 424, 427, 449, 451, 452, 461, 464, 481, 484, 521, 522, 528, 531, 532, 535, 548, 551, 564, 567, 568, 571, 577, 578, 580, 581, 582, 587, 596, 605, 614, 615, 616, 618, 619, 620, 650, 655, 661, 663, 665, 666, 667, 699, 702, 703, 704, 706, 709, 711, 712, 713, 714, 716, 718, 720, 721, 723, 724, 726, 733, 735, 744, 746, 750, 752, 769, 771, 772, 774, 784, 795, 798, 800, 801, 802, 803, 804, 805, 806, 809, 814, 817, 818, 821, 826, 829, 830, 833, 834, 836, 837, 838, 839, 848, 851, 882, 883, 886, 887, 888, 889, 891, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 913, 914, 917, 924, 925, 928, 929, 932, 957, 958, 961, 968, 1005, 1006, 1007, 1008, 1010], "step": [16, 18, 19, 21, 39, 40, 69, 70, 74, 75, 84, 85, 115, 119, 121, 122, 123, 124, 128, 131, 132, 133, 144, 195, 196, 197, 198, 224, 225, 227, 228, 303, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 681, 682, 683, 684, 685, 687, 689, 691, 860, 861, 862, 863, 968, 1005, 1006, 1007, 1008, 1009, 1010], "take": [16, 17, 18, 19, 114, 115, 117, 122, 123, 124, 128, 130, 132, 133, 145, 353, 412, 415, 968, 974], "few": [16, 19, 20, 118, 122, 123, 124, 125, 129, 130, 131, 132, 143, 968, 974], "second": [16, 18, 115, 125, 130, 266, 293, 298, 303, 334, 353, 367, 370, 392, 395, 400, 403, 404, 407, 408, 411, 412, 415, 433, 436, 453, 456, 461, 464, 477, 480, 481, 484, 501, 504, 505, 508, 513, 516, 517, 520, 523, 526, 532, 535, 540, 543, 572, 576, 587, 595, 642, 647, 661, 663, 666, 668, 670, 681, 683, 712, 718, 720, 724, 726, 727, 729, 736, 739, 750, 752, 756, 758, 763, 765, 769, 771, 775, 777, 800, 844, 847, 848, 851, 860, 862, 904, 905, 906, 910, 1005, 1006, 1007], "automat": [16, 18, 19, 118, 122, 126, 127, 128, 129, 132, 133, 968], "convers": [16, 25, 26, 27, 28, 69, 70, 127, 129, 133, 144, 145, 968, 974], "everyon": [16, 17, 19, 145], "regardless": [16, 17, 69, 70, 130, 133, 192, 193], "wouldn": 16, "nice": [16, 117], "write": [16, 19, 20, 21, 69, 70, 112, 113, 114, 115, 117, 118, 119, 125, 128, 130, 133, 156, 157, 160, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 191, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 272, 274, 303, 348, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586, 587, 599, 600, 602, 605, 606, 609, 610, 611, 613, 615, 616, 619, 627, 640, 643, 644, 661, 694, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 730, 732, 733, 735, 736, 739, 740, 742, 744, 746, 747, 749, 750, 752, 753, 755, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783, 784, 785, 788, 790, 793, 795, 798, 800, 801, 804, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 837, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 882, 883, 886, 887, 888, 889, 890, 892, 893, 895, 898, 899, 903, 904, 912, 913, 914, 917, 919, 922, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966], "onc": [16, 18, 19, 122, 123, 124, 128, 131, 145, 303, 347, 712, 733, 735, 763, 765, 887, 888], "know": [16, 19, 904, 905, 906, 910, 912], "among": [16, 69, 70, 117], "frantic": 16, "port": 16, "lucid": 16, "honk": 16, "improv": [16, 19, 118, 128], "understand": [16, 18, 19, 20, 21, 112, 114, 115, 116, 126, 127], "pattern": [16, 69, 70, 114, 123, 587, 609, 610, 611], "hasn": 16, "chang": [16, 18, 19, 20, 21, 22, 23, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 114, 116, 117, 122, 128, 132, 145, 157, 158, 162, 163, 167, 168, 172, 173, 177, 178, 182, 183, 187, 188, 189, 190, 199, 200, 205, 206, 213, 214, 219, 220, 235, 236, 243, 244, 248, 250, 253, 255, 261, 263, 275, 276, 277, 279, 303, 354, 355, 356, 358, 367, 368, 369, 371, 416, 417, 418, 449, 450, 451, 577, 578, 579, 580, 588, 589, 590, 592, 616, 617, 618, 620, 663, 664, 665, 667, 712, 713, 714, 715, 717, 718, 720, 800, 801, 802, 803, 805, 830, 833, 834, 835, 836, 838, 864, 866, 876, 889, 891, 906, 907, 908, 909, 968, 974], "now": [16, 18, 21, 69, 70, 113, 120, 122, 123, 126, 130, 131, 133, 144, 145, 989, 1000, 1001, 1002], "spend": 16, "torchvis": 16, "probabl": [16, 699, 707, 887, 888, 989, 997], "sonnet": 16, "about": [16, 18, 19, 116, 127, 128, 132, 133, 145, 266, 286, 289], "next": [16, 18, 19, 20, 21, 114, 115, 119, 120, 130, 131, 266, 286, 968, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010], "everyth": [16, 19, 20, 129, 145], "zero": [16, 69, 70, 71, 72, 115, 121, 122, 123, 124, 126, 128, 131, 132, 156, 162, 165, 167, 170, 195, 204, 210, 211, 230, 233, 248, 252, 253, 257, 261, 265, 266, 272, 353, 367, 370, 372, 375, 400, 403, 424, 427, 445, 448, 449, 452, 509, 512, 513, 516, 521, 522, 523, 526, 528, 531, 532, 535, 540, 543, 544, 547, 548, 551, 564, 567, 568, 571, 577, 581, 582, 587, 605, 640, 643, 644, 661, 663, 666, 668, 670, 681, 683, 685, 687, 699, 707, 712, 713, 716, 721, 723, 736, 739, 744, 746, 753, 755, 775, 777, 778, 780, 800, 814, 817, 818, 821, 826, 829, 834, 837, 856, 859, 882, 883, 886, 887, 889, 890, 899, 900, 901, 902, 904, 905, 906, 910, 912, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 968, 980, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1005, 1006, 1007, 1008], "need": [16, 18, 19, 20, 21, 113, 114, 115, 116, 118, 121, 122, 125, 128, 130, 131, 144, 145, 587, 599, 600, 602, 800, 801, 804, 814, 817], "said": 16, "high": [16, 20, 69, 70, 98, 99, 131, 887, 889, 890, 891, 893, 894, 895, 896], "level": [16, 17, 20, 118, 127, 128, 131, 132, 133, 145], "optim": [16, 125, 129, 131, 133, 144, 303, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 860, 861, 862, 863, 968, 1006, 1007, 1008, 1010], "trainer": [16, 143, 145, 968], "statu": 16, "quo": 16, "kera": 16, "dopamin": 16, "ignit": 16, "catalyst": 16, "lightn": 16, "fastai": 16, "haiku": [16, 133], "flax": [16, 133, 145], "trax": [16, 133], "objax": [16, 133], "idea": [16, 144], "fulli": [16, 121, 122, 126, 128, 129, 130, 131, 132, 133, 145, 989, 999, 1000], "offer": [16, 132], "strongli": [17, 18, 968, 974], "welcom": [17, 18, 19, 968, 974], "absolut": [17, 69, 70, 353, 354, 357, 712, 759], "skill": 17, "whether": [17, 18, 24, 25, 26, 27, 28, 69, 70, 71, 72, 73, 110, 111, 123, 125, 126, 156, 157, 160, 192, 193, 266, 272, 284, 290, 291, 292, 302, 303, 322, 323, 334, 338, 339, 342, 343, 347, 350, 352, 353, 473, 476, 587, 588, 591, 595, 596, 605, 608, 612, 614, 624, 626, 628, 631, 632, 633, 634, 635, 636, 637, 649, 653, 659, 660, 661, 668, 670, 672, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 694, 699, 707, 712, 727, 729, 860, 861, 862, 863, 864, 865, 866, 870, 874, 875, 876, 877, 887, 888, 957, 958, 961, 963, 966, 978, 979, 989, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "vetern": 17, "beginn": 17, "start": [17, 18, 19, 20, 21, 69, 70, 74, 75, 112, 114, 115, 123, 127, 128, 130, 131, 132, 144, 145, 195, 196, 197, 198, 224, 225, 226, 227, 228, 229, 303, 318], "aspect": [17, 131, 968], "guid": [17, 18, 19, 117, 968], "through": [17, 19, 20, 112, 115, 118, 119, 122, 127, 128, 130, 131, 132, 133, 144, 353, 384, 387], "journei": [17, 968, 974], "inclusvi": 17, "big": [17, 145], "team": [17, 18, 19], "board": 17, "contributor": [17, 18, 19, 127, 968], "split": [17, 19, 69, 70, 127, 128, 145, 303, 312, 328, 329, 330, 331, 345, 346, 347, 587, 637, 800, 968], "section": [17, 19, 20, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 904, 905, 906, 910, 912], "below": [17, 18, 20, 21, 112, 113, 115, 118, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 144, 195, 248, 252, 253, 257, 353, 392, 395, 412, 415, 424, 427, 548, 551, 582, 712, 721, 723, 724, 726, 772, 774, 800, 814, 817, 818, 821, 904, 905, 913, 914, 917, 968], "best": [17, 18, 19, 20, 21, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 587, 637], "go": [17, 18, 19, 20, 112, 113, 115, 122, 127, 131, 145, 864, 875], "finish": [17, 18, 112, 968], "dive": [17, 19, 20, 127, 130, 131, 145, 968], "right": [17, 18, 19, 69, 70, 112, 115, 131, 353, 400, 403, 408, 411, 712, 763, 765], "environ": [17, 19, 21, 144], "basic": [17, 20, 21], "fork": [17, 18, 587, 638], "doc": [17, 20, 114, 126, 128, 131, 132, 968], "document": [17, 19, 129, 131, 133], "local": [17, 18, 21, 118], "task": [17, 19, 144, 860, 861, 862, 863, 968], "help": [17, 18, 115, 119, 121, 122, 130, 131, 132, 143, 587, 593, 924, 949, 952, 968], "video": [17, 19, 114, 115, 126], "realli": [18, 122, 145], "contribut": [18, 19, 20, 128, 974], "toward": [18, 128, 800, 834, 837, 968, 974], "page": [18, 19, 129, 133, 143, 968, 974], "explain": [18, 19, 20, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 968, 974], "main": [18, 21, 120, 122, 195, 210, 211, 248, 252, 253, 257, 712, 724, 726, 772, 774], "prefer": [18, 122], "mode": [18, 45, 46, 69, 70, 115, 122, 145, 192, 193, 303, 332, 333, 334, 335, 347, 353, 367, 370, 523, 526, 712, 756, 757, 758], "git": [18, 19], "recurs": [18, 21, 24, 25, 26, 27, 28, 69, 70, 118, 122, 132, 145, 864, 865, 866, 874, 875, 876], "submodul": [18, 19, 20, 21, 116, 117, 118, 124, 127, 128, 132, 968, 1003, 1004, 1011, 1012], "com": 18, "unifyai": [18, 21], "http": [18, 114, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 353, 354, 357, 372, 375, 412, 415, 416, 419, 424, 427, 449, 452, 532, 535, 564, 567, 568, 571, 661, 663, 666, 668, 670, 712, 724, 726, 800, 814, 817, 834, 837, 904, 905, 906, 910, 913, 914, 917, 924, 929, 932], "gh": 18, "your_fold": 18, "id": [18, 121, 122, 303, 322, 1001, 1002], "cours": [18, 19, 115, 131, 145], "whatev": [18, 145], "integr": [18, 117, 266, 272], "familiar": [18, 20], "decid": [18, 69, 70, 864, 875], "sure": [18, 20, 116], "elig": 18, "free": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 144, 968], "student": 18, "licenc": 18, "peopl": [18, 19, 112], "seem": [18, 132, 145], "miss": [18, 115, 117, 121, 122, 1005, 1009], "add": [18, 19, 20, 35, 36, 65, 66, 69, 70, 71, 72, 80, 81, 82, 83, 110, 111, 112, 113, 114, 118, 119, 121, 122, 126, 128, 130, 145, 353, 354, 357, 371, 588, 592, 882, 883, 886, 968, 974, 1003, 1004], "explicit": [18, 21, 122, 123, 125, 128, 145], "remind": 18, "channel": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 587, 614, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999], "pace": 18, "updat": [18, 19, 20, 21, 69, 70, 112, 115, 116, 120, 121, 122, 123, 126, 128, 130, 131, 133, 145, 303, 312, 587, 631, 643, 644, 661, 663, 666, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 699, 709, 860, 861, 862, 864, 871, 872, 880, 881, 978, 979, 1005, 1006, 1007, 1008, 1009, 1010], "suggest": [18, 19, 113], "latest": [18, 20, 21, 114, 145, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 353, 354, 357, 372, 375, 412, 415, 416, 419, 424, 427, 449, 452, 532, 535, 564, 567, 568, 571, 712, 724, 726, 800, 814, 817, 834, 837, 904, 905, 906, 910, 913, 914, 917, 924, 929, 932, 989, 998], "packag": [18, 21, 145], "ensur": [18, 19, 117, 121, 123, 126, 587, 631], "align": [18, 69, 70, 128, 130, 968, 974], "accord": [18, 21, 69, 70, 118, 123, 266, 275, 278, 286, 353, 367, 370, 408, 411, 523, 526, 587, 615, 643, 644, 712, 775, 777, 800, 810, 813, 856, 859, 924, 945, 948, 953, 956], "stabl": [18, 59, 60, 104, 105, 128, 145, 587, 622, 623, 645, 646, 651, 652, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923], "pypi": [18, 20, 145], "mayb": [18, 24, 27, 28, 128, 130], "person": [18, 19], "experi": [18, 129, 131, 145], "avoid": [18, 19, 117, 119, 120, 122, 130, 303, 353, 445, 448], "pip": [18, 144, 968], "instal": [18, 21, 144, 968], "abil": [18, 129, 145], "certain": [18, 69, 70, 145, 195, 196, 197, 224, 225, 227, 228], "perhap": [18, 130, 131, 132, 145], "keep": [18, 19, 69, 70, 116, 122, 129, 131, 133, 587, 659], "track": [18, 19, 303, 864, 876, 1001, 1002], "termin": [18, 19, 21, 69, 70, 71, 72, 73, 122, 128, 131], "run": [18, 21, 116, 117, 119, 126, 128, 129, 130, 131, 132, 133, 144, 145, 303, 312, 661, 663, 666, 668, 670, 681, 683, 860, 861, 862, 863, 989, 1000, 1001, 1002], "command": [18, 21, 968], "ivy_dev": [18, 19, 21], "name": [18, 19, 21, 114, 117, 128, 130, 131, 133, 192, 193, 587, 593, 712, 727, 729, 756, 758, 763, 765, 904, 905, 906, 910], "3": [18, 21, 22, 23, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 115, 119, 122, 128, 130, 131, 132, 133, 156, 157, 158, 162, 165, 167, 170, 172, 175, 177, 180, 187, 188, 190, 194, 195, 219, 222, 230, 233, 243, 246, 258, 260, 261, 265, 266, 275, 276, 277, 278, 279, 303, 322, 325, 341, 348, 353, 354, 356, 357, 358, 367, 368, 369, 370, 371, 372, 375, 392, 395, 408, 411, 412, 415, 416, 418, 419, 424, 427, 441, 444, 449, 450, 451, 452, 457, 460, 461, 464, 477, 480, 481, 484, 521, 522, 528, 531, 532, 535, 548, 551, 564, 567, 568, 571, 577, 578, 580, 581, 582, 587, 588, 589, 590, 595, 596, 605, 612, 615, 616, 617, 618, 619, 620, 649, 650, 655, 657, 661, 663, 664, 665, 666, 667, 699, 700, 701, 702, 704, 705, 706, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 723, 724, 726, 733, 735, 744, 746, 750, 752, 763, 765, 769, 771, 772, 774, 781, 783, 784, 785, 788, 795, 798, 800, 801, 802, 803, 804, 805, 806, 809, 814, 817, 818, 821, 826, 829, 830, 833, 834, 836, 837, 838, 839, 840, 843, 848, 851, 882, 883, 886, 887, 888, 889, 890, 891, 892, 893, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 913, 914, 917, 924, 925, 928, 929, 932, 949, 952, 957, 958, 961, 968], "8": [18, 21, 49, 50, 71, 72, 80, 81, 98, 99, 115, 122, 127, 131, 156, 172, 175, 303, 325, 353, 367, 370, 371, 392, 395, 416, 419, 424, 427, 461, 464, 481, 484, 521, 522, 548, 551, 564, 567, 568, 571, 582, 587, 596, 615, 661, 663, 666, 699, 706, 712, 718, 720, 721, 723, 724, 726, 750, 752, 769, 771, 784, 785, 788, 800, 801, 802, 804, 818, 821, 826, 829, 839, 887, 888, 889, 890, 891, 899, 903, 904, 905, 924, 925, 928, 968, 989, 1000], "activ": [18, 19, 21, 23, 65, 66, 68, 110, 111, 113, 132, 157, 160, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 191, 968, 976, 977], "setup": 18, "click": [18, 19, 114, 968], "icon": [18, 19], "side": [18, 19], "choos": [18, 19, 133, 303, 348, 353, 509, 512, 513, 516, 899, 903, 904, 905, 906, 910, 912, 924, 929, 932, 933, 936, 937, 940], "left": [18, 19, 69, 70, 115, 123, 353, 400, 403, 712, 727, 729, 740, 742, 763, 765, 899, 900, 968], "panel": 18, "select": [18, 19, 117, 128, 130, 133, 145], "drop": [18, 145], "down": [18, 130], "path": [18, 21], "manual": [18, 19, 117, 132, 864, 865, 874, 875], "builtin": [18, 21, 130, 132], "requir": [18, 21, 113, 114, 115, 117, 120, 121, 123, 124, 126, 130, 145, 192, 193, 353, 564, 567, 712, 727, 729, 800, 844, 847, 978, 979], "cmd": [18, 21], "directori": [18, 19, 21, 587, 648], "folder": [18, 19, 21, 113, 116, 117, 118], "file": [18, 19, 21, 69, 70, 113, 114, 118, 119, 121, 122, 128, 131, 587, 648, 1001, 1002], "abov": [18, 19, 21, 114, 115, 118, 119, 121, 122, 125, 126, 130, 131, 132, 133, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 353, 354, 357, 367, 370, 372, 375, 392, 395, 412, 415, 416, 419, 424, 427, 449, 452, 523, 526, 532, 535, 548, 551, 564, 567, 568, 571, 577, 581, 582, 587, 615, 699, 702, 711, 712, 713, 716, 721, 723, 724, 726, 727, 729, 772, 774, 800, 814, 817, 818, 821, 834, 837, 882, 883, 886, 887, 889, 890, 904, 905, 906, 910, 913, 914, 917, 924, 929, 932, 941, 944, 945, 948, 949, 952, 957, 958, 961], "m": [18, 19, 21, 112, 128, 195, 230, 233, 248, 252, 253, 257, 587, 596, 712, 713, 716, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 739, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 760, 762, 763, 765, 766, 768, 772, 774, 887, 892, 893, 895], "python3": [18, 21], "script": [18, 19, 21, 115, 128, 145], "bat": [18, 19, 21], "OR": [18, 19, 21, 353, 404, 407, 513, 516, 957, 963, 966], "bin": [18, 19, 21], "mac": [18, 19, 21], "linux": [18, 19, 21], "virtualenv": 18, "found": [18, 19, 69, 70, 71, 72, 73, 114, 121, 122, 303, 337], "os": 18, "note": [18, 19, 113, 114, 115, 122, 353, 544, 547, 712, 727, 729, 763, 765, 800, 844, 847, 904, 906, 910, 924, 933, 936], "tick": [18, 19], "abl": [18, 19, 69, 70, 118, 123, 125, 130, 133], "To": [18, 115, 118, 122, 131, 132, 133, 968], "ivy_test": [18, 19], "test_array_api": [18, 19, 116, 117], "cd": [18, 19, 21], "r": [18, 69, 70, 587, 596, 659, 712, 756, 758, 781, 783], "txt": 18, "visual": [18, 145], "jetbrain": 18, "remot": 18, "mitig": 18, "potenti": [18, 127, 353, 445, 448], "conflict": [18, 19, 131], "addit": [18, 19, 69, 70, 113, 114, 117, 122, 123, 130, 131, 133, 303, 348, 353, 367, 370, 587, 609, 610, 611, 882, 883, 886, 989, 999], "yet": [18, 20, 122], "particular": [18, 19, 113, 125, 353, 354, 357], "system": [18, 145, 712, 760, 762], "instruct": [18, 20], "desktop": 18, "wsl": 18, "powershel": 18, "admin": 18, "visit": 18, "link": 18, "imag": [18, 21, 42, 87, 113, 128, 129, 131, 133, 144, 699, 700, 701, 702, 703, 705, 706, 968], "profession": 18, "execut": [18, 21, 122, 125, 128, 130, 133, 145, 587, 658], "deploy": 18, "top": [18, 19, 117, 131, 132, 968], "press": [18, 131, 968], "ok": 18, "correctli": [18, 69, 70, 117, 122, 123, 126, 132, 145, 712, 740, 742, 899, 900], "caus": [18, 19, 115, 117, 122, 125, 145], "earlier": [18, 19], "might": [18, 19, 113, 117, 120, 128, 130, 131, 587, 608], "necessari": [18, 115, 119, 122, 125], "virtualis": 18, "detail": [18, 19, 20, 113, 116, 117, 118, 119, 120, 122, 126, 131, 132, 195, 213, 216, 904, 905, 906, 910, 912], "sudo": 18, "apt": 18, "ca": 18, "certif": 18, "curl": 18, "gnupg": 18, "lsb": 18, "mkdir": 18, "p": [18, 19, 69, 70, 82, 83, 195, 230, 233, 587, 599, 600, 601, 602, 699, 707, 712, 740, 742, 778, 780, 989, 997], "keyr": 18, "fssl": 18, "download": [18, 117], "gpg": 18, "dearmor": 18, "o": [18, 128, 587, 596], "echo": 18, "deb": 18, "arch": 18, "dpkg": 18, "architectur": [18, 133, 145], "lsb_releas": 18, "cs": 18, "tee": 18, "list": [18, 20, 21, 24, 25, 26, 27, 28, 29, 30, 65, 66, 69, 70, 84, 85, 102, 103, 110, 111, 113, 115, 123, 124, 126, 128, 131, 132, 133, 145, 195, 196, 197, 199, 202, 204, 230, 231, 233, 235, 238, 240, 241, 258, 260, 266, 273, 303, 312, 313, 322, 324, 325, 328, 329, 332, 333, 347, 587, 596, 650, 655, 659, 663, 665, 667, 699, 700, 701, 702, 703, 704, 705, 706, 712, 769, 771, 800, 806, 809, 818, 821, 839, 844, 847, 864, 865, 866, 870, 875, 876, 882, 883, 886, 899, 902, 904, 906, 907, 909, 910, 968, 989, 990, 991, 992, 993, 994, 995, 996], "dev": [18, 69, 70, 71, 73, 118, 124, 128, 130, 132, 303, 312, 337], "null": 18, "ce": 18, "cli": 18, "containerd": 18, "io": 18, "compos": [18, 122, 145], "plugin": 18, "systemctl": 18, "permiss": 18, "relat": [18, 19, 144, 303], "post": [18, 133, 882, 883, 886, 968, 974], "It": [18, 19, 21, 112, 113, 114, 115, 119, 121, 122, 125, 128, 130, 131, 132, 156, 157, 160, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 191, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 272, 274, 303, 348, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586, 587, 599, 600, 602, 605, 609, 610, 611, 613, 616, 619, 627, 640, 643, 644, 661, 694, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 730, 732, 733, 735, 736, 739, 740, 742, 744, 746, 747, 749, 750, 752, 753, 755, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783, 784, 785, 788, 790, 793, 795, 798, 800, 801, 804, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 837, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 882, 883, 886, 887, 888, 889, 890, 892, 893, 895, 898, 899, 900, 903, 904, 912, 913, 914, 917, 919, 922, 957, 958, 961, 963, 966], "headach": 18, "arm": [18, 19], "m1": 18, "instead": [18, 19, 20, 114, 115, 117, 118, 122, 125, 126, 128, 130, 131, 145], "featur": [18, 113, 126, 131, 968], "vm": 18, "azur": 18, "cloud": [18, 144], "mean": [18, 19, 61, 62, 69, 70, 106, 107, 110, 111, 112, 115, 118, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 303, 332, 333, 334, 335, 347, 587, 610, 860, 861, 862, 863, 864, 870, 887, 892, 904, 905, 924, 968, 980], "configur": [18, 19, 21, 69, 70, 123, 303, 346, 864, 877], "defin": [18, 20, 113, 114, 123, 126, 130, 132, 145, 353, 523, 526, 544, 547, 587, 640, 712, 718, 720, 727, 729, 760, 762, 887, 889, 890, 924, 929, 932, 933, 936, 937, 940], "dockerfil": [18, 21], "longer": [18, 123, 125], "worri": 18, "platform": 18, "agnost": [18, 121, 126, 128, 130, 133, 145, 968], "usual": 18, "studio": 18, "favourit": 18, "extens": [18, 19, 114, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 230, 233, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 353, 354, 357, 367, 370, 372, 375, 392, 395, 412, 415, 416, 419, 424, 427, 449, 452, 481, 484, 532, 535, 548, 551, 564, 567, 568, 571, 577, 581, 582, 712, 721, 723, 724, 726, 800, 814, 817, 818, 821, 834, 837, 904, 905, 906, 910, 913, 914, 917, 924, 929, 932, 957, 958, 961], "theme": 18, "too": [18, 19, 145, 353, 367, 370, 523, 526], "done": [18, 19, 115, 117, 131], "unsupport": [18, 123, 266, 287, 288], "old": [18, 69, 70, 125], "slow": 18, "ipad": 18, "long": [18, 19, 115, 699, 709], "browser": 18, "cool": [18, 113], "requisit": 18, "head": [18, 122, 699, 710, 968, 989, 1000], "pane": [18, 19], "readi": [18, 20], "begin": [18, 864, 865, 875], "outlin": [18, 19, 20, 112, 114, 117, 118, 122, 125, 130], "green": [18, 19, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 1014, 1015], "dropdown": 18, "tab": [18, 131, 968], "master": [18, 19, 122], "vs": 18, "view": [18, 19, 195, 213, 216, 699, 702, 706], "log": [18, 19, 35, 36, 80, 81, 118, 122, 125, 128, 131, 195, 227, 228, 353, 493, 496, 501, 504, 712, 759, 968], "built": [18, 129, 195, 196, 197, 303, 989, 1000, 1001, 1002], "bottom": 18, "box": 18, "patient": 18, "upto": 18, "15": [18, 98, 99, 115, 353, 392, 395, 548, 551, 699, 702, 712, 724, 726, 750, 752, 769, 771, 800, 834, 837, 882, 883, 886, 887, 889, 890, 891, 899, 902, 904, 905, 924, 925, 928], "minut": 18, "launch": 18, "12": [18, 98, 99, 115, 122, 353, 392, 395, 412, 415, 424, 427, 548, 551, 587, 605, 623, 661, 663, 666, 712, 724, 726, 750, 752, 769, 771, 800, 818, 821, 826, 829, 834, 837, 882, 883, 886, 887, 889, 890, 891, 899, 903, 904, 905, 924, 925, 928], "output": [18, 69, 70, 112, 113, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 130, 132, 133, 145, 156, 157, 160, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 191, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 272, 274, 303, 312, 313, 347, 348, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586, 587, 598, 599, 600, 602, 605, 606, 609, 610, 611, 613, 615, 616, 619, 627, 640, 643, 644, 661, 672, 694, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 730, 732, 733, 735, 736, 739, 740, 742, 744, 746, 747, 749, 750, 752, 753, 755, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783, 784, 785, 788, 790, 793, 795, 798, 800, 801, 804, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 837, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 864, 877, 882, 883, 886, 887, 888, 889, 890, 892, 893, 895, 898, 899, 903, 913, 914, 917, 919, 922, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 968, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000], "That": [18, 19, 130, 131, 132, 353, 544, 547], "alreadi": [18, 19, 69, 70, 119, 122, 126, 130, 145, 303, 353, 416, 419, 449, 452, 523, 526, 548, 551, 583, 586, 712, 750, 752, 968], "refer": [18, 19, 117, 118, 123, 126, 145, 195, 210, 211, 353, 445, 448, 493, 496, 661, 663, 666, 668, 670, 712, 775, 777, 781, 783, 924, 945, 948, 953, 956, 957, 958, 961, 963, 966, 989, 999], "approach": [18, 19, 117, 118, 122, 130, 131, 145], "colour": 18, "applic": [18, 123, 124, 132, 699, 710, 711, 864, 870, 876], "good": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 132], "chanc": 18, "vscode": 18, "show": [18, 19, 69, 70, 115, 125, 144, 145, 968], "explor": [18, 129, 133, 144], "troubleshoot": 18, "sometim": [18, 19], "ever": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "64": [18, 131, 132, 353, 564, 567, 568, 571, 699, 705, 706, 712, 750, 752, 924, 925, 928, 968, 989, 1000], "bit": [18, 115, 118, 122, 130, 266, 285, 286, 289, 353, 396, 399, 400, 403, 408, 411, 924, 941, 944, 949, 952], "usr": 18, "more": [18, 19, 20, 112, 113, 115, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 195, 196, 197, 266, 273, 353, 445, 448, 712, 736, 739, 800, 818, 821, 904, 905, 906, 910, 912, 968], "nutshel": [18, 126], "hook": 18, "lint": 18, "accept": [18, 19, 24, 114, 115, 117, 118, 121, 122, 124, 125, 126, 130, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 353, 354, 357, 367, 370, 372, 375, 392, 395, 412, 415, 416, 419, 424, 427, 449, 452, 509, 512, 513, 516, 532, 535, 544, 547, 548, 551, 564, 567, 568, 571, 577, 581, 582, 587, 615, 699, 702, 711, 712, 713, 716, 721, 723, 724, 726, 800, 814, 817, 818, 821, 834, 837, 882, 883, 886, 904, 905, 906, 910, 913, 914, 917, 924, 929, 932, 933, 936, 957, 958, 961, 968], "fix": [18, 19], "fail": [18, 20, 116, 117, 128, 130], "attempt": [18, 145], "succe": 18, "problemat": 18, "appli": [18, 19, 20, 22, 23, 24, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 69, 70, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 114, 115, 117, 118, 120, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 143, 145, 156, 157, 158, 160, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 180, 182, 183, 185, 187, 188, 189, 190, 191, 199, 200, 205, 206, 213, 214, 219, 220, 235, 236, 243, 244, 248, 250, 253, 255, 261, 263, 266, 275, 276, 277, 279, 294, 354, 355, 356, 358, 367, 368, 369, 371, 416, 417, 418, 449, 450, 451, 577, 578, 579, 580, 587, 588, 589, 590, 592, 609, 610, 611, 616, 617, 618, 620, 661, 663, 664, 665, 667, 681, 683, 685, 687, 699, 708, 710, 711, 712, 713, 714, 715, 717, 744, 746, 753, 755, 784, 785, 788, 790, 793, 795, 798, 800, 801, 802, 803, 805, 834, 835, 836, 838, 844, 847, 860, 861, 862, 864, 870, 873, 876, 877, 882, 883, 886, 889, 891, 906, 907, 908, 909, 968, 975, 976, 977, 1003, 1004], "proce": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "modifi": [18, 19, 114, 118, 123, 124, 128], "properli": [18, 112], "enter": [18, 19, 121, 123, 124, 126, 303], "unsur": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "feel": [18, 19, 20, 21, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 968], "server": [19, 968], "appropri": [19, 65, 66, 110, 111, 120, 353, 367, 370, 523, 526, 899, 900], "context": [19, 115, 122, 123, 124, 303, 587, 638, 699, 710, 989, 1000], "suitabl": [19, 113, 122], "quick": [19, 112, 132], "alwai": [19, 20, 69, 70, 113, 114, 118, 119, 121, 122, 125, 126, 128, 130, 145, 266, 272, 353, 367, 370, 523, 526, 587, 631, 661, 677, 679, 694], "correct": [19, 20, 61, 62, 106, 107, 112, 118, 122, 123, 124, 126, 266, 298, 800, 801, 804, 924, 945, 946, 947, 948, 953, 954, 955, 956, 968], "tendenc": 19, "gener": [19, 20, 21, 38, 65, 66, 69, 70, 83, 110, 111, 112, 113, 114, 115, 118, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 144, 145, 192, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 353, 354, 357, 372, 375, 412, 415, 416, 419, 424, 427, 449, 452, 532, 535, 544, 547, 564, 567, 568, 571, 588, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 677, 679, 712, 724, 726, 800, 814, 817, 834, 837, 887, 888, 889, 890, 893, 895, 897, 904, 905, 906, 910, 913, 914, 917, 924, 929, 932, 968, 1005, 1009], "land": 19, "end": [19, 122, 125, 127, 144, 145, 195, 196, 197, 353, 384, 387, 968, 974], "world": 19, "come": [19, 20, 132, 143, 968, 974], "fly": 19, "hard": [19, 130], "receiv": [19, 117, 123, 124, 303, 312, 313, 587, 594, 637, 989, 999], "respons": [19, 21], "internship": 19, "comment": 19, "trigger": 19, "unansw": 19, "label": [19, 128, 129, 133, 784, 785, 788, 790, 793, 795, 798], "respond": 19, "remov": [19, 20, 21, 69, 70, 114, 117, 118, 123, 125, 133, 712, 724, 726, 736, 739, 772, 774, 800, 840, 843, 860, 861, 862], "someon": [19, 145], "els": [19, 20, 113, 118, 119, 125, 128, 130, 132, 133, 145, 587, 597, 608, 612, 864, 874], "strive": [19, 145], "repli": 19, "newli": [19, 125, 192, 193, 266, 272, 587, 598], "place": [19, 69, 70, 112, 113, 114, 115, 117, 118, 122, 124, 126, 133, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 235, 238, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 303, 348, 353, 354, 357, 367, 370, 372, 375, 392, 395, 412, 415, 416, 419, 424, 427, 449, 452, 532, 535, 548, 551, 564, 567, 568, 571, 577, 581, 582, 587, 615, 629, 630, 631, 699, 702, 711, 712, 713, 716, 721, 723, 724, 726, 800, 814, 817, 818, 821, 834, 837, 882, 883, 886, 904, 905, 906, 910, 913, 914, 917, 924, 929, 932, 957, 958, 961, 1005, 1006, 1007, 1008, 1009, 1010], "bug": [19, 117], "serv": [19, 117, 118, 121, 122, 126, 127, 968], "suspect": 19, "behaviour": [19, 114, 117, 121, 122, 125, 126, 130], "observ": 19, "confid": 19, "noth": [19, 69, 70], "wrong": 19, "someth": [19, 113, 131, 132, 145], "bet": 19, "act": [19, 115, 145], "placehold": [19, 121, 126, 864, 876], "sub": [19, 20, 69, 70, 112, 117, 122, 130, 131, 132, 303, 328, 329, 332, 333, 334, 335, 712, 724, 726, 800, 839, 860, 861, 862, 863, 968], "mark": [19, 117], "ii": [19, 924, 925, 928], "iii": 19, "titl": [19, 968], "issue_numb": 19, "delet": [19, 21], "No": [19, 128], "wait": [19, 69, 70, 71, 72, 73], "progress": [19, 122, 129, 133], "pr": 19, "soon": [19, 122, 143, 145, 968, 974], "partial": [19, 69, 70, 1001, 1002], "solut": [19, 117, 122, 712, 760, 762], "review": [19, 113], "merg": 19, "everi": [19, 20, 21, 115, 116, 117, 118, 119, 120, 122, 125, 126, 128, 130, 132, 195, 218, 219, 222, 587, 588, 591], "shape": [19, 49, 50, 69, 70, 74, 75, 84, 85, 94, 95, 98, 99, 102, 103, 113, 114, 115, 123, 124, 125, 126, 128, 130, 131, 132, 133, 156, 157, 160, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 191, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 240, 241, 242, 243, 246, 248, 252, 253, 257, 258, 259, 260, 261, 265, 266, 272, 273, 274, 303, 315, 343, 348, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586, 587, 599, 600, 602, 605, 609, 610, 611, 613, 616, 619, 624, 627, 640, 643, 644, 650, 661, 663, 665, 667, 694, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 739, 740, 742, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783, 784, 785, 788, 790, 793, 795, 798, 800, 801, 804, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 831, 832, 833, 834, 837, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 882, 883, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 898, 899, 900, 902, 903, 907, 909, 913, 914, 917, 919, 922, 924, 925, 928, 957, 958, 961, 963, 966, 968, 989, 991, 992, 993, 994, 995, 996, 1003, 1004], "move": [19, 69, 70, 113, 303, 348], "within": [19, 24, 27, 28, 117, 132, 145, 195, 196, 197, 887, 893, 895], "7": [19, 21, 35, 36, 49, 50, 71, 72, 80, 81, 98, 99, 115, 118, 122, 125, 156, 162, 165, 167, 170, 303, 325, 353, 354, 357, 367, 368, 369, 370, 371, 392, 395, 396, 399, 412, 415, 416, 419, 424, 427, 441, 444, 449, 452, 461, 464, 481, 484, 521, 522, 548, 551, 564, 567, 577, 581, 582, 587, 596, 605, 615, 661, 663, 666, 668, 670, 681, 683, 699, 705, 706, 711, 712, 718, 720, 721, 723, 724, 726, 750, 752, 769, 771, 784, 785, 788, 790, 793, 795, 798, 800, 801, 802, 804, 814, 817, 818, 821, 826, 829, 839, 848, 851, 882, 883, 886, 887, 888, 889, 890, 891, 892, 893, 895, 899, 903, 904, 905, 924, 925, 928], "dai": 19, "close": [19, 114, 353, 445, 448, 548, 551, 712, 763, 765], "likewis": [19, 114, 118, 122, 123, 126, 131], "freed": 19, "flag": [19, 69, 70, 125, 130, 303, 322, 661, 677, 679], "purpos": [19, 21, 115, 117, 118, 120, 121, 122, 126, 127, 130, 353, 445, 448, 968], "remain": [19, 115, 145, 353, 367, 370, 523, 526, 544, 547, 800, 830, 833, 864, 870], "access": [19, 21, 69, 70, 123], "short": [19, 132, 699, 709], "basi": [19, 116, 131], "situat": [19, 133], "alloc": [19, 145, 195, 248, 252, 253, 257, 266, 272, 303], "upon": [19, 115, 117, 125, 145], "period": 19, "prevent": [19, 125, 130, 661, 663, 666, 668, 670, 681, 683, 924, 949, 952, 1005, 1006, 1007], "unabl": 19, "obvious": 19, "never": [19, 122], "reflect": [19, 121], "qualiti": 19, "hypothet": 19, "frustrat": 19, "delai": 19, "busi": 19, "fine": [19, 130, 133], "becaus": [19, 114, 117, 118, 119, 121, 123, 124, 125, 126, 128, 132, 133, 145], "inact": 19, "limit": [19, 69, 70, 71, 72, 73, 115, 117, 128, 131, 133, 145, 266, 286, 289, 587, 599, 600, 602, 800, 801, 804], "me": 19, "unfairli": 19, "definit": [19, 118, 123, 130, 712, 713, 716, 718, 720], "investig": 19, "Then": [19, 21, 130, 145], "practic": [19, 117], "separ": [19, 117, 121, 128, 130, 131], "branch": [19, 122, 145, 192, 193, 353, 384, 387], "simpli": [19, 22, 23, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 69, 70, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 132, 133, 157, 158, 162, 163, 167, 168, 172, 173, 177, 178, 182, 183, 187, 188, 189, 190, 199, 200, 205, 206, 213, 214, 219, 220, 235, 236, 243, 244, 248, 250, 253, 255, 261, 263, 275, 276, 277, 279, 353, 354, 355, 356, 358, 367, 368, 369, 371, 416, 417, 418, 445, 448, 449, 450, 451, 577, 578, 579, 580, 588, 589, 590, 592, 616, 617, 618, 620, 663, 664, 665, 667, 713, 714, 715, 717, 801, 802, 803, 805, 834, 835, 836, 838, 889, 891, 906, 907, 908, 909], "role": [19, 129], "kept": [19, 69, 70, 71, 72, 73, 125, 860, 861, 862], "date": 19, "upstream": [19, 116], "complic": [19, 128], "root": [19, 21, 131, 353, 564, 567, 887, 888, 892], "merge_with_upstream": 19, "sh": 19, "name_of_your_branch": 19, "resolv": [19, 924, 941, 944, 949, 952], "clone": [19, 21, 69, 70, 303, 324, 325, 326, 327], "push": [19, 116], "both": [19, 114, 115, 118, 122, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 293, 353, 354, 357, 367, 370, 372, 375, 416, 419, 449, 452, 532, 535, 540, 543, 564, 567, 568, 571, 577, 581, 587, 615, 661, 663, 666, 699, 702, 711, 712, 713, 716, 718, 720, 724, 726, 736, 739, 775, 777, 800, 834, 837, 882, 883, 886, 904, 906, 910, 924, 929, 932, 957, 958, 961], "abort": 19, "tediou": 19, "resolut": 19, "stash": 19, "reinstat": 19, "correspond": [19, 69, 70, 71, 72, 114, 115, 116, 118, 121, 122, 123, 126, 266, 273, 353, 384, 387, 540, 543, 712, 718, 720, 727, 729, 760, 762, 800, 806, 809, 834, 837, 887, 888, 899, 900, 901, 904, 905, 906, 910, 912, 924, 941, 944, 945, 948, 949, 952, 953, 956], "fetch": 19, "uncommit": 19, "unstag": 19, "untrack": 19, "comprehens": 19, "explan": [19, 114, 122, 126, 130], "atlassian": 19, "tutori": 19, "wrote": 19, "piec": [19, 118, 120, 121, 128], "inform": [19, 266, 286, 289, 587, 593, 661, 694], "tag": 19, "usu": 19, "describ": [19, 129, 133, 924, 925, 928, 941, 944, 945, 948, 949, 952], "navig": [19, 112], "blame": 19, "revis": 19, "author": [19, 968], "eg": 19, "16": [19, 45, 46, 80, 81, 98, 99, 115, 131, 353, 577, 578, 580, 581, 699, 705, 712, 713, 714, 716, 724, 726, 750, 752, 889, 891, 899, 903, 924, 925, 928], "5": [19, 21, 35, 36, 37, 38, 45, 46, 49, 50, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 94, 95, 98, 99, 115, 119, 126, 130, 131, 132, 156, 162, 165, 167, 170, 177, 180, 187, 188, 190, 195, 219, 222, 230, 233, 243, 246, 258, 260, 261, 265, 266, 275, 277, 278, 279, 303, 325, 341, 353, 354, 356, 357, 358, 367, 368, 369, 370, 371, 372, 375, 388, 391, 392, 395, 408, 411, 412, 415, 416, 417, 418, 419, 424, 427, 449, 450, 451, 452, 461, 464, 481, 484, 521, 522, 528, 531, 532, 535, 548, 551, 564, 567, 568, 571, 577, 578, 580, 581, 582, 587, 588, 589, 596, 605, 615, 616, 619, 620, 650, 655, 661, 663, 665, 666, 667, 699, 702, 704, 705, 711, 712, 713, 714, 716, 718, 720, 721, 723, 724, 726, 733, 735, 750, 752, 769, 771, 772, 774, 784, 795, 798, 800, 801, 802, 803, 804, 805, 806, 809, 814, 817, 818, 821, 826, 829, 830, 833, 834, 836, 837, 838, 839, 848, 851, 882, 883, 886, 887, 888, 889, 890, 891, 898, 899, 901, 902, 903, 904, 905, 906, 910, 913, 914, 917, 924, 925, 928, 929, 932, 957, 958, 961, 989, 1000], "past": 19, "l": [19, 112, 712, 713, 716, 727, 729, 736, 739, 772, 774], "filepath": [19, 69, 70], "grep": 19, "v": [19, 128, 131, 132, 133, 699, 711, 968, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1011, 1012], "commit_id": 19, "handi": 19, "histori": 19, "toggl": 19, "vertic": 19, "highlight": [19, 115], "previou": [19, 117, 126, 133, 145, 661, 668, 670, 681, 683], "shown": [19, 65, 66, 69, 70, 110, 111, 115, 126, 128, 130, 145, 353, 392, 395, 412, 415, 424, 427, 548, 551, 582, 712, 721, 723, 800, 814, 817, 818, 821, 904, 905, 913, 914, 917], "whenev": [19, 130, 131], "think": [19, 115], "interact": [19, 968], "gain": [19, 127, 132, 980], "quit": [19, 20, 114, 118, 120, 121], "repeat": [19, 49, 50, 69, 70, 94, 95, 114, 115, 119, 121, 122, 587, 611, 800, 852, 855], "yourself": [19, 20, 144], "simpler": [19, 130], "cannot": [19, 119, 123, 133], "least": [19, 115, 118, 121, 712, 736, 739], "final": [19, 114, 115, 118, 121, 123, 125, 128, 130, 131, 195, 224, 225, 227, 228, 587, 614, 989, 1000], "tickbox": 19, "lower": [19, 69, 70, 115, 128, 145, 195, 210, 211, 248, 252, 353, 521, 712, 713, 716, 887, 893, 895], "corner": 19, "without": [19, 69, 70, 113, 118, 121, 122, 124, 126, 128, 130, 131, 132, 144, 145, 587, 642, 647, 800, 830, 833, 864, 866, 904, 905, 906, 910, 912], "span": 19, "intent": [19, 125], "larg": [19, 131, 353, 367, 370, 523, 526], "discourag": 19, "philosophi": 19, "increment": [19, 587, 630], "frequent": [19, 20], "valuabl": 19, "infrequ": 19, "earli": [19, 968], "wast": 19, "spot": [19, 118], "mistak": 19, "propos": 19, "mountain": 19, "around": [19, 69, 70, 71, 72, 73, 118, 121, 126, 130, 145], "advoc": [19, 145], "individu": [19, 20, 118], "per": [19, 131, 303, 699, 700, 701, 702, 703, 704, 705, 706, 989, 990, 991, 992, 993, 994, 995, 996], "style": [19, 899, 902], "ve": [19, 127, 130, 887, 888, 968], "were": [19, 69, 70, 113, 117, 122], "actual": [19, 112, 118, 125, 127, 130, 132, 145], "aim": [19, 127], "part": [19, 113, 116, 117, 118, 128, 129, 133, 144, 145, 195, 248, 252, 253, 257, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 1001, 1002], "subsect": 19, "session": [19, 968], "block": [19, 118, 127, 129, 133, 145, 303, 968], "smaller": [19, 128, 133, 800, 801, 804, 834, 837, 924, 941, 944, 949, 952], "edit": 19, "exact": [19, 69, 70, 128, 904, 905], "beauti": 19, "particularli": [19, 131, 145], "concern": [19, 112, 115, 122, 125, 127], "effici": [19, 117, 118, 122, 125, 126, 128, 131, 145], "difficult": [19, 117, 145, 904, 905, 906, 910, 912], "undo": 19, "stress": 19, "frequenc": [19, 587, 614], "pycharm": 19, "pytest": [19, 117], "button": 19, "declar": 19, "insid": [19, 21, 113, 123], "exec": 19, "rm": 19, "rf": 19, "cp": 19, "ivy_contain": 19, "bash": [19, 21], "test_ivi": [19, 117], "test_funct": 19, "test_cor": 19, "test_imag": 19, "test_random_crop": 19, "header": 19, "summari": [19, 69, 70, 266, 281, 282, 283, 295, 296, 297, 303, 316, 317, 587, 603, 607, 625, 661, 693, 698], "q": [19, 145, 699, 711, 712, 727, 729, 756, 758], "array_api_test": 19, "test_creation_funct": 19, "test_arang": 19, "window": [19, 21, 699, 700, 701, 702, 703, 704, 705, 706, 989, 990, 991, 992, 993, 994, 995, 996], "variou": [19, 114, 120, 126, 144], "valu": [19, 49, 50, 57, 58, 69, 70, 71, 72, 73, 94, 95, 115, 117, 118, 122, 123, 124, 125, 126, 128, 130, 133, 145, 195, 196, 197, 210, 211, 218, 219, 222, 224, 225, 227, 228, 266, 272, 281, 282, 283, 303, 315, 346, 347, 353, 354, 357, 359, 362, 367, 370, 372, 375, 380, 383, 416, 419, 433, 436, 437, 440, 449, 452, 453, 456, 457, 460, 461, 464, 477, 480, 481, 484, 521, 522, 523, 526, 532, 535, 536, 539, 540, 543, 548, 551, 582, 583, 586, 587, 599, 600, 602, 603, 608, 614, 615, 616, 619, 625, 628, 632, 642, 643, 644, 645, 646, 647, 660, 661, 663, 666, 668, 670, 672, 681, 683, 694, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 744, 746, 753, 755, 756, 758, 759, 760, 762, 763, 765, 766, 768, 778, 780, 800, 801, 804, 810, 811, 812, 813, 826, 829, 830, 833, 856, 858, 859, 860, 861, 862, 864, 868, 869, 870, 871, 872, 877, 880, 881, 882, 883, 886, 887, 888, 889, 890, 892, 893, 895, 897, 899, 900, 901, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 917, 919, 922, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 989, 990, 991, 992, 993, 994, 995, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009], "cpu": [19, 69, 70, 124, 145, 195, 224, 225, 227, 228, 303, 322, 323, 325, 339, 342, 344, 348, 349, 351, 352, 587, 615, 616, 619, 640, 643, 644, 887, 888, 889, 890, 892, 893, 895, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012], "gpu": [19, 98, 99, 124, 130, 145, 303, 322, 325, 338, 340, 344, 346, 351, 889, 891], "combin": [19, 69, 70, 71, 72, 73, 115, 117, 118, 121, 122, 133, 712, 718, 720], "wherebi": [20, 122, 864, 876], "broad": 20, "distribut": [20, 69, 70, 124, 145, 303, 324, 328, 329, 330, 331, 699, 707, 784, 785, 788, 790, 793, 795, 798, 887, 888, 889, 890, 892, 893, 895, 989, 997, 1001, 1002], "across": [20, 69, 70, 115, 117, 118, 122, 123, 126, 303, 312, 313, 324, 325, 327, 328, 329, 330, 331, 335, 345, 346, 587, 595, 596, 864, 870, 899, 901], "todo": [20, 117], "commit": [20, 117], "NOT": [20, 353, 509, 512], "static": [20, 67, 68, 69, 70, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 98, 99, 102, 103, 104, 105, 108, 109, 110, 111, 114, 115, 118, 145, 187, 188, 192, 193, 275, 279, 354, 358, 367, 371, 577, 578, 588, 592, 616, 620, 713, 717, 801, 805, 834, 838, 889, 891, 906, 907], "method": [20, 22, 23, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 65, 66, 69, 70, 71, 72, 73, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 110, 111, 113, 114, 115, 117, 118, 121, 126, 128, 129, 132, 133, 145, 156, 157, 158, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 180, 182, 183, 185, 187, 188, 189, 190, 191, 195, 199, 200, 205, 206, 213, 214, 216, 219, 220, 235, 236, 243, 244, 248, 250, 253, 255, 261, 263, 275, 276, 277, 279, 353, 354, 355, 356, 358, 367, 368, 369, 371, 372, 375, 392, 395, 412, 415, 416, 417, 418, 419, 424, 427, 449, 450, 451, 452, 461, 464, 481, 484, 521, 522, 528, 531, 532, 535, 548, 551, 564, 567, 568, 571, 577, 578, 579, 580, 582, 587, 588, 589, 590, 592, 603, 604, 615, 616, 617, 618, 620, 643, 644, 655, 657, 661, 663, 664, 665, 667, 681, 683, 685, 687, 699, 705, 711, 712, 713, 714, 715, 717, 718, 720, 721, 723, 784, 785, 788, 800, 801, 802, 803, 805, 814, 817, 818, 821, 826, 829, 834, 835, 836, 838, 839, 848, 851, 864, 865, 875, 876, 877, 882, 883, 886, 887, 889, 891, 892, 893, 895, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 917, 924, 925, 928, 929, 932, 957, 958, 961, 968, 989, 1000, 1001, 1002], "instanc": [20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 65, 66, 69, 70, 71, 72, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 102, 103, 110, 111, 114, 115, 117, 118, 121, 123, 125, 126, 131, 132, 133, 146, 154, 156, 157, 158, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 180, 182, 183, 185, 187, 189, 190, 191, 195, 196, 197, 199, 200, 202, 204, 205, 206, 208, 210, 211, 213, 214, 216, 218, 219, 220, 222, 224, 225, 227, 228, 230, 233, 235, 236, 240, 241, 243, 244, 246, 248, 250, 252, 253, 255, 257, 258, 260, 261, 263, 265, 266, 275, 276, 277, 278, 303, 312, 344, 353, 354, 355, 356, 357, 367, 368, 369, 370, 372, 375, 392, 395, 412, 415, 416, 417, 418, 419, 424, 427, 449, 450, 451, 452, 461, 464, 481, 484, 521, 522, 528, 531, 532, 535, 548, 551, 564, 567, 568, 571, 577, 579, 580, 581, 582, 587, 588, 589, 590, 604, 615, 616, 617, 618, 631, 655, 657, 663, 664, 665, 667, 699, 702, 705, 711, 712, 713, 714, 715, 716, 718, 720, 721, 723, 724, 726, 784, 785, 788, 800, 801, 802, 803, 814, 817, 818, 821, 826, 829, 834, 835, 836, 837, 839, 848, 851, 882, 883, 886, 887, 892, 893, 895, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 917, 924, 925, 928, 929, 932, 957, 958, 961, 978, 979], "revers": [20, 71, 72, 114, 115, 133, 145, 587, 608, 800, 818, 821], "resourc": 20, "content": [20, 21, 69, 70, 125, 128, 131], "thei": [20, 69, 70, 112, 113, 115, 118, 120, 122, 123, 124, 125, 130, 131, 132, 133, 145, 266, 293, 860, 861, 862, 887, 888, 968, 1011, 1012], "hypothesi": 20, "cover": [20, 114, 115, 118, 120, 127], "lambda": [20, 128, 131, 1005, 1008, 1010], "direct": [20, 132, 133, 144, 913, 919, 922], "bind": [20, 122], "special": [20, 71, 72, 113, 114, 115, 121, 126, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 412, 415, 416, 419, 420, 423, 424, 427, 441, 444, 445, 448, 449, 452, 485, 488, 489, 492, 497, 500, 501, 504, 523, 526, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 577, 581, 582, 583, 586, 924, 929, 932, 933, 936, 937, 940, 945, 948, 949, 952, 953, 956], "aforement": 20, "categori": [20, 113, 121, 122, 123, 127, 968], "parent": [20, 130], "arraywithelementwis": [20, 35, 121], "containerwithmanipul": [20, 71, 72, 94], "hint": [20, 113, 114, 118, 121, 125, 126, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 353, 354, 357, 367, 370, 372, 375, 392, 395, 412, 415, 416, 419, 424, 427, 449, 452, 532, 535, 548, 551, 564, 567, 568, 571, 577, 581, 582, 587, 615, 699, 702, 711, 712, 713, 716, 721, 723, 724, 726, 800, 814, 817, 818, 821, 834, 837, 882, 883, 886, 904, 905, 906, 910, 913, 914, 917, 924, 929, 932, 957, 958, 961], "its": [20, 21, 114, 266, 273, 303, 347, 712, 736, 739, 800, 814, 817, 830, 833, 834, 837, 848, 851], "docstr": [20, 21, 22, 23, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 112, 113, 118, 122, 126, 157, 158, 162, 163, 167, 168, 172, 173, 177, 178, 182, 183, 187, 188, 189, 190, 195, 196, 197, 199, 200, 202, 204, 205, 206, 208, 210, 211, 213, 214, 216, 218, 219, 220, 222, 224, 225, 230, 233, 235, 236, 240, 241, 243, 244, 246, 248, 250, 252, 253, 255, 257, 258, 260, 261, 263, 265, 266, 275, 276, 277, 278, 279, 353, 354, 355, 356, 357, 358, 367, 368, 369, 370, 371, 372, 375, 392, 395, 412, 415, 416, 417, 418, 419, 424, 427, 449, 450, 451, 452, 481, 484, 532, 535, 548, 551, 564, 567, 568, 571, 577, 578, 579, 580, 581, 582, 588, 589, 590, 592, 616, 617, 618, 620, 663, 664, 665, 667, 712, 713, 714, 715, 717, 721, 723, 724, 726, 800, 801, 802, 803, 805, 814, 817, 818, 821, 834, 835, 836, 837, 838, 889, 891, 904, 905, 906, 907, 908, 909, 910, 913, 914, 917, 924, 929, 932, 957, 958, 961], "thorough": [20, 114, 117, 126], "transpil": [20, 127, 129, 968, 974], "builder": [21, 143, 145, 968], "maco": 21, "ubuntu": 21, "uid": 21, "make_docs_without_dock": 21, "rel": [21, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 712, 724, 726, 744, 746, 753, 755, 772, 774, 800, 818, 821, 834, 837, 913, 914, 917, 919, 922, 968], "synchron": 21, "rest": [21, 129, 133], "remove_doc": 21, "_": [21, 114, 122, 125, 130, 131, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 353, 354, 357, 372, 375, 412, 415, 416, 419, 424, 427, 449, 452, 532, 535, 564, 567, 568, 571, 661, 663, 666, 668, 670, 712, 724, 726, 781, 783, 800, 814, 817, 834, 837, 904, 905, 913, 914, 917, 924, 929, 932], "indic": [21, 37, 38, 69, 70, 82, 83, 129, 133, 156, 177, 180, 353, 552, 555, 587, 615, 616, 617, 618, 619, 620, 627, 640, 643, 644, 699, 700, 701, 702, 703, 704, 705, 706, 712, 778, 780, 800, 834, 837, 864, 865, 867, 869, 871, 872, 873, 875, 878, 879, 880, 881, 882, 883, 886, 887, 888, 899, 900, 901, 902, 904, 905, 911, 913, 914, 917, 919, 922, 968, 971, 973, 989, 990, 991, 992, 993, 994, 995, 996, 1001, 1002], "privat": [21, 1005, 1009], "fulfil": [21, 127, 968], "autogenerated_sourc": 21, "format": [21, 69, 70, 114, 123, 124, 128, 130, 131, 266, 284, 303, 323, 924, 925, 928, 968], "png": [21, 131], "_imag": 21, "lastli": 21, "structur": [21, 69, 70, 71, 72, 73, 113, 118, 121, 122, 131, 132, 587, 603, 864, 877], "rst": 21, "skip": [21, 69, 70, 117, 864, 877], "read": [21, 69, 70, 968], "partial_sourc": 21, "conf": 21, "copi": [21, 29, 30, 69, 70, 74, 75, 114, 119, 123, 128, 130, 131, 144, 145, 195, 199, 200, 201, 202, 203, 213, 216, 266, 272, 303, 348, 587, 604, 656, 657, 800, 830, 833, 864, 866, 913, 919, 922], "create_rst_fil": 21, "filter": [21, 699, 700, 701, 702, 703, 704, 705, 706, 989, 990, 991, 992, 993, 994, 995, 996], "repres": [21, 130, 195, 230, 233, 266, 285, 353, 363, 366, 367, 370, 376, 379, 388, 391, 424, 427, 523, 526, 560, 563, 582, 699, 708, 712, 759, 760, 762], "overal": [21, 114, 122, 123, 124, 133], "markup": 21, "6": [21, 35, 36, 39, 40, 49, 50, 71, 72, 80, 81, 82, 83, 98, 99, 115, 119, 122, 130, 131, 132, 156, 162, 165, 167, 170, 177, 180, 195, 219, 222, 303, 325, 341, 353, 354, 355, 356, 357, 358, 367, 368, 369, 370, 371, 372, 375, 392, 395, 396, 399, 412, 415, 416, 417, 418, 419, 424, 427, 449, 452, 461, 464, 481, 484, 521, 522, 528, 531, 548, 551, 564, 567, 568, 571, 577, 581, 582, 587, 596, 605, 615, 616, 619, 620, 650, 655, 661, 663, 664, 666, 699, 702, 705, 706, 711, 712, 718, 720, 721, 723, 724, 726, 750, 752, 763, 765, 769, 771, 784, 785, 788, 795, 798, 800, 801, 802, 804, 806, 809, 814, 817, 818, 821, 826, 829, 830, 833, 834, 837, 839, 848, 851, 882, 883, 886, 887, 888, 889, 890, 891, 899, 900, 903, 904, 905, 906, 910, 924, 925, 928, 929, 932], "extract": [21, 113], "get_functions_and_class": 21, "doctr": 21, "readm": [21, 145], "module_nam": 21, "copy_readme_to_rst": 21, "tabl": 21, "toc": 21, "tree": 21, "append": [21, 69, 70, 117, 128, 131, 353, 400, 403, 712, 724, 726, 736, 739], "append_toctree_to_rst": 21, "9": [21, 35, 36, 39, 40, 49, 50, 71, 72, 80, 81, 84, 85, 98, 99, 115, 131, 132, 353, 367, 368, 369, 370, 371, 392, 395, 396, 399, 521, 522, 548, 551, 564, 567, 568, 571, 587, 615, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 682, 683, 684, 699, 702, 705, 706, 712, 718, 720, 721, 723, 724, 726, 750, 752, 763, 765, 769, 771, 800, 801, 802, 804, 818, 821, 826, 829, 834, 837, 839, 887, 888, 889, 890, 891, 899, 903, 904, 905, 924, 925, 928, 1005, 1006, 1007], "index": [21, 29, 30, 69, 70, 74, 75, 118, 122, 130, 194, 195, 210, 211, 230, 231, 232, 233, 234, 303, 344, 587, 593, 615, 616, 619, 800, 844, 847, 864, 867, 868, 871, 872, 873, 878, 880, 899, 900, 901, 902, 904, 905, 906, 910, 913, 914, 917, 971, 973], "create_index_rst": 21, "14": [21, 98, 99, 115, 122, 353, 412, 415, 661, 663, 666, 699, 711, 712, 724, 726, 750, 752, 889, 891, 904, 905, 924, 925, 928], "\u03c0": [21, 353, 359, 362, 372, 375, 380, 383, 384, 387], "namespac": [21, 113, 123, 128, 133], "arraywithactiv": 22, "abc": [22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 69, 70, 130, 303, 312, 318, 587, 612, 1001, 1002, 1005, 1009], "gelu": [22, 23, 67, 68, 156, 975], "approxim": [22, 23, 67, 68, 114, 156, 157, 158, 159, 160, 161, 353, 359, 362, 363, 366, 372, 375, 376, 379, 380, 383, 384, 387, 420, 423, 424, 427, 441, 444, 445, 448, 485, 488, 489, 492, 493, 496, 497, 500, 540, 543, 556, 559, 560, 563, 577, 581, 582, 712, 744, 746, 753, 755], "true": [22, 23, 31, 32, 37, 38, 45, 46, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 117, 118, 122, 123, 125, 128, 130, 131, 132, 133, 156, 157, 158, 159, 160, 161, 162, 164, 166, 167, 169, 171, 172, 174, 176, 177, 179, 181, 182, 184, 186, 187, 188, 190, 192, 193, 195, 196, 198, 199, 201, 203, 205, 207, 209, 210, 212, 213, 215, 217, 219, 221, 223, 224, 225, 226, 227, 229, 230, 232, 234, 235, 237, 239, 240, 242, 243, 245, 247, 248, 249, 251, 253, 254, 256, 258, 259, 261, 262, 264, 266, 272, 275, 276, 277, 278, 279, 303, 322, 339, 343, 344, 353, 354, 356, 358, 359, 361, 363, 365, 367, 369, 371, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 395, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 415, 416, 418, 420, 422, 424, 426, 428, 430, 432, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 460, 461, 463, 464, 465, 467, 468, 469, 471, 472, 473, 475, 476, 477, 479, 480, 481, 483, 484, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 512, 513, 515, 516, 517, 519, 523, 525, 527, 528, 530, 532, 534, 535, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 583, 585, 587, 588, 589, 590, 591, 592, 595, 596, 597, 598, 600, 601, 605, 612, 614, 616, 618, 620, 626, 627, 634, 649, 655, 657, 660, 661, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 699, 707, 712, 713, 715, 716, 717, 736, 738, 740, 742, 763, 764, 765, 778, 780, 784, 785, 787, 788, 789, 790, 792, 793, 794, 795, 797, 798, 799, 800, 801, 803, 805, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 839, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 861, 862, 863, 864, 865, 874, 875, 877, 883, 885, 887, 888, 893, 894, 896, 899, 900, 901, 903, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 929, 931, 932, 933, 935, 936, 937, 939, 940, 941, 943, 944, 945, 947, 948, 949, 951, 952, 953, 955, 956, 957, 958, 960, 961, 962, 963, 965, 966, 967, 989, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "variant": [22, 23, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 114, 115, 157, 158, 162, 163, 167, 168, 172, 173, 177, 178, 182, 183, 187, 188, 189, 190, 199, 200, 205, 206, 213, 214, 219, 220, 235, 236, 243, 244, 248, 250, 253, 255, 261, 263, 275, 276, 277, 279, 354, 355, 356, 358, 367, 368, 369, 371, 416, 417, 418, 449, 450, 451, 577, 578, 579, 580, 588, 589, 590, 592, 616, 617, 618, 620, 663, 664, 665, 667, 713, 714, 715, 717, 801, 802, 803, 805, 834, 835, 836, 838, 889, 891, 906, 907, 908, 909], "wrap": [22, 23, 24, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 66, 69, 70, 71, 72, 73, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 111, 112, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 133, 145, 146, 154, 157, 158, 162, 163, 167, 168, 172, 173, 177, 178, 182, 183, 187, 188, 189, 190, 199, 200, 205, 206, 213, 214, 219, 220, 235, 236, 243, 244, 248, 250, 253, 255, 261, 263, 275, 276, 277, 279, 354, 355, 356, 358, 367, 368, 369, 371, 416, 417, 418, 449, 450, 451, 577, 578, 579, 580, 587, 588, 589, 590, 592, 598, 616, 617, 618, 620, 661, 663, 664, 665, 667, 697, 713, 714, 715, 717, 801, 802, 803, 805, 834, 835, 836, 838, 889, 891, 906, 907, 908, 909], "minim": [22, 23, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 45, 46, 49, 50, 57, 58, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 102, 103, 114, 125, 128, 157, 158, 162, 163, 167, 168, 172, 173, 177, 178, 182, 183, 187, 188, 189, 190, 199, 200, 205, 206, 213, 214, 219, 220, 235, 236, 243, 244, 248, 250, 253, 255, 261, 263, 275, 276, 277, 279, 354, 355, 356, 358, 367, 368, 369, 371, 416, 417, 418, 449, 450, 451, 577, 578, 579, 580, 588, 589, 590, 592, 616, 617, 618, 620, 663, 664, 665, 667, 713, 714, 715, 717, 801, 802, 803, 805, 834, 835, 836, 838, 889, 891, 906, 907, 908, 909], "y": [22, 23, 35, 36, 37, 38, 45, 46, 49, 50, 57, 58, 71, 72, 80, 81, 82, 83, 90, 91, 94, 95, 98, 99, 102, 103, 113, 115, 119, 122, 128, 130, 156, 157, 158, 162, 163, 165, 167, 168, 170, 172, 173, 175, 177, 178, 180, 182, 183, 185, 187, 188, 189, 190, 191, 195, 218, 219, 222, 230, 233, 240, 241, 243, 246, 261, 265, 266, 272, 303, 323, 337, 341, 346, 353, 354, 355, 356, 357, 358, 367, 368, 369, 370, 371, 372, 375, 384, 387, 392, 395, 396, 399, 408, 411, 412, 415, 416, 417, 418, 419, 420, 423, 424, 427, 441, 444, 449, 450, 451, 452, 461, 464, 481, 484, 521, 522, 528, 531, 532, 535, 548, 551, 564, 567, 568, 571, 577, 578, 579, 580, 581, 582, 587, 588, 589, 590, 591, 592, 595, 596, 604, 605, 612, 613, 615, 616, 617, 618, 619, 620, 649, 655, 656, 657, 661, 672, 699, 705, 706, 708, 712, 713, 714, 715, 716, 717, 718, 720, 721, 723, 733, 735, 750, 752, 769, 771, 772, 774, 784, 785, 788, 790, 793, 795, 798, 800, 801, 802, 803, 804, 805, 806, 809, 814, 817, 818, 821, 826, 829, 830, 833, 834, 835, 836, 837, 838, 839, 848, 851, 887, 888, 889, 890, 891, 892, 893, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 913, 914, 917, 924, 925, 928, 929, 932, 945, 948, 949, 952, 957, 958, 961], "185": [22, 23, 157, 158], "046": [22, 23, 157, 158], "leaky_relu": [22, 23, 67, 68, 156, 968], "alpha": [22, 23, 67, 68, 156, 162, 163, 164, 165, 166], "39": [22, 23, 156, 162, 163, 165, 353, 441, 444, 661, 663, 666, 712, 750, 752, 924, 925, 928], "85": [22, 23, 156, 162, 163, 165, 353, 412, 415], "17": [22, 23, 115, 122, 156, 162, 163, 165, 712, 724, 726, 887, 892], "relu": [22, 23, 65, 66, 67, 68, 131, 132, 156, 157, 160, 162, 165, 968], "sigmoid": [22, 23, 67, 68, 128, 131, 132, 156, 968], "269": [22, 23, 156, 172, 173, 175], "731": [22, 23, 156, 172, 173, 175], "881": [22, 23, 156, 172, 173, 175], "softmax": [22, 23, 65, 66, 67, 68, 156, 699, 710, 711, 968], "axi": [22, 23, 45, 46, 47, 48, 49, 50, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 74, 75, 92, 93, 94, 95, 104, 105, 106, 107, 108, 109, 115, 118, 122, 123, 125, 126, 128, 130, 133, 144, 156, 177, 178, 179, 180, 181, 195, 224, 225, 226, 227, 228, 229, 303, 305, 308, 315, 328, 329, 330, 331, 332, 333, 334, 335, 347, 587, 605, 606, 615, 659, 712, 718, 719, 720, 724, 726, 775, 776, 777, 778, 779, 780, 784, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 806, 807, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 826, 827, 828, 829, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 855, 856, 859, 887, 898, 899, 900, 901, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967], "422": [22, 23, 156, 177, 178, 180], "155": [22, 23, 156, 177, 178, 180], "softplu": [22, 23, 67, 68, 156, 968], "3461": [22, 23, 156, 182, 183, 185], "6491": [22, 23, 156, 182, 183, 185], "535": [22, 23, 156, 182, 183, 185], "42": [22, 23, 98, 99, 133, 156, 182, 183, 185, 661, 663, 666, 712, 750, 752, 887, 889, 891, 897, 924, 925, 928], "tanh": [22, 23, 35, 36, 67, 68, 80, 81, 128, 156, 188, 353, 968], "55": [22, 23, 156, 187, 191, 699, 705, 712, 750, 752, 924, 925, 928], "501": [22, 23, 156, 187, 191], "collect": [24, 69, 70, 117, 144, 156, 192, 303, 587, 661, 699, 784, 864, 877, 882, 887, 975, 989, 1003, 1005], "args_to_ivi": 24, "include_deriv": [24, 25, 26, 27, 28, 864, 866, 876], "keyword": [24, 25, 26, 69, 70, 71, 72, 73, 113, 123, 124, 125, 126, 131, 195, 230, 233, 303, 312, 313, 327, 331, 335, 587, 594, 637, 864, 870, 924, 949, 952, 1001, 1002], "variabl": [24, 25, 26, 27, 28, 69, 70, 71, 72, 114, 119, 122, 123, 125, 126, 131, 132, 133, 145, 587, 597, 629, 630, 631, 632, 633, 634, 636, 653, 661, 668, 670, 672, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 694, 697, 699, 710, 712, 760, 762, 860, 861, 862, 863, 882, 883, 886, 968, 978, 979, 980, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "nest": [24, 25, 26, 27, 28, 69, 70, 71, 72, 73, 113, 118, 121, 122, 130, 131, 132, 145, 303, 327, 331, 335, 587, 655, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010], "unchang": [24, 25, 26, 27, 28], "posit": [24, 25, 26, 35, 36, 80, 81, 126, 131, 144, 194, 195, 210, 211, 266, 286, 303, 327, 331, 335, 353, 354, 357, 465, 468, 469, 472, 523, 526, 544, 547, 587, 614, 712, 713, 716, 800, 814, 817, 834, 837, 887, 897, 899, 902, 957, 958, 961, 963, 966, 978, 979], "bool": [24, 25, 26, 27, 28, 31, 32, 69, 70, 110, 111, 115, 122, 123, 125, 133, 192, 193, 195, 218, 266, 272, 275, 276, 278, 281, 282, 283, 284, 287, 290, 291, 292, 302, 303, 322, 323, 338, 347, 350, 353, 392, 395, 396, 399, 404, 407, 412, 415, 433, 436, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 505, 508, 509, 512, 513, 516, 532, 535, 587, 588, 591, 595, 596, 605, 608, 612, 614, 624, 626, 631, 633, 634, 635, 636, 649, 659, 660, 661, 694, 712, 713, 716, 740, 742, 763, 765, 778, 780, 800, 839, 860, 861, 862, 863, 864, 865, 866, 870, 874, 875, 876, 887, 888, 899, 900, 901, 913, 914, 917, 919, 922, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966], "deriv": [24, 25, 26, 27, 28, 123, 124, 130, 132, 195, 205, 208, 219, 222, 243, 246, 261, 265, 661, 663, 666, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 864, 866, 876, 1001, 1005, 1009, 1011], "tupl": [24, 25, 26, 27, 28, 45, 46, 57, 58, 69, 70, 113, 122, 123, 124, 126, 130, 131, 132, 145, 195, 199, 202, 204, 218, 235, 238, 240, 241, 258, 260, 266, 274, 288, 303, 322, 587, 614, 650, 699, 702, 705, 706, 709, 712, 744, 746, 753, 755, 763, 764, 765, 769, 771, 778, 780, 800, 806, 809, 810, 813, 818, 821, 822, 825, 830, 833, 834, 837, 840, 843, 844, 847, 856, 859, 860, 861, 862, 863, 864, 866, 867, 869, 871, 872, 873, 875, 876, 878, 879, 880, 881, 887, 892, 893, 895, 899, 902, 904, 905, 906, 908, 910, 911, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966], "kei": [24, 25, 26, 69, 70, 71, 72, 73, 122, 131, 303, 315, 587, 593, 603, 699, 710, 711, 860, 861, 862, 864, 867, 873, 877, 978, 979, 989, 1000, 1005, 1009], "word": [24, 25, 26, 195, 196, 197, 887, 893, 895, 978, 979], "args_to_n": [24, 125, 130], "to_ivi": [24, 69, 70, 130, 864, 877], "input": [24, 27, 28, 39, 40, 69, 70, 71, 72, 73, 80, 81, 82, 83, 84, 85, 90, 91, 94, 95, 98, 99, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 146, 154, 156, 157, 160, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 188, 191, 192, 193, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 235, 238, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 272, 273, 274, 275, 278, 280, 281, 282, 283, 284, 285, 291, 292, 293, 294, 298, 303, 312, 313, 322, 323, 324, 325, 327, 328, 331, 335, 341, 347, 348, 353, 354, 357, 358, 359, 362, 363, 366, 367, 370, 371, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 578, 581, 582, 583, 586, 587, 588, 591, 592, 593, 595, 596, 597, 599, 600, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 624, 626, 627, 629, 630, 631, 633, 634, 635, 636, 640, 643, 644, 649, 650, 653, 655, 656, 657, 659, 660, 661, 663, 664, 665, 666, 667, 672, 677, 679, 694, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 717, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 739, 740, 742, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783, 784, 785, 788, 790, 793, 795, 798, 800, 801, 804, 805, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 837, 838, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 861, 862, 863, 882, 883, 886, 887, 888, 889, 890, 891, 892, 893, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 910, 911, 912, 913, 914, 917, 919, 922, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1004], "leaf": [24, 27, 28, 69, 70, 118, 122, 131, 864, 865, 874, 875], "union": [24, 27, 28, 37, 38, 45, 46, 69, 70, 113, 115, 118, 121, 122, 123, 124, 125, 126, 128, 133, 156, 157, 160, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 191, 192, 193, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 218, 219, 222, 224, 225, 227, 228, 230, 233, 235, 238, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 270, 271, 272, 273, 274, 280, 281, 282, 283, 284, 285, 286, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 302, 303, 319, 320, 321, 322, 323, 325, 328, 329, 330, 331, 336, 342, 344, 346, 347, 348, 349, 352, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586, 587, 588, 591, 595, 596, 599, 600, 602, 605, 606, 609, 610, 611, 613, 614, 615, 616, 617, 619, 624, 626, 627, 629, 630, 631, 640, 643, 644, 649, 650, 655, 656, 657, 659, 660, 661, 663, 666, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 694, 696, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 739, 740, 742, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 760, 762, 763, 764, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783, 784, 785, 788, 790, 793, 795, 798, 800, 801, 804, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 837, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 861, 862, 863, 864, 865, 866, 875, 876, 882, 883, 886, 887, 888, 889, 890, 892, 893, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 910, 911, 912, 913, 914, 917, 919, 922, 924, 925, 928, 929, 932, 933, 936, 937, 940, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966], "nativearrai": [24, 27, 28, 29, 30, 37, 38, 113, 115, 118, 121, 122, 125, 126, 128, 130, 133, 146, 154, 156, 157, 160, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 191, 195, 196, 197, 199, 202, 205, 208, 219, 222, 224, 225, 227, 228, 230, 233, 235, 236, 238, 243, 246, 248, 252, 253, 257, 261, 265, 266, 272, 273, 274, 275, 278, 284, 286, 289, 291, 292, 294, 298, 303, 322, 323, 325, 341, 347, 348, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586, 587, 588, 589, 591, 595, 596, 599, 600, 602, 604, 605, 606, 609, 610, 611, 613, 614, 615, 616, 617, 619, 624, 626, 627, 629, 630, 631, 640, 643, 644, 649, 650, 655, 656, 657, 659, 660, 661, 663, 666, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 694, 696, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 739, 740, 742, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783, 784, 785, 788, 790, 793, 795, 798, 800, 801, 804, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 837, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 864, 866, 876, 882, 883, 886, 887, 888, 898, 899, 900, 901, 902, 903, 904, 905, 906, 910, 911, 912, 913, 914, 917, 919, 922, 924, 925, 928, 929, 932, 933, 936, 937, 940, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966], "travers": [24, 27, 28, 69, 70, 122, 128, 130, 864, 876], "lowest": [24, 27, 28, 69, 70, 118, 145, 864, 876, 887, 889, 890], "leav": [24, 27, 28, 69, 70, 71, 72, 114, 115, 117, 118, 122, 123, 125, 126, 131, 132, 800, 844, 847, 864, 865, 866, 874, 875, 876], "to_n": [24, 69, 70], "item": [24, 28, 65, 66, 69, 70, 123, 128, 130, 131, 133, 266, 281, 303, 312, 313, 315, 322, 324, 326, 328, 330, 334, 587, 603, 625, 651, 652, 864, 869, 870, 871, 872, 876, 880, 881, 968, 1001, 1002], "arraywithcr": 29, "asarrai": [29, 30, 74, 75, 125, 195, 699, 700, 904, 906, 910], "dtype": [29, 30, 31, 32, 61, 62, 69, 70, 74, 75, 76, 77, 106, 107, 113, 115, 118, 123, 124, 130, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 218, 219, 220, 221, 222, 223, 224, 225, 226, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 302, 303, 343, 353, 408, 411, 587, 595, 596, 640, 656, 699, 707, 800, 814, 817, 882, 883, 886, 887, 893, 895, 899, 900, 901, 913, 919, 922, 924, 941, 942, 943, 944, 945, 948, 949, 950, 951, 952, 957, 958, 961, 968, 980, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1011, 1012], "empty_lik": [29, 30, 74, 75, 195], "from_dlpack": [29, 30, 74, 75, 195], "full_lik": [29, 30, 74, 75, 195], "fill_valu": [29, 30, 74, 75, 123, 195, 218, 219, 220, 221, 222, 223, 353, 461, 464, 481, 484], "meshgrid": [29, 30, 74, 75, 195], "xy": [29, 30, 74, 75, 195, 230, 231, 232, 233, 234], "ones_lik": [29, 30, 74, 75, 133, 195, 968], "tril": [29, 30, 74, 75, 195], "k": [29, 30, 74, 75, 112, 128, 195, 210, 211, 212, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 587, 595, 699, 711, 712, 736, 739, 756, 758, 760, 762, 763, 765, 766, 768, 772, 774, 887, 892, 893, 895, 899, 902], "triu": [29, 30, 74, 75, 195], "zeros_lik": [29, 30, 74, 75, 195, 800, 801, 804, 968], "creation": [30, 69, 70, 71, 72, 73, 75, 113, 123, 124, 128, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 235, 238, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265], "data_typ": [31, 32, 76, 77, 113, 123, 266, 270, 271, 272, 273, 274, 275, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302], "arraywithdatatyp": 31, "can_cast": [31, 32, 76, 77, 118, 123, 266, 279], "float32": [31, 32, 76, 77, 115, 123, 266, 270, 271, 275, 276, 277, 278, 279, 287, 882, 883, 886], "float64": [31, 32, 123, 266, 272, 275, 276, 278, 287], "arraywithdevic": [33, 130], "ab": [35, 36, 80, 81, 117, 120, 353, 358, 540, 543, 712, 778, 780, 968], "aco": [35, 36, 80, 81, 353, 968], "acosh": [35, 36, 80, 81, 266, 287, 288, 353, 968], "x2": [35, 36, 37, 38, 45, 46, 69, 70, 80, 81, 82, 83, 90, 91, 115, 126, 266, 298, 303, 341, 353, 367, 368, 369, 370, 371, 384, 385, 386, 387, 392, 393, 394, 395, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 428, 429, 430, 431, 432, 433, 434, 435, 436, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 477, 478, 479, 480, 481, 482, 483, 484, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 572, 573, 574, 575, 576, 587, 588, 589, 590, 591, 592, 699, 704, 712, 718, 719, 720, 736, 737, 738, 739, 750, 751, 752, 760, 761, 762, 769, 770, 771, 775, 776, 777, 899, 903], "z": [35, 36, 37, 38, 71, 72, 80, 81, 82, 83, 115, 119, 122, 128, 130, 303, 337, 353, 367, 368, 369, 370, 371, 392, 395, 412, 415, 461, 464, 481, 484, 521, 522, 587, 595, 596, 615, 616, 617, 618, 620, 649, 712, 718, 720, 784, 785, 788, 790, 793, 800, 801, 804, 899, 900, 924, 925, 928, 929, 932], "asin": [35, 36, 80, 81, 353, 968], "asinh": [35, 36, 80, 81, 353, 968], "atan": [35, 36, 80, 81, 353, 968], "atan2": [35, 36, 80, 81, 353, 968], "atanh": [35, 36, 80, 81, 353, 968], "bitwise_and": [35, 36, 80, 81, 353], "bitwise_invert": [35, 36, 80, 81, 353], "bitwise_left_shift": [35, 36, 80, 81, 353], "bitwise_or": [35, 36, 80, 81, 353], "bitwise_right_shift": [35, 36, 80, 81, 353], "bitwise_xor": [35, 36, 80, 81, 353], "ceil": [35, 36, 80, 81, 195, 196, 197, 353, 968], "cosh": [35, 36, 80, 81, 353, 968], "divid": [35, 36, 69, 70, 80, 81, 115, 121, 353, 453, 456, 587, 651, 800, 839], "equal": [35, 36, 69, 70, 80, 81, 115, 122, 123, 195, 210, 211, 218, 219, 222, 266, 272, 353, 400, 403, 408, 411, 465, 468, 469, 472, 540, 543, 548, 551, 587, 588, 591, 595, 596, 712, 724, 726, 744, 746, 753, 755, 800, 801, 804, 810, 813, 839, 856, 859, 887, 893, 895, 904, 905, 906, 910, 912, 913, 914, 917, 919, 922, 924, 933, 936, 945, 948, 949, 952, 953, 956], "erf": [35, 36, 80, 81, 353], "exp": [35, 36, 80, 81, 353, 445, 448, 501, 504, 968], "expm1": [35, 36, 80, 81, 353], "floor": [35, 36, 80, 81, 353, 408, 411, 587, 613, 968], "floor_divid": [35, 36, 80, 81, 353], "greater": [35, 36, 69, 70, 80, 81, 353, 359, 362, 372, 375, 384, 387, 400, 403, 408, 411, 449, 452, 453, 456, 540, 543, 544, 547, 552, 555, 583, 586, 712, 718, 720, 800, 840, 843, 887, 893, 895], "greater_equ": [35, 36, 80, 81, 353], "isfinit": [35, 36, 80, 81, 353], "isinf": [35, 36, 80, 81, 353], "isnan": [35, 36, 80, 81, 353], "less_equ": [35, 36, 80, 81, 353], "log10": [35, 36, 80, 81, 353], "log1p": [35, 36, 80, 81, 353], "log2": [35, 36, 80, 81, 353], "logaddexp": [35, 36, 80, 81, 353], "logical_and": [35, 36, 80, 81, 353, 968], "logical_not": [35, 36, 80, 81, 353, 968], "logical_or": [35, 36, 80, 81, 353, 968], "logical_xor": [35, 36, 80, 81, 353], "multipli": [35, 36, 80, 81, 115, 119, 121, 353, 587, 605], "neg": [35, 36, 80, 81, 118, 122, 125, 156, 162, 165, 195, 196, 197, 210, 211, 353, 465, 468, 469, 472, 523, 526, 540, 543, 544, 547, 712, 763, 765, 775, 777, 778, 780, 800, 818, 821, 834, 837, 957, 958, 961, 963, 966], "not_equ": [35, 36, 80, 81, 353], "pow": [35, 36, 80, 81, 353], "remaind": [35, 36, 69, 70, 80, 81, 353, 587, 613, 800, 839], "sin": [35, 36, 80, 81, 121, 128, 353, 587, 614, 968], "sinh": [35, 36, 80, 81, 353, 968], "sqrt": [35, 36, 80, 81, 353, 712, 778, 780], "squar": [35, 36, 80, 81, 353, 564, 567, 699, 702, 712, 713, 716, 721, 723, 727, 729, 730, 732, 733, 735, 743, 759, 760, 762, 763, 765], "subtract": [35, 36, 80, 81, 115, 121, 353], "tan": [35, 36, 80, 81, 114, 118, 122, 125, 126, 128, 353, 372, 375, 578, 712, 724, 726, 904, 905, 913, 914, 917, 968], "56": [35, 36, 80, 81, 115, 353, 564, 567, 577, 578, 579, 580, 581, 661, 663, 666, 712, 750, 752, 924, 925, 928], "19": [35, 36, 80, 81, 115, 353, 412, 415, 577, 578, 579, 580, 581, 712, 724, 726], "762": [35, 36, 80, 81, 156, 187, 189, 190, 191, 353, 582], "964": [35, 36, 80, 81, 156, 187, 189, 190, 191, 353, 582], "trunc": [35, 36, 80, 81, 353], "elementwis": [36, 69, 70, 81, 113, 118, 128, 133, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586], "arraywithgener": [37, 130], "all_equ": [37, 38, 82, 83, 587, 592], "equality_matrix": [37, 38, 82, 83, 587, 588, 589, 590, 591, 592], "x1": [37, 38, 80, 81, 82, 83, 115, 126, 266, 298, 303, 341, 353, 367, 370, 371, 384, 387, 392, 395, 400, 403, 404, 407, 408, 411, 412, 415, 428, 431, 432, 433, 436, 453, 456, 457, 460, 461, 464, 477, 480, 481, 484, 501, 504, 505, 508, 513, 516, 517, 520, 521, 522, 523, 526, 527, 532, 535, 540, 543, 544, 547, 572, 573, 576, 587, 588, 589, 590, 591, 592, 595, 699, 704, 712, 718, 720, 736, 739, 750, 752, 760, 762, 769, 771, 775, 777, 899, 903], "mix": [37, 38, 71, 72, 112, 115, 117, 128, 266, 294, 303, 341, 353, 367, 370, 392, 395, 412, 415, 461, 464, 481, 484, 521, 522, 532, 535, 587, 588, 589, 604, 612, 615, 616, 619, 655, 656, 657, 699, 702, 705, 706, 711, 712, 713, 716, 769, 771, 784, 785, 788, 795, 798, 800, 801, 804, 882, 883, 886, 899, 903, 924, 925, 928, 933, 936], "gather_nd": [37, 38, 69, 70, 82, 83, 587, 620, 968], "arraywithgradi": [39, 130], "adam_step": [39, 40, 84, 85, 661, 667], "mw": [39, 40, 84, 85, 132, 661, 663, 664, 665, 666, 667, 668, 670], "vw": [39, 40, 84, 85, 132, 661, 663, 664, 665, 666, 667, 668, 670], "beta1": [39, 40, 84, 85, 132, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 682, 683, 684, 1005, 1006, 1007], "beta2": [39, 40, 84, 85, 132, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 682, 683, 684, 1005, 1006, 1007], "999": [39, 40, 80, 81, 84, 85, 132, 187, 188, 190, 353, 582, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 682, 683, 684, 1005, 1006, 1007], "epsilon": [39, 40, 47, 48, 51, 52, 84, 85, 92, 93, 96, 97, 118, 122, 125, 132, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 682, 683, 684, 712, 744, 746, 753, 755, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 882, 883, 884, 885, 886, 1003, 1004, 1005, 1006, 1007], "1e": [39, 40, 47, 48, 51, 52, 84, 85, 92, 93, 96, 97, 118, 122, 125, 132, 133, 587, 623, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 682, 683, 684, 712, 763, 765, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 882, 883, 884, 885, 886, 968, 1005, 1006, 1007, 1008, 1010], "07": [39, 40, 47, 48, 84, 85, 92, 93, 132, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 681, 682, 683, 684, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 1005, 1006, 1007], "dcdw": [39, 40, 84, 85, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 681, 682, 683, 684, 685, 686, 687, 688], "adam_step_delta": [39, 40, 84, 85, 661, 663, 664, 665, 666, 667], "639": [39, 40, 661, 663, 664, 666], "11": [39, 40, 71, 72, 80, 81, 98, 99, 115, 122, 353, 367, 369, 370, 371, 392, 395, 548, 551, 587, 605, 615, 663, 664, 712, 724, 726, 750, 752, 784, 795, 798, 800, 818, 821, 826, 829, 887, 889, 890, 891, 899, 903, 904, 905, 924, 925, 928], "32": [39, 40, 131, 156, 162, 165, 353, 412, 415, 663, 664, 699, 702, 705, 712, 750, 752, 899, 903, 924, 925, 928], "63": [39, 40, 90, 91, 353, 564, 567, 663, 664, 712, 713, 715, 716, 717, 750, 752, 924, 925, 928], "00121": [39, 40, 663, 664], "0102": [39, 40, 663, 664], "0397": [39, 40, 663, 664], "gradient": [40, 69, 70, 85, 113, 122, 131, 132, 144, 145, 303, 347, 663, 666, 668, 670, 672, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 694, 695, 696, 697, 698, 860, 861, 862, 863, 968, 1005, 1006, 1007, 1008, 1009, 1010], "arraywithimag": [41, 130], "arraywithlay": 43, "linear_algebra": [45, 46, 90, 91, 113, 130, 712, 713, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 739, 740, 742, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783], "arraywithlinearalgebra": 45, "choleski": [45, 46, 90, 91, 712, 717], "upper": [45, 46, 69, 70, 90, 91, 195, 210, 211, 253, 257, 712, 713, 714, 715, 716, 717, 756, 758, 887, 893, 895], "625": [45, 46, 712, 713, 714, 716], "25": [45, 46, 122, 353, 564, 567, 568, 571, 712, 713, 714, 716, 724, 726, 733, 735, 784, 790, 793, 882, 883, 886, 924, 925, 928], "cross": [45, 46, 71, 72, 712, 784, 785, 788, 790, 793, 795, 798, 968], "det": [45, 46, 71, 72, 712], "diagon": [45, 46, 71, 72, 195, 210, 211, 248, 252, 253, 257, 712, 772, 774], "offset": [45, 46, 51, 52, 96, 97, 712, 724, 725, 726, 772, 773, 774, 882, 883, 884, 885, 886], "axis1": [45, 46, 49, 50, 94, 95, 712, 724, 725, 726, 800, 848, 849, 850, 851], "axis2": [45, 46, 712, 724, 725, 726], "eigh": [45, 46, 71, 72, 712], "namedtupl": [45, 46, 712, 727, 728, 729, 756, 757, 758, 763, 765, 904, 905, 906, 910], "eigvalsh": [45, 46, 71, 72, 712], "inv": [45, 46, 71, 72, 130, 712, 968], "matmul": [45, 46, 90, 91, 113, 119, 128, 712, 763, 765, 968], "matrix_norm": [45, 46, 69, 70, 712], "ord": [45, 46, 69, 70, 712, 740, 741, 742, 778, 779, 780], "fro": [45, 46, 712, 740, 741, 742], "keepdim": [45, 46, 61, 62, 63, 64, 69, 70, 106, 107, 108, 109, 587, 659, 712, 740, 741, 742, 778, 779, 780, 899, 900, 901, 924, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967], "matrix_rank": [45, 46, 71, 72, 712], "rtol": [45, 46, 712, 744, 745, 746, 753, 754, 755], "matrix_transpos": [45, 46, 71, 72, 130, 712], "outer": [45, 46, 71, 72, 712, 860, 861, 862, 863], "pinv": [45, 46, 71, 72, 712, 968], "qr": [45, 46, 71, 72, 712], "reduc": [45, 46, 69, 70, 130, 303, 347, 587, 610, 712, 756, 757, 758, 899, 900, 901, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966], "solv": [45, 46, 71, 72, 129, 144, 712], "svd": [45, 46, 71, 72, 712, 968], "full_matric": [45, 46, 712, 763, 764, 765], "svdval": [45, 46, 71, 72, 712], "tensordot": [45, 46, 71, 72, 712], "ax": [45, 46, 49, 50, 69, 70, 94, 95, 113, 115, 123, 130, 303, 347, 587, 605, 712, 740, 742, 760, 762, 769, 770, 771, 778, 780, 800, 810, 813, 818, 821, 822, 823, 824, 825, 834, 837, 840, 843, 848, 851, 856, 859, 899, 900, 901, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966], "trace": [45, 46, 69, 70, 71, 72, 128, 145, 587, 633, 634, 636, 712], "vecdot": [45, 46, 71, 72, 712], "vector_norm": [45, 46, 69, 70, 712], "vector_to_skew_symmetric_matrix": [45, 46, 71, 72, 712, 968], "arraywithloss": 47, "binary_cross_entropi": [47, 48, 92, 93, 784], "pred": [47, 48, 92, 93, 118, 122, 125, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799], "cross_entropi": [47, 48, 92, 93, 118, 122, 125, 784, 795, 798], "sparse_cross_entropi": [47, 48, 92, 93, 784], "loss": [48, 93, 113, 118, 131, 132, 133, 785, 788, 790, 793, 795, 798, 968], "arraywithmanipul": 49, "clip": [49, 50, 69, 70, 94, 95, 118, 122, 125, 128, 131, 133, 353, 521, 522, 587, 599, 600, 602, 800, 805, 968], "x_min": [49, 50, 69, 70, 94, 95, 128, 133, 800, 801, 802, 803, 804, 805], "x_max": [49, 50, 69, 70, 94, 95, 128, 133, 800, 801, 802, 803, 804, 805], "roll": [49, 50, 94, 95, 122, 126, 800, 801, 802, 838], "concat": [49, 50, 69, 70, 94, 95, 303, 332, 333, 334, 335, 347, 587, 614, 800, 968], "xs": [49, 50, 94, 95, 122, 303, 326, 330, 332, 333, 334, 587, 588, 591, 596, 661, 672, 800, 806, 807, 808, 809], "constant_pad": [49, 50, 94, 95, 800], "pad_width": [49, 50, 94, 95, 800, 810, 811, 812, 813, 856, 857, 858, 859], "expand_dim": [49, 50, 94, 95, 128, 131, 800, 968], "flip": [49, 50, 94, 95, 130, 131, 133, 353, 396, 399, 800, 826, 829, 968], "permute_dim": [49, 50, 94, 95, 800], "reshap": [49, 50, 69, 70, 94, 95, 125, 128, 130, 133, 800, 968], "shift": [49, 50, 94, 95, 115, 126, 353, 400, 403, 408, 411, 800, 834, 835, 836, 837, 838], "squeez": [49, 50, 94, 95, 800, 968], "stack": [49, 50, 69, 70, 94, 95, 128, 195, 248, 252, 253, 257, 712, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 739, 743, 744, 746, 747, 749, 753, 755, 756, 758, 763, 765, 766, 768, 772, 774, 800, 864, 865, 874, 875, 968, 989, 998], "swapax": [49, 50, 94, 95, 800], "axis0": [49, 50, 94, 95, 800, 848, 849, 850, 851], "tile": [49, 50, 94, 95, 800, 968], "rep": [49, 50, 94, 95, 800, 852, 853, 854, 855], "zero_pad": [49, 50, 94, 95, 800, 968], "arraywithnorm": 51, "layer_norm": [51, 52, 96, 97, 882], "normalized_idx": [51, 52, 96, 97, 882, 883, 884, 885, 886], "05": [51, 52, 96, 97, 303, 661, 663, 666, 882, 883, 884, 885, 886], "scale": [51, 52, 96, 97, 122, 303, 345, 346, 661, 685, 687, 699, 707, 710, 711, 882, 883, 884, 885, 886, 989, 997, 1000, 1005, 1008], "new_std": [51, 52, 96, 97, 882, 883, 884, 885, 886, 1003, 1004], "norm": [52, 69, 70, 97, 113, 587, 599, 600, 602, 712, 740, 742, 778, 780, 883, 886, 968, 1004, 1005, 1007], "arraywithrandom": [53, 130], "random": [54, 69, 70, 99, 113, 124, 133, 144, 888, 889, 890, 892, 893, 895, 897, 898, 968], "arraywithsearch": 55, "arraywithset": 57, "unique_count": [57, 58, 102, 103, 904, 907], "uc": [57, 58, 906, 908], "count": [57, 58, 115, 131, 303, 341, 712, 775, 777, 800, 818, 821, 904, 905, 906, 908, 910, 957, 958, 961, 963, 966], "arraywithsort": 59, "argsort": [59, 60, 104, 105, 913], "descend": [59, 60, 104, 105, 712, 763, 765, 766, 768, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923], "sort": [60, 69, 70, 71, 72, 73, 105, 113, 712, 727, 729, 763, 765, 766, 768, 914, 917], "arraywithstatist": 61, "einsum": [61, 62, 106, 107, 924], "equat": [61, 62, 106, 107, 712, 760, 762, 924, 925, 926, 927, 928], "max": [61, 62, 69, 70, 106, 107, 266, 286, 289, 353, 521, 587, 599, 600, 602, 610, 643, 644, 712, 744, 746, 753, 755, 924, 1005, 1007], "min": [61, 62, 69, 70, 106, 107, 266, 286, 289, 353, 522, 587, 610, 643, 644, 651, 712, 756, 758, 763, 765, 766, 768, 778, 780, 924], "prod": [61, 62, 69, 70, 106, 107, 115, 123, 587, 610, 924], "std": [61, 62, 106, 107, 115, 887, 892, 904, 905, 924], "sum": [61, 62, 69, 70, 106, 107, 118, 122, 123, 125, 128, 303, 332, 333, 334, 335, 347, 353, 367, 370, 501, 504, 587, 606, 610, 643, 644, 699, 711, 712, 763, 765, 772, 774, 778, 780, 924, 925, 928, 945, 948], "var": [61, 62, 106, 107, 110, 111, 115, 128, 860, 861, 862, 924], "statist": [62, 107, 110, 111, 113, 123, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956], "arraywithutil": 63, "util": [64, 109, 113, 124, 303, 336, 958, 961, 963, 966], "add_ivy_array_instance_method": 65, "cl": [65, 66, 110, 111], "to_ignor": [65, 66, 110, 111, 864, 875], "loop": [65, 66, 110, 111, 119, 145, 860, 861, 862, 863], "_wrap_funct": [65, 66, 110, 111, 118, 120], "toi": [65, 66, 110, 111], "arrayexampl": [65, 66], "hasattr": [65, 66, 110, 111, 130], "containerwithactiv": [67, 71, 72], "dict_in": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "queue": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 131, 303, 312, 313, 587, 642, 647], "queue_load_s": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "container_combine_method": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "list_join": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "queue_timeout": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 587], "print_limit": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "key_length_limit": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "print_ind": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "print_line_spac": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "ivyh": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "default_key_color": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "keyword_color_dict": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "rebuild_child_contain": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "types_to_iteratively_nest": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "alphabetical_kei": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "containerbas": [67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 122], "key_chain": [67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 157, 159, 161, 162, 164, 166, 167, 169, 171, 172, 174, 176, 177, 179, 181, 182, 184, 186, 187, 188, 190, 196, 198, 199, 201, 203, 205, 207, 209, 210, 212, 213, 215, 217, 219, 221, 223, 224, 226, 227, 229, 230, 232, 234, 235, 237, 239, 240, 242, 243, 245, 247, 248, 249, 251, 253, 254, 256, 258, 259, 261, 262, 264, 275, 277, 279, 354, 356, 358, 359, 361, 363, 365, 367, 369, 371, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 523, 525, 527, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 583, 585, 588, 590, 592, 600, 601, 616, 618, 620, 668, 669, 671, 673, 674, 676, 677, 678, 680, 681, 682, 684, 685, 686, 688, 689, 690, 692, 713, 715, 717, 736, 738, 785, 787, 789, 790, 792, 794, 795, 797, 799, 801, 803, 805, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 864, 877, 883, 885, 889, 891, 893, 894, 896, 906, 907, 909, 914, 916, 918, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 958, 960, 962, 963, 965, 967], "to_appli": [67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 157, 159, 161, 162, 164, 166, 167, 169, 171, 172, 174, 176, 177, 179, 181, 182, 184, 186, 187, 188, 190, 196, 198, 199, 201, 203, 205, 207, 209, 210, 212, 213, 215, 217, 219, 221, 223, 224, 226, 227, 229, 230, 232, 234, 235, 237, 239, 240, 242, 243, 245, 247, 248, 249, 251, 253, 254, 256, 258, 259, 261, 262, 264, 275, 277, 279, 354, 356, 358, 359, 361, 363, 365, 367, 369, 371, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 523, 525, 527, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 583, 585, 588, 590, 592, 600, 601, 616, 618, 620, 668, 669, 671, 673, 674, 676, 677, 678, 680, 681, 682, 684, 685, 686, 688, 689, 690, 692, 713, 715, 717, 736, 738, 785, 787, 789, 790, 792, 794, 795, 797, 799, 801, 803, 805, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 864, 877, 883, 885, 893, 894, 896, 906, 907, 909, 914, 916, 918, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 958, 960, 962, 963, 965, 967], "prune_unappli": [67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 157, 159, 161, 162, 164, 166, 167, 169, 171, 172, 174, 176, 177, 179, 181, 182, 184, 186, 187, 188, 190, 196, 198, 199, 201, 203, 205, 207, 209, 210, 212, 213, 215, 217, 219, 221, 223, 224, 226, 227, 229, 230, 232, 234, 235, 237, 239, 240, 242, 243, 245, 247, 248, 249, 251, 253, 254, 256, 258, 259, 261, 262, 264, 275, 277, 279, 354, 356, 358, 359, 361, 363, 365, 367, 369, 371, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 523, 525, 527, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 583, 585, 588, 590, 592, 600, 601, 616, 618, 620, 668, 669, 671, 673, 674, 676, 677, 678, 680, 681, 682, 684, 685, 686, 688, 689, 690, 692, 713, 715, 717, 736, 738, 785, 787, 789, 790, 792, 794, 795, 797, 799, 801, 803, 805, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 864, 877, 883, 885, 893, 894, 896, 906, 907, 909, 914, 916, 918, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 958, 960, 962, 963, 965, 967], "map_sequ": [67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 157, 159, 161, 162, 164, 166, 167, 169, 171, 172, 174, 176, 177, 179, 181, 182, 184, 186, 187, 188, 190, 196, 198, 199, 201, 203, 205, 207, 209, 210, 212, 213, 215, 217, 219, 221, 223, 224, 226, 227, 229, 230, 232, 234, 235, 237, 239, 240, 242, 243, 245, 247, 248, 249, 251, 253, 254, 256, 258, 259, 261, 262, 264, 275, 277, 279, 354, 356, 358, 359, 361, 363, 365, 367, 369, 371, 372, 374, 376, 378, 380, 382, 388, 390, 396, 398, 416, 418, 420, 422, 424, 426, 428, 430, 432, 437, 439, 441, 443, 445, 447, 449, 451, 465, 467, 469, 471, 473, 475, 485, 487, 489, 491, 493, 495, 497, 499, 509, 511, 523, 525, 527, 528, 530, 536, 538, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 583, 585, 588, 590, 592, 600, 601, 616, 618, 620, 668, 669, 671, 673, 674, 676, 677, 678, 680, 681, 682, 684, 685, 686, 688, 689, 690, 692, 713, 715, 717, 785, 787, 789, 790, 792, 794, 795, 797, 799, 801, 803, 805, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 848, 850, 852, 854, 856, 858, 883, 885, 893, 894, 896, 906, 907, 909, 914, 916, 918, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 958, 960, 962, 963, 965, 967], "static_gelu": [67, 68, 157], "static_leaky_relu": [67, 68, 162], "static_relu": [67, 68, 167], "static_sigmoid": [67, 68, 172], "static_softmax": [67, 68, 177], "static_softplu": [67, 68, 182], "static_tanh": [67, 68, 80, 81, 187], "__getitem__": [69, 70, 122], "queri": [69, 70, 122, 123, 130, 303, 336, 346, 699, 710, 711, 989, 1000], "slice": [69, 70, 587, 615, 616, 619, 864, 873], "chain": [69, 70, 121, 122, 132, 133, 145, 860, 861, 862, 864, 877, 1011, 1012], "element": [69, 70, 114, 128, 133, 156, 157, 160, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 191, 195, 196, 197, 218, 219, 222, 248, 252, 253, 257, 303, 326, 330, 334, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586, 587, 595, 596, 599, 600, 602, 605, 606, 613, 627, 656, 657, 699, 707, 712, 718, 720, 727, 729, 736, 739, 756, 758, 763, 765, 800, 801, 804, 818, 821, 826, 829, 834, 837, 839, 840, 843, 887, 888, 899, 902, 903, 904, 905, 906, 910, 911, 912, 913, 919, 922, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 989, 997], "represent": [69, 70, 71, 72, 73, 144, 194, 266, 270, 271, 286, 289, 303, 319, 320, 353, 354, 357, 367, 370, 392, 395, 404, 407, 412, 415, 517, 520, 523, 526, 587, 593, 650, 655], "dictionari": [69, 70, 71, 72, 73, 131, 145, 303, 346], "sequenc": [69, 70, 71, 72, 73, 115, 123, 144, 192, 193, 303, 312, 313, 587, 596, 637, 800, 839, 844, 847, 887, 889, 890, 924, 929, 932, 957, 958, 961, 963, 966, 989, 998, 1003, 1004, 1011, 1012], "multiprocess": [69, 70, 71, 72, 73, 131, 145, 303, 312, 587], "asynchron": [69, 70, 71, 72, 73], "size": [69, 70, 71, 72, 73, 130, 131, 195, 224, 225, 227, 228, 303, 345, 346, 347, 587, 643, 649, 699, 711, 712, 724, 726, 740, 742, 750, 752, 756, 758, 763, 765, 775, 777, 800, 814, 817, 834, 837, 839, 840, 843, 887, 888, 892, 893, 895, 899, 900, 902, 957, 958, 961, 963, 966, 989, 990, 991], "dimens": [69, 70, 71, 72, 73, 115, 128, 131, 156, 177, 180, 195, 248, 252, 253, 257, 303, 334, 587, 609, 610, 611, 614, 624, 640, 659, 699, 700, 701, 702, 703, 704, 705, 706, 709, 712, 713, 716, 718, 720, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 739, 740, 742, 744, 746, 747, 749, 753, 755, 756, 758, 760, 762, 763, 765, 766, 768, 772, 774, 775, 777, 778, 780, 784, 790, 793, 795, 798, 800, 806, 809, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 837, 839, 840, 843, 844, 847, 860, 861, 862, 863, 887, 898, 899, 900, 901, 902, 904, 905, 906, 910, 912, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 989, 990, 991, 992, 993, 994, 995, 996, 999, 1000], "arriv": [69, 70, 71, 72, 73], "timeout": [69, 70, 71, 72, 73, 303, 312, 313, 587, 642, 647], "maximum": [69, 70, 71, 72, 73, 115, 128, 131, 133, 303, 327, 331, 335, 347, 353, 587, 599, 600, 602, 614, 661, 681, 683, 800, 801, 804, 864, 876, 899, 900, 924, 929, 932, 937, 940, 968], "length": [69, 70, 71, 72, 73, 131, 195, 196, 197, 230, 233, 712, 763, 765, 766, 768, 800, 830, 833], "whitespac": [69, 70, 71, 72, 73], "indent": [69, 70, 71, 72, 73, 131], "extra": [69, 70, 71, 72, 73, 115, 120, 121, 128, 661, 672], "newlin": [69, 70, 71, 72, 73, 114], "handl": [69, 70, 71, 72, 73, 112, 117, 118, 120, 122, 123, 124, 125, 126, 132, 145, 192, 193, 303, 319, 320, 321, 322, 323, 337, 341, 342, 349, 352, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 1005, 1006, 1007, 1008, 1009, 1010], "result": [69, 70, 71, 72, 73, 113, 114, 115, 117, 121, 122, 123, 125, 126, 131, 145, 156, 157, 160, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 191, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 272, 274, 294, 303, 312, 348, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586, 587, 599, 600, 602, 605, 606, 609, 610, 611, 613, 615, 616, 619, 627, 640, 643, 644, 661, 694, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 730, 732, 733, 735, 736, 739, 740, 742, 744, 746, 747, 749, 750, 752, 753, 755, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783, 784, 785, 788, 790, 793, 795, 798, 800, 801, 804, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 837, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 864, 877, 882, 883, 886, 887, 888, 889, 890, 892, 893, 895, 898, 899, 900, 901, 903, 904, 905, 912, 913, 914, 917, 919, 922, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966, 968], "color": [69, 70, 71, 72, 73, 1014, 1015], "map": [69, 70, 71, 72, 73, 117, 118, 122, 126, 131, 144, 145, 303, 312, 864, 871, 872, 876, 877, 989, 1000], "termcolor": [69, 70, 71, 72, 73], "rebuild": [69, 70, 71, 72, 73], "constructor": [69, 70, 71, 72, 73, 123, 124, 130, 587, 594, 1011, 1012], "param": [69, 70, 71, 72, 73, 82, 83, 128, 133, 587, 593, 615, 616, 619, 620], "alphabet": [69, 70, 71, 72, 73], "preserv": [69, 70, 71, 72, 73, 133, 145, 661, 694, 800, 818, 821], "__setitem__": [69, 70, 121, 122, 130], "val": [69, 70, 125, 130, 587, 629, 630, 631, 645, 646], "after": [69, 70, 115, 122, 123, 127, 266, 298, 353, 564, 567, 661, 668, 670, 672, 673, 675, 681, 683, 685, 687, 689, 691, 882, 883, 886, 1005, 1006, 1007, 1008, 1009, 1010], "all_fals": [69, 70], "assert_is_bool": [69, 70], "entri": [69, 70, 195, 224, 225, 227, 228, 800, 839, 864, 877], "boolean": [69, 70, 122, 195, 218, 266, 272, 290, 302, 303, 338, 350, 353, 392, 395, 396, 399, 404, 407, 412, 415, 505, 508, 509, 512, 513, 516, 517, 520, 587, 588, 591, 595, 596, 626, 627, 628, 632, 633, 634, 635, 636, 653, 660, 661, 677, 679, 860, 861, 862, 864, 874, 924, 937, 940], "evalu": [69, 70, 122, 353, 441, 444, 445, 448, 485, 488, 489, 492, 493, 496, 497, 500, 528, 531, 552, 555, 568, 571, 864, 865, 874, 875, 957, 958, 961, 963, 966], "assert": [69, 70, 130, 131, 587, 597], "prune": [69, 70, 864, 877, 878, 879], "all_key_chain": [69, 70], "include_empti": [69, 70], "all_tru": [69, 70, 122, 131], "arrays_as_list": [69, 70], "intermedi": [69, 70], "as_arrai": [69, 70, 587, 624, 649], "as_bool": [69, 70], "as_on": [69, 70], "ones": [69, 70, 71, 72, 117, 128, 130, 131, 195, 210, 211, 243, 246, 353, 416, 419, 587, 640, 968], "fill": [69, 70, 195, 204, 218, 219, 222, 240, 241, 243, 246, 258, 260, 261, 265, 887, 889, 890], "as_random_uniform": [69, 70], "low": [69, 70, 98, 99, 128, 887, 889, 890, 891, 893, 894, 895, 896], "uniform": [69, 70, 132, 887, 888, 889, 890, 893, 895, 980, 982, 983, 986, 987], "boundari": [69, 70, 887, 893, 895], "interv": [69, 70, 128, 133, 195, 196, 197, 224, 225, 227, 228, 712, 775, 777, 800, 801, 804, 844, 847, 887, 889, 890, 893, 895, 957, 958, 961, 963, 966], "as_vari": [69, 70], "as_zero": [69, 70], "assert_contains_sub_contain": [69, 70], "sub_cont": [69, 70], "except": [69, 70, 114, 121, 125, 130, 145, 266, 274, 587, 597, 608, 631, 658, 712, 753, 755, 800, 806, 809, 844, 847, 899, 902, 957, 958, 961, 963, 966], "diff": [69, 70, 122, 131], "screen": [69, 70, 131], "assert_contains_sub_structur": [69, 70], "check_shap": [69, 70], "assert_ident": [69, 70], "check_typ": [69, 70], "same_arrai": [69, 70, 131], "arrays_equ": [69, 70, 71, 72, 587], "datatyp": [69, 70, 195, 199, 202, 235, 238, 266, 280, 291, 292, 293], "assert_identical_structur": [69, 70], "at_key_chain": [69, 70], "ignore_key_error": [69, 70], "ignore_non": [69, 70], "at_kei": [69, 70], "ignor": [69, 70, 115, 145, 195, 230, 233, 864, 875, 1005, 1009], "substr": [69, 70], "clip_min": [69, 70], "clip_max": [69, 70], "minimum": [69, 70, 128, 133, 303, 353, 354, 357, 587, 622, 623, 645, 646, 651, 652, 800, 801, 804, 899, 901, 924, 929, 932, 937, 940, 968], "config": [69, 70, 131, 864, 877], "duplic": [69, 70, 114, 119, 120, 130, 132], "compar": [69, 70, 117, 131, 587, 588, 591, 595, 596, 904, 905, 906, 910, 912, 913, 914, 917, 919, 922], "container_rightmost": [69, 70], "common_key_chain": [69, 70, 122], "properti": [69, 70, 115, 117, 118, 122, 130, 131, 132, 303, 315, 1001, 1002, 1005, 1006, 1007, 1008, 1010], "contains_sub_contain": [69, 70], "match": [69, 70, 122, 266, 272, 353, 544, 547, 587, 637], "contains_sub_structur": [69, 70], "create_if_abs": [69, 70], "inplac": [69, 70, 84, 85, 112, 115, 120, 121, 126, 130, 132, 587, 597, 628, 631, 632, 653, 661, 668, 669, 670, 671, 673, 674, 675, 676, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 978, 979, 1005, 1006, 1007, 1008, 1009, 1010], "cutoff_at_depth": [69, 70], "depth_cutoff": [69, 70], "cutoff_at_height": [69, 70], "height_cutoff": [69, 70], "deep_copi": [69, 70, 131], "intern": [69, 70, 114, 121, 122, 124, 125, 303, 661, 697, 864, 865, 874, 875, 980, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1011, 1012], "belong": [69, 70, 132], "dev_clon": [69, 70, 303], "dev_dist": [69, 70, 303], "along": [69, 70, 113, 125, 195, 224, 225, 227, 228, 303, 328, 329, 330, 331, 332, 333, 334, 335, 347, 587, 605, 606, 615, 659, 712, 740, 742, 772, 774, 775, 777, 778, 780, 784, 790, 793, 795, 798, 800, 806, 809, 818, 821, 826, 829, 834, 837, 839, 844, 847, 852, 855, 860, 861, 862, 863, 887, 898, 899, 900, 901, 913, 914, 917, 919, 922, 924, 925, 928, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966], "dev_str": [69, 70], "diff_kei": [69, 70], "detect_key_diff": [69, 70], "detect_value_diff": [69, 70], "detect_shape_diff": [69, 70], "treat": [69, 70, 129, 133, 192, 193], "detect": [69, 70, 126, 131, 132, 864, 865, 875], "container0": [69, 70], "einops_rearrang": [69, 70, 587], "axes_length": [69, 70, 587, 609, 610, 611], "rearrang": [69, 70, 587, 609, 611], "einops_reduc": [69, 70, 587], "reduct": [69, 70, 123, 130, 587, 610, 643, 644, 957, 958, 961, 963, 966, 968], "One": [69, 70, 123, 128, 130, 131, 587, 610, 800, 830, 833, 887, 889, 890], "callabl": [69, 70, 122, 128, 146, 147, 148, 149, 150, 151, 152, 153, 154, 192, 193, 266, 287, 288, 303, 347, 587, 593, 598, 608, 610, 860, 861, 862, 863, 864, 870, 874, 875, 876], "einops_repeat": [69, 70, 587], "find_sub_contain": [69, 70], "sub_cont_to_find": [69, 70], "exsit": [69, 70], "find_sub_structur": [69, 70], "sub_struc_to_find": [69, 70], "flatten_key_chain": [69, 70, 131, 1001, 1002], "__": [69, 70, 115, 131], "above_height": [69, 70, 131], "below_depth": [69, 70, 131], "format_key_chain": [69, 70], "format_fn": [69, 70], "string": [69, 70, 119, 123, 124, 128, 131, 266, 270, 271, 284, 290, 302, 303, 319, 320, 321, 322, 336, 342, 348, 349, 352, 587, 607], "from_disk_as_hdf5": [69, 70, 131], "h5_obj_or_filepath": [69, 70], "slice_obj": [69, 70], "load": [69, 70, 145], "disk": [69, 70, 131], "h5py": [69, 70], "hdf5": [69, 70, 131, 1001, 1002], "h5": [69, 70], "from_disk_as_json": [69, 70, 131], "json_filepath": [69, 70], "json": [69, 70, 131], "dure": [69, 70, 118, 122, 123, 124, 125, 145, 192, 193, 303, 348, 587, 658, 661, 663, 666, 668, 670, 681, 683, 712, 736, 739, 860, 861, 862, 863, 924, 945, 948, 953, 956, 1001, 1002, 1005, 1006, 1007, 1009], "from_disk_as_pickl": [69, 70, 131], "pickle_filepath": [69, 70], "pickl": [69, 70, 122, 131], "from_flat_list": [69, 70], "flat_list": [69, 70], "hierarchi": [69, 70, 131], "flat": [69, 70, 587, 643, 800, 826, 829], "popul": [69, 70, 123, 124, 128, 887, 888, 924, 945, 948, 953, 956], "from_numpi": [69, 70, 131], "gather": [69, 70, 587, 616, 619], "h5_file_s": [69, 70], "batch": [69, 70, 118, 122, 131, 303, 345, 346, 587, 614, 699, 708, 712, 778, 780, 860, 861, 862, 863, 882, 883, 886, 1003, 1004], "handle_inplac": [69, 70], "prime": [69, 70], "overwritten": [69, 70, 119, 121], "has_kei": [69, 70], "query_kei": [69, 70], "somewher": [69, 70], "has_key_chain": [69, 70], "has_nan": [69, 70, 587], "include_inf": [69, 70, 587, 626, 660], "leafwis": [69, 70], "nan": [69, 70, 113, 114, 194, 266, 272, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 416, 419, 420, 423, 424, 427, 441, 444, 445, 448, 449, 452, 465, 468, 473, 476, 485, 488, 489, 492, 497, 500, 501, 504, 523, 526, 540, 543, 544, 547, 548, 551, 556, 559, 560, 563, 564, 567, 577, 581, 582, 583, 586, 587, 626, 660, 699, 711, 904, 905, 906, 910, 912, 924, 929, 932, 933, 936, 937, 940, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966], "well": [69, 70, 117, 125, 132, 133, 144, 587, 626, 712, 760, 762], "inf": [69, 70, 194, 587, 626, 660, 712, 778, 780], "wise": [69, 70, 128, 133, 156, 157, 160, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 191, 353, 354, 357, 359, 362, 367, 370, 372, 375, 380, 383, 384, 387, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 428, 431, 433, 436, 437, 440, 453, 456, 457, 460, 461, 464, 477, 480, 481, 484, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 532, 535, 540, 543, 544, 547, 572, 576, 587, 613, 800, 801, 804], "identical_array_shap": [69, 70], "exclus": [69, 70, 84, 85, 118, 122, 133, 195, 196, 197, 587, 605, 633, 634, 636, 661, 677, 678, 679, 680, 887, 889, 890], "identical_config": [69, 70], "identical_structur": [69, 70], "if_exist": [69, 70], "inplace_upd": [69, 70, 125, 587, 978, 979], "key_chains_contain": [69, 70], "sub_str": [69, 70], "join": [69, 70, 800, 806, 809, 844, 847, 968], "list_stack": [69, 70, 131], "dim": [69, 70, 123, 587, 640, 989, 1000], "func": [69, 70, 122, 192, 193, 303, 347, 587, 598, 661, 672, 864, 877], "map_cont": [69, 70], "include_self": [69, 70], "possibi": [69, 70], "matrix": [69, 70, 195, 230, 233, 248, 252, 253, 257, 587, 588, 591, 599, 699, 708, 712, 713, 716, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 736, 739, 740, 742, 743, 744, 746, 747, 749, 753, 755, 756, 758, 760, 762, 763, 765, 766, 768, 772, 774, 781, 783, 989, 999], "integ": [69, 70, 122, 123, 130, 195, 196, 197, 218, 266, 289, 292, 294, 353, 354, 357, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 449, 452, 453, 456, 517, 520, 540, 543, 544, 547, 548, 551, 583, 586, 712, 743, 775, 777, 778, 780, 800, 839, 887, 889, 890, 897, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966], "flatten": [69, 70, 587, 614, 712, 750, 752, 778, 780, 800, 826, 829, 834, 837, 899, 900, 901, 904, 905, 906, 910, 912], "broadcast": [69, 70, 113, 114, 115, 122, 123, 156, 157, 160, 162, 165, 167, 170, 172, 175, 177, 180, 182, 185, 187, 191, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 272, 273, 274, 303, 348, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 437, 440, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 522, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 576, 577, 581, 582, 583, 586, 587, 599, 600, 602, 605, 609, 610, 611, 613, 616, 619, 627, 640, 643, 644, 661, 694, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 716, 718, 720, 721, 723, 724, 726, 730, 732, 733, 735, 736, 739, 740, 742, 744, 746, 747, 749, 750, 752, 753, 755, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 783, 784, 785, 788, 790, 793, 795, 798, 800, 801, 804, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 837, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 882, 883, 886, 887, 888, 889, 890, 892, 893, 895, 898, 899, 900, 901, 903, 904, 912, 913, 919, 922, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966], "max_depth": [69, 70, 303, 307, 310, 317, 327, 331, 335, 587, 625, 864, 876], "multi_map": [69, 70, 122], "map_nest": [69, 70, 80, 81, 90, 91, 94, 95, 384, 386, 392, 394, 400, 402, 404, 406, 408, 410, 412, 414, 433, 435, 453, 455, 457, 459, 461, 463, 477, 479, 481, 483, 501, 503, 505, 507, 513, 515, 517, 519, 532, 534, 540, 542, 544, 546, 736, 738, 806, 808, 844, 846], "leftmost": [69, 70, 864, 877], "multi_map_in_static_method": [69, 70, 122], "fn_name": [69, 70], "num_arrai": [69, 70], "overwrite_at_key_chain": [69, 70], "overwrit": [69, 70, 125, 128, 303, 347], "target_dict": [69, 70], "return_dict": [69, 70], "prune_empti": [69, 70], "keep_non": [69, 70], "empti": [69, 70, 71, 72, 121, 123, 124, 195, 196, 197, 924, 945, 948, 949, 952, 957, 958, 961, 963, 966], "prune_key_chain": [69, 70], "key1": [69, 70, 132], "key2": [69, 70], "key3": [69, 70], "prune_key_from_key_chain": [69, 70], "prune_kei": [69, 70], "prune_keys_from_key_chain": [69, 70], "remove_key_length_limit": [69, 70], "remove_print_limit": [69, 70], "reshape_lik": [69, 70], "leading_shap": [69, 70], "return_cont": [69, 70], "restructur": [69, 70], "keep_orig": [69, 70], "transpos": [69, 70, 130, 133, 303, 334, 699, 701, 703, 705, 712, 747, 749, 753, 755, 968, 989, 991, 993, 995], "restructure_key_chain": [69, 70], "keychain_map": [69, 70], "set_at_key_chain": [69, 70], "set_at_kei": [69, 70], "set_framework": [69, 70, 128, 130, 131, 133], "set_ivy_backend": [69, 70], "ivy_backend": [69, 70], "attribut": [69, 70, 114, 122, 123, 129, 130, 131, 132, 266, 286, 287, 288, 289, 303, 343], "show_sub_contain": [69, 70], "sub_cont_or_keychain": [69, 70], "shuffl": [69, 70, 887, 968], "seed_valu": [69, 70, 887, 897], "seed": [69, 70, 71, 72, 887, 968], "shuffle_h5_fil": [69, 70], "dataset": [69, 70, 131, 143, 968], "size_ordered_arrai": [69, 70], "keychain": [69, 70], "smallest": [69, 70, 266, 286, 289, 353, 416, 419], "largest": [69, 70, 144, 266, 286, 289, 712, 763, 765], "slice_kei": [69, 70], "key_slic": [69, 70], "all_depth": [69, 70], "slice_via_kei": [69, 70], "sort_by_kei": [69, 70], "num_or_size_split": [69, 70, 128, 800, 839], "with_remaind": [69, 70, 800, 839], "constitu": [69, 70, 133], "dimension": [69, 70, 195, 196, 197, 210, 211, 230, 233, 712, 718, 720, 721, 723, 736, 739, 744, 746, 750, 752, 753, 755, 775, 777, 778, 780, 800, 839, 899, 900, 901, 902, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966], "evenli": [69, 70, 195, 196, 197, 224, 225, 227, 228, 800, 839], "store": [69, 70, 114, 119, 121, 122, 128, 130, 131, 132, 587, 614, 661, 697, 712, 772, 774, 800, 839, 1001, 1002], "stop_gradi": [69, 70, 71, 72, 84, 85, 132, 303, 347, 661, 668, 669, 670, 671, 673, 674, 675, 676, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 860, 861, 862, 863, 968, 1005, 1006, 1007, 1008, 1009, 1010], "preserve_typ": [69, 70, 661, 694], "stop": [69, 70, 74, 75, 128, 145, 195, 196, 197, 198, 224, 225, 226, 227, 228, 229, 303, 318, 347, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 694, 860, 861, 862, 863, 1005, 1006, 1007, 1008, 1009, 1010], "structural_diff": [69, 70], "to_devic": [69, 70, 303, 322], "cuda": [69, 70, 128, 131, 145, 195, 224, 225, 227, 228, 303, 312, 319, 344, 587, 615, 616, 619, 640, 643, 644, 887, 888, 889, 890, 893, 895, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012], "target": [69, 70, 112, 127, 131, 132, 133, 303, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 968], "to_dict": [69, 70], "to_disk_as_hdf5": [69, 70, 131], "starting_index": [69, 70], "max_batch_s": [69, 70], "w": [69, 70, 84, 85, 128, 131, 132, 587, 596, 661, 663, 666, 668, 670, 671, 673, 675, 676, 681, 683, 684, 685, 687, 688, 689, 691, 692, 699, 700, 701, 702, 703, 704, 705, 706], "later": [69, 70, 587, 598], "to_disk_as_json": [69, 70, 131], "to_disk_as_pickl": [69, 70, 131], "to_flat_list": [69, 70], "to_iter": [69, 70, 122], "leaf_keys_onli": [69, 70], "to_iterator_kei": [69, 70], "to_iterator_valu": [69, 70], "to_json": [69, 70], "to_list": [69, 70, 587, 968], "to_multi_dev": [69, 70], "multidevcontain": [69, 70, 71], "distributedarrai": [69, 70], "to_numpi": [69, 70, 131, 587, 968], "update_backend": [69, 70], "to_raw": [69, 70], "raw": [69, 70, 114], "trim_kei": [69, 70], "max_length": [69, 70], "try_kc": [69, 70], "tri": [69, 70], "self": [69, 70, 121, 122, 128, 130, 131, 132, 133, 157, 158, 159, 162, 163, 164, 167, 168, 169, 172, 173, 174, 177, 178, 179, 182, 183, 184, 187, 189, 190, 199, 200, 201, 205, 206, 207, 213, 214, 215, 219, 220, 221, 230, 231, 232, 235, 236, 237, 243, 244, 245, 248, 250, 251, 253, 255, 256, 261, 263, 264, 275, 276, 277, 303, 354, 355, 356, 359, 360, 361, 363, 364, 365, 367, 368, 369, 372, 373, 374, 376, 377, 378, 380, 381, 382, 384, 385, 386, 388, 389, 390, 392, 393, 394, 396, 397, 398, 400, 401, 402, 404, 405, 406, 408, 409, 410, 412, 413, 414, 416, 417, 418, 420, 421, 422, 424, 425, 426, 428, 429, 430, 433, 434, 435, 437, 438, 439, 441, 442, 443, 445, 446, 447, 449, 450, 451, 453, 454, 455, 457, 458, 459, 461, 462, 463, 465, 466, 467, 469, 470, 471, 473, 474, 475, 477, 478, 479, 481, 482, 483, 485, 486, 487, 489, 490, 491, 493, 494, 495, 497, 498, 499, 501, 502, 503, 505, 506, 507, 509, 510, 511, 513, 514, 515, 517, 518, 519, 523, 524, 525, 528, 529, 530, 532, 533, 534, 536, 537, 538, 540, 541, 542, 544, 545, 546, 548, 549, 550, 552, 553, 554, 556, 557, 558, 560, 561, 562, 564, 565, 566, 568, 569, 570, 572, 574, 575, 577, 579, 580, 583, 584, 585, 588, 589, 590, 600, 601, 616, 617, 618, 663, 664, 665, 668, 669, 673, 674, 677, 678, 681, 682, 685, 686, 689, 690, 713, 714, 715, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 733, 734, 736, 737, 738, 740, 741, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 760, 761, 763, 764, 766, 767, 769, 770, 772, 773, 775, 776, 778, 779, 781, 782, 785, 786, 787, 790, 791, 792, 795, 796, 797, 801, 802, 803, 806, 807, 808, 810, 811, 812, 814, 815, 816, 818, 819, 820, 822, 823, 824, 826, 827, 828, 830, 831, 832, 834, 835, 836, 840, 841, 842, 844, 845, 846, 848, 849, 850, 852, 853, 854, 856, 857, 858, 883, 884, 885, 893, 894, 906, 908, 909, 914, 915, 916, 919, 920, 921, 925, 926, 927, 929, 930, 931, 933, 934, 935, 937, 938, 939, 941, 942, 943, 945, 946, 947, 949, 950, 951, 953, 954, 955, 958, 959, 960, 963, 964, 965, 968, 1005, 1009], "arbitrari": [69, 70, 117, 118, 122, 125, 126, 132, 145, 195, 230, 233, 266, 273, 294, 303, 332, 333, 335], "concatten": [69, 70, 303, 332, 333, 334, 335, 347], "unstack": [69, 70, 128, 131, 587, 968], "dim_siz": [69, 70, 303], "update_config": [69, 70], "global_norm": [69, 70, 82, 83, 600, 601], "vector": [69, 70, 144, 195, 230, 233, 587, 600, 602, 699, 708, 712, 718, 720, 727, 729, 736, 739, 750, 752, 763, 765, 766, 768, 775, 777, 778, 780, 781, 783, 989, 999], "with_default_key_color": [69, 70], "with_entries_as_list": [69, 70], "with_ivy_backend": [69, 70], "with_key_length_limit": [69, 70, 131], "with_print_ind": [69, 70, 131], "with_print_limit": [69, 70, 131], "with_print_line_spac": [69, 70], "containerwithcr": [71, 72, 74], "containerwithdatatyp": [71, 72, 76], "containerwithdevic": [71, 72, 78], "containerwithelementwis": [71, 72, 80, 122], "containerwithgener": [71, 72, 82], "containerwithgradi": [71, 72, 84], "containerwithimag": [71, 72, 86], "containerwithlay": [71, 72, 88], "containerwithlinearalgebra": [71, 72, 90], "containerwithloss": [71, 72, 92], "containerwithnorm": [71, 72, 96], "containerwithrandom": [71, 72, 98], "containerwithsearch": [71, 72, 100], "containerwithset": [71, 72, 102], "containerwithsort": [71, 72, 104], "containerwithstatist": [71, 72, 106], "containerwithutil": [71, 72, 108], "__add__": [71, 72, 114, 115, 121, 122, 126, 130], "__radd__": [71, 72, 114, 115], "arang": [71, 72, 123, 195, 224, 225, 227, 228, 924, 925, 928, 968], "arg_info": [71, 72, 587], "arg_nam": [71, 72, 587], "argmax": [71, 72, 899, 968], "argmin": [71, 72, 899, 968], "array_equ": [71, 72, 587], "as_ivy_dev": [71, 72, 130, 303], "as_ivy_dtyp": [71, 72, 266], "as_native_dev": [71, 72, 303], "as_native_dtyp": [71, 72, 266], "assert_supports_inplac": [71, 72, 587], "astyp": [71, 72, 123, 125, 266], "broadcast_arrai": [71, 72, 266], "broadcast_to": [71, 72, 123, 266], "cache_fn": [71, 72, 118, 587], "clear_mem_on_dev": [71, 72, 303], "clip_matrix_norm": [71, 72, 587], "closest_valid_dtyp": [71, 72, 266], "container_typ": [71, 72, 587], "conv1d": [71, 72, 699, 989], "conv1d_transpos": [71, 72, 699], "conv2d": [71, 72, 699, 968, 989], "conv2d_transpos": [71, 72, 699], "conv3d": [71, 72, 699, 989], "conv3d_transpos": [71, 72, 699], "copy_arrai": [71, 72, 587], "cumprod": [71, 72, 133, 587], "cumsum": [71, 72, 587, 968], "current_backend_str": [71, 72, 587], "default_devic": [71, 72, 124, 128, 303, 341, 344, 351], "default_dtyp": [71, 72, 118, 123, 266], "default_float_dtyp": [71, 72, 123, 266], "default_int_dtyp": [71, 72, 123, 266], "depthwise_conv2d": [71, 72, 699, 968], "dev_clone_arrai": [71, 72, 303], "dev_clone_it": [71, 72, 303], "dev_clone_nest": [71, 72, 303], "dev_dist_arrai": [71, 72, 303], "dev_dist_it": [71, 72, 303], "dev_dist_nest": [71, 72, 303], "dev_unifi": [71, 72, 303], "dev_unify_arrai": [71, 72, 303], "dev_unify_it": [71, 72, 303], "dev_unify_nest": [71, 72, 303], "dev_util": [71, 72, 124, 303], "dropout": [71, 72, 131, 699, 989, 1000], "dtype_bit": [71, 72, 266], "execute_with_gradi": [71, 72, 122, 131, 132, 133, 145, 661, 968], "ey": [71, 72, 133, 195, 699, 702, 706], "finfo": [71, 72, 266], "floormod": [71, 72, 587, 968], "fourier_encod": [71, 72, 587], "function_supported_dtyp": [71, 72, 266], "function_unsupported_dtyp": [71, 72, 266], "get_all_arrays_in_memori": [71, 72, 587], "get_all_ivy_arrays_on_dev": [71, 72, 124, 303], "get_min_bas": [71, 72, 587], "get_min_denomin": [71, 72, 587], "get_num_dim": [71, 72, 587, 968], "get_referrers_recurs": [71, 72, 587], "gpu_is_avail": [71, 72, 303], "handle_nest": [71, 72, 118, 122, 146], "handle_out_argu": [71, 72, 120, 123, 124, 125, 126, 146], "iinfo": [71, 72, 266], "indices_wher": [71, 72, 587, 968], "infer_devic": [71, 72, 123, 124, 126, 146], "infer_dtyp": [71, 72, 123, 124, 126, 146], "inplace_arrays_support": [71, 72, 587], "inplace_decr": [71, 72, 587], "inplace_incr": [71, 72, 587], "inplace_variables_support": [71, 72, 587], "inputs_to_native_arrai": [71, 72, 121, 146], "invalid_dtyp": [71, 72, 266], "is_float_dtyp": [71, 72, 266], "is_int_dtyp": [71, 72, 266, 587, 657], "is_ivy_contain": [71, 72, 587], "linear": [71, 72, 114, 128, 131, 132, 133, 156, 157, 160, 162, 165, 167, 170, 587, 614, 699, 707, 760, 762, 968, 989, 990, 991, 992, 993, 994, 995, 996], "linspac": [71, 72, 128, 195, 196, 197, 968], "logspac": [71, 72, 128, 195], "lstm_updat": [71, 72, 128, 699], "match_kwarg": [71, 72, 587], "matrix_pow": [71, 72, 712], "multi_head_attent": [71, 72, 122, 125, 699], "multinomi": [71, 72, 887], "nonzero": [71, 72, 353, 367, 370, 523, 526, 899], "num_arrays_in_memori": [71, 72, 587], "num_cpu_cor": [71, 72, 124, 303], "num_gpu": [71, 72, 117, 124, 303], "num_ivy_arrays_on_dev": [71, 72, 303], "one_hot": [71, 72, 133, 587, 968], "outputs_to_ivy_arrai": [71, 72, 121, 123, 124, 126, 146], "percent_used_mem_on_dev": [71, 72, 303], "print_all_arrays_in_memori": [71, 72, 587], "print_all_ivy_arrays_on_dev": [71, 72, 303], "promote_typ": [71, 72, 266], "randint": [71, 72, 98, 99, 887, 891, 968], "random_norm": [71, 72, 699, 702, 705, 706, 712, 763, 765, 887, 904, 905], "result_typ": [71, 72, 123, 266], "scaled_dot_product_attent": [71, 72, 699], "scatter_flat": [71, 72, 587], "scatter_nd": [71, 72, 130, 587, 968], "set_default_devic": [71, 72, 124, 303, 351], "set_default_dtyp": [71, 72, 118, 123, 266], "set_default_float_dtyp": [71, 72, 123, 266], "set_default_int_dtyp": [71, 72, 123, 266], "set_min_bas": [71, 72, 587], "set_min_denomin": [71, 72, 587], "set_queue_timeout": [71, 72, 587], "set_split_factor": [71, 72, 303], "set_tmp_dir": [71, 72, 587], "set_with_grad": [71, 72, 661], "shape_to_tupl": [71, 72, 123, 587], "slogdet": [71, 72, 712], "split_factor": [71, 72, 303, 312], "split_func_cal": [71, 72, 303], "stable_divid": [71, 72, 118, 587], "stable_pow": [71, 72, 587], "static_aco": [71, 72], "static_acosh": [71, 72], "static_arg_info": [71, 72], "static_arg_nam": [71, 72], "static_argmax": [71, 72], "static_argmin": [71, 72], "static_arrai": [71, 72], "static_array_equ": [71, 72], "static_arrays_equ": [71, 72], "static_as_ivy_dev": [71, 72], "static_as_ivy_dtyp": [71, 72], "static_as_native_dev": [71, 72], "static_as_native_dtyp": [71, 72], "static_asin": [71, 72], "static_asinh": [71, 72], "static_assert_supports_inplac": [71, 72], "static_astyp": [71, 72], "static_atan": [71, 72], "static_atan2": [71, 72], "static_atanh": [71, 72], "static_bitwise_and": [71, 72], "static_bitwise_invert": [71, 72], "static_bitwise_left_shift": [71, 72], "static_bitwise_or": [71, 72], "static_bitwise_right_shift": [71, 72], "static_bitwise_xor": [71, 72], "static_broadcast_arrai": [71, 72], "static_broadcast_to": [71, 72], "static_cache_fn": [71, 72], "static_ceil": [71, 72], "static_clear_mem_on_dev": [71, 72], "static_clip_matrix_norm": [71, 72], "static_clip_vector_norm": [71, 72], "static_closest_valid_dtyp": [71, 72], "static_concat": [71, 72], "static_constant_pad": [71, 72], "static_container_typ": [71, 72], "static_conv1d": [71, 72], "static_conv1d_transpos": [71, 72], "static_conv2d": [71, 72], "static_conv2d_transpos": [71, 72], "static_conv3d": [71, 72], "static_conv3d_transpos": [71, 72], "static_copy_arrai": [71, 72], "static_co": [71, 72], "static_cosh": [71, 72], "static_cross": [71, 72], "static_cumprod": [71, 72], "static_cumsum": [71, 72], "static_current_backend": [71, 72], "static_current_backend_str": [71, 72], "static_default": [71, 72], "static_default_devic": [71, 72], "static_default_dtyp": [71, 72], "static_default_float_dtyp": [71, 72], "static_default_int_dtyp": [71, 72], "static_depthwise_conv2d": [71, 72], "static_det": [71, 72], "static_dev": [71, 72], "static_dev_clon": [71, 72], "static_dev_clone_arrai": [71, 72], "static_dev_clone_it": [71, 72], "static_dev_clone_nest": [71, 72], "static_dev_dist": [71, 72], "static_dev_dist_arrai": [71, 72], "static_dev_dist_it": [71, 72], "static_dev_dist_nest": [71, 72], "static_dev_unifi": [71, 72], "static_dev_unify_arrai": [71, 72], "static_dev_unify_it": [71, 72], "static_dev_unify_nest": [71, 72], "static_dev_util": [71, 72], "static_diagon": [71, 72], "static_dropout": [71, 72], "static_dtyp": [71, 72], "static_dtype_bit": [71, 72], "static_eigh": [71, 72], "static_eigvalsh": [71, 72], "static_einops_rearrang": [71, 72], "static_einops_reduc": [71, 72], "static_einops_repeat": [71, 72], "static_einsum": [71, 72], "static_empti": [71, 72], "static_equ": [71, 72], "static_erf": [71, 72], "static_execute_with_gradi": [71, 72], "static_exist": [71, 72], "static_exp": [71, 72], "static_expand_dim": [71, 72], "static_expm1": [71, 72], "static_finfo": [71, 72], "static_flip": [71, 72], "static_floor": [71, 72], "static_floor_divid": [71, 72], "static_floormod": [71, 72], "static_fourier_encod": [71, 72], "static_ful": [71, 72], "static_function_supported_dtyp": [71, 72], "static_function_unsupported_dtyp": [71, 72], "static_gath": [71, 72], "static_get_all_arrays_in_memori": [71, 72], "static_get_all_ivy_arrays_on_dev": [71, 72], "static_get_min_bas": [71, 72], "static_get_min_denomin": [71, 72], "static_get_num_dim": [71, 72], "static_get_referrers_recurs": [71, 72], "static_gpu_is_avail": [71, 72], "static_great": [71, 72], "static_greater_equ": [71, 72], "static_handle_nest": [71, 72], "static_handle_out_argu": [71, 72], "static_has_nan": [71, 72], "static_iinfo": [71, 72], "static_indices_wher": [71, 72], "static_infer_devic": [71, 72], "static_infer_dtyp": [71, 72], "static_inplace_arrays_support": [71, 72], "static_inplace_decr": [71, 72], "static_inplace_incr": [71, 72], "static_inplace_upd": [71, 72], "static_inplace_variables_support": [71, 72], "static_inputs_to_native_arrai": [71, 72], "static_inv": [71, 72], "static_invalid_dtyp": [71, 72], "static_is_arrai": [71, 72], "static_is_float_dtyp": [71, 72], "static_is_int_dtyp": [71, 72], "static_is_ivy_arrai": [71, 72], "static_is_ivy_contain": [71, 72], "static_is_native_arrai": [71, 72], "static_isfinit": [71, 72], "static_isinf": [71, 72], "static_isnan": [71, 72], "static_layer_norm": [71, 72], "static_less": [71, 72], "static_less_equ": [71, 72], "static_linear": [71, 72], "static_log": [71, 72], "static_log10": [71, 72], "static_log1p": [71, 72], "static_log2": [71, 72], "static_logaddexp": [71, 72], "static_logical_and": [71, 72], "static_logical_not": [71, 72], "static_logical_or": [71, 72], "static_logical_xor": [71, 72], "static_lstm_upd": [71, 72], "static_match_kwarg": [71, 72], "static_matmul": [71, 72], "static_matrix_norm": [71, 72], "static_matrix_pow": [71, 72], "static_matrix_rank": [71, 72], "static_matrix_transpos": [71, 72], "static_max": [71, 72], "static_maximum": [71, 72], "static_mean": [71, 72], "static_min": [71, 72], "static_minimum": [71, 72], "static_multi_head_attent": [71, 72], "static_multinomi": [71, 72], "static_multiprocess": [71, 72], "static_neg": [71, 72], "static_nonzero": [71, 72], "static_not_equ": [71, 72], "static_num_arrays_in_memori": [71, 72], "static_num_cpu_cor": [71, 72], "static_num_gpu": [71, 72], "static_num_ivy_arrays_on_dev": [71, 72], "static_one_hot": [71, 72], "static_out": [71, 72], "static_outputs_to_ivy_arrai": [71, 72], "static_percent_used_mem_on_dev": [71, 72], "static_permute_dim": [71, 72], "static_pinv": [71, 72], "static_posit": [71, 72], "static_pow": [71, 72], "static_print_all_arrays_in_memori": [71, 72], "static_print_all_ivy_arrays_on_dev": [71, 72], "static_prod": [71, 72], "static_promote_typ": [71, 72], "static_qr": [71, 72], "static_queue_timeout": [71, 72], "static_random_norm": [71, 72], "static_remaind": [71, 72], "static_repeat": [71, 72], "static_reshap": [71, 72], "static_result_typ": [71, 72], "static_round": [71, 72], "static_scaled_dot_product_attent": [71, 72], "static_scatter_flat": [71, 72], "static_scatter_nd": [71, 72], "static_se": [71, 72], "static_set_default_devic": [71, 72], "static_set_default_dtyp": [71, 72], "static_set_default_float_dtyp": [71, 72], "static_set_default_int_dtyp": [71, 72], "static_set_min_bas": [71, 72], "static_set_min_denomin": [71, 72], "static_set_queue_timeout": [71, 72], "static_set_split_factor": [71, 72], "static_set_tmp_dir": [71, 72], "static_set_with_grad": [71, 72], "static_shap": [71, 72], "static_shape_to_tupl": [71, 72], "static_shuffl": [71, 72], "static_sign": [71, 72], "static_sin": [71, 72], "static_sinh": [71, 72], "static_slogdet": [71, 72], "static_solv": [71, 72], "static_split": [71, 72], "static_split_factor": [71, 72], "static_split_func_cal": [71, 72], "static_sqrt": [71, 72], "static_squar": [71, 72], "static_squeez": [71, 72], "static_stable_divid": [71, 72], "static_stable_pow": [71, 72], "static_stack": [71, 72], "static_std": [71, 72], "static_stop_gradi": [71, 72], "static_sum": [71, 72], "static_supports_inplac": [71, 72], "static_svd": [71, 72], "static_svdv": [71, 72], "static_swapax": [71, 72], "static_tensordot": [71, 72], "static_til": [71, 72], "static_tmp_dir": [71, 72], "static_to_devic": [71, 72], "static_to_list": [71, 72], "static_to_native_arrays_and_back": [71, 72], "static_to_numpi": [71, 72], "static_to_scalar": [71, 72], "static_total_mem_on_dev": [71, 72], "static_tpu_is_avail": [71, 72], "static_trac": [71, 72], "static_trunc": [71, 72], "static_try_else_non": [71, 72], "static_type_promote_arrai": [71, 72], "static_unique_al": [71, 72], "static_unique_invers": [71, 72], "static_unique_valu": [71, 72], "static_unset_default_devic": [71, 72], "static_unset_default_dtyp": [71, 72], "static_unset_default_float_dtyp": [71, 72], "static_unset_default_int_dtyp": [71, 72], "static_unset_with_grad": [71, 72], "static_unstack": [71, 72], "static_used_mem_on_dev": [71, 72], "static_valid_dtyp": [71, 72], "static_value_is_nan": [71, 72], "static_var": [71, 72], "static_vari": [71, 72], "static_variable_data": [71, 72], "static_vecdot": [71, 72], "static_vector_norm": [71, 72], "static_vector_to_skew_symmetric_matrix": [71, 72], "static_wher": [71, 72], "static_with_grad": [71, 72], "static_zero_pad": [71, 72], "supports_inplac": [71, 72, 587], "tmp_dir": [71, 72, 587], "to_native_arrays_and_back": [71, 72, 120, 126, 146], "to_scalar": [71, 72, 587], "total_mem_on_dev": [71, 72, 124, 303], "tpu_is_avail": [71, 72, 303], "try_else_non": [71, 72, 587], "type_promote_arrai": [71, 72, 266], "unique_al": [71, 72, 904], "unique_invers": [71, 72, 904], "unique_valu": [71, 72, 904], "unset_default_devic": [71, 72, 303], "unset_default_dtyp": [71, 72, 266], "unset_default_float_dtyp": [71, 72, 266], "unset_default_int_dtyp": [71, 72, 266], "unset_with_grad": [71, 72, 661], "used_mem_on_dev": [71, 72, 303], "valid_dtyp": [71, 72, 266], "value_is_nan": [71, 72, 587], "variable_data": [71, 72, 661], "with_grad": [71, 72, 661, 693], "at_dev": [71, 73, 303, 316, 317], "static_arang": [74, 75, 196], "static_asarrai": [74, 75, 199], "static_empty_lik": [74, 75, 205], "static_ey": [74, 75, 210], "n_row": [74, 75, 195, 210, 211, 212], "n_col": [74, 75, 195, 210, 211, 212], "static_from_dlpack": [74, 75, 213], "static_full_lik": [74, 75, 219], "static_linspac": [74, 75, 224], "num": [74, 75, 128, 195, 224, 225, 226, 227, 228, 229], "endpoint": [74, 75, 195, 224, 225, 226, 227, 229], "static_logspac": [74, 75, 227], "static_meshgrid": [74, 75, 230], "static_native_arrai": [74, 75, 235], "static_on": [74, 75, 240], "static_ones_lik": [74, 75, 243], "static_tril": [74, 75, 248], "static_triu": [74, 75, 253], "static_zero": [74, 75, 258], "static_zeros_lik": [74, 75, 261], "int32": [76, 77, 123, 266, 275, 277, 278, 279, 287, 587, 656, 800, 814, 817, 924, 941, 944, 949, 952], "int64": [76, 77, 123, 266, 275, 277, 278, 279, 287, 353, 408, 411, 899, 900, 901, 924, 941, 944, 949, 952], "static_can_cast": [76, 77, 275], "from_": [76, 77, 266, 275, 278, 279], "static_ab": [80, 81, 354], "static_add": [80, 81, 114, 115, 122, 367], "static_divid": [80, 81, 122, 428], "static_multipli": [80, 81, 122, 523], "static_subtract": [80, 81, 122, 572], "static_tan": [80, 81, 115, 122, 577], "143": [80, 81, 115, 353, 577, 578, 580, 581], "38": [80, 81, 115, 353, 577, 578, 580, 581], "76": [80, 81, 187, 188, 353, 424, 427, 661, 663, 666, 712, 769, 771, 924, 925, 928], "96": [80, 81, 187, 188, 353, 577, 581, 661, 663, 666, 712, 750, 752, 924, 925, 928], "995": [80, 81, 187, 188, 190, 353, 582], "9999": [80, 81, 187, 188], "static_all_equ": [82, 83, 588, 590], "clip_vector_norm": [82, 83, 587], "max_norm": [82, 83, 587, 599, 600, 601, 602], "static_gather_nd": [82, 83, 616], "adam_upd": [84, 85, 132, 661], "lr": [84, 85, 131, 132, 661, 668, 669, 670, 671, 673, 674, 675, 676, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 1005, 1006, 1007, 1008, 1009, 1010], "mw_tm1": [84, 85, 661, 668, 669, 670, 671, 681, 682, 683, 684], "vw_tm1": [84, 85, 661, 668, 669, 670, 671, 681, 682, 683, 684], "gradient_descent_upd": [84, 85, 661, 860, 861, 862, 863, 968], "is_vari": [84, 85, 125, 661], "lamb_upd": [84, 85, 661], "max_trust_ratio": [84, 85, 661, 681, 682, 683, 684, 1005, 1007], "decay_lambda": [84, 85, 661, 681, 682, 683, 684, 685, 686, 687, 688, 1005, 1007, 1008], "lars_upd": [84, 85, 661], "optimizer_upd": [84, 85, 661], "effective_grad": [84, 85, 661, 689, 690, 691, 692], "static_adam_step": [84, 85, 663], "87": [84, 85, 98, 99, 661, 663, 666, 667, 889, 891], "976": [84, 85, 353, 582, 661, 663, 666, 667], "static_adam_upd": [84, 85, 668], "static_gradient_descent_upd": [84, 85, 673], "static_is_vari": [84, 85, 677], "static_lamb_upd": [84, 85, 681], "static_lars_upd": [84, 85, 685], "static_optimizer_upd": [84, 85, 689], "73": [90, 91, 353, 564, 567, 712, 713, 715, 716, 717, 882, 883, 886], "577": [90, 91, 712, 713, 715, 716, 717], "41": [90, 91, 130, 353, 412, 415, 564, 567, 712, 713, 715, 716, 717, 924, 949, 952], "707": [90, 91, 712, 713, 715, 716, 717], "static_choleski": [90, 91, 713], "static_rol": [90, 91, 94, 95, 115, 122, 713, 717, 801, 805, 834], "static_binary_cross_entropi": [92, 93, 785], "static_cross_entropi": [92, 93, 790], "static_sparse_cross_entropi": [92, 93, 795], "static_clip": [94, 95, 801], "random_uniform": [98, 99, 124, 132, 887, 968], "static_randint": [98, 99, 889], "20": [98, 99, 130, 353, 412, 415, 441, 444, 548, 551, 564, 567, 712, 724, 726, 750, 752, 769, 771, 887, 889, 890, 891, 899, 902, 903, 924, 925, 928], "40": [98, 99, 353, 424, 427, 564, 567, 712, 750, 752, 889, 891, 924, 925, 928], "62": [98, 99, 889, 891], "52": [98, 99, 661, 663, 666, 712, 750, 752, 889, 891, 904, 905, 924, 925, 928], "95": [98, 99, 661, 663, 666, 889, 891], "37": [98, 99, 353, 577, 581, 882, 883, 886, 889, 891], "13": [98, 99, 115, 122, 353, 392, 395, 412, 415, 424, 427, 564, 567, 587, 605, 661, 663, 666, 699, 711, 712, 724, 726, 750, 752, 882, 883, 886, 889, 891, 899, 903, 904, 905, 924, 925, 928], "static_random_uniform": [98, 99, 893], "static_unique_count": [102, 103, 906], "classivi": [102, 103, 800, 839, 904, 906, 907, 909, 910], "static_argsort": [104, 105, 914], "static_sort": [104, 105, 919], "static_al": [108, 109, 958], "static_ani": [108, 109, 963], "add_ivy_container_instance_method": 110, "containerexampl": [110, 111], "who": [112, 127, 145], "mainli": [112, 129, 131], "under": [112, 114, 115, 116, 117, 118, 122, 127, 128, 131, 133], "hood": [112, 115, 117, 118, 122, 127, 128, 131, 133], "weed": [112, 127], "behind": [112, 127, 129, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691], "tour": 112, "primari": [112, 117, 119, 125, 145], "composit": [112, 117, 119, 121, 122, 125, 128, 132, 133, 145], "nestabl": [112, 114, 115, 117, 125, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 353, 354, 357, 367, 370, 372, 375, 416, 419, 449, 452, 532, 535, 564, 567, 568, 571, 577, 581, 587, 615, 699, 702, 711, 712, 713, 716, 724, 726, 800, 834, 837, 882, 883, 886, 904, 906, 910, 924, 929, 932, 957, 958, 961], "dynam": [112, 123, 124, 125, 128, 192, 193], "runtim": [112, 117, 303], "h": [112, 122, 699, 702, 703, 704, 705, 706], "j": [112, 587, 595, 596, 712, 772, 774, 924, 925, 928], "borrow": 112, "n": [112, 195, 230, 233, 248, 252, 253, 257, 587, 596, 699, 707, 712, 724, 726, 736, 739, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 763, 765, 766, 768, 772, 774, 775, 777, 778, 780, 781, 783, 800, 810, 813, 814, 817, 822, 825, 844, 847, 856, 859, 887, 892, 893, 895, 899, 902, 924, 933, 936, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966], "taken": [113, 133, 712, 724, 726], "constant": [113, 118, 132, 133, 145, 303, 312, 313, 800, 810, 813, 864, 870, 882, 883, 886, 980, 981, 985, 988, 1001, 1002, 1003, 1004], "compil": [113, 122, 127, 129, 145, 968, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010], "meta": [113, 121, 861, 862, 863], "overlap": 113, "sever": [113, 145, 712, 733, 735], "judgement": 113, "locat": [113, 117, 119, 124, 887, 888], "some_namespac": 113, "some_backend": 113, "another_backend": 113, "break": [113, 126, 130, 145, 968], "anyth": [113, 968], "refactor": 113, "ongo": 113, "subfold": [113, 117], "via": [113, 122, 123, 124, 125, 128, 130, 131, 144, 864, 865, 874, 875], "file_nam": 113, "my_func": [113, 115], "int": [113, 115, 118, 122, 123, 124, 125, 126, 133, 156, 177, 180, 192, 193, 195, 204, 210, 211, 218, 219, 222, 224, 225, 227, 228, 240, 241, 248, 252, 253, 257, 258, 260, 266, 274, 283, 285, 286, 289, 292, 303, 325, 328, 329, 330, 331, 339, 340, 341, 347, 348, 353, 392, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 587, 593, 605, 606, 609, 610, 611, 614, 615, 624, 640, 643, 644, 649, 650, 659, 661, 663, 666, 668, 670, 681, 683, 699, 700, 702, 704, 705, 706, 712, 718, 720, 724, 726, 769, 771, 772, 774, 775, 777, 778, 780, 784, 790, 793, 795, 798, 800, 806, 809, 810, 813, 814, 817, 818, 821, 822, 825, 826, 829, 830, 833, 834, 837, 839, 840, 843, 844, 847, 848, 851, 852, 855, 856, 859, 860, 861, 862, 863, 864, 876, 882, 883, 886, 887, 888, 889, 890, 892, 893, 895, 897, 899, 900, 901, 913, 914, 917, 919, 922, 924, 929, 932, 933, 936, 937, 940, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966], "nativedtyp": [113, 123, 124, 126, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 218, 219, 222, 235, 238, 240, 241, 243, 246, 258, 260, 261, 265, 266, 271, 272, 282, 283, 284, 293, 924, 949, 952], "nativedevic": [113, 123, 124, 126, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 218, 219, 222, 224, 225, 227, 228, 235, 238, 240, 241, 243, 246, 258, 260, 261, 265, 303, 320, 321, 322, 336, 342, 344, 346, 348, 349, 352, 587, 640, 887, 888, 889, 890, 892, 893, 895], "my": 113, "numer": [113, 132, 195, 230, 233, 266, 272, 353, 354, 357, 367, 370, 416, 419, 428, 431, 445, 448, 449, 452, 453, 456, 465, 468, 469, 472, 473, 476, 477, 480, 509, 512, 513, 516, 523, 526, 528, 531, 532, 535, 540, 543, 544, 547, 552, 555, 568, 571, 572, 576, 583, 586, 587, 622, 623, 645, 646, 651, 652, 712, 718, 720, 736, 739, 750, 752, 763, 765, 769, 771, 772, 774, 775, 777, 887, 898, 899, 900, 901, 924, 929, 932, 941, 944, 949, 952, 980], "cooler": 113, "produc": [113, 303, 312, 313, 699, 711], "something_cool": 113, "category_nam": [114, 118, 123, 124, 126], "contrast": [114, 126], "backend_nam": [114, 118, 119, 120, 123, 124, 126], "account": 114, "instanti": 114, "firstli": [114, 115, 118, 121, 123, 125, 131], "templat": [114, 968], "spec": [114, 115], "api_specif": [114, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 353, 354, 357, 372, 375, 412, 415, 416, 419, 424, 427, 449, 452, 532, 535, 564, 567, 568, 571, 712, 724, 726, 800, 814, 817, 834, 837, 904, 905, 906, 910, 913, 914, 917, 924, 929, 932], "array_api": 114, "preview": 114, "render": 114, "incorrectli": 114, "onlin": [114, 968], "tangent": [114, 156, 187, 191, 353, 380, 383, 384, 387, 388, 391, 577, 581, 582], "domain": [114, 353, 359, 362, 363, 366, 372, 375, 376, 379, 380, 383, 384, 387, 420, 423, 424, 427, 441, 444, 445, 448, 485, 488, 489, 492, 497, 500, 556, 559, 560, 563, 564, 567, 577, 581, 582], "infin": [114, 194, 266, 272, 353, 354, 357, 363, 366, 367, 370, 376, 379, 380, 383, 384, 387, 416, 419, 420, 423, 424, 427, 441, 444, 445, 448, 449, 452, 453, 456, 465, 468, 469, 472, 485, 488, 489, 492, 497, 500, 501, 504, 523, 526, 540, 543, 544, 547, 548, 551, 556, 559, 560, 563, 564, 567, 577, 581, 582, 583, 586, 712, 778, 780, 924, 929, 932, 937, 940, 957, 958, 961, 963, 966], "codomain": [114, 353, 359, 362, 363, 366, 372, 375, 376, 379, 380, 383, 384, 387, 420, 423, 424, 427, 441, 444, 445, 448, 485, 488, 489, 492, 497, 500, 556, 559, 560, 563, 564, 567, 577, 581, 582], "x_i": [114, 353, 354, 357, 359, 362, 363, 366, 372, 375, 376, 379, 380, 383, 396, 399, 416, 419, 420, 423, 424, 427, 441, 444, 445, 448, 449, 452, 465, 468, 469, 472, 473, 476, 485, 488, 489, 492, 497, 500, 509, 512, 528, 531, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 577, 581, 582, 583, 586, 904, 905, 906, 910, 912, 924, 929, 932, 933, 936, 937, 940, 945, 948, 949, 952, 953, 956], "assum": [114, 119, 123, 130, 131, 145, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 353, 354, 357, 367, 370, 372, 375, 392, 395, 412, 415, 416, 419, 420, 423, 424, 427, 449, 452, 532, 535, 548, 551, 556, 559, 564, 567, 568, 571, 577, 581, 582, 587, 615, 699, 702, 711, 712, 713, 716, 721, 723, 724, 726, 800, 814, 817, 818, 821, 834, 837, 882, 883, 886, 904, 905, 906, 910, 913, 914, 917, 924, 929, 932, 957, 958, 961], "express": [114, 128, 133, 353, 359, 362, 372, 375, 380, 383, 384, 387, 420, 423, 556, 559, 577, 581], "radian": [114, 353, 359, 362, 372, 375, 380, 383, 384, 387, 420, 423, 556, 559, 577, 581], "float": [114, 118, 122, 123, 125, 126, 130, 132, 156, 162, 165, 194, 195, 196, 197, 204, 210, 211, 218, 219, 222, 224, 225, 227, 228, 240, 241, 258, 260, 266, 272, 282, 286, 291, 294, 303, 336, 342, 346, 349, 352, 353, 354, 357, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 433, 436, 441, 444, 445, 448, 449, 452, 453, 456, 457, 460, 461, 464, 477, 480, 485, 488, 489, 492, 497, 500, 501, 504, 523, 526, 528, 531, 532, 535, 536, 539, 540, 543, 544, 547, 548, 551, 556, 559, 560, 563, 564, 567, 572, 576, 577, 581, 582, 583, 586, 587, 599, 600, 602, 614, 622, 623, 645, 646, 651, 652, 661, 663, 666, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 699, 702, 706, 711, 712, 713, 716, 721, 723, 727, 729, 730, 732, 733, 735, 744, 746, 753, 755, 756, 758, 760, 762, 763, 765, 778, 780, 784, 785, 788, 790, 793, 795, 798, 860, 861, 862, 863, 882, 883, 886, 887, 892, 893, 895, 904, 905, 906, 910, 912, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956], "operand": [114, 353, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 384, 387, 412, 415, 416, 419, 420, 423, 424, 427, 441, 444, 445, 448, 449, 452, 485, 488, 489, 492, 497, 500, 501, 504, 523, 526, 540, 543, 544, 547, 548, 551, 556, 559, 560, 563, 564, 567, 577, 581, 582, 583, 586, 924, 925, 928, 929, 932, 937, 940, 949, 952], "whose": [114, 195, 248, 252, 253, 257, 353, 363, 366, 376, 379, 388, 391, 420, 423, 424, 427, 540, 543, 556, 559, 560, 563, 577, 581, 582, 587, 598, 712, 713, 716, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 760, 762, 763, 765, 766, 768, 772, 774, 800, 818, 821, 834, 837, 904, 905, 906, 910, 924, 925, 928], "ref": [114, 353, 408, 411, 477, 480, 523, 526, 532, 535, 544, 547, 572, 576, 800, 844, 847], "promot": [114, 118, 123, 266, 272, 275, 278, 293, 294, 298, 353, 359, 362, 363, 366, 367, 370, 372, 375, 376, 379, 380, 383, 388, 391, 392, 395, 400, 403, 404, 407, 408, 411, 412, 415, 420, 423, 424, 427, 428, 431, 441, 444, 445, 448, 485, 488, 489, 492, 497, 500, 501, 504, 517, 520, 523, 526, 540, 543, 544, 547, 556, 559, 560, 563, 564, 567, 577, 581, 582, 712, 713, 716, 718, 720, 733, 735, 736, 739, 744, 746, 750, 752, 753, 755, 760, 762, 775, 777, 778, 780, 800, 844, 847, 924, 933, 936], "But": [114, 122, 133], "needless": 114, "info": [114, 968], "subset": [114, 117, 126, 128], "extend": [114, 117, 119, 126], "renam": 114, "conform": [114, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 230, 233, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 353, 354, 357, 367, 370, 372, 375, 392, 395, 412, 415, 416, 419, 424, 427, 445, 448, 449, 452, 481, 484, 532, 535, 548, 551, 564, 567, 568, 571, 577, 581, 582, 712, 721, 723, 724, 726, 800, 814, 817, 818, 821, 834, 837, 904, 905, 906, 910, 913, 914, 917, 924, 929, 932, 957, 958, 961], "org": [114, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 353, 354, 357, 372, 375, 412, 415, 416, 419, 424, 427, 449, 452, 532, 535, 564, 567, 568, 571, 661, 663, 666, 668, 670, 712, 724, 726, 800, 814, 817, 834, 837, 904, 905, 906, 910, 913, 914, 917, 924, 929, 932], "elementwise_funct": [114, 353, 354, 357, 372, 375, 412, 415, 416, 419, 424, 427, 449, 452, 532, 535, 564, 567, 568, 571, 712, 724, 726, 800, 834, 837, 904, 905, 913, 914, 917, 924, 929, 932], "descript": [114, 122, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 353, 354, 357, 367, 370, 372, 375, 392, 395, 412, 415, 416, 419, 424, 427, 449, 452, 532, 535, 548, 551, 564, 567, 568, 571, 577, 581, 582, 587, 615, 699, 702, 711, 712, 713, 716, 721, 723, 724, 726, 778, 780, 800, 814, 817, 818, 821, 834, 837, 882, 883, 886, 904, 905, 906, 910, 913, 914, 917, 924, 929, 932, 957, 958, 961], "simplic": [114, 132, 144, 195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 227, 228, 230, 233, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265, 266, 275, 278, 353, 354, 357, 367, 370, 372, 375, 392, 395, 412, 415, 416, 419, 424, 427, 449, 452, 532, 535, 548, 551, 564, 567, 568, 571, 577, 581, 582, 587, 615, 699, 702, 711, 712, 713, 716, 721, 723, 724, 726, 800, 814, 817, 818, 821, 834, 837, 882, 883, 886, 904, 905, 906, 910, 913, 914, 917, 924, 929, 932], "judgment": 114, "beyond": [114, 800, 834, 837], "text": 114, "func_nam": [114, 115, 118], "pure": [114, 130, 133, 145], "themselv": [114, 118, 122, 123, 124, 132, 864, 865], "operator_nam": 114, "succinct": 114, "contstructor": 114, "though": [114, 118, 123, 131, 145], "forward": [114, 133, 144, 145, 1001, 1002, 1005, 1009], "_forward": [114, 128, 131, 132, 968], "former": 114, "trainabl": [114, 129, 131, 132, 661, 677, 679, 978, 979, 1001, 1002, 1011], "explicitli": [114, 118, 119, 121, 122, 125, 128, 145, 712, 727, 729, 989, 998, 1000, 1001, 1002], "latter": [114, 119], "implicit": [114, 122, 128], "docst": 114, "eight": 115, "static_": 115, "op_nam": 115, "__r": 115, "four": [115, 118, 123, 126, 131], "__sub__": [115, 121, 122, 126, 130], "__mul__": [115, 121, 122, 126, 130], "__truediv__": [115, 121, 122], "respect": [115, 121, 122, 123, 126, 195, 230, 233, 353, 354, 357, 367, 370, 384, 387, 392, 395, 400, 403, 404, 407, 408, 411, 412, 415, 428, 431, 433, 436, 453, 456, 457, 460, 461, 464, 477, 480, 481, 484, 501, 504, 505, 508, 513, 516, 517, 520, 523, 526, 532, 535, 544, 547, 572, 576, 661, 663, 666, 668, 670, 672, 673, 675, 681, 683, 685, 687, 689, 691, 712, 756, 758, 860, 861, 862, 863], "recap": [115, 122, 132], "independ": [115, 116, 120, 122, 128, 133, 712, 718, 720, 760, 762, 887, 888], "combinatorili": 115, "variat": [115, 117], "grid": [115, 117, 144, 195, 230, 233], "vari": [115, 117, 122, 130, 904, 905, 906, 910, 912], "simplest": 115, "small": [115, 118, 128, 132, 145, 353, 523, 526, 712, 744, 746, 753, 755, 882, 883, 886, 1003, 1004], "unus": [115, 125, 192, 193], "18": [115, 122, 353, 412, 415, 712, 724, 726, 750, 752, 924, 925, 928], "excess": [115, 119, 130], "showcas": [115, 144], "demonstr": [115, 130], "replic": [115, 123], "meant": 115, "imaginari": 115, "some_flag": 115, "another_flag": 115, "54": [115, 353, 420, 423, 424, 427, 564, 567, 699, 711, 712, 750, 752, 887, 892, 924, 925, 928], "jointli": 115, "three": [115, 122, 127, 195, 230, 233, 968], "x0": [115, 587, 595], "procedur": 115, "sens": [115, 122, 130], "5574077": 115, "1850398": 115, "5463025": 115, "8422884": 115, "91601413": 115, "9647598": 115, "3738229": 115, "1597457": 115, "0963247": 115, "9955841": 115, "3278579": 115, "multi": [115, 122, 127, 145, 699, 710, 712, 718, 720, 968, 974, 989, 1000], "seper": [115, 587, 614], "pars": [115, 145], "satisfi": [115, 712, 781, 783], "far": [115, 124, 129, 130, 864, 865, 875], "asid": [115, 144], "irrelev": [115, 123], "increasingli": 115, "complex": [115, 131, 132, 133, 145, 712, 727, 729, 763, 765], "rule": [115, 117, 118, 121, 122, 123, 266, 272, 275, 278, 294, 353, 388, 391, 408, 411, 428, 431, 523, 526, 544, 547, 712, 713, 716, 718, 720, 750, 752, 760, 762], "14254655": 115, "1578213": 115, "380515": 115, "trivial": 115, "By": [115, 118, 122, 125, 132, 133, 587, 605, 606, 712, 775, 777, 800, 826, 829, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966], "non": [115, 122, 123, 128, 192, 193, 266, 272, 290, 353, 509, 512, 513, 516, 699, 702, 712, 721, 723, 744, 746, 763, 765, 769, 771, 775, 777, 778, 780, 899, 900, 901, 902, 924, 929, 932, 933, 936, 937, 940, 941, 944, 953, 956, 957, 958, 961, 963, 966, 1001, 1002, 1005, 1009], "dictat": [115, 121, 125, 126], "exlud": 115, "unit": [116, 117, 145, 156, 157, 160, 162, 165, 167, 170, 303], "thoroughli": [116, 117], "ci": [116, 117, 145], "failur": 116, "On": [117, 129, 133], "fixtur": 117, "consum": [117, 122, 126, 303], "300": [117, 353, 548, 551], "hit": [117, 128], "permit": [117, 121, 126], "action": 117, "eleg": 117, "intellig": 117, "sampl": [117, 699, 707, 887, 888, 892, 893, 895, 924, 945, 948, 953, 956, 989, 997], "rang": [117, 131, 132, 133, 195, 196, 197, 224, 225, 227, 228, 904, 905, 924, 941, 944, 949, 952, 968], "cach": [117, 118, 303, 321, 587, 598], "unexplor": 117, "known": 117, "repeatedli": [117, 122, 864, 873], "upload": 117, "artifact": 117, "parametr": 117, "strategi": 117, "statement": [117, 145], "plai": [117, 133], "helper": [117, 131], "verifi": [117, 123, 124, 130, 968, 974], "truth": [117, 353, 433, 436, 457, 460, 461, 464, 477, 480, 481, 484, 532, 535], "opt": [117, 119, 125, 130], "defer": [117, 118, 121, 122, 123, 124, 125], "suffic": [117, 120], "catch": [117, 587, 608], "systemat": 117, "safeguard": 117, "inabl": 117, "fact": [117, 131], "categor": [118, 124], "mutual": [118, 122], "constitut": [118, 128, 924, 945, 948, 953, 956], "venn": 118, "diagram": 118, "light": [118, 145], "wherea": [118, 121, 123, 124, 126, 133], "hand": [118, 145], "log_pr": [118, 122, 125], "array_arg": 118, "typic": 118, "whatsoev": [118, 122], "commonli": [118, 924, 945, 948, 953, 956], "outsid": [118, 124, 128, 130, 133, 800, 801, 804, 844, 847], "denomin": [118, 145, 587, 613, 623, 646, 651, 652, 882, 883, 886, 1003, 1004], "divis": [118, 353, 408, 411, 428, 431, 453, 456, 544, 547, 587, 613, 623, 646, 651, 652, 661, 663, 666, 668, 670, 681, 683, 1005, 1006, 1007], "deal": [118, 145], "concurr": [118, 122], "weight": [118, 122, 132, 133, 661, 663, 666, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 699, 708, 709, 711, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1001, 1002, 1005, 1007, 1008], "modif": 118, "decor": [118, 120, 122, 123, 124, 125], "group": [118, 122], "briefli": [118, 131], "cast": [118, 123, 266, 272, 275, 278, 800, 806, 809, 924, 941, 944, 949, 952, 968], "get_all_arrays_on_dev": 118, "nested_map": [118, 864], "index_nest": [118, 864], "implicit_backend": 119, "unless": [119, 124, 125, 145, 353, 523, 526, 587, 640], "__dict__": [119, 128, 130], "ivy_original_dict": [119, 128], "unmodifi": [119, 123], "moment": [119, 145, 661, 663, 666, 668, 670, 681, 683, 1005, 1006, 1007], "fallback": 119, "freedom": [119, 924, 945, 948, 953, 956], "recommend": [119, 353, 509, 512, 513, 516, 544, 547, 924, 933, 936], "achiev": [120, 131, 133], "wrapper": [120, 121, 122, 123, 125, 126, 130], "logic": [120, 121, 123, 124, 130, 303, 339, 353, 505, 508, 509, 512, 513, 516, 957, 958, 961, 963, 966, 968], "topic": [120, 130], "tf": [121, 123, 124, 125, 126, 128, 133, 145, 968], "_data": [121, 130], "organiz": [121, 122], "inherit": [121, 122, 130], "bear": [121, 122, 123], "mind": [121, 122], "necessarili": [121, 122], "although": [121, 122], "underpin": [121, 122, 128], "programmat": [121, 122], "backup": [121, 122], "accident": [121, 122], "readabl": [121, 122, 126, 130, 131], "absent": [121, 122], "perk": [121, 122], "auto": [121, 122, 131], "throw": [121, 130], "imposs": 121, "coupl": [121, 122, 130, 132], "anywai": 121, "secondli": [121, 123], "easier": 121, "five": [122, 131], "decis": [122, 128, 130], "displai": [122, 131], "arbitrarili": [122, 131], "__repr__": 122, "control": [122, 123, 125, 130, 131, 144], "__getattr__": 122, "underli": [122, 353, 392, 395, 404, 407, 412, 415, 517, 520], "__setattr__": 122, "__contains__": 122, "__getstate__": 122, "__setstate__": 122, "unpickl": 122, "expand": [122, 587, 614, 800, 814, 817], "children": 122, "shallowest": 122, "deepest": 122, "67": [122, 353, 412, 415, 424, 427], "22": [122, 353, 412, 415, 712, 724, 726, 750, 752, 899, 903, 924, 925, 928], "retain_grad": [122, 661, 672], "dy": [122, 661, 672], "dx": [122, 661, 672], "technic": [122, 125, 126, 145], "autograd": [122, 145], "grad": [122, 131, 132, 133, 968, 1005, 1009], "redund": 122, "num_head": [122, 699, 710, 989, 1000], "mask": [122, 699, 710, 711], "to_q_fn": [122, 699, 710], "to_kv_fn": [122, 699, 710], "to_out_fn": [122, 125, 699, 710], "to_q_v": [122, 699, 710], "to_kv_v": [122, 699, 710], "to_out_v": [122, 699, 710], "measur": [122, 699, 710, 989, 1000], "dot": [122, 699, 710, 711, 712, 769, 771, 775, 777, 989, 1000], "product": [122, 353, 523, 526, 587, 605, 699, 710, 711, 712, 718, 720, 736, 739, 750, 752, 769, 771, 775, 777, 924, 925, 928, 941, 944, 989, 1000], "implicitli": 122, "intuit": [122, 131, 132], "debug": [122, 131], "chronolog": 122, "had": [122, 125], "sequenti": [122, 132], "flow": [122, 144], "implic": 122, "slightli": [122, 128, 132], "eager": [122, 145], "int8": [123, 266, 287], "int16": [123, 266, 275, 278, 287, 924, 941, 944, 949, 952], "uint8": [123, 266, 275, 278, 287], "uint16": [123, 266, 288, 924, 941, 944, 949, 952], "uint32": [123, 266, 288, 924, 941, 944, 949, 952], "uint64": [123, 266, 288, 924, 941, 944, 949, 952], "bfloat16": [123, 266, 287], "float16": [123, 266, 288], "all_dtyp": 123, "all_numeric_dtyp": 123, "all_int_dtyp": 123, "all_float_dtyp": 123, "fall": [123, 127, 968, 1001, 1002, 1005, 1009], "valid": [123, 128, 266, 280, 699, 700, 701, 702, 703, 704, 705, 706, 800, 844, 847, 957, 958, 961, 963, 966, 989, 990, 991, 992, 993, 994, 995, 996], "invalid": [123, 712, 775, 777, 957, 958, 961, 963, 966], "thirdli": 123, "native_float32": 123, "importantli": [123, 130, 133, 144], "varieti": [123, 124], "conveni": [123, 124, 126, 129, 131, 132], "arguabl": [123, 124], "compound": 123, "overflow": [123, 353, 367, 370, 924, 949, 952], "arr": [123, 124, 882, 883, 886], "scalar": [123, 128, 133, 145, 195, 219, 222, 587, 640, 657, 660, 712, 778, 780], "settabl": [123, 124], "jnp": [123, 124, 125, 126, 133, 968], "jaxarrai": [123, 124, 125, 126], "mx": [123, 124, 125, 968], "nd": [123, 124, 125, 128, 133, 968], "deleg": 123, "as_n": [123, 266, 281, 282, 283, 284, 303, 322, 323, 344], "idx": [124, 130, 587, 593], "tpu": [124, 303, 325, 350], "aliv": [124, 303, 337, 341, 343, 587, 621, 639, 641], "amount": [124, 303, 349, 784, 785, 788, 790, 793, 795, 798], "memori": [124, 125, 143, 145, 303, 321, 342, 347, 349, 352, 699, 709, 968], "dual": 124, "thrown": [124, 145, 587, 631], "rare": [124, 145], "program": 125, "strictli": 125, "ration": 125, "speak": 125, "subtli": 125, "ensure_in_backend": [125, 587, 631], "x_nativ": 125, "val_n": 125, "is_ivy_arrai": [125, 130, 587], "assign": [125, 130], "elif": 125, "irrespect": [125, 130, 266, 272], "inclus": [125, 195, 196, 197, 887, 889, 890], "omit": [125, 126, 904, 905, 906, 910, 912], "unspecifi": [125, 353, 540, 543, 544, 547, 712, 727, 729, 800, 844, 847], "predominantli": [125, 144], "math": [125, 133, 968], "presenc": 125, "altern": [125, 131], "_wrap_fn": 125, "maxim": [125, 128], "inner": [125, 130, 712, 727, 729, 736, 739, 860, 861, 862, 863], "third": [125, 145, 712, 763, 765, 904, 905], "addition": [125, 126], "leverag": 125, "equival": [125, 131, 133, 195, 196, 197, 353, 408, 411, 509, 512, 513, 516, 544, 547, 712, 744, 746, 753, 755, 760, 762, 778, 780], "input_arrai": 125, "adress": 126, "revisit": [126, 133], "dedic": [126, 130, 132, 661, 697, 978, 979], "__div__": 126, "dicat": 126, "futher": 126, "absenc": 126, "pep": 126, "484": 126, "annot": 126, "brittl": 126, "intend": [126, 924, 949, 952], "freeli": 126, "inde": [126, 145], "flexibl": 126, "original_typ": 126, "cumbersom": 126, "sound": 127, "higher": [127, 128, 133, 145, 661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691], "overview": [127, 144], "handler": [127, 129, 133, 968], "fledg": [128, 129], "syntact": [128, 133], "clip_by_valu": [128, 133], "clamp": [128, 133], "behavior": [128, 145, 353, 540, 543, 544, 547, 904, 905, 906, 910, 912], "fit": [128, 800, 826, 829], "construct": [128, 129, 132, 133, 800, 852, 855, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "power_seq": 128, "okai": 128, "bound": 128, "resid": [128, 132], "edg": [128, 133, 800, 801, 804, 810, 813, 856, 859, 968], "larger": [128, 133, 266, 286, 800, 801, 804, 834, 837, 924, 945, 948, 953, 956], "ml_framework": [128, 133, 195, 196, 197], "current_framework": [128, 133], "furthermor": 128, "concaten": [128, 131, 303, 332, 587, 614, 800, 806, 809, 968], "framework_handl": 128, "face": 128, "verbos": [128, 968, 1015], "cprint": [128, 1014], "framework_stack": 128, "_determine_framework_from_arg": 128, "valueerror": [128, 800, 840, 843], "get_framework": 128, "neither": [128, 353, 367, 370, 523, 526], "illustr": [128, 144], "un": [128, 266, 290], "nn": [128, 133, 195, 230, 233, 968], "init_h": [128, 699, 709], "init_c": [128, 699, 709], "kernel": [128, 145, 699, 709], "recurrent_kernel": [128, 699, 709], "bia": [128, 132, 699, 708, 709, 989, 990, 991, 992, 993, 994, 995, 996, 999], "recurrent_bia": [128, 699, 709], "x_shape": 128, "batch_shap": [128, 130, 133, 587, 640, 699, 709, 710, 711, 712, 781, 783, 887, 888, 989, 998], "timestep": [128, 699, 709, 989, 998], "input_channel": [128, 132, 989, 990, 991, 992, 993, 994, 995, 998, 999], "x_flat": 128, "wi": 128, "wi_x": 128, "wii_x": 128, "wif_x": 128, "wig_x": 128, "wio_x": 128, "recurr": [128, 699, 709], "wh": 128, "lstm": [128, 699, 709, 989], "ht": 128, "ct": 128, "hts_list": 128, "unrol": [128, 131, 699, 709], "wii_xt": 128, "wif_xt": 128, "wig_xt": 128, "wio_xt": 128, "zip": 128, "htm1": 128, "ctm1": 128, "wh_htm1": 128, "whi_htm1": 128, "whf_htm1": 128, "whg_htm1": 128, "who_htm1": 128, "ft": 128, "gt": 128, "ot": 128, "offici": 128, "reliabl": 128, "sacrific": 128, "hear": 128, "virtu": 128, "pure_ivi": 128, "reduce_mean": [128, 131, 132, 133, 968], "reduce_sum": [128, 968], "reduce_var": 128, "compile_graph": [128, 133], "pure_torch": 128, "cat": [128, 133], "backbon": [128, 131], "_layer": 128, "super": [128, 131, 132, 133], "clean": [128, 129, 131], "random_unifrom": 128, "unclean": 128, "wx": 128, "temp": 128, "torchscript": 128, "fn": [128, 130, 146, 147, 148, 149, 150, 151, 152, 153, 154, 266, 287, 288, 303, 312, 313, 587, 593, 658, 864, 865, 870, 871, 872, 874, 875, 876, 971, 973], "example_input": [128, 192, 193], "static_argnum": [128, 192, 193], "static_argnam": [128, 192, 193], "jit": [128, 145], "frontend": 129, "primit": [129, 145], "hierarch": [129, 131, 132], "straight": [130, 968], "arraywithlinalg": 130, "arraywithlog": 130, "arraywithmath": 130, "arraywithmeta": 130, "arraywithreduct": 130, "is_native_arrai": [130, 587], "_shape": 130, "_size": 130, "functool": 130, "mul": 130, "len": [130, 133, 195, 230, 233], "_dtype": 130, "_devic": 130, "_dev_str": 130, "_pre_repr": 130, "_post_repr": 130, "ndim": [130, 712, 756, 758, 763, 765], "mt": 130, "answer": [130, 145], "consol": 130, "typeerror": 130, "immut": 130, "behav": 130, "claim": 130, "truli": 130, "_native_wrapp": 130, "attributeerror": 130, "genuin": 130, "some_method": 130, "similarli": [130, 195, 230, 233], "rewritten": 130, "__pow__": 130, "strang": 130, "power": [130, 131, 132, 353, 408, 411, 441, 444, 540, 543, 587, 622, 645, 652, 712, 743, 980], "enforc": 130, "notic": 130, "appear": [130, 800, 814, 817], "invers": [130, 144, 353, 359, 362, 363, 366, 372, 375, 376, 379, 380, 383, 384, 387, 388, 391, 712, 733, 735, 753, 755], "_wrap_method": 130, "func_wrapp": [130, 146, 147, 148, 149, 150, 151, 152, 153, 154], "__name__": 130, "non_wrapped_method": 130, "_method_wrap": 130, "native_arg": 130, "native_kwarg": 130, "inner_fn": 130, "whist": 130, "unwrap": 130, "transit": 130, "needlessli": 130, "randn": 130, "_unwrap_method": 130, "method_wrap": 130, "compartment": 130, "public": [130, 587, 603], "newshap": 130, "new_shap": 130, "tidi": 130, "shorter": 130, "crystal": 130, "enough": [130, 131, 132], "ton": 131, "ado": [131, 132], "incred": [131, 145], "hash": 131, "soup": 131, "walk": [131, 132], "dct": 131, "cnt": 131, "combo": [131, 968, 974], "hold": [131, 587, 643, 644], "1000": [131, 353, 564, 567], "uda": 131, "3333": 131, "6667": 131, "178": 131, "new_weight": 131, "0600": 131, "3100": 131, "2400": 131, "6900": 131, "delimit": 131, "autocomplet": 131, "midwai": 131, "agent": 131, "total_spe": 131, "total_height": 131, "total_width": 131, "ag": 131, "tot": 131, "total_": 131, "total_h": 131, "batch_siz": [131, 699, 700, 701, 702, 703, 704, 705, 706, 887, 888], "dir": 131, "adam": [131, 132, 133, 661, 663, 666, 668, 670, 681, 683, 968, 1005, 1007], "cnt0": 131, "cnt1": 131, "diff_0": 131, "diff_1": 131, "config0": 131, "config1": 131, "Not": [131, 132, 145, 194], "decod": 131, "l0": 131, "l1": [131, 712, 778, 780], "depth": [131, 132, 133, 144, 303, 327, 331, 335, 587, 625, 640, 864, 876, 1001, 1002], "clearer": 131, "truncat": 131, "decoder__l0": 131, "decoder__l1": 131, "encoder__l0": 131, "encoder__l1": 131, "height": 131, "l0__b": 131, "l0__w": 131, "l1__b": 131, "l1__w": 131, "printabl": 131, "obviou": 131, "foresight": 131, "untidili": 131, "update_ag": 131, "normalize_img": 131, "img": 131, "img_max": 131, "reduce_max": [131, 968], "img_min": 131, "reduce_min": [131, 968], "img_rang": 131, "agent_posit": 131, "agent_veloc": 131, "agent_cam_front_rgb": 131, "agent_cam_front_depth": 131, "agent_cam_rear_rgb": 131, "agent_cam_rear_depth": 131, "agent_cam_lidar": 131, "normal": [131, 800, 844, 847, 882, 883, 886, 887, 892, 1003, 1004], "cleaner": 131, "camera": 131, "front_rgb": 131, "front_depth": 131, "rear_rgb": 131, "rear_depth": 131, "lidar": 131, "rgb": 131, "rear": 131, "veloc": 131, "cam": 131, "cam_max": 131, "cam_min": 131, "cam_rang": 131, "Of": 131, "ideal": 131, "perman": 131, "afterward": 131, "thread": 131, "incorpor": 131, "pretti": 131, "straightforward": 131, "dataload": [131, 143, 968], "_cnt": 131, "img_": 131, "_dataset_s": 131, "_batch_siz": 131, "_count": [131, 132], "__next__": 131, "filenam": 131, "img_fnam": 131, "fname": 131, "loaded_img": 131, "cv2": 131, "imread": 131, "loader": [131, 145], "batch_slic": 131, "model": [131, 132, 968], "mymodel": [131, 968], "linear0": [131, 132, 968], "linear1": [131, 132, 968], "x_in": [131, 132, 133, 968], "001": [131, 132, 661, 663, 666, 882, 883, 886], "loss_fn": [131, 132, 133, 968], "0145": 131, "grad_fn": 131, "addbackward0": 131, "_create_vari": 132, "output_channel": [132, 989, 990, 991, 992, 993, 994, 995, 998, 999], "with_bia": [132, 989, 999], "_input_channel": 132, "_output_channel": 132, "_w_shape": 132, "_b_shape": 132, "_with_bia": 132, "8979": 132, "3198": 132, "0196": 132, "3126": 132, "3717": 132, "9687": 132, "6958": 132, "5122": 132, "3902": 132, "8800": 132, "5613": 132, "1982": 132, "nightmar": 132, "overcom": 132, "fc": 132, "9563": 132, "impact": 132, "v0": 132, "v1": 132, "6440": 132, "key0": 132, "1823": 132, "8075": 132, "linear3": 132, "v2": 132, "2346": 132, "counter": 132, "hidden": [132, 699, 709, 989, 998], "fed": [132, 303, 347], "1300": 132, "decoupl": 132, "scheme": 132, "weight_initi": [132, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999], "glorotuniform": [132, 980, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999], "bias_initi": [132, 989, 990, 991, 992, 993, 994, 995, 996, 999], "_w_init": 132, "_b_init": 132, "create_vari": [132, 980], "var_shap": [132, 980], "fan_out": [132, 980], "fan_in": [132, 980], "fan_mod": [132, 980], "fan_sum": 132, "slight": 132, "misnom": 132, "saw": 132, "vanilla": [132, 860, 862], "descent": [132, 661, 673, 675, 1005, 1010], "lar": [132, 661, 681, 683, 685, 687, 1005], "lamb": [132, 661, 681, 683, 1005], "compile_on_next_step": [132, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010], "_beta1": 132, "_beta2": 132, "_epsilon": 132, "_mw": 132, "_vw": 132, "_first_pass": 132, "_should_compil": 132, "_step": [132, 1005, 1009], "new_v": 132, "_lr": 132, "isinst": [132, 133, 587, 655], "_inplac": 132, "_stop_gradi": 132, "set_stat": [132, 1005, 1006, 1007, 1008, 1009, 1010], "pre": [133, 145, 303], "captur": 133, "sparse_funct": 133, "num_class": [133, 887, 888], "num_dim": 133, "new_axi": 133, "_linear": 133, "to_backend": 133, "jax_graph": 133, "learnabl": [133, 882, 883, 886, 1003, 1004], "to_ivy_modul": [133, 978], "thinli": 133, "whilst": 133, "to_haiku_modul": 133, "hk": 133, "loss_fn_t": 133, "transform": [133, 144, 699, 707, 708], "without_apply_rng": 133, "rng": 133, "prngkei": 133, "init": 133, "update_rul": 133, "01": [133, 353, 548, 551], "tree_multimap": 133, "mechan": [143, 145, 968], "vision": [143, 968], "robot": [143, 968], "focus": 144, "field": [144, 712, 727, 729, 756, 758, 763, 765, 904, 905, 906, 910], "perfect": 144, "3d": [144, 989, 994, 995], "differenti": 144, "demo": [144, 968], "orient": 144, "pose": 144, "euler": [144, 194], "quaternion": 144, "rotat": 144, "matric": [144, 195, 230, 233, 248, 252, 253, 257, 699, 708, 712, 713, 716, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 743, 744, 746, 747, 749, 753, 755, 756, 758, 760, 762, 763, 765, 766, 768, 772, 774], "angl": [144, 353, 384, 387, 424, 427, 560, 563, 582], "ivy_mech": 144, "target_facing_rotation_matrix": 144, "polar_to_cartesian_coord": 144, "ordin": [144, 712, 760, 762], "warp": 144, "optic": 144, "voxel": 144, "ivy_vis": 144, "coords_to_voxel_grid": 144, "render_pixel_coord": 144, "neural": [144, 699, 968, 975, 989], "radianc": 144, "nerf": 144, "trajectori": 144, "motion": 144, "plan": [144, 968], "mobil": 144, "ivy_robot": 144, "sample_spline_path": 144, "rigidmobil": 144, "sample_bodi": 144, "drone": 144, "sample_link": 144, "openai": 144, "swimmer": 144, "cumul": [144, 587, 605, 606], "reward": 144, "supervis": 144, "reinforc": 144, "door": [144, 145], "intersect": 144, "cartpol": 144, "mountain_car": 144, "pendulum": 144, "reacher": 144, "polici": 144, "condit": [144, 192, 193, 864, 874, 875, 899, 903], "learnt": 144, "ture": 144, "ntm": 144, "egospher": 144, "spatial": 144, "esm": 144, "ivy_memori": 144, "egocentr": 144, "room": 144, "inspir": 144, "doubt": 145, "grate": 145, "put": 145, "probe": 145, "undergo": 145, "remark": 145, "surpris": 145, "backward": [145, 353, 544, 547, 712, 775, 777, 957, 958, 961, 963, 966], "lock": 145, "contunu": 145, "minor": 145, "xla": 145, "buffer": 145, "kind": [145, 266, 286, 289, 353, 540, 543, 924, 941, 944, 949, 952], "gold": 145, "dex": 145, "phase": 145, "lax": 145, "scan": 145, "tricki": 145, "predictor": 145, "tight": 145, "driver": 145, "schedul": 145, "algorithm": [145, 699, 700, 701, 702, 703, 704, 705, 706, 989, 990, 991, 992, 993, 994, 995, 996], "dispatch": 145, "Will": 145, "ast": 145, "dynamic": 145, "cond": 145, "jacobian": 145, "checkpoint": 145, "autodiff": 145, "shine": 145, "merci": 145, "superset": 145, "cluster": 145, "compet": 145, "paradigm": 145, "parallelis": [145, 303, 312, 313], "spmd": 145, "mixtur": [145, 661, 663, 666], "expert": 145, "sophist": 145, "depart": 145, "routin": 145, "hundr": 145, "thousand": 145, "deepli": [145, 864, 866], "broadli": 145, "heavili": 145, "supplementari": 145, "Is": 145, "reusabl": 145, "fanci": 145, "fusion": 145, "lose": 145, "vmap": 145, "pmap": 145, "overhead": 145, "ineffici": 145, "eventu": 145, "supplement": 145, "backdoor": 145, "callback": 145, "record": 145, "metric": 145, "somewhat": 145, "outsourc": 145, "inputs_to_ivy_arrai": 146, "gaussian": [156, 157, 160], "leaki": [156, 157, 160, 162, 165], "rectifi": [156, 162, 165, 167, 170], "slope": [156, 162, 165], "48": [156, 162, 165, 353, 564, 567, 661, 663, 666, 712, 750, 752, 924, 925, 928], "88": [156, 162, 165, 353, 412, 415, 712, 750, 752, 924, 925, 928], "214": [156, 172, 175], "978": [156, 172, 175], "891": [156, 172, 175], "0768": [156, 177, 180], "231": [156, 177, 180], "693": [156, 177, 180, 784, 795, 798], "49": [156, 177, 180, 353, 564, 567, 924, 925, 928], "147": [156, 177, 180], "363": [156, 177, 180], "hyperbol": [156, 187, 191, 353, 363, 366, 376, 379, 388, 391, 424, 427, 560, 563, 582], "array_method": [157, 158, 162, 163, 167, 168, 172, 173, 177, 178, 182, 183, 187, 189, 199, 200, 205, 206, 213, 214, 219, 220, 230, 231, 235, 236, 243, 244, 248, 250, 253, 255, 261, 263, 275, 276, 354, 355, 359, 360, 363, 364, 367, 368, 372, 373, 376, 377, 380, 381, 384, 385, 388, 389, 392, 393, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 433, 434, 437, 438, 441, 442, 445, 446, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 505, 506, 509, 510, 513, 514, 517, 518, 523, 524, 528, 529, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 574, 577, 579, 583, 584, 588, 589, 616, 617, 663, 664, 713, 714, 718, 719, 721, 722, 724, 725, 727, 728, 730, 731, 733, 734, 736, 737, 740, 741, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 760, 761, 763, 764, 766, 767, 769, 770, 772, 773, 775, 776, 778, 779, 781, 782, 785, 786, 790, 791, 795, 796, 801, 802, 806, 807, 810, 811, 814, 815, 818, 819, 822, 823, 826, 827, 830, 831, 834, 835, 840, 841, 844, 845, 848, 849, 852, 853, 856, 857, 883, 884, 906, 908, 914, 915, 919, 920, 925, 926, 929, 930, 933, 934, 937, 938, 941, 942, 945, 946, 949, 950, 953, 954, 958, 959, 963, 964], "container_method": [157, 159, 161, 162, 164, 166, 167, 169, 171, 172, 174, 176, 177, 179, 181, 182, 184, 186, 187, 188, 190, 196, 198, 199, 201, 203, 205, 207, 209, 210, 212, 213, 215, 217, 219, 221, 223, 224, 226, 227, 229, 230, 232, 234, 235, 237, 239, 240, 242, 243, 245, 247, 248, 249, 251, 253, 254, 256, 258, 259, 261, 262, 264, 275, 277, 279, 354, 356, 358, 359, 361, 363, 365, 367, 369, 371, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 523, 525, 527, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 578, 580, 583, 585, 588, 590, 592, 600, 601, 616, 618, 620, 663, 665, 667, 668, 669, 671, 673, 674, 676, 677, 678, 680, 681, 682, 684, 685, 686, 688, 689, 690, 692, 713, 715, 717, 736, 738, 785, 787, 789, 790, 792, 794, 795, 797, 799, 801, 803, 805, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 883, 885, 889, 891, 893, 894, 896, 906, 907, 909, 914, 916, 918, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 958, 960, 962, 963, 965, 967], "faster": [192, 193], "invoc": [192, 193], "718281828459045": 194, "newaxi": 194, "alia": 194, "pi": 194, "141592653589793": 194, "mathemat": [194, 353, 367, 370, 384, 387, 445, 448, 523, 526, 712, 778, 780], "half": [195, 196, 197, 887, 889, 890, 893, 895], "chosen": [195, 196, 197, 353, 384, 387, 899, 903], "distanc": [195, 196, 197], "adjac": [195, 196, 197], "creation_funct": [195, 196, 197, 199, 202, 204, 205, 208, 210, 211, 213, 216, 218, 219, 222, 224, 225, 240, 241, 243, 246, 248, 252, 253, 257, 258, 260, 261, 265], "interpret": [195, 199, 202, 235, 238], "uniniti": [195, 204, 205, 208], "elsewher": [195, 210, 211, 899, 903], "row": [195, 210, 211, 712, 760, 762, 763, 765, 887, 888, 899, 902], "column": [195, 210, 211, 712, 727, 729, 756, 758, 760, 762, 763, 765], "__dlpack__": [195, 213, 216, 303, 348], "interchang": [195, 213, 216, 800, 848, 851], "coordin": [195, 230, 233, 353, 384, 387], "cartesian": [195, 230, 233], "ij": [195, 230, 233, 924, 925, 928], "rank": [195, 230, 233, 587, 659, 712, 718, 720, 744, 746, 756, 758, 760, 762, 772, 774, 775, 777, 778, 780, 800, 810, 813, 814, 817, 844, 847, 856, 859, 899, 902, 957, 958, 961, 963, 966], "ni": [195, 230, 233], "xi": [195, 230, 233], "n1": [195, 230, 233], "n2": [195, 230, 233], "n3": [195, 230, 233], "accordingli": [195, 230, 233, 353, 445, 448, 712, 778, 780, 899, 901, 904, 905, 906, 910, 912, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966], "xv": [195, 230, 233], "yv": [195, 230, 233], "triangular": [195, 248, 252, 253, 257, 712, 713, 716, 756, 758], "innermost": [195, 248, 252, 253, 257, 712, 713, 716, 721, 723, 724, 726, 727, 729, 730, 732, 733, 735, 744, 746, 747, 749, 753, 755, 756, 758, 760, 762, 763, 765, 766, 768, 772, 774], "mxn": [195, 248, 252, 253, 257, 712, 724, 726, 744, 746, 747, 749, 753, 755, 756, 758, 766, 768, 772, 774], "defaultdtyp": [266, 267], "defaultfloatdtyp": [266, 268], "float_dtyp": [266, 282, 296], "defaultintdtyp": [266, 269], "dtype_in": [266, 270, 271, 285, 290, 291, 292, 302], "incompat": [266, 274], "occur": [266, 275, 278, 899, 900, 901, 904, 905, 906, 910, 912], "data_type_funct": [266, 275, 278], "closest": [266, 280, 353, 416, 419, 449, 452, 453, 456, 548, 551, 583, 586], "floatdtyp": [266, 282], "int_dtyp": [266, 283, 297], "intdtyp": [266, 283], "followng": [266, 286], "occupi": [266, 286, 289, 587, 643, 644], "ep": [266, 286, 712, 744, 746, 753, 755], "smallest_norm": [266, 286], "precis": [266, 286, 353, 523, 526, 564, 567], "encapsul": [266, 289], "type1": [266, 293], "type2": [266, 293], "arrays_and_dtyp": [266, 294], "ret1": [266, 298], "ret2": [266, 298], "noinspect": [267, 268, 269, 304, 662], "pyshadowingnam": [267, 268, 269, 304, 662], "defaultdevic": [303, 304], "__enter__": 303, "_dev": 303, "initialis": 303, "devcloneditem": [303, 325], "multidevitem": [303, 305, 308], "devclonedit": 303, "multidevit": [303, 306, 309, 312, 313, 317], "devclonednest": 303, "multidevnest": [303, 307, 310], "devdistitem": 303, "devdistit": 303, "devdistnest": 303, "devmanag": [303, 311], "dev_mapp": 303, "da_dim_s": 303, "safety_factor": 303, "min_dev_dim_s": 303, "max_dev_dim_step_ratio": 303, "min_unit_dev_tune_step": 303, "min_sf_tune_step": 303, "starting_split_factor": 303, "max_split_factor_step_s": 303, "tune_dev_alloc": 303, "tune_dev_split": 303, "mapper": [303, 312, 313], "receivess": 303, "ratio": [303, 661, 681, 683, 1005, 1007], "safe": [303, 312], "oom": 303, "tune": 303, "da_tune_step": 303, "ds_tune_step": 303, "to_clon": 303, "to_distribut": 303, "multidevic": [303, 312], "parallel": [303, 312, 313], "mutlidevic": [303, 312], "repeated_config_check": 303, "tune_step": 303, "devmapp": [303, 313], "ret_fn": [303, 312, 313], "queue_class": [303, 312, 313], "worker_class": [303, 312, 313], "worker": [303, 312, 313], "used_dev": [303, 312], "sf": [303, 312], "devmappermultiproc": 303, "multidev": [303, 314, 315, 316, 335], "profil": 303, "save_dir": [303, 318], "deviceic": [303, 324], "spread": [303, 335], "139740789224448": [303, 337], "physic": [303, 339], "x3": [303, 341], "x4": [303, 341], "process_specif": [303, 342, 352], "percentag": [303, 342], "ram": [303, 342, 349, 352], "alon": [303, 342, 352], "attr_onli": [303, 343], "chunk": [303, 345, 346, 347], "max_chunk_s": [303, 347], "chunk_siz": [303, 347], "input_ax": [303, 347], "output_ax": [303, 347], "feed": [303, 347], "fist": [303, 347], "stream": [303, 348], "caveat": [303, 348], "portabl": [303, 348, 968], "gb": [303, 349, 352], "reset": [303, 351], "magnitud": [353, 354, 357, 367, 370, 523, 526, 712, 763, 765, 766, 768], "princip": [353, 359, 362, 372, 375, 380, 383], "cosin": [353, 359, 362, 363, 366, 420, 423, 424, 427], "x1_i": [353, 367, 370, 384, 387, 392, 395, 400, 403, 404, 407, 408, 411, 412, 415, 428, 431, 433, 436, 453, 456, 457, 460, 461, 464, 477, 480, 481, 484, 501, 504, 505, 508, 513, 516, 517, 520, 523, 526, 532, 535, 540, 543, 544, 547, 572, 576], "x2_i": [353, 367, 370, 384, 387, 392, 395, 400, 403, 404, 407, 408, 411, 412, 415, 428, 431, 433, 436, 453, 456, 457, 460, 461, 464, 477, 480, 481, 484, 501, 504, 505, 508, 513, 516, 517, 520, 523, 526, 532, 535, 540, 543, 544, 547, 572, 576], "finit": [353, 367, 370, 384, 387, 465, 468, 523, 526, 540, 543, 544, 547], "nor": [353, 367, 370, 523, 526], "nearest": [353, 367, 370, 523, 526, 548, 551], "2019": [353, 367, 370, 445, 448, 523, 526], "commut": [353, 367, 370], "sine": [353, 372, 375, 376, 379, 556, 559, 560, 563], "57": [353, 372, 375, 412, 415, 424, 427], "524": [353, 372, 375], "644": [353, 372, 375], "201": [353, 372, 375, 548, 551], "305": [353, 372, 375], "412": [353, 372, 375], "quotient": [353, 384, 387], "notat": [353, 384, 387, 924, 925, 928], "denot": [353, 384, 387], "pair": [353, 384, 387, 699, 711, 712, 718, 720], "quadrant": [353, 384, 387], "3\u03c0": [353, 384, 387], "549": [353, 388, 391], "bitwis": [353, 392, 395, 404, 407, 412, 415, 517, 520], "AND": [353, 392, 395, 505, 508, 957, 958, 961], "binari": [353, 392, 395, 404, 407, 412, 415, 517, 520, 784, 785, 788], "invert": [353, 396, 399], "arithmet": [353, 408, 411, 924, 933, 936], "propag": [353, 408, 411, 924, 929, 932, 933, 936, 937, 940, 945, 948, 949, 952, 953, 956], "thu": [353, 408, 411, 540, 543, 544, 547, 712, 727, 729], "lh": [353, 408, 411], "rh": [353, 408, 411], "xor": [353, 412, 415, 517, 520], "78": [353, 412, 415, 712, 750, 752, 924, 925, 928], "91": [353, 412, 415, 712, 750, 752, 924, 925, 928], "23": [353, 412, 415, 699, 705, 712, 724, 726, 899, 903], "66": [353, 412, 415, 712, 750, 752, 924, 925, 928], "77": [353, 412, 415, 712, 750, 752, 924, 925, 928], "79": [353, 412, 415], "89": [353, 412, 415, 712, 769, 771, 924, 949, 952], "98": [353, 412, 415, 712, 750, 752, 899, 903, 924, 925, 928], "26": [353, 412, 415, 661, 663, 666, 699, 706, 712, 724, 726, 750, 752, 769, 771, 924, 925, 928], "21": [353, 412, 415, 587, 605, 712, 724, 726, 750, 752, 784, 795, 798, 924, 925, 928], "34": [353, 412, 415, 564, 567], "24": [353, 412, 415, 564, 567, 587, 605, 661, 663, 666, 712, 724, 726, 750, 752, 924, 925, 928], "51": [353, 412, 415], "27": [353, 412, 415, 424, 427, 564, 567, 699, 711, 712, 750, 752, 924, 925, 928], "74": [353, 412, 415], "59": [353, 412, 415], "416": [353, 420, 423], "122": [353, 424, 427], "368": [353, 424, 427], "670": [353, 424, 427], "202": [353, 424, 427, 548, 551], "548": [353, 424, 427], "1490": [353, 424, 427], "dividend": [353, 428, 431, 544, 547], "divisor": [353, 428, 431, 544, 547, 661, 663, 666, 668, 670, 681, 683, 924, 945, 948, 953, 956, 1005, 1006, 1007], "gauss": [353, 437, 440], "exponenti": [353, 437, 440, 441, 444, 501, 504, 540, 543], "logarithm": [353, 441, 444, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 712, 759], "72": [353, 441, 444, 661, 663, 666, 712, 750, 752, 924, 925, 928], "accur": [353, 445, 448], "fdlibm": [353, 445, 448], "compliant": [353, 445, 448, 509, 512, 513, 516, 924, 929, 932, 933, 936, 937, 940], "greatest": [353, 449, 452, 453, 456], "out_i": [353, 465, 468, 469, 472, 473, 476], "threshold": [353, 521, 522], "exce": [353, 522], "y_i": [353, 528, 531], "expon": [353, 540, 543, 587, 652], "versu": [353, 540, 543], "odd": [353, 540, 543], "modulu": [353, 544, 547], "primarili": [353, 544, 547], "5654": [353, 548, 551], "034": [353, 548, 551], "433": [353, 548, 551], "343": [353, 548, 551], "44": [353, 548, 551, 564, 567, 568, 571, 712, 750, 752, 899, 903, 924, 925, 928], "30": [353, 548, 551, 712, 750, 752, 924, 925, 928, 980, 986], "81": [353, 548, 551, 568, 571, 924, 925, 928], "527": [353, 548, 551], "301": [353, 548, 551], "indistinguish": [353, 564, 567], "infinit": [353, 564, 567], "83": [353, 564, 567], "32455532": [353, 564, 567], "89897949": [353, 564, 567], "50": [353, 564, 567, 712, 750, 752, 899, 902, 924, 925, 928], "31": [353, 564, 567], "169": [353, 564, 567], "47": [353, 564, 567], "93": [353, 564, 567], "35": [353, 564, 567, 699, 711, 712, 718, 720, 899, 903, 924, 925, 928], "09": [353, 568, 571, 699, 711], "61": [353, 568, 571, 784, 785, 788], "546": [353, 577, 581], "842": [353, 577, 581], "916": [353, 577, 581, 784, 785, 788], "996": [353, 577, 581], "328": [353, 577, 581], "real": [353, 582], "462": [353, 582], "604": [353, 582], "984": [353, 582], "997": [353, 582, 882, 883, 886], "decim": [353, 583, 586], "inspect": [587, 593, 972, 973], "downscal": [587, 599, 600, 602], "60": [587, 605, 712, 750, 752, 924, 925, 928], "default_v": [587, 608], "catch_except": [587, 608], "rev": [587, 608], "with_cal": [587, 608], "arrang": [587, 609], "123": [587, 612], "mod": [587, 613], "max_freq": [587, 614], "num_band": [587, 614], "pad": [587, 614, 699, 700, 701, 702, 703, 704, 705, 706, 800, 810, 813, 856, 859, 989, 990, 991, 992, 993, 994, 995, 996], "fourier": [587, 614], "band": [587, 614], "linearli": [587, 614, 712, 760, 762], "oppos": [587, 614], "geometr": [587, 614], "seen_set": [587, 625], "local_set": [587, 625], "decrement": [587, 629], "is_arrai": 587, "allow_dupl": [587, 637], "forkserv": [587, 638], "spawn": [587, 638], "hot": [587, 640], "scatter": [587, 640, 643, 644], "overrid": [587, 640], "tmp_dr": [587, 648], "temporari": [587, 648], "min_denomin": [587, 651], "stabil": [587, 651, 652, 913, 914, 917, 919, 922], "_min_denomin": [587, 651], "min_bas": [587, 652], "_min_bas": [587, 652, 882, 883, 886, 1003, 1004], "100000023841858": [587, 655], "200000047683716": [587, 655], "299999952316284": [587, 655], "400000095367432": [587, 655], "599999904632568": [587, 655], "101": [587, 656], "unpack": [587, 659], "gradienttrack": [661, 662], "delta": [661, 663, 666], "cost": [661, 663, 666, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 860, 861, 862, 863], "ws": [661, 663, 666, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691], "en": [661, 663, 666, 668, 670], "wikipedia": [661, 663, 666, 668, 670], "wiki": [661, 663, 666, 668, 670], "stochastic_gradient_desc": [661, 663, 666, 668, 670], "dc": [661, 663, 666, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691], "dw": [661, 663, 666, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691], "averag": [661, 663, 666, 668, 670, 681, 683, 860, 861, 862], "forget": [661, 663, 666, 668, 670, 681, 683, 1005, 1006, 1007], "004": [661, 663, 666], "009": [661, 663, 666], "86": [661, 663, 666], "28": [661, 663, 666, 699, 702, 705, 706, 712, 750, 752, 924, 925, 928], "45": [661, 663, 666, 712, 750, 752, 800, 839, 882, 883, 886, 924, 925, 928], "0125": [661, 663, 666], "601": [661, 663, 666], "581": [661, 663, 666], "025": [661, 663, 666], "992": [661, 663, 666], "209": [661, 663, 666, 904, 905], "271": [661, 663, 666], "0717": [661, 663, 666], "142": [661, 663, 666], "182": [661, 663, 666], "624": [661, 663, 666, 887, 893, 895], "06": [661, 663, 666], "02": [661, 663, 666], "744": [661, 663, 666], "626": [661, 663, 666], "65": [661, 663, 666, 712, 750, 752, 924, 925, 928], "024": [661, 663, 666], "096": [661, 663, 666], "216": [661, 663, 666], "384": [661, 663, 666], "rate": [661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691, 860, 861, 862, 863, 989, 1000, 1005, 1006, 1007, 1008, 1009, 1010], "ws_new": [661, 668, 670, 673, 675, 681, 683, 685, 687, 689, 691], "retain": [661, 672], "trust": [661, 681, 683, 1005, 1007], "decai": [661, 681, 683, 685, 687, 1005, 1007, 1008], "layerwis": [661, 685, 687, 1005, 1008], "stride": [699, 700, 701, 702, 703, 704, 705, 706, 989, 990, 991, 992, 993, 994, 995, 996], "data_format": [699, 700, 701, 702, 703, 704, 705, 706, 989, 990, 991, 992, 993, 994, 995, 996], "nwc": [699, 700, 701, 989, 990, 991], "dilat": [699, 700, 701, 702, 703, 704, 705, 706, 989, 990, 991, 992, 993, 994, 995, 996], "convolut": [699, 700, 701, 702, 703, 704, 705, 706, 989, 990, 991, 992, 993, 994, 995, 996], "d_in": [699, 700, 701, 702, 703, 704, 705], "fw": [699, 700, 701, 702, 703, 704, 705, 706], "d_out": [699, 700, 701, 702, 703, 704, 705], "slide": [699, 700, 701, 702, 703, 704, 705, 706, 989, 990, 991, 992, 993, 994, 995, 996], "ncw": [699, 700, 701, 989, 990, 991], "wio": [699, 700], "output_shap": [699, 701, 703, 705, 989, 991, 993, 995], "nhwc": [699, 702, 703, 706, 989, 992, 993, 996], "fh": [699, 702, 703, 704, 705, 706], "nchw": [699, 702, 703, 706, 989, 992, 993, 996], "hwio": [699, 702], "unequ": [699, 702], "unsqueez": [699, 702, 706], "ndhwc": [699, 704, 705, 989, 994, 995], "volum": [699, 704], "fd": [699, 704, 705], "ncdhw": [699, 704, 705, 989, 994, 995], "dhwio": [699, 704], "256": [699, 705], "258": [699, 705], "128": [699, 705, 712, 750, 752], "depthwis": [699, 706, 989, 996], "333": [699, 706], "inp": [699, 706], "prob": [699, 707, 887, 888, 989, 997], "randomli": [699, 707, 989, 997], "bernoulli": [699, 707], "out_featur": [699, 707, 708], "incom": [699, 708], "outer_batch_shap": [699, 708], "inner_batch_shap": [699, 708], "in_featur": [699, 708], "cell": [699, 709, 989, 998], "num_queri": [699, 710, 711], "x_feat_dim": [699, 710], "num_kei": [699, 710, 711], "cont_feat_dim": [699, 710], "numhead": [699, 710], "feat_dim": [699, 710, 711], "out_feat_dim": [699, 710], "score": [699, 711], "04": [699, 711], "03": [699, 711, 882, 883, 886], "08": [699, 711], "decomposit": [712, 713, 716, 756, 758, 763, 765], "symmetr": [712, 713, 716, 727, 729, 730, 732, 781, 783], "u": [712, 713, 716, 763, 765], "vif": [712, 718, 720], "92": [712, 721, 723], "293": [712, 721, 723], "46997": [712, 721, 723], "eigendecomposit": [712, 727, 729], "qlq\u1d40": [712, 727, 729], "orthogon": [712, 727, 729], "eig": [712, 727, 729], "eigenvalu": [712, 727, 729, 730, 732], "eigenvector": [712, 727, 729], "75": [712, 733, 735, 750, 752], "prepend": [712, 736, 739], "singular": [712, 744, 746, 753, 755, 763, 765, 766, 768], "toler": [712, 744, 746, 753, 755], "largest_singular_valu": [712, 744, 746, 753, 755], "array_lik": [712, 750, 752], "33": [712, 750, 752, 882, 883, 886, 924, 925, 928], "36": [712, 750, 752, 924, 925, 928], "84": [712, 750, 752, 924, 925, 928], "105": [712, 750, 752, 784, 785, 788], "112": [712, 750, 752, 924, 925, 928], "104": [712, 750, 752, 924, 925, 928], "120": [712, 750, 752], "moor": [712, 753, 755], "penros": [712, 753, 755], "pseudo": [712, 753, 755], "orthonorm": [712, 756, 758, 763, 765], "2d": [712, 759, 989, 992, 993, 996], "logdet": [712, 759], "coeffici": [712, 760, 762], "usvh": [712, 763, 765], "vh": [712, 763, 765], "hermitian": [712, 763, 765], "et": [712, 763, 765], "cetera": [712, 763, 765], "adjoint": [712, 763, 765], "reconstruct": [712, 763, 765, 904, 905, 911], "reconstructed_x": [712, 763, 765], "contract": [712, 769, 771, 924, 925, 928], "doubl": [712, 769, 771], "singleton": [712, 778, 780, 800, 840, 843, 899, 901, 924, 929, 932, 933, 936, 937, 940, 941, 944, 945, 948, 949, 952, 953, 956, 957, 958, 961, 963, 966], "liter": [712, 778, 780], "manhattan": [712, 778, 780], "l2": [712, 778, 780], "euclidean": [712, 778, 780], "mathbf": [712, 781, 783], "mathbb": [712, 781, 783], "skew": [712, 781, 783], "entropi": [784, 785, 788, 790, 793, 795, 798], "predict": [784, 785, 788, 790, 793, 795, 798], "smooth": [784, 785, 788, 790, 793, 795, 798], "223": [784, 785, 788], "357": [784, 785, 788, 795, 798], "511": [784, 785, 788], "discret": [784, 790, 793], "3862944": [784, 790, 793], "35667497": [784, 790, 793], "spars": [784, 795, 798], "logit": [784, 795, 798], "793291": [784, 795, 798], "512926": [784, 795, 798], "before_1": [800, 810, 813, 856, 859], "after_1": [800, 810, 813, 856, 859], "before_n": [800, 810, 813, 856, 859], "after_n": [800, 810, 813, 856, 859], "insert": [800, 814, 817, 864, 869, 899, 900], "manipulation_funct": [800, 814, 817], "reorder": [800, 818, 821], "permut": [800, 822, 825, 848, 851], "repetit": [800, 826, 829, 852, 855], "restor": [800, 834, 837], "famili": [800, 844, 847], "intxx": [800, 844, 847], "floatxx": [800, 844, 847], "fomaml_step": 860, "inner_cost_fn": [860, 861, 862], "outer_cost_fn": [860, 861, 862], "inner_grad_step": [860, 861, 862, 863], "inner_learning_r": [860, 861, 862, 863], "inner_optimization_step": [860, 861, 862, 863], "inner_batch_fn": [860, 861, 862], "outer_batch_fn": [860, 861, 862], "average_across_step": [860, 861, 862], "inner_v": [860, 861, 862], "keep_inner_v": [860, 861, 862], "outer_v": [860, 861, 862], "keep_outer_v": [860, 861, 862], "return_inner_v": [860, 861, 862, 863], "num_task": [860, 861, 862, 863], "maml": [860, 861, 862], "recev": [860, 861, 862], "0x7f29a069de50": [860, 861, 862, 863], "maml_step": 860, "rece": [860, 862], "reptile_step": 860, "cost_fn": [860, 863], "reptil": [860, 863], "receivng": [860, 863], "all_nested_indic": 864, "include_nest": [864, 865], "_index": [864, 865, 875], "_base": [864, 865, 874, 875], "copy_nest": 864, "to_mut": [864, 866, 876], "mutabl": [864, 866, 876], "insert_into_nest_at_index": 864, "insert_into_nest_at_indic": 864, "map_nest_at_index": 864, "map_nest_at_indic": 864, "multi_index_nest": 864, "nested_ani": 864, "check_nest": [864, 874, 875], "conditon": [864, 874, 875], "nested_indices_wher": 864, "stop_after_n_found": [864, 875], "_depth": [864, 876], "_tuple_check_fn": [864, 876], "_list_check_fn": [864, 876], "_dict_check_fn": [864, 876], "nested_multi_map": 864, "nest0": [864, 877], "ivy_arrai": [864, 877], "funciton": [864, 877], "prune_nest_at_index": 864, "prune_nest_at_indic": 864, "set_nest_at_index": 864, "set_nest_at_indic": 864, "mini": [882, 883, 886, 1003, 1004], "gamma": [882, 883, 886], "beta": [882, 883, 886], "0976": [882, 883, 886], "3452": [882, 883, 886], "2740": [882, 883, 886], "1047": [882, 883, 886], "5886": [882, 883, 886], "2732": [882, 883, 886], "7696": [882, 883, 886], "7024": [882, 883, 886], "2518": [882, 883, 886], "58": [882, 883, 886, 904, 905], "283": [882, 883, 886], "585": [882, 883, 886], "909": [882, 883, 886], "628": [882, 883, 886], "225": [882, 883, 886], "425": [882, 883, 886], "norm_idx": [882, 883, 886], "228": [882, 883, 886], "0285": [882, 883, 886], "199": [882, 883, 886], "204": [882, 883, 886], "population_s": [887, 888], "num_sampl": [887, 888], "draw": [887, 888, 892, 893, 895], "unnorm": [887, 888], "drawn": [887, 888, 889, 890, 892, 893, 895], "home": [887, 888, 892], "uniformli": [887, 889, 890, 893, 895], "highest": [887, 889, 890], "parameter": [887, 892, 893, 895], "6444774682897879": [887, 892], "811": [887, 892], "508": [887, 892], "564": [887, 892], "7268672": [887, 892], "968": [887, 892], "175": [887, 892, 904, 905], "064": [887, 892], "40935726": [887, 892], "556": [887, 892], "26431865": [887, 893, 895], "475": [887, 893, 895], "878": [887, 893, 895], "861": [887, 893, 895], "89150229": [887, 893, 895], "89629126": [887, 893, 895], "94198485": [887, 893, 895], "91405606": [887, 893, 895], "72848724": [887, 893, 895], "7550739": [887, 893, 895], "00109": [887, 893, 895], "occurr": [899, 900, 901, 904, 905], "yield": [899, 903], "43": [899, 903], "x_j": [904, 905, 906, 910, 912], "impli": [904, 905, 906, 910, 912], "inverse_indic": [904, 905, 911], "aggreg": [904, 905], "fourth": [904, 905], "607": [904, 905], "735": [904, 905], "667": [904, 905], "381": [904, 905], "857": [904, 905], "0396": [904, 905], "166": [904, 905], "828": [904, 905], "144": [904, 905], "40501155": [904, 905], "77361575": [904, 905], "97776199": [904, 905], "36831157": [904, 905], "89148434": [904, 905], "9512272": [904, 905], "67542176": [904, 905], "41985657": [904, 905], "23478023": [904, 905], "1141": [904, 905], "8101": [904, 905], "9298": [904, 905], "8460": [904, 905], "2119": [904, 905], "3519": [904, 905], "6252": [904, 905], "4033": [904, 905], "7443": [904, 905], "2577": [904, 905], "3707": [904, 905], "0545": [904, 905], "3238": [904, 905], "5944": [904, 905], "0775": [904, 905], "4327": [904, 905], "176": [904, 905], "889": [904, 905], "763": [904, 905], "071": [904, 905], "262": [904, 905], "456": [904, 905], "114": [904, 905], "349": [904, 905], "615": [904, 905], "594": [904, 905], "335": [904, 905], "212": [904, 905], "457": [904, 905], "827": [904, 905], "set_funct": [904, 906, 910], "ascend": [913, 914, 917], "einstein": [924, 925, 928], "summat": [924, 925, 928], "seq": [924, 925, 928], "jk": [924, 925, 928], "ik": [924, 925, 928], "126": [924, 925, 928], "510": [924, 925, 928], "99": [924, 925, 928], "108": [924, 925, 928], "117": [924, 925, 928], "sentinel": [924, 929, 932, 937, 940], "unsign": [924, 941, 944, 949, 952], "degre": [924, 945, 948, 953, 956], "bessel": [924, 945, 948, 953, 956], "8164966": [924, 945, 948], "varianc": [924, 953, 956], "unbias": [924, 953, 956], "simplicit": [957, 958, 961], "autom": 968, "grow": 968, "ai": 968, "got": 968, "colab": 968, "sharp": 968, "weekli": 968, "event": 968, "immedi": 968, "favorit": 968, "jax_concat": 968, "tf_concat": 968, "np_concat": 968, "mx_concat": 968, "torch_concat": 968, "prompt": 968, "get_devic": 968, "reduce_prod": 968, "gradient_imag": 968, "linalg": 968, "bilinear_resampl": 968, "stack_imag": 968, "neural_net": 968, "ecosystem": [968, 974], "popular": [968, 974], "acceler": 968, "articl": 968, "lenton2021ivi": 968, "inter": 968, "lenton": 968, "daniel": 968, "pardo": 968, "fabio": 968, "falck": 968, "fabian": 968, "jame": 968, "stephen": 968, "clark": 968, "ronald": 968, "journal": 968, "arxiv": 968, "preprint": 968, "2102": 968, "02886": 968, "2021": 968, "add_array_spec": 971, "fn_array_spec": 971, "geglu": 975, "native_modul": [978, 979], "native_module_class": [978, 979], "firstlayersiren": 980, "kaimingnorm": [980, 984], "negative_slop": 980, "Ones": 980, "siren": 980, "w0": [980, 986], "filter_s": [989, 990, 991], "1d": [989, 990, 991], "conv1dtranspos": 989, "filter_shap": [989, 992, 993, 994, 995, 996], "conv2dtranspos": 989, "conv3dtranspos": 989, "depthwiseconv2d": 989, "num_channel": [989, 996], "bernoul": [989, 997], "num_lay": [989, 998], "return_sequ": [989, 998], "return_st": [989, 998], "get_initial_st": [989, 998], "dens": [989, 999], "multiheadattent": 989, "query_dim": [989, 1000], "head_dim": [989, 1000], "dropout_r": [989, 1000], "context_dim": [989, 1000], "with_to_q_fn": [989, 1000], "with_to_kv_fn": [989, 1000], "with_to_out_fn": [989, 1000], "build_mod": [989, 1000, 1001, 1002], "on_init": [989, 1000, 1001, 1002], "__call__": [989, 1000, 1001, 1002], "store_var": [1001, 1002], "arg_stateful_idx": [1001, 1002], "kwarg_stateful_idx": [1001, 1002], "fallback_to_non_compil": [1001, 1002, 1005, 1009], "with_partial_v": [1001, 1002], "initialz": [1001, 1002], "from_cal": [1001, 1002], "check_submod_ret": [1001, 1002], "get_mod_kei": [1001, 1002], "top_mod": [1001, 1002], "mod_depth": [1001, 1002], "mod_height": [1001, 1002], "mod_with_top_mod_key_chain": [1001, 1002], "save_weight": [1001, 1002], "weights_path": [1001, 1002], "show_mod_in_top_mod": [1001, 1002], "upper_depth": [1001, 1002], "lower_depth": [1001, 1002], "show_structur": [1001, 1002], "show_v_in_top_v": [1001, 1002], "sub_mod": [1001, 1002], "show_v": [1001, 1002], "track_submod_call_ord": [1001, 1002], "track_submod_ret": [1001, 1002], "v_with_top_v_key_chain": [1001, 1002], "layernorm": 1003, "normalized_shap": [1003, 1004], "elementwise_affin": [1003, 1004], "trail": [1003, 1004], "affin": [1003, 1004], "0001": [1005, 1006, 1007], "init_on_first_step": [1005, 1009], "ignore_miss": [1005, 1009], "overriden": [1005, 1009], "sgd": 1005, "stochast": [1005, 1010], "sub_modul": [1011, 1012]}, "objects": {"ivy.array": [[22, 0, 0, "-", "activations"], [24, 0, 0, "-", "conversions"], [29, 0, 0, "-", "creation"], [31, 0, 0, "-", "data_type"], [33, 0, 0, "-", "device"], [35, 0, 0, "-", "elementwise"], [37, 0, 0, "-", "general"], [39, 0, 0, "-", "gradients"], [41, 0, 0, "-", "image"], [43, 0, 0, "-", "layers"], [45, 0, 0, "-", "linear_algebra"], [47, 0, 0, "-", "losses"], [49, 0, 0, "-", "manipulation"], [51, 0, 0, "-", "norms"], [53, 0, 0, "-", "random"], [55, 0, 0, "-", "searching"], [57, 0, 0, "-", "set"], [59, 0, 0, "-", "sorting"], [61, 0, 0, "-", "statistical"], [63, 0, 0, "-", "utility"], [65, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[23, 1, 1, "", "ArrayWithActivations"]], "ivy.array.activations.ArrayWithActivations": [[23, 2, 1, "", "gelu"], [23, 2, 1, "", "leaky_relu"], [23, 2, 1, "", "relu"], [23, 2, 1, "", "sigmoid"], [23, 2, 1, "", "softmax"], [23, 2, 1, "", "softplus"], [23, 2, 1, "", "tanh"]], "ivy.array.array_methods": [[355, 3, 1, "", "abs"], [360, 3, 1, "", "acos"], [364, 3, 1, "", "acosh"], [664, 3, 1, "", "adam_step"], [368, 3, 1, "", "add"], [959, 3, 1, "", "all"], [589, 3, 1, "", "all_equal"], [964, 3, 1, "", "any"], [915, 3, 1, "", "argsort"], [200, 3, 1, "", "asarray"], [373, 3, 1, "", "asin"], [377, 3, 1, "", "asinh"], [381, 3, 1, "", "atan"], [385, 3, 1, "", "atan2"], [389, 3, 1, "", "atanh"], [786, 3, 1, "", "binary_cross_entropy"], [393, 3, 1, "", "bitwise_and"], [397, 3, 1, "", "bitwise_invert"], [401, 3, 1, "", "bitwise_left_shift"], [405, 3, 1, "", "bitwise_or"], [409, 3, 1, "", "bitwise_right_shift"], [413, 3, 1, "", "bitwise_xor"], [276, 3, 1, "", "can_cast"], [417, 3, 1, "", "ceil"], [714, 3, 1, "", "cholesky"], [802, 3, 1, "", "clip"], [807, 3, 1, "", "concat"], [811, 3, 1, "", "constant_pad"], [421, 3, 1, "", "cos"], [425, 3, 1, "", "cosh"], [719, 3, 1, "", "cross"], [791, 3, 1, "", "cross_entropy"], [722, 3, 1, "", "det"], [725, 3, 1, "", "diagonal"], [429, 3, 1, "", "divide"], [728, 3, 1, "", "eigh"], [731, 3, 1, "", "eigvalsh"], [926, 3, 1, "", "einsum"], [206, 3, 1, "", "empty_like"], [434, 3, 1, "", "equal"], [438, 3, 1, "", "erf"], [442, 3, 1, "", "exp"], [815, 3, 1, "", "expand_dims"], [446, 3, 1, "", "expm1"], [819, 3, 1, "", "flip"], [450, 3, 1, "", "floor"], [454, 3, 1, "", "floor_divide"], [214, 3, 1, "", "from_dlpack"], [220, 3, 1, "", "full_like"], [617, 3, 1, "", "gather_nd"], [158, 3, 1, "", "gelu"], [458, 3, 1, "", "greater"], [462, 3, 1, "", "greater_equal"], [734, 3, 1, "", "inv"], [466, 3, 1, "", "isfinite"], [470, 3, 1, "", "isinf"], [474, 3, 1, "", "isnan"], [884, 3, 1, "", "layer_norm"], [163, 3, 1, "", "leaky_relu"], [478, 3, 1, "", "less"], [482, 3, 1, "", "less_equal"], [486, 3, 1, "", "log"], [490, 3, 1, "", "log10"], [494, 3, 1, "", "log1p"], [498, 3, 1, "", "log2"], [502, 3, 1, "", "logaddexp"], [506, 3, 1, "", "logical_and"], [510, 3, 1, "", "logical_not"], [514, 3, 1, "", "logical_or"], [518, 3, 1, "", "logical_xor"], [737, 3, 1, "", "matmul"], [741, 3, 1, "", "matrix_norm"], [745, 3, 1, "", "matrix_rank"], [748, 3, 1, "", "matrix_transpose"], [930, 3, 1, "", "max"], [934, 3, 1, "", "mean"], [231, 3, 1, "", "meshgrid"], [938, 3, 1, "", "min"], [524, 3, 1, "", "multiply"], [236, 3, 1, "", "native_array"], [529, 3, 1, "", "negative"], [533, 3, 1, "", "not_equal"], [244, 3, 1, "", "ones_like"], [751, 3, 1, "", "outer"], [823, 3, 1, "", "permute_dims"], [754, 3, 1, "", "pinv"], [537, 3, 1, "", "positive"], [541, 3, 1, "", "pow"], [942, 3, 1, "", "prod"], [757, 3, 1, "", "qr"], [168, 3, 1, "", "relu"], [545, 3, 1, "", "remainder"], [827, 3, 1, "", "repeat"], [831, 3, 1, "", "reshape"], [835, 3, 1, "", "roll"], [549, 3, 1, "", "round"], [173, 3, 1, "", "sigmoid"], [553, 3, 1, "", "sign"], [557, 3, 1, "", "sin"], [561, 3, 1, "", "sinh"], [178, 3, 1, "", "softmax"], [183, 3, 1, "", "softplus"], [761, 3, 1, "", "solve"], [920, 3, 1, "", "sort"], [796, 3, 1, "", "sparse_cross_entropy"], [565, 3, 1, "", "sqrt"], [569, 3, 1, "", "square"], [841, 3, 1, "", "squeeze"], [845, 3, 1, "", "stack"], [946, 3, 1, "", "std"], [574, 3, 1, "", "subtract"], [950, 3, 1, "", "sum"], [764, 3, 1, "", "svd"], [767, 3, 1, "", "svdvals"], [849, 3, 1, "", "swapaxes"], [579, 3, 1, "", "tan"], [189, 3, 1, "", "tanh"], [770, 3, 1, "", "tensordot"], [853, 3, 1, "", "tile"], [773, 3, 1, "", "trace"], [250, 3, 1, "", "tril"], [255, 3, 1, "", "triu"], [584, 3, 1, "", "trunc"], [908, 3, 1, "", "unique_counts"], [954, 3, 1, "", "var"], [776, 3, 1, "", "vecdot"], [779, 3, 1, "", "vector_norm"], [782, 3, 1, "", "vector_to_skew_symmetric_matrix"], [857, 3, 1, "", "zero_pad"], [263, 3, 1, "", "zeros_like"]], "ivy.array.conversions": [[25, 3, 1, "", "args_to_ivy"], [26, 3, 1, "", "args_to_native"], [27, 3, 1, "", "to_ivy"], [28, 3, 1, "", "to_native"]], "ivy.array.creation": [[30, 1, 1, "", "ArrayWithCreation"]], "ivy.array.creation.ArrayWithCreation": [[30, 2, 1, "", "asarray"], [30, 2, 1, "", "empty_like"], [30, 2, 1, "", "from_dlpack"], [30, 2, 1, "", "full_like"], [30, 2, 1, "", "meshgrid"], [30, 2, 1, "", "native_array"], [30, 2, 1, "", "ones_like"], [30, 2, 1, "", "tril"], [30, 2, 1, "", "triu"], [30, 2, 1, "", "zeros_like"]], "ivy.array.data_type": [[32, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[32, 2, 1, "", "can_cast"]], "ivy.array.device": [[34, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[36, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[36, 2, 1, "", "abs"], [36, 2, 1, "", "acos"], [36, 2, 1, "", "acosh"], [36, 2, 1, "", "add"], [36, 2, 1, "", "asin"], [36, 2, 1, "", "asinh"], [36, 2, 1, "", "atan"], [36, 2, 1, "", "atan2"], [36, 2, 1, "", "atanh"], [36, 2, 1, "", "bitwise_and"], [36, 2, 1, "", "bitwise_invert"], [36, 2, 1, "", "bitwise_left_shift"], [36, 2, 1, "", "bitwise_or"], [36, 2, 1, "", "bitwise_right_shift"], [36, 2, 1, "", "bitwise_xor"], [36, 2, 1, "", "ceil"], [36, 2, 1, "", "cos"], [36, 2, 1, "", "cosh"], [36, 2, 1, "", "divide"], [36, 2, 1, "", "equal"], [36, 2, 1, "", "erf"], [36, 2, 1, "", "exp"], [36, 2, 1, "", "expm1"], [36, 2, 1, "", "floor"], [36, 2, 1, "", "floor_divide"], [36, 2, 1, "", "greater"], [36, 2, 1, "", "greater_equal"], [36, 2, 1, "", "isfinite"], [36, 2, 1, "", "isinf"], [36, 2, 1, "", "isnan"], [36, 2, 1, "", "less"], [36, 2, 1, "", "less_equal"], [36, 2, 1, "", "log"], [36, 2, 1, "", "log10"], [36, 2, 1, "", "log1p"], [36, 2, 1, "", "log2"], [36, 2, 1, "", "logaddexp"], [36, 2, 1, "", "logical_and"], [36, 2, 1, "", "logical_not"], [36, 2, 1, "", "logical_or"], [36, 2, 1, "", "logical_xor"], [36, 2, 1, "", "multiply"], [36, 2, 1, "", "negative"], [36, 2, 1, "", "not_equal"], [36, 2, 1, "", "positive"], [36, 2, 1, "", "pow"], [36, 2, 1, "", "remainder"], [36, 2, 1, "", "round"], [36, 2, 1, "", "sign"], [36, 2, 1, "", "sin"], [36, 2, 1, "", "sinh"], [36, 2, 1, "", "sqrt"], [36, 2, 1, "", "square"], [36, 2, 1, "", "subtract"], [36, 2, 1, "", "tan"], [36, 2, 1, "", "tanh"], [36, 2, 1, "", "trunc"]], "ivy.array.general": [[38, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[38, 2, 1, "", "all_equal"], [38, 2, 1, "", "gather_nd"]], "ivy.array.gradients": [[40, 1, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[40, 2, 1, "", "adam_step"]], "ivy.array.image": [[42, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[44, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[46, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[46, 2, 1, "", "cholesky"], [46, 2, 1, "", "cross"], [46, 2, 1, "", "det"], [46, 2, 1, "", "diagonal"], [46, 2, 1, "", "eigh"], [46, 2, 1, "", "eigvalsh"], [46, 2, 1, "", "inv"], [46, 2, 1, "", "matmul"], [46, 2, 1, "", "matrix_norm"], [46, 2, 1, "", "matrix_rank"], [46, 2, 1, "", "matrix_transpose"], [46, 2, 1, "", "outer"], [46, 2, 1, "", "pinv"], [46, 2, 1, "", "qr"], [46, 2, 1, "", "solve"], [46, 2, 1, "", "svd"], [46, 2, 1, "", "svdvals"], [46, 2, 1, "", "tensordot"], [46, 2, 1, "", "trace"], [46, 2, 1, "", "vecdot"], [46, 2, 1, "", "vector_norm"], [46, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[48, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[48, 2, 1, "", "binary_cross_entropy"], [48, 2, 1, "", "cross_entropy"], [48, 2, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[50, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[50, 2, 1, "", "clip"], [50, 2, 1, "", "concat"], [50, 2, 1, "", "constant_pad"], [50, 2, 1, "", "expand_dims"], [50, 2, 1, "", "flip"], [50, 2, 1, "", "permute_dims"], [50, 2, 1, "", "repeat"], [50, 2, 1, "", "reshape"], [50, 2, 1, "", "roll"], [50, 2, 1, "", "squeeze"], [50, 2, 1, "", "stack"], [50, 2, 1, "", "swapaxes"], [50, 2, 1, "", "tile"], [50, 2, 1, "", "zero_pad"]], "ivy.array.norms": [[52, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[52, 2, 1, "", "layer_norm"]], "ivy.array.random": [[54, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[56, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[58, 1, 1, "", "ArrayWithSet"]], "ivy.array.set.ArrayWithSet": [[58, 2, 1, "", "unique_counts"]], "ivy.array.sorting": [[60, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[60, 2, 1, "", "argsort"], [60, 2, 1, "", "sort"]], "ivy.array.statistical": [[62, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[62, 2, 1, "", "einsum"], [62, 2, 1, "", "max"], [62, 2, 1, "", "mean"], [62, 2, 1, "", "min"], [62, 2, 1, "", "prod"], [62, 2, 1, "", "std"], [62, 2, 1, "", "sum"], [62, 2, 1, "", "var"]], "ivy.array.utility": [[64, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[64, 2, 1, "", "all"], [64, 2, 1, "", "any"]], "ivy.array.wrapping": [[66, 3, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[0, 0, 0, "-", "backend_handler"], [146, 0, 0, "-", "func_wrapper"], [971, 0, 0, "-", "inspection"], [1014, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[0, 1, 1, "", "ContextManager"], [2, 3, 1, "", "choose_random_backend"], [3, 3, 1, "", "clear_backend_stack"], [4, 3, 1, "", "current_backend"], [5, 3, 1, "", "get_backend"], [6, 3, 1, "", "set_backend"], [7, 3, 1, "", "try_import_ivy_jax"], [8, 3, 1, "", "try_import_ivy_mxnet"], [9, 3, 1, "", "try_import_ivy_numpy"], [10, 3, 1, "", "try_import_ivy_tf"], [11, 3, 1, "", "try_import_ivy_torch"], [12, 3, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[0, 2, 1, "", "__init__"]], "ivy.container": [[67, 0, 0, "-", "activations"], [69, 0, 0, "-", "base"], [71, 0, 0, "-", "container"], [74, 0, 0, "-", "creation"], [76, 0, 0, "-", "data_type"], [78, 0, 0, "-", "device"], [80, 0, 0, "-", "elementwise"], [82, 0, 0, "-", "general"], [84, 0, 0, "-", "gradients"], [86, 0, 0, "-", "image"], [88, 0, 0, "-", "layers"], [90, 0, 0, "-", "linear_algebra"], [92, 0, 0, "-", "losses"], [94, 0, 0, "-", "manipulation"], [96, 0, 0, "-", "norms"], [98, 0, 0, "-", "random"], [100, 0, 0, "-", "searching"], [102, 0, 0, "-", "set"], [104, 0, 0, "-", "sorting"], [106, 0, 0, "-", "statistical"], [108, 0, 0, "-", "utility"], [110, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[68, 1, 1, "", "ContainerWithActivations"]], "ivy.container.activations.ContainerWithActivations": [[68, 2, 1, "", "gelu"], [68, 2, 1, "", "leaky_relu"], [68, 2, 1, "", "relu"], [68, 2, 1, "", "sigmoid"], [68, 2, 1, "", "softmax"], [68, 2, 1, "", "softplus"], [68, 2, 1, "", "static_gelu"], [68, 2, 1, "", "static_leaky_relu"], [68, 2, 1, "", "static_relu"], [68, 2, 1, "", "static_sigmoid"], [68, 2, 1, "", "static_softmax"], [68, 2, 1, "", "static_softplus"], [68, 2, 1, "", "static_tanh"], [68, 2, 1, "", "tanh"]], "ivy.container.base": [[70, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[70, 2, 1, "", "__getitem__"], [70, 2, 1, "", "__init__"], [70, 2, 1, "", "__setitem__"], [70, 2, 1, "", "all_false"], [70, 2, 1, "", "all_key_chains"], [70, 2, 1, "", "all_true"], [70, 2, 1, "", "arrays_as_lists"], [70, 2, 1, "", "as_arrays"], [70, 2, 1, "", "as_bools"], [70, 2, 1, "", "as_ones"], [70, 2, 1, "", "as_random_uniform"], [70, 2, 1, "", "as_variables"], [70, 2, 1, "", "as_zeros"], [70, 2, 1, "", "assert_contains_sub_container"], [70, 2, 1, "", "assert_contains_sub_structure"], [70, 2, 1, "", "assert_identical"], [70, 2, 1, "", "assert_identical_structure"], [70, 2, 1, "", "at_key_chain"], [70, 2, 1, "", "at_key_chains"], [70, 2, 1, "", "at_keys"], [70, 2, 1, "", "clip"], [70, 2, 1, "", "combine"], [70, 2, 1, "", "common_key_chains"], [70, 4, 1, "", "config"], [70, 2, 1, "", "contains_sub_container"], [70, 2, 1, "", "contains_sub_structure"], [70, 2, 1, "", "copy"], [70, 2, 1, "", "create_if_absent"], [70, 2, 1, "", "cutoff_at_depth"], [70, 2, 1, "", "cutoff_at_height"], [70, 2, 1, "", "deep_copy"], [70, 4, 1, "", "dev"], [70, 2, 1, "", "dev_clone"], [70, 2, 1, "", "dev_dist"], [70, 4, 1, "", "dev_str"], [70, 2, 1, "", "diff"], [70, 2, 1, "", "dtype"], [70, 2, 1, "", "einops_rearrange"], [70, 2, 1, "", "einops_reduce"], [70, 2, 1, "", "einops_repeat"], [70, 2, 1, "", "find_sub_container"], [70, 2, 1, "", "find_sub_structure"], [70, 2, 1, "", "flatten_key_chain"], [70, 2, 1, "", "flatten_key_chains"], [70, 2, 1, "", "format_key_chains"], [70, 2, 1, "", "from_disk_as_hdf5"], [70, 2, 1, "", "from_disk_as_json"], [70, 2, 1, "", "from_disk_as_pickled"], [70, 2, 1, "", "from_flat_list"], [70, 2, 1, "", "from_numpy"], [70, 2, 1, "", "gather"], [70, 2, 1, "", "gather_nd"], [70, 2, 1, "", "h5_file_size"], [70, 2, 1, "", "handle_inplace"], [70, 2, 1, "", "has_key"], [70, 2, 1, "", "has_key_chain"], [70, 2, 1, "", "has_nans"], [70, 2, 1, "", "identical"], [70, 2, 1, "", "identical_array_shapes"], [70, 2, 1, "", "identical_configs"], [70, 2, 1, "", "identical_structure"], [70, 2, 1, "", "if_exists"], [70, 2, 1, "", "inplace_update"], [70, 4, 1, "", "ivy"], [70, 2, 1, "", "key_chains_containing"], [70, 2, 1, "", "list_join"], [70, 2, 1, "", "list_stack"], [70, 2, 1, "", "map"], [70, 2, 1, "", "map_conts"], [70, 2, 1, "", "matrix_norm"], [70, 4, 1, "", "max_depth"], [70, 2, 1, "", "maximum"], [70, 2, 1, "", "minimum"], [70, 2, 1, "", "multi_map"], [70, 2, 1, "", "multi_map_in_static_method"], [70, 2, 1, "", "num_arrays"], [70, 2, 1, "", "overwrite_at_key_chain"], [70, 2, 1, "", "overwrite_at_key_chains"], [70, 2, 1, "", "prune_empty"], [70, 2, 1, "", "prune_key_chain"], [70, 2, 1, "", "prune_key_chains"], [70, 2, 1, "", "prune_key_from_key_chains"], [70, 2, 1, "", "prune_keys"], [70, 2, 1, "", "prune_keys_from_key_chains"], [70, 2, 1, "", "reduce"], [70, 2, 1, "", "remove_key_length_limit"], [70, 2, 1, "", "remove_print_limit"], [70, 2, 1, "", "reshape_like"], [70, 2, 1, "", "restructure"], [70, 2, 1, "", "restructure_key_chains"], [70, 2, 1, "", "set_at_key_chain"], [70, 2, 1, "", "set_at_key_chains"], [70, 2, 1, "", "set_at_keys"], [70, 2, 1, "", "set_framework"], [70, 2, 1, "", "set_ivy_backend"], [70, 4, 1, "", "shape"], [70, 4, 1, "", "shapes"], [70, 2, 1, "", "show"], [70, 2, 1, "", "show_sub_container"], [70, 2, 1, "", "shuffle"], [70, 2, 1, "", "shuffle_h5_file"], [70, 2, 1, "", "size_ordered_arrays"], [70, 2, 1, "", "slice_keys"], [70, 2, 1, "", "slice_via_key"], [70, 2, 1, "", "sort_by_key"], [70, 2, 1, "", "split"], [70, 2, 1, "", "stop_gradients"], [70, 2, 1, "", "structural_diff"], [70, 2, 1, "", "to_device"], [70, 2, 1, "", "to_dict"], [70, 2, 1, "", "to_disk_as_hdf5"], [70, 2, 1, "", "to_disk_as_json"], [70, 2, 1, "", "to_disk_as_pickled"], [70, 2, 1, "", "to_flat_list"], [70, 2, 1, "", "to_iterator"], [70, 2, 1, "", "to_iterator_keys"], [70, 2, 1, "", "to_iterator_values"], [70, 2, 1, "", "to_ivy"], [70, 2, 1, "", "to_jsonable"], [70, 2, 1, "", "to_list"], [70, 2, 1, "", "to_multi_dev"], [70, 2, 1, "", "to_native"], [70, 2, 1, "", "to_numpy"], [70, 2, 1, "", "to_raw"], [70, 2, 1, "", "trim_key"], [70, 2, 1, "", "try_kc"], [70, 2, 1, "", "unify"], [70, 2, 1, "", "unstack"], [70, 2, 1, "", "update_config"], [70, 2, 1, "", "vector_norm"], [70, 2, 1, "", "with_default_key_color"], [70, 2, 1, "", "with_entries_as_lists"], [70, 2, 1, "", "with_ivy_backend"], [70, 2, 1, "", "with_key_length_limit"], [70, 2, 1, "", "with_print_indent"], [70, 2, 1, "", "with_print_limit"], [70, 2, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[72, 1, 1, "", "Container"], [73, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[72, 2, 1, "", "__add__"], [72, 2, 1, "", "__init__"], [72, 2, 1, "", "__radd__"], [72, 2, 1, "", "arange"], [72, 2, 1, "", "arg_info"], [72, 2, 1, "", "arg_names"], [72, 2, 1, "", "argmax"], [72, 2, 1, "", "argmin"], [72, 2, 1, "", "array"], [72, 2, 1, "", "array_equal"], [72, 2, 1, "", "arrays_equal"], [72, 2, 1, "", "as_ivy_dev"], [72, 2, 1, "", "as_ivy_dtype"], [72, 2, 1, "", "as_native_dev"], [72, 2, 1, "", "as_native_dtype"], [72, 2, 1, "", "assert_supports_inplace"], [72, 2, 1, "", "astype"], [72, 2, 1, "", "broadcast_arrays"], [72, 2, 1, "", "broadcast_to"], [72, 2, 1, "", "cache_fn"], [72, 2, 1, "", "clear_mem_on_dev"], [72, 2, 1, "", "clip_matrix_norm"], [72, 2, 1, "", "closest_valid_dtype"], [72, 2, 1, "", "container_types"], [72, 2, 1, "", "conv1d"], [72, 2, 1, "", "conv1d_transpose"], [72, 2, 1, "", "conv2d"], [72, 2, 1, "", "conv2d_transpose"], [72, 2, 1, "", "conv3d"], [72, 2, 1, "", "conv3d_transpose"], [72, 2, 1, "", "copy_array"], [72, 2, 1, "", "cross"], [72, 2, 1, "", "cumprod"], [72, 2, 1, "", "cumsum"], [72, 2, 1, "", "current_backend"], [72, 2, 1, "", "current_backend_str"], [72, 2, 1, "", "default"], [72, 2, 1, "", "default_device"], [72, 2, 1, "", "default_dtype"], [72, 2, 1, "", "default_float_dtype"], [72, 2, 1, "", "default_int_dtype"], [72, 2, 1, "", "depthwise_conv2d"], [72, 2, 1, "", "det"], [72, 2, 1, "", "dev_clone_array"], [72, 2, 1, "", "dev_clone_iter"], [72, 2, 1, "", "dev_clone_nest"], [72, 2, 1, "", "dev_dist_array"], [72, 2, 1, "", "dev_dist_iter"], [72, 2, 1, "", "dev_dist_nest"], [72, 2, 1, "", "dev_unify"], [72, 2, 1, "", "dev_unify_array"], [72, 2, 1, "", "dev_unify_iter"], [72, 2, 1, "", "dev_unify_nest"], [72, 2, 1, "", "dev_util"], [72, 2, 1, "", "diagonal"], [72, 2, 1, "", "dropout"], [72, 2, 1, "", "dtype_bits"], [72, 2, 1, "", "eigh"], [72, 2, 1, "", "eigvalsh"], [72, 2, 1, "", "empty"], [72, 2, 1, "", "execute_with_gradients"], [72, 2, 1, "", "exists"], [72, 2, 1, "", "eye"], [72, 2, 1, "", "finfo"], [72, 2, 1, "", "floormod"], [72, 2, 1, "", "fourier_encode"], [72, 2, 1, "", "full"], [72, 2, 1, "", "function_supported_dtypes"], [72, 2, 1, "", "function_unsupported_dtypes"], [72, 2, 1, "", "get_all_arrays_in_memory"], [72, 2, 1, "", "get_all_ivy_arrays_on_dev"], [72, 2, 1, "", "get_min_base"], [72, 2, 1, "", "get_min_denominator"], [72, 2, 1, "", "get_num_dims"], [72, 2, 1, "", "get_referrers_recursive"], [72, 2, 1, "", "gpu_is_available"], [72, 2, 1, "", "handle_nestable"], [72, 2, 1, "", "handle_out_argument"], [72, 2, 1, "", "iinfo"], [72, 2, 1, "", "indices_where"], [72, 2, 1, "", "infer_device"], [72, 2, 1, "", "infer_dtype"], [72, 2, 1, "", "inplace_arrays_supported"], [72, 2, 1, "", "inplace_decrement"], [72, 2, 1, "", "inplace_increment"], [72, 2, 1, "", "inplace_variables_supported"], [72, 2, 1, "", "inputs_to_native_arrays"], [72, 2, 1, "", "inv"], [72, 2, 1, "", "invalid_dtype"], [72, 2, 1, "", "is_float_dtype"], [72, 2, 1, "", "is_int_dtype"], [72, 2, 1, "", "is_ivy_container"], [72, 2, 1, "", "linear"], [72, 2, 1, "", "linspace"], [72, 2, 1, "", "logspace"], [72, 2, 1, "", "lstm_update"], [72, 2, 1, "", "match_kwargs"], [72, 2, 1, "", "matrix_power"], [72, 2, 1, "", "matrix_rank"], [72, 2, 1, "", "matrix_transpose"], [72, 2, 1, "", "multi_head_attention"], [72, 2, 1, "", "multinomial"], [72, 2, 1, "", "multiprocessing"], [72, 2, 1, "", "nonzero"], [72, 2, 1, "", "num_arrays_in_memory"], [72, 2, 1, "", "num_cpu_cores"], [72, 2, 1, "", "num_gpus"], [72, 2, 1, "", "num_ivy_arrays_on_dev"], [72, 2, 1, "", "one_hot"], [72, 2, 1, "", "ones"], [72, 2, 1, "", "outer"], [72, 2, 1, "", "outputs_to_ivy_arrays"], [72, 2, 1, "", "percent_used_mem_on_dev"], [72, 2, 1, "", "pinv"], [72, 2, 1, "", "print_all_arrays_in_memory"], [72, 2, 1, "", "print_all_ivy_arrays_on_dev"], [72, 2, 1, "", "promote_types"], [72, 2, 1, "", "qr"], [72, 2, 1, "", "queue_timeout"], [72, 2, 1, "", "randint"], [72, 2, 1, "", "random_normal"], [72, 2, 1, "", "result_type"], [72, 2, 1, "", "scaled_dot_product_attention"], [72, 2, 1, "", "scatter_flat"], [72, 2, 1, "", "scatter_nd"], [72, 2, 1, "", "seed"], [72, 2, 1, "", "set_default_device"], [72, 2, 1, "", "set_default_dtype"], [72, 2, 1, "", "set_default_float_dtype"], [72, 2, 1, "", "set_default_int_dtype"], [72, 2, 1, "", "set_min_base"], [72, 2, 1, "", "set_min_denominator"], [72, 2, 1, "", "set_queue_timeout"], [72, 2, 1, "", "set_split_factor"], [72, 2, 1, "", "set_tmp_dir"], [72, 2, 1, "", "set_with_grads"], [72, 2, 1, "", "shape_to_tuple"], [72, 2, 1, "", "slogdet"], [72, 2, 1, "", "solve"], [72, 2, 1, "", "split_factor"], [72, 2, 1, "", "split_func_call"], [72, 2, 1, "", "stable_divide"], [72, 2, 1, "", "stable_pow"], [72, 2, 1, "", "static_acos"], [72, 2, 1, "", "static_acosh"], [72, 2, 1, "", "static_arg_info"], [72, 2, 1, "", "static_arg_names"], [72, 2, 1, "", "static_argmax"], [72, 2, 1, "", "static_argmin"], [72, 2, 1, "", "static_array"], [72, 2, 1, "", "static_array_equal"], [72, 2, 1, "", "static_arrays_equal"], [72, 2, 1, "", "static_as_ivy_dev"], [72, 2, 1, "", "static_as_ivy_dtype"], [72, 2, 1, "", "static_as_native_dev"], [72, 2, 1, "", "static_as_native_dtype"], [72, 2, 1, "", "static_asin"], [72, 2, 1, "", "static_asinh"], [72, 2, 1, "", "static_assert_supports_inplace"], [72, 2, 1, "", "static_astype"], [72, 2, 1, "", "static_atan"], [72, 2, 1, "", "static_atan2"], [72, 2, 1, "", "static_atanh"], [72, 2, 1, "", "static_bitwise_and"], [72, 2, 1, "", "static_bitwise_invert"], [72, 2, 1, "", "static_bitwise_left_shift"], [72, 2, 1, "", "static_bitwise_or"], [72, 2, 1, "", "static_bitwise_right_shift"], [72, 2, 1, "", "static_bitwise_xor"], [72, 2, 1, "", "static_broadcast_arrays"], [72, 2, 1, "", "static_broadcast_to"], [72, 2, 1, "", "static_cache_fn"], [72, 2, 1, "", "static_ceil"], [72, 2, 1, "", "static_clear_mem_on_dev"], [72, 2, 1, "", "static_clip_matrix_norm"], [72, 2, 1, "", "static_clip_vector_norm"], [72, 2, 1, "", "static_closest_valid_dtype"], [72, 2, 1, "", "static_concat"], [72, 2, 1, "", "static_constant_pad"], [72, 2, 1, "", "static_container_types"], [72, 2, 1, "", "static_conv1d"], [72, 2, 1, "", "static_conv1d_transpose"], [72, 2, 1, "", "static_conv2d"], [72, 2, 1, "", "static_conv2d_transpose"], [72, 2, 1, "", "static_conv3d"], [72, 2, 1, "", "static_conv3d_transpose"], [72, 2, 1, "", "static_copy_array"], [72, 2, 1, "", "static_cos"], [72, 2, 1, "", "static_cosh"], [72, 2, 1, "", "static_cross"], [72, 2, 1, "", "static_cumprod"], [72, 2, 1, "", "static_cumsum"], [72, 2, 1, "", "static_current_backend"], [72, 2, 1, "", "static_current_backend_str"], [72, 2, 1, "", "static_default"], [72, 2, 1, "", "static_default_device"], [72, 2, 1, "", "static_default_dtype"], [72, 2, 1, "", "static_default_float_dtype"], [72, 2, 1, "", "static_default_int_dtype"], [72, 2, 1, "", "static_depthwise_conv2d"], [72, 2, 1, "", "static_det"], [72, 2, 1, "", "static_dev"], [72, 2, 1, "", "static_dev_clone"], [72, 2, 1, "", "static_dev_clone_array"], [72, 2, 1, "", "static_dev_clone_iter"], [72, 2, 1, "", "static_dev_clone_nest"], [72, 2, 1, "", "static_dev_dist"], [72, 2, 1, "", "static_dev_dist_array"], [72, 2, 1, "", "static_dev_dist_iter"], [72, 2, 1, "", "static_dev_dist_nest"], [72, 2, 1, "", "static_dev_unify"], [72, 2, 1, "", "static_dev_unify_array"], [72, 2, 1, "", "static_dev_unify_iter"], [72, 2, 1, "", "static_dev_unify_nest"], [72, 2, 1, "", "static_dev_util"], [72, 2, 1, "", "static_diagonal"], [72, 2, 1, "", "static_dropout"], [72, 2, 1, "", "static_dtype"], [72, 2, 1, "", "static_dtype_bits"], [72, 2, 1, "", "static_eigh"], [72, 2, 1, "", "static_eigvalsh"], [72, 2, 1, "", "static_einops_rearrange"], [72, 2, 1, "", "static_einops_reduce"], [72, 2, 1, "", "static_einops_repeat"], [72, 2, 1, "", "static_einsum"], [72, 2, 1, "", "static_empty"], [72, 2, 1, "", "static_equal"], [72, 2, 1, "", "static_erf"], [72, 2, 1, "", "static_execute_with_gradients"], [72, 2, 1, "", "static_exists"], [72, 2, 1, "", "static_exp"], [72, 2, 1, "", "static_expand_dims"], [72, 2, 1, "", "static_expm1"], [72, 2, 1, "", "static_finfo"], [72, 2, 1, "", "static_flip"], [72, 2, 1, "", "static_floor"], [72, 2, 1, "", "static_floor_divide"], [72, 2, 1, "", "static_floormod"], [72, 2, 1, "", "static_fourier_encode"], [72, 2, 1, "", "static_full"], [72, 2, 1, "", "static_function_supported_dtypes"], [72, 2, 1, "", "static_function_unsupported_dtypes"], [72, 2, 1, "", "static_gather"], [72, 2, 1, "", "static_get_all_arrays_in_memory"], [72, 2, 1, "", "static_get_all_ivy_arrays_on_dev"], [72, 2, 1, "", "static_get_min_base"], [72, 2, 1, "", "static_get_min_denominator"], [72, 2, 1, "", "static_get_num_dims"], [72, 2, 1, "", "static_get_referrers_recursive"], [72, 2, 1, "", "static_gpu_is_available"], [72, 2, 1, "", "static_greater"], [72, 2, 1, "", "static_greater_equal"], [72, 2, 1, "", "static_handle_nestable"], [72, 2, 1, "", "static_handle_out_argument"], [72, 2, 1, "", "static_has_nans"], [72, 2, 1, "", "static_iinfo"], [72, 2, 1, "", "static_indices_where"], [72, 2, 1, "", "static_infer_device"], [72, 2, 1, "", "static_infer_dtype"], [72, 2, 1, "", "static_inplace_arrays_supported"], [72, 2, 1, "", "static_inplace_decrement"], [72, 2, 1, "", "static_inplace_increment"], [72, 2, 1, "", "static_inplace_update"], [72, 2, 1, "", "static_inplace_variables_supported"], [72, 2, 1, "", "static_inputs_to_native_arrays"], [72, 2, 1, "", "static_inv"], [72, 2, 1, "", "static_invalid_dtype"], [72, 2, 1, "", "static_is_array"], [72, 2, 1, "", "static_is_float_dtype"], [72, 2, 1, "", "static_is_int_dtype"], [72, 2, 1, "", "static_is_ivy_array"], [72, 2, 1, "", "static_is_ivy_container"], [72, 2, 1, "", "static_is_native_array"], [72, 2, 1, "", "static_isfinite"], [72, 2, 1, "", "static_isinf"], [72, 2, 1, "", "static_isnan"], [72, 2, 1, "", "static_layer_norm"], [72, 2, 1, "", "static_less"], [72, 2, 1, "", "static_less_equal"], [72, 2, 1, "", "static_linear"], [72, 2, 1, "", "static_log"], [72, 2, 1, "", "static_log10"], [72, 2, 1, "", "static_log1p"], [72, 2, 1, "", "static_log2"], [72, 2, 1, "", "static_logaddexp"], [72, 2, 1, "", "static_logical_and"], [72, 2, 1, "", "static_logical_not"], [72, 2, 1, "", "static_logical_or"], [72, 2, 1, "", "static_logical_xor"], [72, 2, 1, "", "static_lstm_update"], [72, 2, 1, "", "static_match_kwargs"], [72, 2, 1, "", "static_matmul"], [72, 2, 1, "", "static_matrix_norm"], [72, 2, 1, "", "static_matrix_power"], [72, 2, 1, "", "static_matrix_rank"], [72, 2, 1, "", "static_matrix_transpose"], [72, 2, 1, "", "static_max"], [72, 2, 1, "", "static_maximum"], [72, 2, 1, "", "static_mean"], [72, 2, 1, "", "static_min"], [72, 2, 1, "", "static_minimum"], [72, 2, 1, "", "static_multi_head_attention"], [72, 2, 1, "", "static_multinomial"], [72, 2, 1, "", "static_multiprocessing"], [72, 2, 1, "", "static_negative"], [72, 2, 1, "", "static_nonzero"], [72, 2, 1, "", "static_not_equal"], [72, 2, 1, "", "static_num_arrays_in_memory"], [72, 2, 1, "", "static_num_cpu_cores"], [72, 2, 1, "", "static_num_gpus"], [72, 2, 1, "", "static_num_ivy_arrays_on_dev"], [72, 2, 1, "", "static_one_hot"], [72, 2, 1, "", "static_outer"], [72, 2, 1, "", "static_outputs_to_ivy_arrays"], [72, 2, 1, "", "static_percent_used_mem_on_dev"], [72, 2, 1, "", "static_permute_dims"], [72, 2, 1, "", "static_pinv"], [72, 2, 1, "", "static_positive"], [72, 2, 1, "", "static_pow"], [72, 2, 1, "", "static_print_all_arrays_in_memory"], [72, 2, 1, "", "static_print_all_ivy_arrays_on_dev"], [72, 2, 1, "", "static_prod"], [72, 2, 1, "", "static_promote_types"], [72, 2, 1, "", "static_qr"], [72, 2, 1, "", "static_queue_timeout"], [72, 2, 1, "", "static_random_normal"], [72, 2, 1, "", "static_remainder"], [72, 2, 1, "", "static_repeat"], [72, 2, 1, "", "static_reshape"], [72, 2, 1, "", "static_result_type"], [72, 2, 1, "", "static_round"], [72, 2, 1, "", "static_scaled_dot_product_attention"], [72, 2, 1, "", "static_scatter_flat"], [72, 2, 1, "", "static_scatter_nd"], [72, 2, 1, "", "static_seed"], [72, 2, 1, "", "static_set_default_device"], [72, 2, 1, "", "static_set_default_dtype"], [72, 2, 1, "", "static_set_default_float_dtype"], [72, 2, 1, "", "static_set_default_int_dtype"], [72, 2, 1, "", "static_set_min_base"], [72, 2, 1, "", "static_set_min_denominator"], [72, 2, 1, "", "static_set_queue_timeout"], [72, 2, 1, "", "static_set_split_factor"], [72, 2, 1, "", "static_set_tmp_dir"], [72, 2, 1, "", "static_set_with_grads"], [72, 2, 1, "", "static_shape"], [72, 2, 1, "", "static_shape_to_tuple"], [72, 2, 1, "", "static_shuffle"], [72, 2, 1, "", "static_sign"], [72, 2, 1, "", "static_sin"], [72, 2, 1, "", "static_sinh"], [72, 2, 1, "", "static_slogdet"], [72, 2, 1, "", "static_solve"], [72, 2, 1, "", "static_split"], [72, 2, 1, "", "static_split_factor"], [72, 2, 1, "", "static_split_func_call"], [72, 2, 1, "", "static_sqrt"], [72, 2, 1, "", "static_square"], [72, 2, 1, "", "static_squeeze"], [72, 2, 1, "", "static_stable_divide"], [72, 2, 1, "", "static_stable_pow"], [72, 2, 1, "", "static_stack"], [72, 2, 1, "", "static_std"], [72, 2, 1, "", "static_stop_gradient"], [72, 2, 1, "", "static_sum"], [72, 2, 1, "", "static_supports_inplace"], [72, 2, 1, "", "static_svd"], [72, 2, 1, "", "static_svdvals"], [72, 2, 1, "", "static_swapaxes"], [72, 2, 1, "", "static_tensordot"], [72, 2, 1, "", "static_tile"], [72, 2, 1, "", "static_tmp_dir"], [72, 2, 1, "", "static_to_device"], [72, 2, 1, "", "static_to_list"], [72, 2, 1, "", "static_to_native_arrays_and_back"], [72, 2, 1, "", "static_to_numpy"], [72, 2, 1, "", "static_to_scalar"], [72, 2, 1, "", "static_total_mem_on_dev"], [72, 2, 1, "", "static_tpu_is_available"], [72, 2, 1, "", "static_trace"], [72, 2, 1, "", "static_trunc"], [72, 2, 1, "", "static_try_else_none"], [72, 2, 1, "", "static_type_promote_arrays"], [72, 2, 1, "", "static_unique_all"], [72, 2, 1, "", "static_unique_inverse"], [72, 2, 1, "", "static_unique_values"], [72, 2, 1, "", "static_unset_default_device"], [72, 2, 1, "", "static_unset_default_dtype"], [72, 2, 1, "", "static_unset_default_float_dtype"], [72, 2, 1, "", "static_unset_default_int_dtype"], [72, 2, 1, "", "static_unset_with_grads"], [72, 2, 1, "", "static_unstack"], [72, 2, 1, "", "static_used_mem_on_dev"], [72, 2, 1, "", "static_valid_dtype"], [72, 2, 1, "", "static_value_is_nan"], [72, 2, 1, "", "static_var"], [72, 2, 1, "", "static_variable"], [72, 2, 1, "", "static_variable_data"], [72, 2, 1, "", "static_vecdot"], [72, 2, 1, "", "static_vector_norm"], [72, 2, 1, "", "static_vector_to_skew_symmetric_matrix"], [72, 2, 1, "", "static_where"], [72, 2, 1, "", "static_with_grads"], [72, 2, 1, "", "static_zero_pad"], [72, 2, 1, "", "stop_gradient"], [72, 2, 1, "", "supports_inplace"], [72, 2, 1, "", "svd"], [72, 2, 1, "", "svdvals"], [72, 2, 1, "", "tensordot"], [72, 2, 1, "", "tmp_dir"], [72, 2, 1, "", "to_native_arrays_and_back"], [72, 2, 1, "", "to_scalar"], [72, 2, 1, "", "total_mem_on_dev"], [72, 2, 1, "", "tpu_is_available"], [72, 2, 1, "", "trace"], [72, 2, 1, "", "try_else_none"], [72, 2, 1, "", "type_promote_arrays"], [72, 2, 1, "", "unique_all"], [72, 2, 1, "", "unique_inverse"], [72, 2, 1, "", "unique_values"], [72, 2, 1, "", "unset_default_device"], [72, 2, 1, "", "unset_default_dtype"], [72, 2, 1, "", "unset_default_float_dtype"], [72, 2, 1, "", "unset_default_int_dtype"], [72, 2, 1, "", "unset_with_grads"], [72, 2, 1, "", "used_mem_on_dev"], [72, 2, 1, "", "valid_dtype"], [72, 2, 1, "", "value_is_nan"], [72, 2, 1, "", "variable"], [72, 2, 1, "", "variable_data"], [72, 2, 1, "", "vecdot"], [72, 2, 1, "", "vector_to_skew_symmetric_matrix"], [72, 2, 1, "", "where"], [72, 2, 1, "", "with_grads"], [72, 2, 1, "", "zeros"]], "ivy.container.container.MultiDevContainer": [[73, 2, 1, "", "__init__"], [73, 2, 1, "", "at_dev"], [73, 2, 1, "", "at_devs"]], "ivy.container.container_methods": [[356, 3, 1, "", "abs"], [361, 3, 1, "", "acos"], [365, 3, 1, "", "acosh"], [665, 3, 1, "", "adam_step"], [669, 3, 1, "", "adam_update"], [369, 3, 1, "", "add"], [960, 3, 1, "", "all"], [590, 3, 1, "", "all_equal"], [965, 3, 1, "", "any"], [916, 3, 1, "", "argsort"], [201, 3, 1, "", "asarray"], [374, 3, 1, "", "asin"], [378, 3, 1, "", "asinh"], [382, 3, 1, "", "atan"], [386, 3, 1, "", "atan2"], [390, 3, 1, "", "atanh"], [787, 3, 1, "", "binary_cross_entropy"], [394, 3, 1, "", "bitwise_and"], [398, 3, 1, "", "bitwise_invert"], [402, 3, 1, "", "bitwise_left_shift"], [406, 3, 1, "", "bitwise_or"], [410, 3, 1, "", "bitwise_right_shift"], [414, 3, 1, "", "bitwise_xor"], [277, 3, 1, "", "can_cast"], [418, 3, 1, "", "ceil"], [715, 3, 1, "", "cholesky"], [803, 3, 1, "", "clip"], [601, 3, 1, "", "clip_vector_norm"], [808, 3, 1, "", "concat"], [812, 3, 1, "", "constant_pad"], [422, 3, 1, "", "cos"], [426, 3, 1, "", "cosh"], [792, 3, 1, "", "cross_entropy"], [430, 3, 1, "", "divide"], [927, 3, 1, "", "einsum"], [207, 3, 1, "", "empty_like"], [435, 3, 1, "", "equal"], [439, 3, 1, "", "erf"], [443, 3, 1, "", "exp"], [816, 3, 1, "", "expand_dims"], [447, 3, 1, "", "expm1"], [820, 3, 1, "", "flip"], [451, 3, 1, "", "floor"], [455, 3, 1, "", "floor_divide"], [215, 3, 1, "", "from_dlpack"], [221, 3, 1, "", "full_like"], [618, 3, 1, "", "gather_nd"], [159, 3, 1, "", "gelu"], [674, 3, 1, "", "gradient_descent_update"], [459, 3, 1, "", "greater"], [463, 3, 1, "", "greater_equal"], [678, 3, 1, "", "is_variable"], [467, 3, 1, "", "isfinite"], [471, 3, 1, "", "isinf"], [475, 3, 1, "", "isnan"], [682, 3, 1, "", "lamb_update"], [686, 3, 1, "", "lars_update"], [885, 3, 1, "", "layer_norm"], [164, 3, 1, "", "leaky_relu"], [479, 3, 1, "", "less"], [483, 3, 1, "", "less_equal"], [487, 3, 1, "", "log"], [491, 3, 1, "", "log10"], [495, 3, 1, "", "log1p"], [499, 3, 1, "", "log2"], [503, 3, 1, "", "logaddexp"], [507, 3, 1, "", "logical_and"], [511, 3, 1, "", "logical_not"], [515, 3, 1, "", "logical_or"], [519, 3, 1, "", "logical_xor"], [738, 3, 1, "", "matmul"], [931, 3, 1, "", "max"], [935, 3, 1, "", "mean"], [232, 3, 1, "", "meshgrid"], [939, 3, 1, "", "min"], [525, 3, 1, "", "multiply"], [237, 3, 1, "", "native_array"], [530, 3, 1, "", "negative"], [534, 3, 1, "", "not_equal"], [245, 3, 1, "", "ones_like"], [690, 3, 1, "", "optimizer_update"], [824, 3, 1, "", "permute_dims"], [538, 3, 1, "", "positive"], [542, 3, 1, "", "pow"], [943, 3, 1, "", "prod"], [894, 3, 1, "", "random_uniform"], [169, 3, 1, "", "relu"], [546, 3, 1, "", "remainder"], [828, 3, 1, "", "repeat"], [832, 3, 1, "", "reshape"], [836, 3, 1, "", "roll"], [550, 3, 1, "", "round"], [174, 3, 1, "", "sigmoid"], [554, 3, 1, "", "sign"], [558, 3, 1, "", "sin"], [562, 3, 1, "", "sinh"], [179, 3, 1, "", "softmax"], [184, 3, 1, "", "softplus"], [921, 3, 1, "", "sort"], [797, 3, 1, "", "sparse_cross_entropy"], [566, 3, 1, "", "sqrt"], [570, 3, 1, "", "square"], [842, 3, 1, "", "squeeze"], [846, 3, 1, "", "stack"], [358, 3, 1, "", "static_abs"], [667, 3, 1, "", "static_adam_step"], [671, 3, 1, "", "static_adam_update"], [371, 3, 1, "", "static_add"], [962, 3, 1, "", "static_all"], [592, 3, 1, "", "static_all_equal"], [967, 3, 1, "", "static_any"], [198, 3, 1, "", "static_arange"], [918, 3, 1, "", "static_argsort"], [203, 3, 1, "", "static_asarray"], [789, 3, 1, "", "static_binary_cross_entropy"], [279, 3, 1, "", "static_can_cast"], [717, 3, 1, "", "static_cholesky"], [805, 3, 1, "", "static_clip"], [794, 3, 1, "", "static_cross_entropy"], [432, 3, 1, "", "static_divide"], [209, 3, 1, "", "static_empty_like"], [212, 3, 1, "", "static_eye"], [217, 3, 1, "", "static_from_dlpack"], [223, 3, 1, "", "static_full_like"], [620, 3, 1, "", "static_gather_nd"], [161, 3, 1, "", "static_gelu"], [676, 3, 1, "", "static_gradient_descent_update"], [680, 3, 1, "", "static_is_variable"], [684, 3, 1, "", "static_lamb_update"], [688, 3, 1, "", "static_lars_update"], [166, 3, 1, "", "static_leaky_relu"], [226, 3, 1, "", "static_linspace"], [229, 3, 1, "", "static_logspace"], [234, 3, 1, "", "static_meshgrid"], [527, 3, 1, "", "static_multiply"], [239, 3, 1, "", "static_native_array"], [242, 3, 1, "", "static_ones"], [247, 3, 1, "", "static_ones_like"], [692, 3, 1, "", "static_optimizer_update"], [891, 3, 1, "", "static_randint"], [896, 3, 1, "", "static_random_uniform"], [171, 3, 1, "", "static_relu"], [838, 3, 1, "", "static_roll"], [176, 3, 1, "", "static_sigmoid"], [181, 3, 1, "", "static_softmax"], [186, 3, 1, "", "static_softplus"], [923, 3, 1, "", "static_sort"], [799, 3, 1, "", "static_sparse_cross_entropy"], [573, 3, 1, "", "static_subtract"], [578, 3, 1, "", "static_tan"], [188, 3, 1, "", "static_tanh"], [249, 3, 1, "", "static_tril"], [254, 3, 1, "", "static_triu"], [907, 3, 1, "", "static_unique_counts"], [259, 3, 1, "", "static_zeros"], [262, 3, 1, "", "static_zeros_like"], [947, 3, 1, "", "std"], [575, 3, 1, "", "subtract"], [951, 3, 1, "", "sum"], [850, 3, 1, "", "swapaxes"], [580, 3, 1, "", "tan"], [190, 3, 1, "", "tanh"], [854, 3, 1, "", "tile"], [251, 3, 1, "", "tril"], [256, 3, 1, "", "triu"], [585, 3, 1, "", "trunc"], [909, 3, 1, "", "unique_counts"], [955, 3, 1, "", "var"], [858, 3, 1, "", "zero_pad"], [264, 3, 1, "", "zeros_like"]], "ivy.container.creation": [[75, 1, 1, "", "ContainerWithCreation"]], "ivy.container.creation.ContainerWithCreation": [[75, 2, 1, "", "asarray"], [75, 2, 1, "", "empty_like"], [75, 2, 1, "", "from_dlpack"], [75, 2, 1, "", "full_like"], [75, 2, 1, "", "meshgrid"], [75, 2, 1, "", "native_array"], [75, 2, 1, "", "ones_like"], [75, 2, 1, "", "static_arange"], [75, 2, 1, "", "static_asarray"], [75, 2, 1, "", "static_empty_like"], [75, 2, 1, "", "static_eye"], [75, 2, 1, "", "static_from_dlpack"], [75, 2, 1, "", "static_full_like"], [75, 2, 1, "", "static_linspace"], [75, 2, 1, "", "static_logspace"], [75, 2, 1, "", "static_meshgrid"], [75, 2, 1, "", "static_native_array"], [75, 2, 1, "", "static_ones"], [75, 2, 1, "", "static_ones_like"], [75, 2, 1, "", "static_tril"], [75, 2, 1, "", "static_triu"], [75, 2, 1, "", "static_zeros"], [75, 2, 1, "", "static_zeros_like"], [75, 2, 1, "", "tril"], [75, 2, 1, "", "triu"], [75, 2, 1, "", "zeros_like"]], "ivy.container.data_type": [[77, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[77, 2, 1, "", "can_cast"], [77, 2, 1, "", "static_can_cast"]], "ivy.container.device": [[79, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[81, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[81, 2, 1, "", "abs"], [81, 2, 1, "", "acos"], [81, 2, 1, "", "acosh"], [81, 2, 1, "", "add"], [81, 2, 1, "", "asin"], [81, 2, 1, "", "asinh"], [81, 2, 1, "", "atan"], [81, 2, 1, "", "atan2"], [81, 2, 1, "", "atanh"], [81, 2, 1, "", "bitwise_and"], [81, 2, 1, "", "bitwise_invert"], [81, 2, 1, "", "bitwise_left_shift"], [81, 2, 1, "", "bitwise_or"], [81, 2, 1, "", "bitwise_right_shift"], [81, 2, 1, "", "bitwise_xor"], [81, 2, 1, "", "ceil"], [81, 2, 1, "", "cos"], [81, 2, 1, "", "cosh"], [81, 2, 1, "", "divide"], [81, 2, 1, "", "equal"], [81, 2, 1, "", "erf"], [81, 2, 1, "", "exp"], [81, 2, 1, "", "expm1"], [81, 2, 1, "", "floor"], [81, 2, 1, "", "floor_divide"], [81, 2, 1, "", "greater"], [81, 2, 1, "", "greater_equal"], [81, 2, 1, "", "isfinite"], [81, 2, 1, "", "isinf"], [81, 2, 1, "", "isnan"], [81, 2, 1, "", "less"], [81, 2, 1, "", "less_equal"], [81, 2, 1, "", "log"], [81, 2, 1, "", "log10"], [81, 2, 1, "", "log1p"], [81, 2, 1, "", "log2"], [81, 2, 1, "", "logaddexp"], [81, 2, 1, "", "logical_and"], [81, 2, 1, "", "logical_not"], [81, 2, 1, "", "logical_or"], [81, 2, 1, "", "logical_xor"], [81, 2, 1, "", "multiply"], [81, 2, 1, "", "negative"], [81, 2, 1, "", "not_equal"], [81, 2, 1, "", "positive"], [81, 2, 1, "", "pow"], [81, 2, 1, "", "remainder"], [81, 2, 1, "", "round"], [81, 2, 1, "", "sign"], [81, 2, 1, "", "sin"], [81, 2, 1, "", "sinh"], [81, 2, 1, "", "sqrt"], [81, 2, 1, "", "square"], [81, 2, 1, "", "static_abs"], [81, 2, 1, "", "static_add"], [81, 2, 1, "", "static_divide"], [81, 2, 1, "", "static_multiply"], [81, 2, 1, "", "static_subtract"], [81, 2, 1, "", "static_tan"], [81, 2, 1, "", "static_tanh"], [81, 2, 1, "", "subtract"], [81, 2, 1, "", "tan"], [81, 2, 1, "", "tanh"], [81, 2, 1, "", "trunc"]], "ivy.container.general": [[83, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[83, 2, 1, "", "all_equal"], [83, 2, 1, "", "clip_vector_norm"], [83, 2, 1, "", "gather_nd"], [83, 2, 1, "", "static_all_equal"], [83, 2, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[85, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[85, 2, 1, "", "adam_step"], [85, 2, 1, "", "adam_update"], [85, 2, 1, "", "gradient_descent_update"], [85, 2, 1, "", "is_variable"], [85, 2, 1, "", "lamb_update"], [85, 2, 1, "", "lars_update"], [85, 2, 1, "", "optimizer_update"], [85, 2, 1, "", "static_adam_step"], [85, 2, 1, "", "static_adam_update"], [85, 2, 1, "", "static_gradient_descent_update"], [85, 2, 1, "", "static_is_variable"], [85, 2, 1, "", "static_lamb_update"], [85, 2, 1, "", "static_lars_update"], [85, 2, 1, "", "static_optimizer_update"]], "ivy.container.image": [[87, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[89, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[91, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[91, 2, 1, "", "cholesky"], [91, 2, 1, "", "matmul"], [91, 2, 1, "", "static_cholesky"]], "ivy.container.losses": [[93, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[93, 2, 1, "", "binary_cross_entropy"], [93, 2, 1, "", "cross_entropy"], [93, 2, 1, "", "sparse_cross_entropy"], [93, 2, 1, "", "static_binary_cross_entropy"], [93, 2, 1, "", "static_cross_entropy"], [93, 2, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[95, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[95, 2, 1, "", "clip"], [95, 2, 1, "", "concat"], [95, 2, 1, "", "constant_pad"], [95, 2, 1, "", "expand_dims"], [95, 2, 1, "", "flip"], [95, 2, 1, "", "permute_dims"], [95, 2, 1, "", "repeat"], [95, 2, 1, "", "reshape"], [95, 2, 1, "", "roll"], [95, 2, 1, "", "squeeze"], [95, 2, 1, "", "stack"], [95, 2, 1, "", "static_clip"], [95, 2, 1, "", "static_roll"], [95, 2, 1, "", "swapaxes"], [95, 2, 1, "", "tile"], [95, 2, 1, "", "zero_pad"]], "ivy.container.norms": [[97, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[97, 2, 1, "", "layer_norm"]], "ivy.container.random": [[99, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[99, 2, 1, "", "random_uniform"], [99, 2, 1, "", "static_randint"], [99, 2, 1, "", "static_random_uniform"]], "ivy.container.searching": [[101, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[103, 1, 1, "", "ContainerWithSet"]], "ivy.container.set.ContainerWithSet": [[103, 2, 1, "", "static_unique_counts"], [103, 2, 1, "", "unique_counts"]], "ivy.container.sorting": [[105, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[105, 2, 1, "", "argsort"], [105, 2, 1, "", "sort"], [105, 2, 1, "", "static_argsort"], [105, 2, 1, "", "static_sort"]], "ivy.container.statistical": [[107, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[107, 2, 1, "", "einsum"], [107, 2, 1, "", "max"], [107, 2, 1, "", "mean"], [107, 2, 1, "", "min"], [107, 2, 1, "", "prod"], [107, 2, 1, "", "std"], [107, 2, 1, "", "sum"], [107, 2, 1, "", "var"]], "ivy.container.utility": [[109, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[109, 2, 1, "", "all"], [109, 2, 1, "", "any"], [109, 2, 1, "", "static_all"], [109, 2, 1, "", "static_any"]], "ivy.container.wrapping": [[111, 3, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[147, 3, 1, "", "handle_nestable"], [148, 3, 1, "", "handle_out_argument"], [149, 3, 1, "", "infer_device"], [150, 3, 1, "", "infer_dtype"], [151, 3, 1, "", "inputs_to_ivy_arrays"], [152, 3, 1, "", "inputs_to_native_arrays"], [153, 3, 1, "", "outputs_to_ivy_arrays"], [154, 3, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[156, 0, 0, "-", "activations"], [192, 0, 0, "-", "compilation"], [194, 0, 0, "-", "constants"], [195, 0, 0, "-", "creation"], [266, 0, 0, "-", "data_type"], [303, 0, 0, "-", "device"], [353, 0, 0, "-", "elementwise"], [587, 0, 0, "-", "general"], [661, 0, 0, "-", "gradients"], [699, 0, 0, "-", "layers"], [712, 0, 0, "-", "linear_algebra"], [784, 0, 0, "-", "losses"], [800, 0, 0, "-", "manipulation"], [860, 0, 0, "-", "meta"], [864, 0, 0, "-", "nest"], [882, 0, 0, "-", "norms"], [887, 0, 0, "-", "random"], [899, 0, 0, "-", "searching"], [904, 0, 0, "-", "set"], [913, 0, 0, "-", "sorting"], [924, 0, 0, "-", "statistical"], [957, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[160, 3, 1, "", "gelu"], [165, 3, 1, "", "leaky_relu"], [170, 3, 1, "", "relu"], [175, 3, 1, "", "sigmoid"], [180, 3, 1, "", "softmax"], [185, 3, 1, "", "softplus"], [191, 3, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[193, 3, 1, "", "compile"]], "ivy.functional.ivy.constants": [[194, 5, 1, "", "e"], [194, 5, 1, "", "inf"], [194, 5, 1, "", "nan"], [194, 5, 1, "", "newaxis"], [194, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[197, 3, 1, "", "arange"], [195, 3, 1, "", "array"], [202, 3, 1, "", "asarray"], [204, 3, 1, "", "empty"], [208, 3, 1, "", "empty_like"], [211, 3, 1, "", "eye"], [216, 3, 1, "", "from_dlpack"], [218, 3, 1, "", "full"], [222, 3, 1, "", "full_like"], [225, 3, 1, "", "linspace"], [228, 3, 1, "", "logspace"], [233, 3, 1, "", "meshgrid"], [238, 3, 1, "", "native_array"], [241, 3, 1, "", "ones"], [246, 3, 1, "", "ones_like"], [252, 3, 1, "", "tril"], [257, 3, 1, "", "triu"], [260, 3, 1, "", "zeros"], [265, 3, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[266, 1, 1, "", "DefaultDtype"], [266, 1, 1, "", "DefaultFloatDtype"], [266, 1, 1, "", "DefaultIntDtype"], [270, 3, 1, "", "as_ivy_dtype"], [271, 3, 1, "", "as_native_dtype"], [272, 3, 1, "", "astype"], [273, 3, 1, "", "broadcast_arrays"], [274, 3, 1, "", "broadcast_to"], [278, 3, 1, "", "can_cast"], [280, 3, 1, "", "closest_valid_dtype"], [281, 3, 1, "", "default_dtype"], [282, 3, 1, "", "default_float_dtype"], [283, 3, 1, "", "default_int_dtype"], [284, 3, 1, "", "dtype"], [285, 3, 1, "", "dtype_bits"], [286, 3, 1, "", "finfo"], [287, 3, 1, "", "function_supported_dtypes"], [288, 3, 1, "", "function_unsupported_dtypes"], [289, 3, 1, "", "iinfo"], [290, 3, 1, "", "invalid_dtype"], [291, 3, 1, "", "is_float_dtype"], [292, 3, 1, "", "is_int_dtype"], [293, 3, 1, "", "promote_types"], [294, 3, 1, "", "result_type"], [295, 3, 1, "", "set_default_dtype"], [296, 3, 1, "", "set_default_float_dtype"], [297, 3, 1, "", "set_default_int_dtype"], [298, 3, 1, "", "type_promote_arrays"], [299, 3, 1, "", "unset_default_dtype"], [300, 3, 1, "", "unset_default_float_dtype"], [301, 3, 1, "", "unset_default_int_dtype"], [302, 3, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[266, 2, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[266, 2, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[266, 2, 1, "", "__init__"]], "ivy.functional.ivy.device": [[303, 1, 1, "", "DefaultDevice"], [305, 1, 1, "", "DevClonedItem"], [306, 1, 1, "", "DevClonedIter"], [307, 1, 1, "", "DevClonedNest"], [308, 1, 1, "", "DevDistItem"], [309, 1, 1, "", "DevDistIter"], [310, 1, 1, "", "DevDistNest"], [303, 1, 1, "", "DevManager"], [312, 1, 1, "", "DevMapper"], [313, 1, 1, "", "DevMapperMultiProc"], [303, 1, 1, "", "MultiDev"], [315, 1, 1, "", "MultiDevItem"], [316, 1, 1, "", "MultiDevIter"], [317, 1, 1, "", "MultiDevNest"], [318, 1, 1, "", "Profiler"], [319, 3, 1, "", "as_ivy_dev"], [320, 3, 1, "", "as_native_dev"], [321, 3, 1, "", "clear_mem_on_dev"], [322, 3, 1, "", "default_device"], [323, 3, 1, "", "dev"], [324, 3, 1, "", "dev_clone"], [325, 3, 1, "", "dev_clone_array"], [326, 3, 1, "", "dev_clone_iter"], [327, 3, 1, "", "dev_clone_nest"], [328, 3, 1, "", "dev_dist"], [329, 3, 1, "", "dev_dist_array"], [330, 3, 1, "", "dev_dist_iter"], [331, 3, 1, "", "dev_dist_nest"], [332, 3, 1, "", "dev_unify"], [333, 3, 1, "", "dev_unify_array"], [334, 3, 1, "", "dev_unify_iter"], [335, 3, 1, "", "dev_unify_nest"], [336, 3, 1, "", "dev_util"], [337, 3, 1, "", "get_all_ivy_arrays_on_dev"], [338, 3, 1, "", "gpu_is_available"], [339, 3, 1, "", "num_cpu_cores"], [340, 3, 1, "", "num_gpus"], [341, 3, 1, "", "num_ivy_arrays_on_dev"], [342, 3, 1, "", "percent_used_mem_on_dev"], [343, 3, 1, "", "print_all_ivy_arrays_on_dev"], [344, 3, 1, "", "set_default_device"], [345, 3, 1, "", "set_split_factor"], [346, 3, 1, "", "split_factor"], [347, 3, 1, "", "split_func_call"], [348, 3, 1, "", "to_device"], [349, 3, 1, "", "total_mem_on_dev"], [350, 3, 1, "", "tpu_is_available"], [351, 3, 1, "", "unset_default_device"], [352, 3, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[303, 2, 1, "", "__enter__"], [303, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[303, 2, 1, "", "__init__"], [303, 2, 1, "", "da_tune_step"], [303, 4, 1, "", "dim_size"], [303, 2, 1, "", "ds_tune_step"], [303, 2, 1, "", "map"], [303, 2, 1, "", "repeated_config_check"], [303, 4, 1, "", "tune_step"], [303, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[312, 2, 1, "", "__init__"], [312, 2, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[313, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[303, 2, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[315, 2, 1, "", "__init__"], [315, 2, 1, "", "items"], [315, 2, 1, "", "keys"], [315, 4, 1, "", "shape"], [315, 2, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[316, 2, 1, "", "__init__"], [316, 2, 1, "", "at_dev"], [316, 2, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[317, 2, 1, "", "__init__"], [317, 2, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[318, 2, 1, "", "__init__"], [318, 2, 1, "", "start"], [318, 2, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[357, 3, 1, "", "abs"], [362, 3, 1, "", "acos"], [366, 3, 1, "", "acosh"], [370, 3, 1, "", "add"], [375, 3, 1, "", "asin"], [379, 3, 1, "", "asinh"], [383, 3, 1, "", "atan"], [387, 3, 1, "", "atan2"], [391, 3, 1, "", "atanh"], [395, 3, 1, "", "bitwise_and"], [399, 3, 1, "", "bitwise_invert"], [403, 3, 1, "", "bitwise_left_shift"], [407, 3, 1, "", "bitwise_or"], [411, 3, 1, "", "bitwise_right_shift"], [415, 3, 1, "", "bitwise_xor"], [419, 3, 1, "", "ceil"], [423, 3, 1, "", "cos"], [427, 3, 1, "", "cosh"], [431, 3, 1, "", "divide"], [436, 3, 1, "", "equal"], [440, 3, 1, "", "erf"], [444, 3, 1, "", "exp"], [448, 3, 1, "", "expm1"], [452, 3, 1, "", "floor"], [456, 3, 1, "", "floor_divide"], [460, 3, 1, "", "greater"], [464, 3, 1, "", "greater_equal"], [468, 3, 1, "", "isfinite"], [472, 3, 1, "", "isinf"], [476, 3, 1, "", "isnan"], [480, 3, 1, "", "less"], [484, 3, 1, "", "less_equal"], [488, 3, 1, "", "log"], [492, 3, 1, "", "log10"], [496, 3, 1, "", "log1p"], [500, 3, 1, "", "log2"], [504, 3, 1, "", "logaddexp"], [508, 3, 1, "", "logical_and"], [512, 3, 1, "", "logical_not"], [516, 3, 1, "", "logical_or"], [520, 3, 1, "", "logical_xor"], [521, 3, 1, "", "maximum"], [522, 3, 1, "", "minimum"], [526, 3, 1, "", "multiply"], [531, 3, 1, "", "negative"], [535, 3, 1, "", "not_equal"], [539, 3, 1, "", "positive"], [543, 3, 1, "", "pow"], [547, 3, 1, "", "remainder"], [551, 3, 1, "", "round"], [555, 3, 1, "", "sign"], [559, 3, 1, "", "sin"], [563, 3, 1, "", "sinh"], [567, 3, 1, "", "sqrt"], [571, 3, 1, "", "square"], [576, 3, 1, "", "subtract"], [581, 3, 1, "", "tan"], [582, 3, 1, "", "tanh"], [586, 3, 1, "", "trunc"]], "ivy.functional.ivy.general": [[591, 3, 1, "", "all_equal"], [593, 3, 1, "", "arg_info"], [594, 3, 1, "", "arg_names"], [595, 3, 1, "", "array_equal"], [596, 3, 1, "", "arrays_equal"], [597, 3, 1, "", "assert_supports_inplace"], [598, 3, 1, "", "cache_fn"], [599, 3, 1, "", "clip_matrix_norm"], [602, 3, 1, "", "clip_vector_norm"], [603, 3, 1, "", "container_types"], [604, 3, 1, "", "copy_array"], [605, 3, 1, "", "cumprod"], [606, 3, 1, "", "cumsum"], [607, 3, 1, "", "current_backend_str"], [608, 3, 1, "", "default"], [609, 3, 1, "", "einops_rearrange"], [610, 3, 1, "", "einops_reduce"], [611, 3, 1, "", "einops_repeat"], [612, 3, 1, "", "exists"], [613, 3, 1, "", "floormod"], [614, 3, 1, "", "fourier_encode"], [615, 3, 1, "", "gather"], [619, 3, 1, "", "gather_nd"], [621, 3, 1, "", "get_all_arrays_in_memory"], [622, 3, 1, "", "get_min_base"], [623, 3, 1, "", "get_min_denominator"], [624, 3, 1, "", "get_num_dims"], [625, 3, 1, "", "get_referrers_recursive"], [626, 3, 1, "", "has_nans"], [627, 3, 1, "", "indices_where"], [628, 3, 1, "", "inplace_arrays_supported"], [629, 3, 1, "", "inplace_decrement"], [630, 3, 1, "", "inplace_increment"], [631, 3, 1, "", "inplace_update"], [632, 3, 1, "", "inplace_variables_supported"], [633, 3, 1, "", "is_array"], [634, 3, 1, "", "is_ivy_array"], [635, 3, 1, "", "is_ivy_container"], [636, 3, 1, "", "is_native_array"], [637, 3, 1, "", "match_kwargs"], [638, 3, 1, "", "multiprocessing"], [639, 3, 1, "", "num_arrays_in_memory"], [640, 3, 1, "", "one_hot"], [641, 3, 1, "", "print_all_arrays_in_memory"], [642, 3, 1, "", "queue_timeout"], [643, 3, 1, "", "scatter_flat"], [644, 3, 1, "", "scatter_nd"], [645, 3, 1, "", "set_min_base"], [646, 3, 1, "", "set_min_denominator"], [647, 3, 1, "", "set_queue_timeout"], [648, 3, 1, "", "set_tmp_dir"], [649, 3, 1, "", "shape"], [650, 3, 1, "", "shape_to_tuple"], [651, 3, 1, "", "stable_divide"], [652, 3, 1, "", "stable_pow"], [653, 3, 1, "", "supports_inplace"], [654, 3, 1, "", "tmp_dir"], [655, 3, 1, "", "to_list"], [656, 3, 1, "", "to_numpy"], [657, 3, 1, "", "to_scalar"], [658, 3, 1, "", "try_else_none"], [659, 3, 1, "", "unstack"], [660, 3, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[661, 1, 1, "", "GradientTracking"], [666, 3, 1, "", "adam_step"], [670, 3, 1, "", "adam_update"], [672, 3, 1, "", "execute_with_gradients"], [675, 3, 1, "", "gradient_descent_update"], [679, 3, 1, "", "is_variable"], [683, 3, 1, "", "lamb_update"], [687, 3, 1, "", "lars_update"], [691, 3, 1, "", "optimizer_update"], [693, 3, 1, "", "set_with_grads"], [694, 3, 1, "", "stop_gradient"], [695, 3, 1, "", "unset_with_grads"], [696, 3, 1, "", "variable"], [697, 3, 1, "", "variable_data"], [698, 3, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[661, 2, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[700, 3, 1, "", "conv1d"], [701, 3, 1, "", "conv1d_transpose"], [702, 3, 1, "", "conv2d"], [703, 3, 1, "", "conv2d_transpose"], [704, 3, 1, "", "conv3d"], [705, 3, 1, "", "conv3d_transpose"], [706, 3, 1, "", "depthwise_conv2d"], [707, 3, 1, "", "dropout"], [708, 3, 1, "", "linear"], [709, 3, 1, "", "lstm_update"], [710, 3, 1, "", "multi_head_attention"], [711, 3, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[716, 3, 1, "", "cholesky"], [720, 3, 1, "", "cross"], [723, 3, 1, "", "det"], [726, 3, 1, "", "diagonal"], [729, 3, 1, "", "eigh"], [732, 3, 1, "", "eigvalsh"], [735, 3, 1, "", "inv"], [739, 3, 1, "", "matmul"], [742, 3, 1, "", "matrix_norm"], [743, 3, 1, "", "matrix_power"], [746, 3, 1, "", "matrix_rank"], [749, 3, 1, "", "matrix_transpose"], [752, 3, 1, "", "outer"], [755, 3, 1, "", "pinv"], [758, 3, 1, "", "qr"], [759, 3, 1, "", "slogdet"], [762, 3, 1, "", "solve"], [765, 3, 1, "", "svd"], [768, 3, 1, "", "svdvals"], [771, 3, 1, "", "tensordot"], [774, 3, 1, "", "trace"], [777, 3, 1, "", "vecdot"], [780, 3, 1, "", "vector_norm"], [783, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[788, 3, 1, "", "binary_cross_entropy"], [793, 3, 1, "", "cross_entropy"], [798, 3, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[804, 3, 1, "", "clip"], [809, 3, 1, "", "concat"], [813, 3, 1, "", "constant_pad"], [817, 3, 1, "", "expand_dims"], [821, 3, 1, "", "flip"], [825, 3, 1, "", "permute_dims"], [829, 3, 1, "", "repeat"], [833, 3, 1, "", "reshape"], [837, 3, 1, "", "roll"], [839, 3, 1, "", "split"], [843, 3, 1, "", "squeeze"], [847, 3, 1, "", "stack"], [851, 3, 1, "", "swapaxes"], [855, 3, 1, "", "tile"], [859, 3, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[861, 3, 1, "", "fomaml_step"], [862, 3, 1, "", "maml_step"], [863, 3, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[865, 3, 1, "", "all_nested_indices"], [866, 3, 1, "", "copy_nest"], [867, 3, 1, "", "index_nest"], [868, 3, 1, "", "insert_into_nest_at_index"], [869, 3, 1, "", "insert_into_nest_at_indices"], [870, 3, 1, "", "map"], [871, 3, 1, "", "map_nest_at_index"], [872, 3, 1, "", "map_nest_at_indices"], [873, 3, 1, "", "multi_index_nest"], [874, 3, 1, "", "nested_any"], [875, 3, 1, "", "nested_indices_where"], [876, 3, 1, "", "nested_map"], [877, 3, 1, "", "nested_multi_map"], [878, 3, 1, "", "prune_nest_at_index"], [879, 3, 1, "", "prune_nest_at_indices"], [880, 3, 1, "", "set_nest_at_index"], [881, 3, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[886, 3, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[888, 3, 1, "", "multinomial"], [890, 3, 1, "", "randint"], [892, 3, 1, "", "random_normal"], [895, 3, 1, "", "random_uniform"], [897, 3, 1, "", "seed"], [898, 3, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[900, 3, 1, "", "argmax"], [901, 3, 1, "", "argmin"], [902, 3, 1, "", "nonzero"], [903, 3, 1, "", "where"]], "ivy.functional.ivy.set": [[905, 3, 1, "", "unique_all"], [910, 3, 1, "", "unique_counts"], [911, 3, 1, "", "unique_inverse"], [912, 3, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[917, 3, 1, "", "argsort"], [922, 3, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[928, 3, 1, "", "einsum"], [932, 3, 1, "", "max"], [936, 3, 1, "", "mean"], [940, 3, 1, "", "min"], [944, 3, 1, "", "prod"], [948, 3, 1, "", "std"], [952, 3, 1, "", "sum"], [956, 3, 1, "", "var"]], "ivy.functional.ivy.utility": [[961, 3, 1, "", "all"], [966, 3, 1, "", "any"]], "ivy.inspection": [[972, 3, 1, "", "add_array_specs"], [973, 3, 1, "", "fn_array_spec"]], "ivy.stateful": [[975, 0, 0, "-", "activations"], [978, 0, 0, "-", "converters"], [980, 0, 0, "-", "initializers"], [989, 0, 0, "-", "layers"], [1001, 0, 0, "-", "module"], [1003, 0, 0, "-", "norms"], [1005, 0, 0, "-", "optimizers"], [1011, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[976, 1, 1, "", "GEGLU"], [977, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[976, 2, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[977, 2, 1, "", "__init__"]], "ivy.stateful.converters": [[979, 3, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[980, 1, 1, "", "Constant"], [982, 1, 1, "", "FirstLayerSiren"], [983, 1, 1, "", "GlorotUniform"], [980, 1, 1, "", "KaimingNormal"], [985, 1, 1, "", "Ones"], [986, 1, 1, "", "Siren"], [980, 1, 1, "", "Uniform"], [988, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[980, 2, 1, "", "__init__"], [980, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[982, 2, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[983, 2, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[980, 2, 1, "", "__init__"], [980, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[985, 2, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[986, 2, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[980, 2, 1, "", "__init__"], [980, 2, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[988, 2, 1, "", "__init__"]], "ivy.stateful.layers": [[990, 1, 1, "", "Conv1D"], [991, 1, 1, "", "Conv1DTranspose"], [992, 1, 1, "", "Conv2D"], [993, 1, 1, "", "Conv2DTranspose"], [994, 1, 1, "", "Conv3D"], [995, 1, 1, "", "Conv3DTranspose"], [996, 1, 1, "", "DepthwiseConv2D"], [997, 1, 1, "", "Dropout"], [998, 1, 1, "", "LSTM"], [999, 1, 1, "", "Linear"], [1000, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[990, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[991, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[992, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[993, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[994, 2, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[995, 2, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[996, 2, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[997, 2, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[998, 2, 1, "", "__init__"], [998, 2, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[999, 2, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[1000, 2, 1, "", "__init__"]], "ivy.stateful.module": [[1002, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[1002, 2, 1, "", "__init__"], [1002, 2, 1, "", "build"], [1002, 4, 1, "", "build_mode"], [1002, 4, 1, "", "built"], [1002, 2, 1, "", "check_submod_rets"], [1002, 2, 1, "", "get_mod_key"], [1002, 2, 1, "", "mod_depth"], [1002, 2, 1, "", "mod_height"], [1002, 2, 1, "", "mod_with_top_mod_key_chain"], [1002, 2, 1, "", "save_weights"], [1002, 2, 1, "", "show_mod_in_top_mod"], [1002, 2, 1, "", "show_structure"], [1002, 2, 1, "", "show_v_in_top_v"], [1002, 2, 1, "", "sub_mods"], [1002, 2, 1, "", "track_submod_call_order"], [1002, 2, 1, "", "track_submod_rets"], [1002, 2, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[1004, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[1004, 2, 1, "", "__init__"]], "ivy.stateful.optimizers": [[1006, 1, 1, "", "Adam"], [1007, 1, 1, "", "LAMB"], [1008, 1, 1, "", "LARS"], [1009, 1, 1, "", "Optimizer"], [1010, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[1006, 2, 1, "", "__init__"], [1006, 2, 1, "", "set_state"], [1006, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[1007, 2, 1, "", "__init__"], [1007, 2, 1, "", "set_state"], [1007, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[1008, 2, 1, "", "__init__"], [1008, 2, 1, "", "set_state"], [1008, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[1009, 2, 1, "", "__init__"], [1009, 2, 1, "", "set_state"], [1009, 2, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[1010, 2, 1, "", "__init__"], [1010, 2, 1, "", "set_state"], [1010, 4, 1, "", "state"]], "ivy.stateful.sequential": [[1012, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[1012, 2, 1, "", "__init__"]], "ivy.verbosity": [[1015, 3, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"backend": [0, 113, 119, 128, 145], "handler": [0, 128], "choose_random_backend": 2, "clear_backend_stack": 3, "current_backend": 4, "get_backend": 5, "set_backend": 6, "try_import_ivy_jax": 7, "try_import_ivy_mxnet": 8, "try_import_ivy_numpi": 9, "try_import_ivy_tf": 10, "try_import_ivy_torch": 11, "unset_backend": 12, "background": [13, 968], "ml": 14, "explos": 14, "standard": 15, "skeptic": 15, "complimentari": 15, "vs": [15, 145], "competit": 15, "do": 15, "work": [15, 21], "The": [15, 19, 130, 145], "arrai": [15, 116, 121, 126, 130, 158, 163, 168, 173, 178, 183, 189, 200, 206, 214, 220, 231, 236, 244, 250, 255, 263, 276, 355, 360, 364, 368, 373, 377, 381, 385, 389, 393, 397, 401, 405, 409, 413, 417, 421, 425, 429, 434, 438, 442, 446, 450, 454, 458, 462, 466, 470, 474, 478, 482, 486, 490, 494, 498, 502, 506, 510, 514, 518, 524, 529, 533, 537, 541, 545, 549, 553, 557, 561, 565, 569, 574, 579, 584, 589, 617, 664, 714, 719, 722, 725, 728, 731, 734, 737, 741, 745, 748, 751, 754, 757, 761, 764, 767, 770, 773, 776, 779, 782, 786, 791, 796, 802, 807, 811, 815, 819, 823, 827, 831, 835, 841, 845, 849, 853, 857, 884, 908, 915, 920, 926, 930, 934, 938, 942, 946, 950, 954, 959, 964], "api": [15, 20, 113, 116, 122, 128, 130, 132, 133], "why": 16, "unifi": [16, 130], "No": [16, 18], "more": 16, "re": 16, "implement": 16, "infinit": 16, "shelf": 16, "life": 16, "contribut": [17, 968], "set": [18, 57, 102, 119, 904], "up": 18, "clone": 18, "ivi": [18, 113, 115, 117, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 197, 198, 200, 201, 202, 203, 206, 207, 208, 209, 211, 212, 214, 215, 216, 217, 220, 221, 222, 223, 225, 226, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 276, 277, 278, 279, 355, 356, 357, 358, 360, 361, 362, 364, 365, 366, 368, 369, 370, 371, 373, 374, 375, 377, 378, 379, 381, 382, 383, 385, 386, 387, 389, 390, 391, 393, 394, 395, 397, 398, 399, 401, 402, 403, 405, 406, 407, 409, 410, 411, 413, 414, 415, 417, 418, 419, 421, 422, 423, 425, 426, 427, 429, 430, 431, 432, 434, 435, 436, 438, 439, 440, 442, 443, 444, 446, 447, 448, 450, 451, 452, 454, 455, 456, 458, 459, 460, 462, 463, 464, 466, 467, 468, 470, 471, 472, 474, 475, 476, 478, 479, 480, 482, 483, 484, 486, 487, 488, 490, 491, 492, 494, 495, 496, 498, 499, 500, 502, 503, 504, 506, 507, 508, 510, 511, 512, 514, 515, 516, 518, 519, 520, 524, 525, 526, 527, 529, 530, 531, 533, 534, 535, 537, 538, 539, 541, 542, 543, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 571, 573, 574, 575, 576, 578, 579, 580, 581, 584, 585, 586, 589, 590, 591, 592, 601, 602, 617, 618, 619, 620, 664, 665, 666, 667, 669, 670, 671, 674, 675, 676, 678, 679, 680, 682, 683, 684, 686, 687, 688, 690, 691, 692, 714, 715, 716, 717, 719, 720, 722, 723, 725, 726, 728, 729, 731, 732, 734, 735, 737, 738, 739, 741, 742, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 786, 787, 788, 789, 791, 792, 793, 794, 796, 797, 798, 799, 802, 803, 804, 805, 807, 808, 809, 811, 812, 813, 815, 816, 817, 819, 820, 821, 823, 824, 825, 827, 828, 829, 831, 832, 833, 835, 836, 837, 838, 841, 842, 843, 845, 846, 847, 849, 850, 851, 853, 854, 855, 857, 858, 859, 884, 885, 886, 890, 891, 894, 895, 896, 907, 908, 909, 910, 915, 916, 917, 918, 920, 921, 922, 923, 926, 927, 928, 930, 931, 932, 934, 935, 936, 938, 939, 940, 942, 943, 944, 946, 947, 948, 950, 951, 952, 954, 955, 956, 959, 960, 961, 962, 964, 965, 966, 967], "pycharm": 18, "virtual": 18, "environ": 18, "docker": [18, 19, 21], "us": [18, 21, 131], "miniconda": [18, 21], "venv": [18, 21], "interpret": 18, "window": 18, "maco": 18, "ubuntu": 18, "github": 18, "codespac": 18, "pre": 18, "commit": [18, 19], "basic": 19, "get": 19, "help": 19, "todo": 19, "list": 19, "issu": 19, "manag": 19, "your": 19, "fork": 19, "who": 19, "To": 19, "ask": 19, "With": 19, "command": 19, "line": 19, "browser": 19, "pull": 19, "request": 19, "small": 19, "often": 19, "run": 19, "test": [19, 116, 117], "local": 19, "open": 20, "task": 20, "function": [20, 118, 120, 122, 123, 124, 126, 128, 133, 145], "format": 20, "frontend": [20, 133], "build": [21, 128], "doc": 21, "dockerless": 21, "document": 21, "pipelin": [21, 145], "make_doc": 21, "sh": 21, "entrypoint": 21, "_make_doc": 21, "generate_src_rst_fil": 21, "py": 21, "sphinx": 21, "correct_built_html_fil": 21, "remove_fil": 21, "activ": [22, 67, 156, 975], "arraywithactiv": 23, "convers": 24, "args_to_ivi": 25, "args_to_n": 26, "to_ivi": 27, "to_n": 28, "creation": [29, 74, 195], "arraywithcr": 30, "data": [31, 76, 117, 123, 131, 145, 266, 904, 905, 906, 910, 912], "type": [31, 76, 118, 123, 145, 266], "arraywithdatatyp": 32, "devic": [33, 78, 124, 126, 303], "arraywithdevic": 34, "elementwis": [35, 80, 353], "arraywithelementwis": 36, "gener": [37, 82, 117, 587], "arraywithgener": 38, "gradient": [39, 84, 661], "arraywithgradi": 40, "imag": [41, 86], "arraywithimag": 42, "layer": [43, 88, 699, 989], "arraywithlay": 44, "linear": [45, 90, 708, 712, 999], "algebra": [45, 90, 712], "arraywithlinearalgebra": 46, "loss": [47, 92, 784], "arraywithloss": 48, "manipul": [49, 94, 800], "arraywithmanipul": 50, "norm": [51, 96, 882, 1003], "arraywithnorm": 52, "random": [53, 98, 887], "arraywithrandom": 54, "search": [55, 100, 899], "arraywithsearch": 56, "arraywithset": 58, "sort": [59, 104, 913, 919, 920, 921, 922], "arraywithsort": 60, "statist": [61, 106, 924], "arraywithstatist": 62, "util": [63, 108, 957], "arraywithutil": 64, "wrap": [65, 110, 120], "add_ivy_array_instance_method": 66, "containerwithactiv": 68, "base": 69, "containerbas": 70, "contain": [71, 72, 122, 131, 159, 161, 164, 166, 169, 171, 174, 176, 179, 181, 184, 186, 188, 190, 198, 201, 203, 207, 209, 212, 215, 217, 221, 223, 226, 229, 232, 234, 237, 239, 242, 245, 247, 249, 251, 254, 256, 259, 262, 264, 277, 279, 356, 358, 361, 365, 369, 371, 374, 378, 382, 386, 390, 394, 398, 402, 406, 410, 414, 418, 422, 426, 430, 432, 435, 439, 443, 447, 451, 455, 459, 463, 467, 471, 475, 479, 483, 487, 491, 495, 499, 503, 507, 511, 515, 519, 525, 527, 530, 534, 538, 542, 546, 550, 554, 558, 562, 566, 570, 573, 575, 578, 580, 585, 590, 592, 601, 618, 620, 665, 667, 669, 671, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 715, 717, 738, 787, 789, 792, 794, 797, 799, 803, 805, 808, 812, 816, 820, 824, 828, 832, 836, 838, 842, 846, 850, 854, 858, 885, 891, 894, 896, 907, 909, 916, 918, 921, 923, 927, 931, 935, 939, 943, 947, 951, 955, 960, 962, 965, 967], "multidevcontain": 73, "containerwithcr": 75, "containerwithdatatyp": 77, "containerwithdevic": 79, "containerwithelementwis": 81, "containerwithgener": 83, "containerwithgradi": 85, "containerwithimag": 87, "containerwithlay": 89, "containerwithlinearalgebra": 91, "containerwithloss": 93, "containerwithmanipul": 95, "containerwithnorm": 97, "containerwithrandom": 99, "containerwithsearch": 101, "containerwithset": 103, "containerwithsort": 105, "containerwithstatist": 107, "containerwithutil": 109, "add_ivy_container_instance_method": 111, "deep": 112, "dive": 112, "navig": 113, "code": 113, "categor": 113, "submodul": 113, "design": [113, 127, 968], "docstr": [114, 115], "exampl": [115, 126], "tan": [115, 577, 579, 580, 581], "roll": [115, 834, 835, 836, 837], "add": [115, 367, 368, 369, 370], "hypothesi": 117, "self": 117, "consist": 117, "explicit": 117, "test_array_funct": 117, "primari": 118, "composit": 118, "mix": 118, "standalon": 118, "nestabl": [118, 122, 126], "conveni": 118, "nativ": 121, "handl": 121, "instanc": [122, 130], "method": [122, 130, 131], "static": 122, "special": 122, "modul": [123, 124, 132, 1001, 1002], "argument": [123, 124, 125, 126], "other": [123, 124], "inplac": 125, "updat": 125, "out": [125, 126], "copi": 125, "dtype": [126, 284], "number": 126, "oper": [126, 130, 145], "integ": 126, "sequenc": 126, "block": 128, "framework": [128, 129], "graph": [128, 133], "compil": [128, 133, 192, 193], "class": 130, "monkei": 130, "patch": 130, "construct": 131, "represent": 131, "recurs": 131, "built": 131, "ins": 131, "access": 131, "save": 131, "load": 131, "comparison": 131, "custom": [131, 145], "case": 131, "compartment": 131, "configur": 131, "network": [131, 133], "weight": 131, "state": [132, 145], "initi": [132, 980], "optim": [132, 1005, 1009], "transpil": 133, "role": 133, "convert": [133, 978], "model": [133, 140, 145], "builder": 135, "ecosystem": 136, "gym": [137, 144], "mech": 138, "memori": [139, 144], "robot": [141, 144], "vision": [142, 144], "extens": [143, 968], "appli": 144, "librari": 144, "mechan": 144, "faq": 145, "maintain": 145, "version": 145, "dynam": 145, "size": 145, "shape": [145, 649, 904, 905, 906, 910, 912], "check": 145, "control": 145, "flow": 145, "auto": 145, "differenti": 145, "replica": 145, "parallel": 145, "support": 145, "altern": 145, "structur": 145, "func": 146, "wrapper": 146, "handle_nest": 147, "handle_out_argu": 148, "infer_devic": 149, "infer_dtyp": 150, "inputs_to_ivy_arrai": 151, "inputs_to_native_arrai": 152, "outputs_to_ivy_arrai": 153, "to_native_arrays_and_back": 154, "gelu": [157, 158, 159, 160, 977], "static_gelu": 161, "leaky_relu": [162, 163, 164, 165], "static_leaky_relu": 166, "relu": [167, 168, 169, 170], "static_relu": 171, "sigmoid": [172, 173, 174, 175], "static_sigmoid": 176, "softmax": [177, 178, 179, 180], "static_softmax": 181, "softplu": [182, 183, 184, 185], "static_softplu": 186, "tanh": [187, 189, 190, 191, 582], "static_tanh": 188, "constant": 194, "note": [195, 213, 216], "arang": [196, 197], "static_arang": 198, "asarrai": [199, 200, 201, 202], "static_asarrai": 203, "empti": 204, "empty_lik": [205, 206, 207, 208], "static_empty_lik": 209, "ey": [210, 211], "static_ey": 212, "from_dlpack": [213, 214, 215, 216], "static_from_dlpack": 217, "full": 218, "full_lik": [219, 220, 221, 222], "static_full_lik": 223, "linspac": [224, 225], "static_linspac": 226, "logspac": [227, 228], "static_logspac": 229, "meshgrid": [230, 231, 232, 233], "static_meshgrid": 234, "native_arrai": [235, 236, 237, 238], "static_native_arrai": 239, "ones": [240, 241], "static_on": 242, "ones_lik": [243, 244, 245, 246], "static_ones_lik": 247, "tril": [248, 250, 251, 252], "static_tril": 249, "triu": [253, 255, 256, 257], "static_triu": 254, "zero": [258, 260, 988], "static_zero": 259, "zeros_lik": [261, 263, 264, 265], "static_zeros_lik": 262, "as_ivy_dtyp": 270, "as_native_dtyp": 271, "astyp": 272, "broadcast_arrai": 273, "broadcast_to": 274, "can_cast": [275, 276, 277, 278], "static_can_cast": 279, "closest_valid_dtyp": 280, "default_dtyp": 281, "default_float_dtyp": 282, "default_int_dtyp": 283, "dtype_bit": 285, "finfo": 286, "function_supported_dtyp": 287, "function_unsupported_dtyp": 288, "iinfo": 289, "invalid_dtyp": 290, "is_float_dtyp": 291, "is_int_dtyp": 292, "promote_typ": 293, "result_typ": 294, "set_default_dtyp": 295, "set_default_float_dtyp": 296, "set_default_int_dtyp": 297, "type_promote_arrai": 298, "unset_default_dtyp": 299, "unset_default_float_dtyp": 300, "unset_default_int_dtyp": 301, "valid_dtyp": 302, "devcloneditem": 305, "devclonedit": 306, "devclonednest": 307, "devdistitem": 308, "devdistit": 309, "devdistnest": 310, "devmapp": 312, "devmappermultiproc": 313, "multidevitem": 315, "multidevit": 316, "multidevnest": 317, "profil": 318, "as_ivy_dev": 319, "as_native_dev": 320, "clear_mem_on_dev": 321, "default_devic": 322, "dev": 323, "dev_clon": 324, "dev_clone_arrai": 325, "dev_clone_it": 326, "dev_clone_nest": 327, "dev_dist": 328, "dev_dist_arrai": 329, "dev_dist_it": 330, "dev_dist_nest": 331, "dev_unifi": 332, "dev_unify_arrai": 333, "dev_unify_it": 334, "dev_unify_nest": 335, "dev_util": 336, "get_all_ivy_arrays_on_dev": 337, "gpu_is_avail": 338, "num_cpu_cor": 339, "num_gpu": 340, "num_ivy_arrays_on_dev": 341, "percent_used_mem_on_dev": 342, "print_all_ivy_arrays_on_dev": 343, "set_default_devic": 344, "set_split_factor": 345, "split_factor": 346, "split_func_cal": 347, "to_devic": 348, "total_mem_on_dev": 349, "tpu_is_avail": 350, "unset_default_devic": 351, "used_mem_on_dev": 352, "ab": [354, 355, 356, 357], "static_ab": 358, "aco": [359, 360, 361, 362], "acosh": [363, 364, 365, 366], "static_add": 371, "asin": [372, 373, 374, 375], "asinh": [376, 377, 378, 379], "atan": [380, 381, 382, 383], "atan2": [384, 385, 386, 387], "atanh": [388, 389, 390, 391], "bitwise_and": [392, 393, 394, 395], "bitwise_invert": [396, 397, 398, 399], "bitwise_left_shift": [400, 401, 402, 403], "bitwise_or": [404, 405, 406, 407], "bitwise_right_shift": [408, 409, 410, 411], "bitwise_xor": [412, 413, 414, 415], "ceil": [416, 417, 418, 419], "co": [420, 421, 422, 423], "cosh": [424, 425, 426, 427], "divid": [428, 429, 430, 431], "static_divid": 432, "equal": [433, 434, 435, 436], "erf": [437, 438, 439, 440], "exp": [441, 442, 443, 444], "expm1": [445, 446, 447, 448], "floor": [449, 450, 451, 452], "floor_divid": [453, 454, 455, 456], "greater": [457, 458, 459, 460], "greater_equ": [461, 462, 463, 464], "isfinit": [465, 466, 467, 468], "isinf": [469, 470, 471, 472], "isnan": [473, 474, 475, 476], "less": [477, 478, 479, 480], "less_equ": [481, 482, 483, 484], "log": [485, 486, 487, 488], "log10": [489, 490, 491, 492], "log1p": [493, 494, 495, 496], "log2": [497, 498, 499, 500], "logaddexp": [501, 502, 503, 504], "logical_and": [505, 506, 507, 508], "logical_not": [509, 510, 511, 512], "logical_or": [513, 514, 515, 516], "logical_xor": [517, 518, 519, 520], "maximum": 521, "minimum": 522, "multipli": [523, 524, 525, 526], "static_multipli": 527, "neg": [528, 529, 530, 531], "not_equ": [532, 533, 534, 535], "posit": [536, 537, 538, 539], "pow": [540, 541, 542, 543], "remaind": [544, 545, 546, 547], "round": [548, 549, 550, 551], "sign": [552, 553, 554, 555], "sin": [556, 557, 558, 559], "sinh": [560, 561, 562, 563], "sqrt": [564, 565, 566, 567], "squar": [568, 569, 570, 571], "subtract": [572, 574, 575, 576], "static_subtract": 573, "static_tan": 578, "trunc": [583, 584, 585, 586], "all_equ": [588, 589, 590, 591], "static_all_equ": 592, "arg_info": 593, "arg_nam": 594, "array_equ": 595, "arrays_equ": 596, "assert_supports_inplac": 597, "cache_fn": 598, "clip_matrix_norm": 599, "clip_vector_norm": [600, 601, 602], "container_typ": 603, "copy_arrai": 604, "cumprod": 605, "cumsum": 606, "current_backend_str": 607, "default": 608, "einops_rearrang": 609, "einops_reduc": 610, "einops_repeat": 611, "exist": 612, "floormod": 613, "fourier_encod": 614, "gather": 615, "gather_nd": [616, 617, 618, 619], "static_gather_nd": 620, "get_all_arrays_in_memori": 621, "get_min_bas": 622, "get_min_denomin": 623, "get_num_dim": 624, "get_referrers_recurs": 625, "has_nan": 626, "indices_wher": 627, "inplace_arrays_support": 628, "inplace_decr": 629, "inplace_incr": 630, "inplace_upd": 631, "inplace_variables_support": 632, "is_arrai": 633, "is_ivy_arrai": 634, "is_ivy_contain": 635, "is_native_arrai": 636, "match_kwarg": 637, "multiprocess": 638, "num_arrays_in_memori": 639, "one_hot": 640, "print_all_arrays_in_memori": 641, "queue_timeout": 642, "scatter_flat": 643, "scatter_nd": 644, "set_min_bas": 645, "set_min_denomin": 646, "set_queue_timeout": 647, "set_tmp_dir": 648, "shape_to_tupl": 650, "stable_divid": 651, "stable_pow": 652, "supports_inplac": 653, "tmp_dir": 654, "to_list": 655, "to_numpi": 656, "to_scalar": 657, "try_else_non": 658, "unstack": 659, "value_is_nan": 660, "adam_step": [663, 664, 665, 666], "static_adam_step": 667, "adam_upd": [668, 669, 670], "static_adam_upd": 671, "execute_with_gradi": 672, "gradient_descent_upd": [673, 674, 675], "static_gradient_descent_upd": 676, "is_vari": [677, 678, 679], "static_is_vari": 680, "lamb_upd": [681, 682, 683], "static_lamb_upd": 684, "lars_upd": [685, 686, 687], "static_lars_upd": 688, "optimizer_upd": [689, 690, 691], "static_optimizer_upd": 692, "set_with_grad": 693, "stop_gradi": 694, "unset_with_grad": 695, "variabl": 696, "variable_data": 697, "with_grad": 698, "conv1d": [700, 990], "conv1d_transpos": 701, "conv2d": [702, 992], "conv2d_transpos": 703, "conv3d": [704, 994], "conv3d_transpos": 705, "depthwise_conv2d": 706, "dropout": [707, 997], "lstm_updat": 709, "multi_head_attent": 710, "scaled_dot_product_attent": 711, "choleski": [713, 714, 715, 716], "static_choleski": 717, "cross": [718, 719, 720], "det": [721, 722, 723], "diagon": [724, 725, 726], "eigh": [727, 728, 729], "eigvalsh": [730, 731, 732], "inv": [733, 734, 735], "matmul": [736, 737, 738, 739], "matrix_norm": [740, 741, 742], "matrix_pow": 743, "matrix_rank": [744, 745, 746], "matrix_transpos": [747, 748, 749], "outer": [750, 751, 752], "pinv": [753, 754, 755], "qr": [756, 757, 758], "slogdet": 759, "solv": [760, 761, 762], "svd": [763, 764, 765], "svdval": [766, 767, 768], "tensordot": [769, 770, 771], "trace": [772, 773, 774], "vecdot": [775, 776, 777], "vector_norm": [778, 779, 780], "vector_to_skew_symmetric_matrix": [781, 782, 783], "binary_cross_entropi": [785, 786, 787, 788], "static_binary_cross_entropi": 789, "cross_entropi": [790, 791, 792, 793], "static_cross_entropi": 794, "sparse_cross_entropi": [795, 796, 797, 798], "static_sparse_cross_entropi": 799, "clip": [801, 802, 803, 804], "static_clip": 805, "concat": [806, 807, 808, 809], "constant_pad": [810, 811, 812, 813], "expand_dim": [814, 815, 816, 817], "flip": [818, 819, 820, 821], "permute_dim": [822, 823, 824, 825], "repeat": [826, 827, 828, 829], "reshap": [830, 831, 832, 833], "static_rol": 838, "split": 839, "squeez": [840, 841, 842, 843], "stack": [844, 845, 846, 847], "swapax": [848, 849, 850, 851], "tile": [852, 853, 854, 855], "zero_pad": [856, 857, 858, 859], "meta": 860, "fomaml_step": 861, "maml_step": 862, "reptile_step": 863, "nest": 864, "all_nested_indic": 865, "copy_nest": 866, "index_nest": 867, "insert_into_nest_at_index": 868, "insert_into_nest_at_indic": 869, "map": 870, "map_nest_at_index": 871, "map_nest_at_indic": 872, "multi_index_nest": 873, "nested_ani": 874, "nested_indices_wher": 875, "nested_map": 876, "nested_multi_map": 877, "prune_nest_at_index": 878, "prune_nest_at_indic": 879, "set_nest_at_index": 880, "set_nest_at_indic": 881, "layer_norm": [883, 884, 885, 886], "multinomi": 888, "randint": [889, 890], "static_randint": 891, "random_norm": 892, "random_uniform": [893, 894, 895], "static_random_uniform": 896, "seed": 897, "shuffl": 898, "argmax": 900, "argmin": 901, "nonzero": 902, "where": 903, "depend": [904, 905, 906, 910, 912], "output": [904, 905, 906, 910, 912], "unique_al": 905, "unique_count": [906, 908, 909, 910], "static_unique_count": 907, "unique_invers": 911, "unique_valu": 912, "argsort": [914, 915, 916, 917], "static_argsort": 918, "static_sort": 923, "einsum": [925, 926, 927, 928], "max": [929, 930, 931, 932], "mean": [933, 934, 935, 936], "min": [937, 938, 939, 940], "prod": [941, 942, 943, 944], "std": [945, 946, 947, 948], "sum": [949, 950, 951, 952], "var": [953, 954, 955, 956], "all": [958, 959, 960, 961], "static_al": 962, "ani": [963, 964, 965, 966], "static_ani": 967, "content": 968, "overview": 968, "quick": 968, "start": 968, "roadmap": [968, 974], "citat": 968, "inspect": 971, "add_array_spec": 972, "fn_array_spec": 973, "geglu": 976, "to_ivy_modul": 979, "firstlayersiren": 982, "glorotuniform": 983, "Ones": 985, "siren": 986, "conv1dtranspos": 991, "conv2dtranspos": 993, "conv3dtranspos": 995, "depthwiseconv2d": 996, "lstm": 998, "multiheadattent": 1000, "layernorm": 1004, "adam": 1006, "lamb": 1007, "lar": 1008, "sgd": 1010, "sequenti": [1011, 1012], "verbos": 1014, "cprint": 1015}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})